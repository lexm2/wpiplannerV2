{"version":3,"file":"index-BCiOwNRG.js","sources":["../../src/types/types.ts","../../src/services/courseDataService.ts","../../src/themes/ThemeManager.ts","../../src/core/StorageManager.ts","../../src/ui/components/ThemeSelector.ts","../../src/core/CourseManager.ts","../../src/utils/validators.ts","../../src/services/CourseSelectionService.ts","../../src/types/schedule.ts","../../src/core/ConflictDetector.ts","../../src/ui/controllers/DepartmentController.ts","../../src/ui/controllers/CourseController.ts","../../src/ui/utils/timeUtils.ts","../../src/ui/controllers/ScheduleController.ts","../../src/ui/controllers/UIStateManager.ts","../../src/ui/controllers/TimestampManager.ts","../../src/ui/controllers/MainController.ts","../../src/main.ts"],"sourcesContent":["export interface Course {\n    id: string;\n    number: string;\n    name: string;\n    description: string;\n    department: Department;\n    sections: Section[];\n    minCredits: number;\n    maxCredits: number;\n}\n\nexport interface Department {\n    abbreviation: string;\n    name: string;\n    courses: Course[];\n}\n\nexport interface Section {\n    crn: number;\n    number: string;\n    seats: number;\n    seatsAvailable: number;\n    actualWaitlist: number;\n    maxWaitlist: number;\n    note?: string;\n    description: string;\n    term: string;\n    periods: Period[];\n}\n\nexport interface Period {\n    type: string;\n    professor: string;\n    professorEmail?: string;\n    startTime: Time;\n    endTime: Time;\n    location: string;\n    building: string;\n    room: string;\n    seats: number;\n    seatsAvailable: number;\n    actualWaitlist: number;\n    maxWaitlist: number;\n    days: Set<DayOfWeek>;\n    specificSection?: string;\n}\n\nexport interface Time {\n    hours: number;\n    minutes: number;\n    displayTime: string;\n}\n\nexport enum DayOfWeek {\n    MONDAY = 'mon',\n    TUESDAY = 'tue',\n    WEDNESDAY = 'wed',\n    THURSDAY = 'thu',\n    FRIDAY = 'fri',\n    SATURDAY = 'sat',\n    SUNDAY = 'sun'\n}\n\nexport interface ScheduleDB {\n    departments: Department[];\n    generated: string;\n}\n\nexport interface PlannerState {\n    courses: Course[];\n    selectedYear: number;\n    searchTerm: string;\n    activeFilters: string[];\n    plan: {\n        [year: number]: {\n            fall: Course[];\n            spring: Course[];\n            summer: Course[];\n        };\n    };\n}\n\nexport type Semester = 'fall' | 'spring' | 'summer';","import { ScheduleDB, Department, Course, Section, Period, Time, DayOfWeek } from '../types/types'\n\nexport class CourseDataService {\n    private static readonly WPI_COURSE_DATA_URL = './course-data-constructed.json';\n    private static readonly LOCAL_STORAGE_KEY = 'wpi-course-data';\n    private static readonly CACHE_EXPIRY_HOURS = 1;\n\n    private scheduleDB: ScheduleDB | null = null;\n\n    constructor() {}\n\n    async loadCourseData(): Promise<ScheduleDB> {\n        try {\n            console.log('Loading course data...');\n            const freshData = await this.fetchFreshData();\n            this.scheduleDB = freshData;\n            return freshData;\n        } catch (error) {\n            console.error('Failed to load course data:', error);\n            throw new Error('No course data available');\n        }\n    }\n\n    private async fetchFreshData(): Promise<ScheduleDB> {\n        console.log('Fetching course data from local static file...');\n        \n        const response = await fetch(CourseDataService.WPI_COURSE_DATA_URL, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n            },\n            cache: 'no-cache'\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to fetch course data: ${response.status} ${response.statusText}`);\n        }\n\n        const jsonData = await response.json();\n        return this.parseJSONData(jsonData);\n    }\n\n    private parseJSONData(jsonData: any): ScheduleDB {\n        console.log('Parsing constructed JSON data...');\n        \n        if (!jsonData.departments || !Array.isArray(jsonData.departments)) {\n            console.error('Invalid JSON data structure:', jsonData);\n            throw new Error('Invalid JSON data structure - missing departments array');\n        }\n\n        console.log(`Processing ${jsonData.departments.length} departments...`);\n        \n        const scheduleDB: ScheduleDB = {\n            departments: this.parseConstructedDepartments(jsonData.departments),\n            generated: jsonData.generated || new Date().toISOString()\n        };\n        \n        console.log(`Loaded ${scheduleDB.departments.length} departments with course data`);\n        \n        // Log sections for MA1024 specifically\n        this.logMA1024Sections(scheduleDB);\n        \n        return scheduleDB;\n    }\n\n    private parseConstructedDepartments(departments: any[]): Department[] {\n        return departments.map(deptData => {\n            const department: Department = {\n                abbreviation: deptData.abbreviation,\n                name: deptData.name,\n                courses: []\n            };\n            \n            department.courses = deptData.courses.map((courseData: any) => {\n                const course: Course = {\n                    id: courseData.id,\n                    number: courseData.number,\n                    name: courseData.name,\n                    description: this.stripHtml(courseData.description || ''),\n                    department: department,\n                    sections: this.parseConstructedSections(courseData.sections || []),\n                    minCredits: courseData.min_credits || 0,\n                    maxCredits: courseData.max_credits || 0\n                };\n                return course;\n            });\n            \n            return department;\n        });\n    }\n\n    private parseConstructedSections(sections: any[]): Section[] {\n        return sections.map(sectionData => {\n            const section: Section = {\n                crn: sectionData.crn || 0,\n                number: sectionData.number || '',\n                seats: sectionData.seats || 0,\n                seatsAvailable: sectionData.seats_available || 0,\n                actualWaitlist: sectionData.actual_waitlist || 0,\n                maxWaitlist: sectionData.max_waitlist || 0,\n                note: sectionData.note,\n                description: this.stripHtml(sectionData.description || ''),\n                term: sectionData.term || '',\n                periods: this.parseConstructedPeriods(sectionData.periods || [])\n            };\n            return section;\n        });\n    }\n    \n    private parseConstructedPeriods(periods: any[]): Period[] {\n        return periods.map(periodData => {\n            const period: Period = {\n                type: periodData.type || 'Lecture',\n                professor: periodData.professor || '',\n                professorEmail: undefined,\n                startTime: this.parseConstructedTime(periodData.start_time),\n                endTime: this.parseConstructedTime(periodData.end_time),\n                location: periodData.location || '',\n                building: periodData.building || '',\n                room: periodData.room || '',\n                seats: periodData.seats || 0,\n                seatsAvailable: periodData.seats_available || 0,\n                actualWaitlist: periodData.actual_waitlist || 0,\n                maxWaitlist: periodData.max_waitlist || 0,\n                days: this.parseConstructedDays(periodData.days || []),\n                specificSection: periodData.specific_section\n            };\n            return period;\n        });\n    }\n    \n    private parseConstructedTime(timeStr: string): Time {\n        if (!timeStr || timeStr === 'TBA') {\n            return { hours: 0, minutes: 0, displayTime: 'TBD' };\n        }\n        \n        // Parse \"HH:MM\" format from constructed data\n        const match = timeStr.match(/(\\d{1,2}):(\\d{2})/);\n        if (!match) {\n            return { hours: 0, minutes: 0, displayTime: timeStr };\n        }\n        \n        const hours = parseInt(match[1]);\n        const minutes = parseInt(match[2]);\n        \n        // Convert to display format\n        const displayHours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;\n        const ampm = hours >= 12 ? 'PM' : 'AM';\n        const displayTime = `${displayHours}:${minutes.toString().padStart(2, '0')} ${ampm}`;\n        \n        return { hours, minutes, displayTime };\n    }\n    \n    private parseConstructedDays(days: string[]): Set<DayOfWeek> {\n        const daySet = new Set<DayOfWeek>();\n        \n        for (const day of days) {\n            switch (day.toLowerCase()) {\n                case 'mon': daySet.add(DayOfWeek.MONDAY); break;\n                case 'tue': daySet.add(DayOfWeek.TUESDAY); break;\n                case 'wed': daySet.add(DayOfWeek.WEDNESDAY); break;\n                case 'thu': daySet.add(DayOfWeek.THURSDAY); break;\n                case 'fri': daySet.add(DayOfWeek.FRIDAY); break;\n                case 'sat': daySet.add(DayOfWeek.SATURDAY); break;\n                case 'sun': daySet.add(DayOfWeek.SUNDAY); break;\n            }\n        }\n        \n        return daySet;\n    }\n\n    private logMA1024Sections(scheduleDB: ScheduleDB): void {\n        const maDept = scheduleDB.departments.find(dept => dept.abbreviation === 'MA');\n        if (!maDept) {\n            console.log('MA department not found');\n            return;\n        }\n        \n        const ma1024 = maDept.courses.find(course => course.number === '1024');\n        if (!ma1024) {\n            console.log('MA1024 course not found');\n            return;\n        }\n        \n        console.log(`\\n=== MA1024 SECTIONS (${ma1024.sections.length} total) ===`);\n        ma1024.sections.forEach(section => {\n            console.log(`Section ${section.number}:`);\n            console.log(`  Term: ${section.term}`);\n            console.log(`  Enrollment: ${section.seatsAvailable}/${section.seats} available`);\n            console.log(`  Periods (${section.periods.length}):`);\n            section.periods.forEach((period, idx) => {\n                const days = Array.from(period.days).join(', ');\n                console.log(`    ${idx + 1}. ${period.type} - ${days} ${period.startTime.displayTime}-${period.endTime.displayTime} (${period.professor})`);\n            });\n            console.log('');\n        });\n    }\n\n\n\n    private stripHtml(html: string): string {\n        return html.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, ' ').trim();\n    }\n\n\n\n    private getCachedData(): ScheduleDB | null {\n        try {\n            const cached = localStorage.getItem(CourseDataService.LOCAL_STORAGE_KEY);\n            if (!cached) return null;\n\n            const parsedData = JSON.parse(cached);\n            return parsedData.scheduleDB;\n        } catch (error) {\n            console.warn('Failed to parse cached course data:', error);\n            return null;\n        }\n    }\n\n    private cacheData(scheduleDB: ScheduleDB): void {\n        try {\n            const cacheData = {\n                scheduleDB,\n                timestamp: Date.now()\n            };\n            localStorage.setItem(CourseDataService.LOCAL_STORAGE_KEY, JSON.stringify(cacheData));\n            console.log('Course data cached successfully');\n        } catch (error) {\n            console.warn('Failed to cache course data:', error);\n        }\n    }\n\n    private isCacheExpired(): boolean {\n        try {\n            const cached = localStorage.getItem(CourseDataService.LOCAL_STORAGE_KEY);\n            if (!cached) return true;\n\n            const parsedData = JSON.parse(cached);\n            const cacheAge = Date.now() - parsedData.timestamp;\n            const maxAge = CourseDataService.CACHE_EXPIRY_HOURS * 60 * 60 * 1000;\n            \n            return cacheAge > maxAge;\n        } catch (error) {\n            return true;\n        }\n    }\n\n    getScheduleDB(): ScheduleDB | null {\n        return this.scheduleDB;\n    }\n\n    searchCourses(query: string, departments?: string[]): Course[] {\n        if (!this.scheduleDB) return [];\n\n        const allCourses: Course[] = [];\n        \n        for (const dept of this.scheduleDB.departments) {\n            if (departments && departments.length > 0 && !departments.includes(dept.abbreviation.toLowerCase())) {\n                continue;\n            }\n            allCourses.push(...dept.courses);\n        }\n\n        if (!query.trim()) {\n            return allCourses;\n        }\n\n        const queryLower = query.toLowerCase();\n        return allCourses.filter(course => \n            course.name.toLowerCase().includes(queryLower) ||\n            course.number.toLowerCase().includes(queryLower) ||\n            course.id.toLowerCase().includes(queryLower) ||\n            course.department.abbreviation.toLowerCase().includes(queryLower)\n        );\n    }\n\n    getAllDepartments(): Department[] {\n        return this.scheduleDB?.departments || [];\n    }\n\n}","import { ThemeDefinition, ThemeId, ThemeChangeEvent, ThemeChangeListener } from './types'\n\n// Import theme definitions\nimport wpiClassic from './definitions/wpi-classic.json'\nimport wpiDark from './definitions/wpi-dark.json'\nimport wpiLight from './definitions/wpi-light.json'\nimport highContrast from './definitions/high-contrast.json'\n\nexport class ThemeManager {\n    private static instance: ThemeManager;\n    private currentTheme: ThemeId = 'wpi-classic';\n    private themes: Map<ThemeId, ThemeDefinition> = new Map();\n    private listeners: Set<ThemeChangeListener> = new Set();\n    private readonly storageKey = 'wpi-planner-theme';\n\n    private constructor() {\n        this.initializeThemes();\n        this.loadSavedTheme();\n    }\n\n    static getInstance(): ThemeManager {\n        if (!ThemeManager.instance) {\n            ThemeManager.instance = new ThemeManager();\n        }\n        return ThemeManager.instance;\n    }\n\n    private initializeThemes(): void {\n        // Register built-in themes\n        this.registerTheme(wpiClassic as ThemeDefinition);\n        this.registerTheme(wpiDark as ThemeDefinition);\n        this.registerTheme(wpiLight as ThemeDefinition);\n        this.registerTheme(highContrast as ThemeDefinition);\n    }\n\n    private loadSavedTheme(): void {\n        try {\n            const savedTheme = localStorage.getItem(this.storageKey);\n            if (savedTheme && this.themes.has(savedTheme)) {\n                this.currentTheme = savedTheme;\n            }\n        } catch (error) {\n            console.warn('Failed to load saved theme preference:', error);\n        }\n        \n        // Apply the current theme\n        this.applyTheme(this.currentTheme);\n    }\n\n    registerTheme(theme: ThemeDefinition): void {\n        if (!this.isValidTheme(theme)) {\n            console.error('Invalid theme definition:', theme);\n            return;\n        }\n        \n        this.themes.set(theme.id, theme);\n    }\n\n    private isValidTheme(theme: any): theme is ThemeDefinition {\n        return theme &&\n            typeof theme.name === 'string' &&\n            typeof theme.id === 'string' &&\n            typeof theme.description === 'string' &&\n            theme.colors &&\n            theme.typography &&\n            theme.spacing &&\n            theme.effects;\n    }\n\n    getAvailableThemes(): ThemeDefinition[] {\n        return Array.from(this.themes.values());\n    }\n\n    getCurrentTheme(): ThemeDefinition | null {\n        return this.themes.get(this.currentTheme) || null;\n    }\n\n    getCurrentThemeId(): ThemeId {\n        return this.currentTheme;\n    }\n\n    setTheme(themeId: ThemeId): boolean {\n        if (!this.themes.has(themeId)) {\n            console.error(`Theme '${themeId}' not found`);\n            return false;\n        }\n\n        const oldTheme = this.currentTheme;\n        const newTheme = themeId;\n        const themeDefinition = this.themes.get(themeId)!;\n\n        this.currentTheme = themeId;\n        this.applyTheme(themeId);\n        this.saveThemePreference(themeId);\n\n        // Notify listeners\n        const event: ThemeChangeEvent = {\n            oldTheme,\n            newTheme,\n            themeDefinition\n        };\n        this.notifyListeners(event);\n\n        return true;\n    }\n\n    private applyTheme(themeId: ThemeId): void {\n        const theme = this.themes.get(themeId);\n        if (!theme) return;\n\n        const root = document.documentElement;\n\n        // Apply color variables\n        Object.entries(theme.colors).forEach(([key, value]) => {\n            root.style.setProperty(`--color-${this.kebabCase(key)}`, value);\n        });\n\n        // Apply typography variables\n        Object.entries(theme.typography).forEach(([key, value]) => {\n            root.style.setProperty(`--font-${this.kebabCase(key)}`, value);\n        });\n\n        // Apply spacing variables\n        Object.entries(theme.spacing).forEach(([key, value]) => {\n            root.style.setProperty(`--spacing-${this.kebabCase(key)}`, value);\n        });\n\n        // Apply effect variables\n        Object.entries(theme.effects).forEach(([key, value]) => {\n            root.style.setProperty(`--effect-${this.kebabCase(key)}`, value);\n        });\n\n        // Add theme class to body for theme-specific styling\n        document.body.className = document.body.className\n            .replace(/theme-[\\w-]+/g, '')\n            .trim();\n        document.body.classList.add(`theme-${themeId}`);\n    }\n\n    private kebabCase(str: string): string {\n        return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    }\n\n    private saveThemePreference(themeId: ThemeId): void {\n        try {\n            localStorage.setItem(this.storageKey, themeId);\n        } catch (error) {\n            console.warn('Failed to save theme preference:', error);\n        }\n    }\n\n    // System preference detection\n    detectSystemPreference(): ThemeId {\n        if (typeof window !== 'undefined' && window.matchMedia) {\n            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                return 'wpi-dark';\n            }\n            if (window.matchMedia('(prefers-contrast: high)').matches) {\n                return 'high-contrast';\n            }\n        }\n        return 'wpi-classic';\n    }\n\n    useSystemPreference(): boolean {\n        const preferredTheme = this.detectSystemPreference();\n        return this.setTheme(preferredTheme);\n    }\n\n    // Event listeners\n    onThemeChange(listener: ThemeChangeListener): void {\n        this.listeners.add(listener);\n    }\n\n    offThemeChange(listener: ThemeChangeListener): void {\n        this.listeners.delete(listener);\n    }\n\n    private notifyListeners(event: ThemeChangeEvent): void {\n        this.listeners.forEach(listener => {\n            try {\n                listener(event);\n            } catch (error) {\n                console.error('Error in theme change listener:', error);\n            }\n        });\n    }\n\n    // Theme preview (temporary application without saving)\n    previewTheme(themeId: ThemeId): boolean {\n        if (!this.themes.has(themeId)) return false;\n        this.applyTheme(themeId);\n        return true;\n    }\n\n    // Reset to current theme (cancel preview)\n    resetToCurrentTheme(): void {\n        this.applyTheme(this.currentTheme);\n    }\n\n    // Export/Import functionality\n    exportCurrentTheme(): string {\n        const theme = this.getCurrentTheme();\n        if (!theme) throw new Error('No current theme to export');\n        return JSON.stringify(theme, null, 2);\n    }\n\n    importTheme(themeJson: string): boolean {\n        try {\n            const theme = JSON.parse(themeJson);\n            if (this.isValidTheme(theme)) {\n                this.registerTheme(theme);\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error('Failed to import theme:', error);\n            return false;\n        }\n    }\n\n    // Theme utilities\n    getThemeById(themeId: ThemeId): ThemeDefinition | null {\n        return this.themes.get(themeId) || null;\n    }\n\n    hasTheme(themeId: ThemeId): boolean {\n        return this.themes.has(themeId);\n    }\n\n    removeTheme(themeId: ThemeId): boolean {\n        // Don't allow removal of built-in themes\n        const builtInThemes = ['wpi-classic', 'wpi-dark', 'wpi-light', 'high-contrast'];\n        if (builtInThemes.includes(themeId)) {\n            console.warn(`Cannot remove built-in theme: ${themeId}`);\n            return false;\n        }\n\n        if (this.currentTheme === themeId) {\n            this.setTheme('wpi-classic'); // Fallback to default\n        }\n\n        return this.themes.delete(themeId);\n    }\n}","import { Schedule, UserScheduleState, SchedulePreferences, SelectedCourse } from '../types/schedule'\n\nexport class StorageManager {\n    private static readonly STORAGE_KEYS = {\n        USER_STATE: 'wpi-planner-user-state',\n        PREFERENCES: 'wpi-planner-preferences',\n        SCHEDULES: 'wpi-planner-schedules',\n        SELECTED_COURSES: 'wpi-planner-selected-courses',\n        THEME: 'wpi-planner-theme'\n    };\n\n    saveUserState(state: UserScheduleState): void {\n        this.handleStorageOperation(\n            () => {\n                const serializedState = JSON.stringify(state, this.replacer);\n                localStorage.setItem(StorageManager.STORAGE_KEYS.USER_STATE, serializedState);\n            },\n            'Failed to save user state'\n        );\n    }\n\n    loadUserState(): UserScheduleState | null {\n        return this.handleStorageOperation(\n            () => {\n                const stored = localStorage.getItem(StorageManager.STORAGE_KEYS.USER_STATE);\n                if (!stored) return null;\n                return JSON.parse(stored, this.reviver);\n            },\n            'Failed to load user state',\n            null\n        );\n    }\n\n    saveSchedule(schedule: Schedule): void {\n        this.handleStorageOperation(\n            () => {\n                const schedules = this.loadAllSchedules();\n                const existingIndex = schedules.findIndex(s => s.id === schedule.id);\n                \n                if (existingIndex >= 0) {\n                    schedules[existingIndex] = schedule;\n                } else {\n                    schedules.push(schedule);\n                }\n                \n                const serializedSchedules = JSON.stringify(schedules, this.replacer);\n                localStorage.setItem(StorageManager.STORAGE_KEYS.SCHEDULES, serializedSchedules);\n            },\n            'Failed to save schedule'\n        );\n    }\n\n    loadSchedule(scheduleId: string): Schedule | null {\n        try {\n            const schedules = this.loadAllSchedules();\n            return schedules.find(s => s.id === scheduleId) || null;\n        } catch (error) {\n            console.warn('Failed to load schedule:', error);\n            return null;\n        }\n    }\n\n    loadAllSchedules(): Schedule[] {\n        return this.handleStorageOperation(\n            () => {\n                const stored = localStorage.getItem(StorageManager.STORAGE_KEYS.SCHEDULES);\n                if (!stored) return [];\n                return JSON.parse(stored, this.reviver);\n            },\n            'Failed to load schedules',\n            []\n        );\n    }\n\n    deleteSchedule(scheduleId: string): void {\n        try {\n            const schedules = this.loadAllSchedules();\n            const filtered = schedules.filter(s => s.id !== scheduleId);\n            localStorage.setItem(StorageManager.STORAGE_KEYS.SCHEDULES, JSON.stringify(filtered));\n        } catch (error) {\n            console.warn('Failed to delete schedule:', error);\n        }\n    }\n\n    savePreferences(preferences: SchedulePreferences): void {\n        this.handleStorageOperation(\n            () => {\n                const serializedPreferences = JSON.stringify(preferences, this.replacer);\n                localStorage.setItem(StorageManager.STORAGE_KEYS.PREFERENCES, serializedPreferences);\n            },\n            'Failed to save preferences'\n        );\n    }\n\n    loadPreferences(): SchedulePreferences | null {\n        return this.handleStorageOperation(\n            () => {\n                const stored = localStorage.getItem(StorageManager.STORAGE_KEYS.PREFERENCES);\n                if (!stored) return this.getDefaultPreferences();\n                return JSON.parse(stored, this.reviver);\n            },\n            'Failed to load preferences',\n            this.getDefaultPreferences()\n        );\n    }\n\n    private getDefaultPreferences(): SchedulePreferences {\n        return {\n            preferredTimeRange: {\n                startTime: { hours: 8, minutes: 0 },\n                endTime: { hours: 18, minutes: 0 }\n            },\n            preferredDays: new Set(['mon', 'tue', 'wed', 'thu', 'fri']),\n            avoidBackToBackClasses: false,\n            theme: 'wpi-classic'\n        };\n    }\n\n    clearAllData(): void {\n        try {\n            Object.values(StorageManager.STORAGE_KEYS).forEach(key => {\n                localStorage.removeItem(key);\n            });\n        } catch (error) {\n            console.warn('Failed to clear storage:', error);\n        }\n    }\n\n    exportData(): string {\n        const state = this.loadUserState();\n        const schedules = this.loadAllSchedules();\n        const preferences = this.loadPreferences();\n\n        const exportData = {\n            version: '1.0',\n            timestamp: new Date().toISOString(),\n            state,\n            schedules,\n            preferences\n        };\n\n        return JSON.stringify(exportData, null, 2);\n    }\n\n    importData(jsonData: string): boolean {\n        try {\n            const data = JSON.parse(jsonData);\n            \n            if (data.state) this.saveUserState(data.state);\n            if (data.preferences) this.savePreferences(data.preferences);\n            if (data.schedules) {\n                data.schedules.forEach((schedule: Schedule) => {\n                    this.saveSchedule(schedule);\n                });\n            }\n            \n            return true;\n        } catch (error) {\n            console.error('Failed to import data:', error);\n            return false;\n        }\n    }\n\n    private handleStorageOperation<T>(\n        operation: () => T,\n        errorMessage: string,\n        fallback?: T\n    ): T | undefined {\n        try {\n            return operation();\n        } catch (error) {\n            console.warn(`${errorMessage}:`, error);\n            return fallback;\n        }\n    }\n\n    private readonly replacer = (key: string, value: any): any => {\n        if (value instanceof Set) {\n            return { __type: 'Set', value: [...value] };\n        }\n\n        if (key === 'department' && value && value.courses) {\n            return {\n                abbreviation: value.abbreviation,\n                name: value.name\n                // Exclude courses array to prevent circular reference\n            };\n        }\n\n        // For SelectedCourse serialization, exclude the Section object to prevent circular references\n        // but keep the selectedSectionNumber for reconstruction\n        if (key === 'selectedSection' && value && typeof value === 'object' && value.number) {\n            return undefined; // Don't serialize the full Section object\n        }\n\n        return value;\n    };\n\n    private readonly reviver = (key: string, value: any): any => {\n        if (typeof value === 'object' && value !== null && value.__type === 'Set') {\n            return new Set(value.value);\n        }\n        return value;\n    };\n\n    saveThemePreference(themeId: string): void {\n        try {\n            localStorage.setItem(StorageManager.STORAGE_KEYS.THEME, themeId);\n        } catch (error) {\n            console.warn('Failed to save theme preference:', error);\n        }\n    }\n\n    loadThemePreference(): string {\n        try {\n            const savedTheme = localStorage.getItem(StorageManager.STORAGE_KEYS.THEME);\n            return savedTheme || 'wpi-classic';\n        } catch (error) {\n            console.warn('Failed to load theme preference:', error);\n            return 'wpi-classic';\n        }\n    }\n\n    saveSelectedCourses(selectedCourses: SelectedCourse[]): void {\n        this.handleStorageOperation(\n            () => {\n                const serializedCourses = JSON.stringify(selectedCourses, this.replacer);\n                localStorage.setItem(StorageManager.STORAGE_KEYS.SELECTED_COURSES, serializedCourses);\n            },\n            'Failed to save selected courses'\n        );\n    }\n\n    loadSelectedCourses(): SelectedCourse[] {\n        return this.handleStorageOperation(\n            () => {\n                const stored = localStorage.getItem(StorageManager.STORAGE_KEYS.SELECTED_COURSES);\n                if (!stored) return [];\n                return JSON.parse(stored, this.reviver);\n            },\n            'Failed to load selected courses',\n            []\n        );\n    }\n\n    clearSelectedCourses(): void {\n        try {\n            localStorage.removeItem(StorageManager.STORAGE_KEYS.SELECTED_COURSES);\n        } catch (error) {\n            console.warn('Failed to clear selected courses:', error);\n        }\n    }\n}","import { ThemeManager } from '../../themes/ThemeManager'\nimport { StorageManager } from '../../core/StorageManager'\n\nexport class ThemeSelector {\n    private themeManager: ThemeManager;\n    private storageManager: StorageManager;\n    private dropdownElement: HTMLElement | null = null;\n    private optionsElement: HTMLElement | null = null;\n    private currentThemeNameElement: HTMLElement | null = null;\n    private isOpen: boolean = false;\n\n    constructor() {\n        this.themeManager = ThemeManager.getInstance();\n        this.storageManager = new StorageManager();\n        this.init();\n    }\n\n    private init(): void {\n        this.setupElements();\n        this.loadSavedTheme();\n        this.setupEventListeners();\n        this.renderThemeOptions();\n    }\n\n    private setupElements(): void {\n        this.dropdownElement = document.getElementById('theme-dropdown');\n        this.optionsElement = document.getElementById('theme-options');\n        this.currentThemeNameElement = document.getElementById('current-theme-name');\n    }\n\n    private loadSavedTheme(): void {\n        const savedTheme = this.storageManager.loadThemePreference();\n        this.themeManager.setTheme(savedTheme);\n        this.updateCurrentThemeDisplay();\n    }\n\n    private setupEventListeners(): void {\n        if (!this.dropdownElement || !this.optionsElement) return;\n\n        // Toggle dropdown\n        this.dropdownElement.addEventListener('click', (e) => {\n            e.stopPropagation();\n            this.toggleDropdown();\n        });\n\n        // Close dropdown when clicking outside\n        document.addEventListener('click', () => {\n            this.closeDropdown();\n        });\n\n        // Prevent closing when clicking inside options\n        this.optionsElement.addEventListener('click', (e) => {\n            e.stopPropagation();\n        });\n    }\n\n    private toggleDropdown(): void {\n        if (this.isOpen) {\n            this.closeDropdown();\n        } else {\n            this.openDropdown();\n        }\n    }\n\n    private openDropdown(): void {\n        if (!this.dropdownElement || !this.optionsElement) return;\n        \n        this.isOpen = true;\n        this.dropdownElement.classList.add('open');\n        this.optionsElement.classList.add('show');\n    }\n\n    private closeDropdown(): void {\n        if (!this.dropdownElement || !this.optionsElement) return;\n        \n        this.isOpen = false;\n        this.dropdownElement.classList.remove('open');\n        this.optionsElement.classList.remove('show');\n    }\n\n    private renderThemeOptions(): void {\n        if (!this.optionsElement) return;\n\n        const availableThemes = this.themeManager.getAvailableThemes();\n        const currentThemeId = this.themeManager.getCurrentThemeId();\n\n        let html = '';\n        availableThemes.forEach(theme => {\n            const isActive = theme.id === currentThemeId;\n            html += `\n                <div class=\"theme-option ${isActive ? 'active' : ''}\" data-theme-id=\"${theme.id}\">\n                    <div class=\"theme-option-name\">${theme.name}</div>\n                    <div class=\"theme-option-description\">${theme.description}</div>\n                </div>\n            `;\n        });\n\n        this.optionsElement.innerHTML = html;\n\n        // Add click listeners to theme options\n        this.optionsElement.querySelectorAll('.theme-option').forEach(option => {\n            option.addEventListener('click', () => {\n                const themeId = (option as HTMLElement).dataset.themeId;\n                if (themeId) {\n                    this.selectTheme(themeId);\n                }\n            });\n        });\n    }\n\n    private selectTheme(themeId: string): void {\n        // Apply theme\n        const success = this.themeManager.setTheme(themeId);\n        if (!success) return;\n\n        // Save to storage\n        this.storageManager.saveThemePreference(themeId);\n\n        // Update UI\n        this.updateCurrentThemeDisplay();\n        this.updateActiveOption(themeId);\n        this.closeDropdown();\n    }\n\n    private updateCurrentThemeDisplay(): void {\n        if (!this.currentThemeNameElement) return;\n\n        const currentTheme = this.themeManager.getCurrentTheme();\n        if (currentTheme) {\n            this.currentThemeNameElement.textContent = currentTheme.name;\n        }\n    }\n\n    private updateActiveOption(selectedThemeId: string): void {\n        if (!this.optionsElement) return;\n\n        // Remove active class from all options\n        this.optionsElement.querySelectorAll('.theme-option').forEach(option => {\n            option.classList.remove('active');\n        });\n\n        // Add active class to selected option\n        const selectedOption = this.optionsElement.querySelector(`[data-theme-id=\"${selectedThemeId}\"]`);\n        if (selectedOption) {\n            selectedOption.classList.add('active');\n        }\n    }\n\n    // Public method to refresh theme options (useful if themes are added dynamically)\n    public refresh(): void {\n        this.renderThemeOptions();\n        this.updateCurrentThemeDisplay();\n    }\n\n    // Public method to programmatically select a theme\n    public setTheme(themeId: string): void {\n        this.selectTheme(themeId);\n    }\n}","import { Course, Section, Department } from '../types/types'\nimport { SelectedCourse, Schedule } from '../types/schedule'\n\nexport class CourseManager {\n    private selectedCourses: Map<Course, SelectedCourse> = new Map();\n    private listeners: Set<(courses: SelectedCourse[]) => void> = new Set();\n    private allSections: Set<Section> = new Set();\n    private allDepartments: Department[] = [];\n\n    addCourse(course: Course, isRequired: boolean = false): void {\n        const selectedCourse: SelectedCourse = {\n            course,\n            selectedSection: null,\n            selectedSectionNumber: null,\n            isRequired\n        };\n        \n        this.selectedCourses.set(course, selectedCourse);\n        this.notifyListeners();\n    }\n\n    removeCourse(course: Course): void {\n        this.selectedCourses.delete(course);\n        this.notifyListeners();\n    }\n\n\n    getSelectedCourses(): SelectedCourse[] {\n        return Array.from(this.selectedCourses.values());\n    }\n\n    getSelectedCourse(course: Course): SelectedCourse | undefined {\n        return this.selectedCourses.get(course);\n    }\n\n    isSelected(course: Course): boolean {\n        return this.selectedCourses.has(course);\n    }\n\n    getAvailableSections(course: Course): Section[] {\n        const selectedCourse = this.selectedCourses.get(course);\n        if (!this.validateCourseExists(course, selectedCourse)) return [];\n\n        return selectedCourse!.course.sections;\n    }\n\n    clearAll(): void {\n        this.selectedCourses.clear();\n        this.notifyListeners();\n    }\n\n    onSelectionChange(listener: (courses: SelectedCourse[]) => void): void {\n        this.listeners.add(listener);\n    }\n\n    offSelectionChange(listener: (courses: SelectedCourse[]) => void): void {\n        this.listeners.delete(listener);\n    }\n\n    setSelectedSection(course: Course, sectionNumber: string | null): void {\n        const selectedCourse = this.selectedCourses.get(course);\n        if (!this.validateCourseExists(course, selectedCourse)) return;\n\n        // Find the actual Section object\n        const sectionObject = sectionNumber ? \n            course.sections.find(s => s.number === sectionNumber) || null : \n            null;\n\n        selectedCourse!.selectedSection = sectionObject;\n        selectedCourse!.selectedSectionNumber = sectionNumber;\n        this.notifyListeners();\n    }\n\n    getSelectedSection(course: Course): string | null {\n        const selectedCourse = this.selectedCourses.get(course);\n        return selectedCourse?.selectedSectionNumber || null;\n    }\n\n    getSelectedSectionObject(course: Course): Section | null {\n        const selectedCourse = this.selectedCourses.get(course);\n        return selectedCourse?.selectedSection || null;\n    }\n\n\n    loadSelectedCourses(selectedCourses: SelectedCourse[]): void {\n        this.selectedCourses.clear();\n        selectedCourses.forEach(selectedCourse => {\n            // Handle backward compatibility: if old format only has selectedSection as string\n            if (selectedCourse.selectedSection && typeof selectedCourse.selectedSection === 'string') {\n                const sectionNumber = selectedCourse.selectedSection as any as string;\n                const sectionObject = selectedCourse.course.sections.find(s => s.number === sectionNumber) || null;\n                \n                selectedCourse.selectedSection = sectionObject;\n                selectedCourse.selectedSectionNumber = sectionNumber;\n            }\n            // Ensure selectedSectionNumber is set if we have a Section object but no string\n            else if (selectedCourse.selectedSection && !selectedCourse.selectedSectionNumber) {\n                selectedCourse.selectedSectionNumber = selectedCourse.selectedSection.number;\n            }\n            \n            this.selectedCourses.set(selectedCourse.course, selectedCourse);\n        });\n        this.notifyListeners();\n    }\n\n    private validateCourseExists(course: Course, selectedCourse?: SelectedCourse): selectedCourse is SelectedCourse {\n        if (!selectedCourse) {\n            console.warn(`Course ${course.id} not found in selected courses`);\n            return false;\n        }\n        return true;\n    }\n\n    private notifyListeners(): void {\n        const courses = this.getSelectedCourses();\n        this.listeners.forEach(listener => listener(courses));\n    }\n\n    // Section storage and access methods\n    setAllDepartments(departments: Department[]): void {\n        this.allDepartments = departments;\n        this.populateAllSections();\n    }\n\n    private populateAllSections(): void {\n        this.allSections.clear();\n        \n        for (const department of this.allDepartments) {\n            for (const course of department.courses) {\n                for (const section of course.sections) {\n                    this.allSections.add(section);\n                }\n            }\n        }\n        \n        console.log(`CourseManager: Populated ${this.allSections.size} sections from ${this.allDepartments.length} departments`);\n    }\n\n    getAllSections(): Section[] {\n        return Array.from(this.allSections);\n    }\n\n    getAllSectionsForCourse(course: Course): Section[] {\n        return course.sections;\n    }\n\n    getAllSectionsForDepartment(deptAbbreviation: string): Section[] {\n        const department = this.allDepartments.find(dept => dept.abbreviation === deptAbbreviation);\n        if (!department) return [];\n        \n        const sections: Section[] = [];\n        for (const course of department.courses) {\n            sections.push(...course.sections);\n        }\n        return sections;\n    }\n\n    getAllDepartments(): Department[] {\n        return this.allDepartments;\n    }\n\n    reconstructSectionObjects(): void {\n        console.log('=== RECONSTRUCTING SECTION OBJECTS ===');\n        let reconstructedCount = 0;\n        let failedCount = 0;\n        \n        this.selectedCourses.forEach((selectedCourse, course) => {\n            if (selectedCourse.selectedSectionNumber && !selectedCourse.selectedSection) {\n                console.log(`Reconstructing section for ${course.department.abbreviation}${course.number}:`);\n                console.log(`  Looking for section: ${selectedCourse.selectedSectionNumber}`);\n                console.log(`  Course has ${course.sections.length} sections:`, course.sections.map(s => s.number));\n                \n                const sectionObject = course.sections.find(s => \n                    s.number === selectedCourse.selectedSectionNumber\n                ) || null;\n                \n                if (sectionObject) {\n                    selectedCourse.selectedSection = sectionObject;\n                    reconstructedCount++;\n                    console.log(`  ✓ Successfully reconstructed section ${sectionObject.number}`);\n                } else {\n                    failedCount++;\n                    console.log(`  ✗ Failed to find section ${selectedCourse.selectedSectionNumber}`);\n                }\n            } else if (selectedCourse.selectedSection) {\n                console.log(`Section already exists for ${course.department.abbreviation}${course.number}: ${selectedCourse.selectedSection.number}`);\n            }\n        });\n        \n        console.log(`Reconstruction complete: ${reconstructedCount} succeeded, ${failedCount} failed`);\n        console.log('=== END SECTION RECONSTRUCTION ===\\n');\n        \n        if (reconstructedCount > 0) {\n            this.notifyListeners(); // Trigger UI updates\n        }\n    }\n\n    private findCourseContainingSection(section: Section): Course | undefined {\n        for (const department of this.allDepartments) {\n            for (const course of department.courses) {\n                if (course.sections.includes(section)) {\n                    return course;\n                }\n            }\n        }\n        return undefined;\n    }\n}","import { Course, Section, Period, Department } from '../types/types'\nimport { Schedule, SelectedCourse, SchedulePreferences } from '../types/schedule'\n\nexport class Validators {\n    static isValidCourse(course: any): course is Course {\n        return course &&\n            typeof course.id === 'string' &&\n            typeof course.number === 'string' &&\n            typeof course.name === 'string' &&\n            typeof course.description === 'string' &&\n            this.isValidDepartment(course.department) &&\n            Array.isArray(course.sections) &&\n            course.sections.every((s: any) => this.isValidSection(s)) &&\n            typeof course.minCredits === 'number' &&\n            typeof course.maxCredits === 'number';\n    }\n\n    static isValidDepartment(department: any): department is Department {\n        return department &&\n            typeof department.abbreviation === 'string' &&\n            typeof department.name === 'string' &&\n            // Make courses array optional - it may not be present in serialized data\n            (department.courses === undefined || Array.isArray(department.courses));\n    }\n\n    static isValidSection(section: any): section is Section {\n        return section &&\n            typeof section.crn === 'number' &&\n            typeof section.number === 'string' &&\n            typeof section.seats === 'number' &&\n            typeof section.seatsAvailable === 'number' &&\n            typeof section.actualWaitlist === 'number' &&\n            typeof section.maxWaitlist === 'number' &&\n            typeof section.description === 'string' &&\n            typeof section.term === 'string' &&\n            Array.isArray(section.periods) &&\n            section.periods.every((p: any) => this.isValidPeriod(p));\n    }\n\n    static isValidPeriod(period: any): period is Period {\n        return period &&\n            typeof period.type === 'string' &&\n            typeof period.professor === 'string' &&\n            this.isValidTime(period.startTime) &&\n            this.isValidTime(period.endTime) &&\n            typeof period.location === 'string' &&\n            typeof period.building === 'string' &&\n            typeof period.room === 'string' &&\n            typeof period.seats === 'number' &&\n            typeof period.seatsAvailable === 'number' &&\n            typeof period.actualWaitlist === 'number' &&\n            typeof period.maxWaitlist === 'number' &&\n            period.days instanceof Set;\n    }\n\n    static isValidTime(time: any): boolean {\n        return time &&\n            typeof time.hours === 'number' &&\n            typeof time.minutes === 'number' &&\n            typeof time.displayTime === 'string' &&\n            time.hours >= 0 && time.hours <= 23 &&\n            time.minutes >= 0 && time.minutes <= 59;\n    }\n\n    static isValidSchedulePreferences(preferences: any): preferences is SchedulePreferences {\n        return preferences &&\n            this.isValidTimeRange(preferences.preferredTimeRange) &&\n            preferences.preferredDays instanceof Set &&\n            typeof preferences.avoidBackToBackClasses === 'boolean';\n    }\n\n    static isValidTimeRange(timeRange: any): boolean {\n        return timeRange &&\n            this.isValidTime(timeRange.startTime) &&\n            this.isValidTime(timeRange.endTime);\n    }\n\n    static isValidSelectedCourse(selectedCourse: any): selectedCourse is SelectedCourse {\n        return selectedCourse &&\n            this.isValidCourse(selectedCourse.course) &&\n            typeof selectedCourse.isRequired === 'boolean';\n    }\n\n    static isValidSchedule(schedule: any): schedule is Schedule {\n        return schedule &&\n            typeof schedule.id === 'string' &&\n            typeof schedule.name === 'string' &&\n            Array.isArray(schedule.selectedCourses) &&\n            schedule.selectedCourses.every((sc: any) => this.isValidSelectedCourse(sc)) &&\n            Array.isArray(schedule.generatedSchedules) &&\n            this.isValidSchedulePreferences(schedule.preferences);\n    }\n\n    static sanitizeString(input: string): string {\n        return input.replace(/<[^>]*>/g, '').trim();\n    }\n\n    static sanitizeCourseData(course: any): Course | null {\n        try {\n            if (!this.isValidCourse(course)) return null;\n\n            return {\n                ...course,\n                name: this.sanitizeString(course.name),\n                description: this.sanitizeString(course.description),\n                sections: course.sections.map((section: Section) => ({\n                    ...section,\n                    description: this.sanitizeString(section.description),\n                    periods: section.periods.map((period: Period) => ({\n                        ...period,\n                        professor: this.sanitizeString(period.professor),\n                        location: this.sanitizeString(period.location),\n                        building: this.sanitizeString(period.building),\n                        room: this.sanitizeString(period.room)\n                    }))\n                }))\n            };\n        } catch (error) {\n            console.warn('Error sanitizing course data:', error);\n            return null;\n        }\n    }\n\n    static validateCourseId(courseId: string): boolean {\n        // Format: DEPT-NUMBER (e.g., CS-1101, AB-1531, RBE-1001) \n        // Allow 2-4 letter department codes and 3-4 digit course numbers\n        return /^[A-Z]{2,4}-\\d{3,4}$/.test(courseId);\n    }\n\n    static validateSectionNumber(sectionNumber: string): boolean {\n        // Very permissive section number validation - allow most printable characters\n        // WPI has diverse section formats: A01, Lab1, \"Interest List-A Term\", \"AL02/AD02/AX01\", etc.\n        // Just ensure it's a non-empty string with reasonable characters\n        return typeof sectionNumber === 'string' && \n               sectionNumber.trim().length > 0 && \n               /^[\\w\\s\\-/]+$/.test(sectionNumber);\n    }\n\n    static validateEmail(email: string): boolean {\n        return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n    }\n}","import { Course, Department, Section } from '../types/types'\nimport { SelectedCourse } from '../types/schedule'\nimport { CourseManager } from '../core/CourseManager'\nimport { StorageManager } from '../core/StorageManager'\nimport { Validators } from '../utils/validators'\n\nexport class CourseSelectionService {\n    private courseManager: CourseManager;\n    private storageManager: StorageManager;\n\n    constructor(courseManager?: CourseManager, storageManager?: StorageManager) {\n        this.courseManager = courseManager || new CourseManager();\n        this.storageManager = storageManager || new StorageManager();\n        \n        this.loadPersistedSelections();\n        this.setupPersistenceListener();\n    }\n\n    selectCourse(course: Course, isRequired: boolean = false): void {\n        if (!Validators.isValidCourse(course)) {\n            throw new Error('Invalid course object provided');\n        }\n        this.courseManager.addCourse(course, isRequired);\n    }\n\n    unselectCourse(course: Course): void {\n        if (!Validators.isValidCourse(course)) {\n            throw new Error('Invalid course object provided');\n        }\n        this.courseManager.removeCourse(course);\n    }\n\n    toggleCourseSelection(course: Course, isRequired: boolean = false): boolean {\n        const isSelected = this.isCourseSelected(course);\n        \n        if (isSelected) {\n            this.unselectCourse(course);\n            return false;\n        } else {\n            this.selectCourse(course, isRequired);\n            return true;\n        }\n    }\n\n    setSelectedSection(course: Course, sectionNumber: string | null): void {\n        if (!Validators.isValidCourse(course)) {\n            throw new Error('Invalid course object provided');\n        }\n        if (sectionNumber !== null && !Validators.validateSectionNumber(sectionNumber)) {\n            throw new Error('Invalid sectionNumber provided');\n        }\n        this.courseManager.setSelectedSection(course, sectionNumber);\n    }\n\n    getSelectedSection(course: Course): string | null {\n        if (!Validators.isValidCourse(course)) {\n            throw new Error('Invalid course object provided');\n        }\n        return this.courseManager.getSelectedSection(course);\n    }\n\n    getSelectedSectionObject(course: Course): Section | null {\n        if (!Validators.isValidCourse(course)) {\n            throw new Error('Invalid course object provided');\n        }\n        return this.courseManager.getSelectedSectionObject(course);\n    }\n\n\n    isCourseSelected(course: Course): boolean {\n        if (!Validators.isValidCourse(course)) {\n            return false;\n        }\n        return this.courseManager.isSelected(course);\n    }\n\n    getSelectedCourses(): SelectedCourse[] {\n        return this.courseManager.getSelectedCourses();\n    }\n\n    getSelectedCourse(course: Course): SelectedCourse | undefined {\n        if (!Validators.isValidCourse(course)) {\n            return undefined;\n        }\n        return this.courseManager.getSelectedCourse(course);\n    }\n\n    clearAllSelections(): void {\n        this.courseManager.clearAll();\n        this.storageManager.clearSelectedCourses();\n    }\n\n    getSelectedCoursesCount(): number {\n        return this.getSelectedCourses().length;\n    }\n\n    getSelectedCourseIds(): string[] {\n        return this.getSelectedCourses().map(sc => sc.course.id);\n    }\n\n    onSelectionChange(listener: (courses: SelectedCourse[]) => void): void {\n        this.courseManager.onSelectionChange(listener);\n    }\n\n    offSelectionChange(listener: (courses: SelectedCourse[]) => void): void {\n        this.courseManager.offSelectionChange(listener);\n    }\n\n    private loadPersistedSelections(): void {\n        const persistedCourses = this.storageManager.loadSelectedCourses();\n        if (persistedCourses.length > 0) {\n            this.courseManager.loadSelectedCourses(persistedCourses);\n        }\n    }\n\n    private setupPersistenceListener(): void {\n        this.courseManager.onSelectionChange((courses) => {\n            this.storageManager.saveSelectedCourses(courses);\n        });\n    }\n\n    private persistSelections(): void {\n        const selectedCourses = this.getSelectedCourses();\n        this.storageManager.saveSelectedCourses(selectedCourses);\n    }\n\n    exportSelections(): string {\n        const selectedCourses = this.getSelectedCourses();\n        return JSON.stringify({\n            version: '1.0',\n            timestamp: new Date().toISOString(),\n            selectedCourses\n        }, null, 2);\n    }\n\n    importSelections(jsonData: string): boolean {\n        try {\n            const data = JSON.parse(jsonData);\n            if (data.selectedCourses && Array.isArray(data.selectedCourses)) {\n                this.courseManager.loadSelectedCourses(data.selectedCourses);\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error('Failed to import selections:', error);\n            return false;\n        }\n    }\n\n    // Department and section management\n    setAllDepartments(departments: Department[]): void {\n        this.courseManager.setAllDepartments(departments);\n    }\n\n    getAllSections(): Section[] {\n        return this.courseManager.getAllSections();\n    }\n\n    getAllSectionsForCourse(course: Course): Section[] {\n        return this.courseManager.getAllSectionsForCourse(course);\n    }\n\n    getAllSectionsForDepartment(deptAbbreviation: string): Section[] {\n        return this.courseManager.getAllSectionsForDepartment(deptAbbreviation);\n    }\n\n    // Helper methods for backward compatibility\n    findCourseById(courseId: string): Course | undefined {\n        for (const dept of this.courseManager.getAllDepartments()) {\n            const course = dept.courses.find(c => c.id === courseId);\n            if (course) return course;\n        }\n        return undefined;\n    }\n\n    // Legacy methods using courseId (for backward compatibility)\n    unselectCourseById(courseId: string): void {\n        const course = this.findCourseById(courseId);\n        if (course) {\n            this.unselectCourse(course);\n        }\n    }\n\n    isCourseSelectedById(courseId: string): boolean {\n        const course = this.findCourseById(courseId);\n        return course ? this.isCourseSelected(course) : false;\n    }\n\n    setSelectedSectionById(courseId: string, sectionNumber: string | null): void {\n        const course = this.findCourseById(courseId);\n        if (course) {\n            this.setSelectedSection(course, sectionNumber);\n        }\n    }\n\n    getSelectedSectionById(courseId: string): string | null {\n        const course = this.findCourseById(courseId);\n        return course ? this.getSelectedSection(course) : null;\n    }\n\n    getSelectedCourseById(courseId: string): SelectedCourse | undefined {\n        const course = this.findCourseById(courseId);\n        return course ? this.getSelectedCourse(course) : undefined;\n    }\n\n    // Reconstruct Section objects after course data is loaded\n    reconstructSectionObjects(): void {\n        this.courseManager.reconstructSectionObjects();\n    }\n}","import { Course, Section } from './types'\n\nexport interface SelectedCourse {\n    course: Course;\n    selectedSection: Section | null;  // Store the full Section object for direct access\n    selectedSectionNumber: string | null;  // Keep for backward compatibility and serialization\n    isRequired: boolean;\n}\n\nexport interface Schedule {\n    id: string;\n    name: string;\n    selectedCourses: SelectedCourse[];\n    generatedSchedules: ScheduleCombination[];\n    preferences: SchedulePreferences;\n}\n\nexport interface ScheduleCombination {\n    id: string;\n    sections: Section[];\n    conflicts: TimeConflict[];\n    isValid: boolean;\n}\n\nexport interface TimeConflict {\n    section1: Section;\n    section2: Section;\n    conflictType: ConflictType;\n    description: string;\n}\n\nexport interface SchedulePreferences {\n    preferredTimeRange: {\n        startTime: { hours: number; minutes: number };\n        endTime: { hours: number; minutes: number };\n    };\n    preferredDays: Set<string>;\n    avoidBackToBackClasses: boolean;\n    theme?: string;\n}\n\nexport enum ConflictType {\n    TIME_OVERLAP = 'time_overlap'\n}\n\nexport interface UserScheduleState {\n    activeSchedule: Schedule | null;\n    savedSchedules: Schedule[];\n    preferences: SchedulePreferences;\n}","import { Section, Period, DayOfWeek } from '../types/types'\nimport { TimeConflict, ConflictType } from '../types/schedule'\n\nexport class ConflictDetector {\n    private conflictCache = new Map<string, TimeConflict[]>();\n    detectConflicts(sections: Section[]): TimeConflict[] {\n        const conflicts: TimeConflict[] = [];\n        \n        for (let i = 0; i < sections.length; i++) {\n            for (let j = i + 1; j < sections.length; j++) {\n                const cacheKey = this.getCacheKey(sections[i], sections[j]);\n                let sectionConflicts = this.conflictCache.get(cacheKey);\n                \n                if (!sectionConflicts) {\n                    sectionConflicts = this.checkSectionConflicts(sections[i], sections[j]);\n                    this.conflictCache.set(cacheKey, sectionConflicts);\n                }\n                \n                conflicts.push(...sectionConflicts);\n            }\n        }\n        \n        return conflicts;\n    }\n\n    private checkSectionConflicts(section1: Section, section2: Section): TimeConflict[] {\n        const conflicts: TimeConflict[] = [];\n        \n        for (const period1 of section1.periods) {\n            for (const period2 of section2.periods) {\n                const conflict = this.checkPeriodConflict(period1, period2, section1, section2);\n                if (conflict) {\n                    conflicts.push(conflict);\n                }\n            }\n        }\n        \n        return conflicts;\n    }\n\n    private checkPeriodConflict(period1: Period, period2: Period, section1: Section, section2: Section): TimeConflict | null {\n        const sharedDays = this.getSharedDays(period1.days, period2.days);\n        if (sharedDays.length === 0) return null;\n\n        if (this.hasTimeOverlap(period1, period2)) {\n            return {\n                section1,\n                section2,\n                conflictType: ConflictType.TIME_OVERLAP,\n                description: `Time overlap on ${sharedDays.join(', ')}: ${period1.startTime.displayTime}-${period1.endTime.displayTime} conflicts with ${period2.startTime.displayTime}-${period2.endTime.displayTime}`\n            };\n        }\n\n        return null;\n    }\n\n    private getSharedDays(days1: Set<DayOfWeek>, days2: Set<DayOfWeek>): string[] {\n        return Array.from(new Set([...days1].filter(day => days2.has(day))));\n    }\n\n    private hasTimeOverlap(period1: Period, period2: Period): boolean {\n        const start1 = this.timeToMinutes(period1.startTime);\n        const end1 = this.timeToMinutes(period1.endTime);\n        const start2 = this.timeToMinutes(period2.startTime);\n        const end2 = this.timeToMinutes(period2.endTime);\n\n        return start1 < end2 && start2 < end1;\n    }\n\n    private timeToMinutes(time: { hours: number; minutes: number }): number {\n        return time.hours * 60 + time.minutes;\n    }\n\n    isValidSchedule(sections: Section[]): boolean {\n        const conflicts = this.detectConflicts(sections);\n        return conflicts.length === 0;\n    }\n\n    clearCache(): void {\n        this.conflictCache.clear();\n    }\n\n    private getCacheKey(section1: Section, section2: Section): string {\n        const key1 = `${section1.crn}-${section2.crn}`;\n        const key2 = `${section2.crn}-${section1.crn}`;\n        return key1 < key2 ? key1 : key2;\n    }\n}","import { Department } from '../../types/types'\n\nexport class DepartmentController {\n    private allDepartments: Department[] = [];\n    private selectedDepartment: Department | null = null;\n\n    // Department categories based on WPI structure\n    private departmentCategories: { [key: string]: string } = {\n        // Science\n        'BB': 'Science',\n        'BCB': 'Science', \n        'CH': 'Science',\n        'CS': 'Science',\n        'DS': 'Science',\n        'GE': 'Science',\n        'IMGD': 'Science',\n        'MA': 'Science',\n        'MTE': 'Science',\n        'PTE': 'Science',\n        'NE': 'Science',\n        'PH': 'Science',\n        \n        // Engineering\n        'AE': 'Engineering',\n        'AR': 'Engineering',\n        'ARE': 'Engineering',\n        'BME': 'Engineering',\n        'CE': 'Engineering',\n        'CHE': 'Engineering',\n        'ECE': 'Engineering',\n        'ES': 'Engineering',\n        'FP': 'Engineering',\n        'ME': 'Engineering',\n        'MFE': 'Engineering',\n        'MSE': 'Engineering',\n        'NUE': 'Engineering',\n        'RBE': 'Engineering',\n        'SYE': 'Engineering',\n        \n        // Business & Management\n        'BUS': 'Business & Management',\n        'ECON': 'Business & Management',\n        'MIS': 'Business & Management',\n        'OIE': 'Business & Management',\n        \n        // Humanities & Arts\n        'EN': 'Humanities & Arts',\n        'HI': 'Humanities & Arts',\n        'HU': 'Humanities & Arts',\n        'MU': 'Humanities & Arts',\n        'RE': 'Humanities & Arts',\n        'SP': 'Humanities & Arts',\n        'TH': 'Humanities & Arts',\n        'WR': 'Humanities & Arts',\n        \n        // Social Sciences\n        'GOV': 'Social Sciences',\n        'PSY': 'Social Sciences',\n        'SOC': 'Social Sciences',\n        'SS': 'Social Sciences'\n    };\n\n    constructor() {}\n\n    setAllDepartments(departments: Department[]): void {\n        this.allDepartments = departments;\n    }\n\n    getSelectedDepartment(): Department | null {\n        return this.selectedDepartment;\n    }\n\n    selectDepartment(deptId: string): Department | null {\n        const department = this.allDepartments.find(d => d.abbreviation === deptId);\n        if (!department) return null;\n\n        this.selectedDepartment = department;\n        \n        // Update content header\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            contentHeader.textContent = `${department.name} Courses`;\n        }\n\n        return department;\n    }\n\n    displayDepartments(): void {\n        const departmentList = document.getElementById('department-list');\n        if (!departmentList) return;\n\n        // Group departments by category\n        const categories = this.groupDepartmentsByCategory();\n        \n        let html = '';\n        Object.entries(categories).forEach(([categoryName, departments]) => {\n            if (departments.length === 0) return;\n            \n            html += `\n                <div class=\"department-category\">\n                    <div class=\"category-header\">${categoryName}</div>\n                    <div class=\"department-list\">\n            `;\n            \n            departments.forEach(dept => {\n                const courseCount = dept.courses.length;\n                html += `\n                    <div class=\"department-item\" data-dept-id=\"${dept.abbreviation}\">\n                        ${dept.name} (${courseCount})\n                    </div>\n                `;\n            });\n            \n            html += `\n                    </div>\n                </div>\n            `;\n        });\n\n        departmentList.innerHTML = html;\n    }\n\n    private groupDepartmentsByCategory(): { [key: string]: Department[] } {\n        const categories: { [key: string]: Department[] } = {\n            'Science': [],\n            'Engineering': [],\n            'Business & Management': [],\n            'Humanities & Arts': [],\n            'Social Sciences': [],\n            'Other': []\n        };\n\n        this.allDepartments.forEach(dept => {\n            const category = this.departmentCategories[dept.abbreviation] || 'Other';\n            categories[category].push(dept);\n        });\n\n        // Sort departments within each category\n        Object.keys(categories).forEach(category => {\n            categories[category].sort((a, b) => a.name.localeCompare(b.name));\n        });\n\n        return categories;\n    }\n\n    handleDepartmentClick(deptId: string): Department | null {\n        const department = this.selectDepartment(deptId);\n        \n        // Update active state\n        document.querySelectorAll('.department-item').forEach(item => {\n            item.classList.remove('active');\n        });\n        \n        const clickedElement = document.querySelector(`[data-dept-id=\"${deptId}\"]`);\n        if (clickedElement) {\n            clickedElement.classList.add('active');\n        }\n\n        return department;\n    }\n\n    clearDepartmentSelection(): void {\n        this.selectedDepartment = null;\n        \n        // Clear active department\n        document.querySelectorAll('.department-item').forEach(item => {\n            item.classList.remove('active');\n        });\n    }\n}","import { Course, Department } from '../../types/types'\nimport { CourseSelectionService } from '../../services/CourseSelectionService'\n\nexport class CourseController {\n    private allDepartments: Department[] = [];\n    private selectedCourse: Course | null = null;\n    private courseSelectionService: CourseSelectionService;\n    private elementToCourseMap = new WeakMap<HTMLElement, Course>();\n\n    constructor(courseSelectionService: CourseSelectionService) {\n        this.courseSelectionService = courseSelectionService;\n    }\n\n    setAllDepartments(departments: Department[]): void {\n        this.allDepartments = departments;\n    }\n\n    getSelectedCourse(): Course | null {\n        return this.selectedCourse;\n    }\n\n    displayCourses(courses: Course[], currentView: 'list' | 'grid'): void {\n        if (currentView === 'grid') {\n            this.displayCoursesGrid(courses);\n        } else {\n            this.displayCoursesList(courses);\n        }\n    }\n\n    private displayCoursesList(courses: Course[]): void {\n        const courseContainer = document.getElementById('course-container');\n        if (!courseContainer) return;\n\n        if (courses.length === 0) {\n            courseContainer.innerHTML = '<div class=\"empty-state\">No courses found in this department.</div>';\n            return;\n        }\n\n        // Sort courses by course number\n        const sortedCourses = courses.sort((a, b) => a.number.localeCompare(b.number));\n\n        let html = '<div class=\"course-list\">';\n        \n        sortedCourses.forEach(course => {\n            const hasWarning = this.courseHasWarning(course);\n            const sections = course.sections.map(s => s.number).filter(Boolean);\n            const isSelected = this.courseSelectionService.isCourseSelected(course);\n            \n            html += `\n                <div class=\"course-item ${isSelected ? 'selected' : ''}\">\n                    <div class=\"course-header\">\n                        <button class=\"course-select-btn ${isSelected ? 'selected' : ''}\" title=\"${isSelected ? 'Remove from selection' : 'Add to selection'}\">\n                            ${isSelected ? '✓' : '+'}\n                        </button>\n                        <div class=\"course-code\">${course.department.abbreviation}${course.number}</div>\n                        <div class=\"course-details\">\n                            <div class=\"course-name\">\n                                ${course.name}\n                                ${hasWarning ? '<span class=\"warning-icon\">⚠</span>' : ''}\n                            </div>\n                            <div class=\"course-sections\">\n                                ${course.sections.map(section => {\n                                    const isFull = section.seatsAvailable <= 0;\n                                    return `<span class=\"section-badge ${isFull ? 'full' : ''}\" data-section=\"${section.number}\">${section.number}</span>`;\n                                }).join('')}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `;\n        });\n        \n        html += '</div>';\n        courseContainer.innerHTML = html;\n\n        // Associate DOM elements with Course objects\n        const courseElements = courseContainer.querySelectorAll('.course-item');\n        courseElements.forEach((element, index) => {\n            this.elementToCourseMap.set(element as HTMLElement, sortedCourses[index]);\n        });\n    }\n\n    private displayCoursesGrid(courses: Course[]): void {\n        const courseContainer = document.getElementById('course-container');\n        if (!courseContainer) return;\n\n        if (courses.length === 0) {\n            courseContainer.innerHTML = '<div class=\"empty-state\">No courses found in this department.</div>';\n            return;\n        }\n\n        // Sort courses by course number\n        const sortedCourses = courses.sort((a, b) => a.number.localeCompare(b.number));\n\n        let html = '<div class=\"course-grid\">';\n        \n        sortedCourses.forEach(course => {\n            const hasWarning = this.courseHasWarning(course);\n            const isSelected = this.courseSelectionService.isCourseSelected(course);\n            const credits = course.minCredits === course.maxCredits ? course.minCredits : `${course.minCredits}-${course.maxCredits}`;\n            \n            html += `\n                <div class=\"course-card ${isSelected ? 'selected' : ''}\">\n                    <div class=\"course-card-header\">\n                        <div class=\"course-code\">${course.department.abbreviation}${course.number}</div>\n                        <button class=\"course-select-btn ${isSelected ? 'selected' : ''}\" title=\"${isSelected ? 'Remove from selection' : 'Add to selection'}\">\n                            ${isSelected ? '✓' : '+'}\n                        </button>\n                    </div>\n                    <div class=\"course-title\">\n                        ${course.name}\n                        ${hasWarning ? '<span class=\"warning-icon\">⚠</span>' : ''}\n                    </div>\n                    <div class=\"course-info\">\n                        <span class=\"course-credits\">${credits} credits</span>\n                        <span class=\"course-sections-count\">${course.sections.length} section${course.sections.length !== 1 ? 's' : ''}</span>\n                    </div>\n                </div>\n            `;\n        });\n        \n        html += '</div>';\n        courseContainer.innerHTML = html;\n\n        // Associate DOM elements with Course objects\n        const courseElements = courseContainer.querySelectorAll('.course-card');\n        courseElements.forEach((element, index) => {\n            this.elementToCourseMap.set(element as HTMLElement, sortedCourses[index]);\n        });\n    }\n\n    private courseHasWarning(course: Course): boolean {\n        // Check if ALL sections are fully enrolled (no available options)\n        return course.sections.every(section => section.seatsAvailable <= 0);\n    }\n\n    handleSearch(query: string, selectedDepartment: Department | null): Course[] {\n        if (!query.trim()) {\n            return selectedDepartment ? selectedDepartment.courses : [];\n        }\n\n        const allCourses: Course[] = [];\n        this.allDepartments.forEach(dept => {\n            allCourses.push(...dept.courses);\n        });\n\n        const filteredCourses = allCourses.filter(course => \n            course.name.toLowerCase().includes(query.toLowerCase()) ||\n            course.number.toLowerCase().includes(query.toLowerCase()) ||\n            course.id.toLowerCase().includes(query.toLowerCase())\n        );\n\n        // Update header for search results\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            contentHeader.textContent = `Search Results (${filteredCourses.length})`;\n        }\n\n        return filteredCourses;\n    }\n\n    selectCourse(element: HTMLElement): Course | null {\n        const course = this.elementToCourseMap.get(element);\n        if (!course) return null;\n\n        this.selectedCourse = course;\n        this.displayCourseDescription(course);\n        \n        // Update active state for course items\n        document.querySelectorAll('.course-item, .course-card').forEach(item => {\n            item.classList.remove('active');\n        });\n        \n        element.classList.add('active');\n        return course;\n    }\n\n    // Legacy method for backward compatibility\n    selectCourseById(courseId: string): Course | null {\n        const course = this.courseSelectionService.findCourseById(courseId);\n        if (!course) return null;\n\n        // Find the associated element and call selectCourse\n        const allElements = document.querySelectorAll('.course-item, .course-card');\n        for (const element of allElements) {\n            const elementCourse = this.elementToCourseMap.get(element as HTMLElement);\n            if (elementCourse?.id === courseId) {\n                return this.selectCourse(element as HTMLElement);\n            }\n        }\n        return null;\n    }\n\n    toggleCourseSelection(element: HTMLElement): boolean {\n        const course = this.elementToCourseMap.get(element);\n        if (!course) return false;\n\n        const wasSelected = this.courseSelectionService.toggleCourseSelection(course);\n        this.updateCourseSelectionUI(element, wasSelected);\n        return wasSelected;\n    }\n\n    // Legacy method for backward compatibility\n    toggleCourseSelectionById(courseId: string): boolean {\n        const course = this.courseSelectionService.findCourseById(courseId);\n        if (!course) return false;\n\n        // Find the associated element and call toggleCourseSelection\n        const allElements = document.querySelectorAll('.course-item, .course-card');\n        for (const element of allElements) {\n            const elementCourse = this.elementToCourseMap.get(element as HTMLElement);\n            if (elementCourse?.id === courseId) {\n                return this.toggleCourseSelection(element as HTMLElement);\n            }\n        }\n        return false;\n    }\n\n    private updateCourseSelectionUI(element: HTMLElement, isSelected: boolean): void {\n        const selectBtn = element.querySelector('.course-select-btn');\n        \n        if (selectBtn) {\n            if (isSelected) {\n                element.classList.add('selected');\n                selectBtn.textContent = '✓';\n                selectBtn.classList.add('selected');\n            } else {\n                element.classList.remove('selected');\n                selectBtn.textContent = '+';\n                selectBtn.classList.remove('selected');\n            }\n        }\n    }\n\n    refreshCourseSelectionUI(): void {\n        // Update all course items to reflect current selection state\n        document.querySelectorAll('.course-item, .course-card').forEach(item => {\n            const course = this.elementToCourseMap.get(item as HTMLElement);\n            if (course) {\n                const isSelected = this.courseSelectionService.isCourseSelected(course);\n                this.updateCourseSelectionUI(item as HTMLElement, isSelected);\n            }\n        });\n    }\n\n    private displayCourseDescription(course: Course): void {\n        const descriptionContainer = document.getElementById('course-description');\n        if (!descriptionContainer) return;\n\n        const html = `\n            <div class=\"course-info\">\n                <div class=\"course-title\">${course.name}</div>\n                <div class=\"course-code\">${course.department.abbreviation}${course.number} (${course.minCredits === course.maxCredits ? course.minCredits : `${course.minCredits}-${course.maxCredits}`} credits)</div>\n            </div>\n            <div class=\"course-description-text\">${course.description}</div>\n        `;\n\n        descriptionContainer.innerHTML = html;\n    }\n\n    clearCourseDescription(): void {\n        const descriptionContainer = document.getElementById('course-description');\n        if (descriptionContainer) {\n            descriptionContainer.innerHTML = '<div class=\"empty-state\">Select a course to view description</div>';\n        }\n    }\n\n    clearCourseSelection(): void {\n        this.selectedCourse = null;\n        this.clearCourseDescription();\n    }\n\n    displaySelectedCourses(): void {\n        const selectedCoursesContainer = document.getElementById('selected-courses-list');\n        const countElement = document.getElementById('selected-count');\n        \n        if (!selectedCoursesContainer || !countElement) return;\n\n        const selectedCourses = this.courseSelectionService.getSelectedCourses();\n        \n        // Update count\n        countElement.textContent = `(${selectedCourses.length})`;\n\n        if (selectedCourses.length === 0) {\n            selectedCoursesContainer.innerHTML = '<div class=\"empty-state\">No courses selected yet</div>';\n            return;\n        }\n\n        // Sort selected courses by department and number\n        const sortedCourses = selectedCourses.sort((a, b) => {\n            const deptCompare = a.course.department.abbreviation.localeCompare(b.course.department.abbreviation);\n            if (deptCompare !== 0) return deptCompare;\n            return a.course.number.localeCompare(b.course.number);\n        });\n\n        let html = '';\n        sortedCourses.forEach(selectedCourse => {\n            const course = selectedCourse.course;\n            const credits = course.minCredits === course.maxCredits \n                ? `${course.minCredits} credits` \n                : `${course.minCredits}-${course.maxCredits} credits`;\n\n            html += `\n                <div class=\"selected-course-item\">\n                    <div class=\"selected-course-info\">\n                        <div class=\"selected-course-code\">${course.department.abbreviation}${course.number}</div>\n                        <div class=\"selected-course-name\">${course.name}</div>\n                        <div class=\"selected-course-credits\">${credits}</div>\n                    </div>\n                    <button class=\"course-remove-btn\" title=\"Remove from selection\">\n                        ×\n                    </button>\n                </div>\n            `;\n        });\n\n        selectedCoursesContainer.innerHTML = html;\n\n        // Associate remove buttons with Course objects  \n        const removeButtons = selectedCoursesContainer.querySelectorAll('.course-remove-btn');\n        removeButtons.forEach((button, index) => {\n            this.elementToCourseMap.set(button as HTMLElement, sortedCourses[index].course);\n        });\n    }\n\n    getCourseFromElement(element: HTMLElement): Course | undefined {\n        return this.elementToCourseMap.get(element);\n    }\n}","import { Time, DayOfWeek } from '../../types/types';\n\nexport class TimeUtils {\n    // Schedule grid constants - 7 AM to 7 PM (12 hours)\n    static readonly START_HOUR = 7;  // 7 AM\n    static readonly END_HOUR = 19;   // 7 PM\n    static readonly TOTAL_HOURS = 12;\n    static readonly SLOTS_PER_HOUR = 2; // 30-minute intervals\n    static readonly TOTAL_TIME_SLOTS = TimeUtils.TOTAL_HOURS * TimeUtils.SLOTS_PER_HOUR;\n\n    // Days of the week in order\n    static readonly DAYS_ORDER = [\n        DayOfWeek.MONDAY,\n        DayOfWeek.TUESDAY, \n        DayOfWeek.WEDNESDAY,\n        DayOfWeek.THURSDAY,\n        DayOfWeek.FRIDAY,\n        DayOfWeek.SATURDAY,\n        DayOfWeek.SUNDAY\n    ];\n\n    /**\n     * Convert a Time object to a grid row position (0-based)\n     * 7:00 AM = row 0, 7:30 AM = row 1, 8:00 AM = row 2, etc.\n     * @deprecated Use timeToGridRowStart() or timeToGridRowEnd() instead\n     */\n    static timeToGridRow(time: Time): number {\n        return TimeUtils.timeToGridRowStart(time);\n    }\n\n    /**\n     * Convert start time to grid row position (rounds DOWN)\n     * Used for class start times - finds the slot the class starts in\n     */\n    static timeToGridRowStart(time: Time): number {\n        const totalMinutes = time.hours * 60 + time.minutes;\n        const startMinutes = TimeUtils.START_HOUR * 60;\n        const relativeMinutes = totalMinutes - startMinutes;\n        \n        // Convert to 30-minute slots, round DOWN for start times\n        const slot = Math.floor(relativeMinutes / 30);\n        const boundedSlot = Math.max(0, Math.min(slot, TimeUtils.TOTAL_TIME_SLOTS - 1));\n        \n        return boundedSlot;\n    }\n\n    /**\n     * Convert end time to grid row position (rounds UP)\n     * Used for class end times - ensures full duration is visually represented\n     */\n    static timeToGridRowEnd(time: Time): number {\n        const totalMinutes = time.hours * 60 + time.minutes;\n        const startMinutes = TimeUtils.START_HOUR * 60;\n        const relativeMinutes = totalMinutes - startMinutes;\n        \n        // Convert to 30-minute slots, round UP for end times\n        const slot = Math.ceil(relativeMinutes / 30);\n        const boundedSlot = Math.max(0, Math.min(slot, TimeUtils.TOTAL_TIME_SLOTS - 1));\n        \n        // Log examples for debugging\n        if (relativeMinutes % 30 !== 0) {\n            console.log(`Rounded UP: ${time.hours}:${time.minutes.toString().padStart(2, '0')} -> slot ${slot} (${relativeMinutes} min = ${relativeMinutes/30} slots)`);\n        }\n        \n        return boundedSlot;\n    }\n\n    /**\n     * Convert day of week to grid column position (0-based)\n     * Monday = 0, Tuesday = 1, etc.\n     */\n    static dayToGridColumn(day: DayOfWeek): number {\n        return TimeUtils.DAYS_ORDER.indexOf(day);\n    }\n\n    /**\n     * Calculate how many grid rows a time period spans\n     */\n    static calculateDuration(startTime: Time, endTime: Time): number {\n        const startRow = TimeUtils.timeToGridRow(startTime);\n        const endRow = TimeUtils.timeToGridRow(endTime);\n        return Math.max(1, endRow - startRow);\n    }\n\n    /**\n     * Check if a time is within the schedule grid bounds (7 AM - 7 PM)\n     */\n    static isTimeInBounds(time: Time): boolean {\n        return time.hours >= TimeUtils.START_HOUR && time.hours < TimeUtils.END_HOUR;\n    }\n\n    /**\n     * Format time for display (e.g., \"9:00 AM\", \"2:30 PM\")\n     */\n    static formatTime(time: Time): string {\n        if (time.displayTime) {\n            return time.displayTime;\n        }\n        \n        const hours12 = time.hours === 0 ? 12 : time.hours > 12 ? time.hours - 12 : time.hours;\n        const ampm = time.hours >= 12 ? 'PM' : 'AM';\n        const minutes = time.minutes.toString().padStart(2, '0');\n        \n        return `${hours12}:${minutes} ${ampm}`;\n    }\n\n    /**\n     * Format time range for display (e.g., \"9:00-9:50 AM\")\n     */\n    static formatTimeRange(startTime: Time, endTime: Time): string {\n        const startFormatted = TimeUtils.formatTime(startTime);\n        const endFormatted = TimeUtils.formatTime(endTime);\n        \n        // If same AM/PM, only show it once\n        if (startTime.hours < 12 && endTime.hours < 12) {\n            return `${startFormatted.replace(' AM', '')}-${endFormatted}`;\n        } else if (startTime.hours >= 12 && endTime.hours >= 12) {\n            return `${startFormatted.replace(' PM', '')}-${endFormatted}`;\n        } else {\n            return `${startFormatted}-${endFormatted}`;\n        }\n    }\n\n    /**\n     * Format days for display (e.g., \"MWF\", \"TR\")\n     */\n    static formatDays(days: Set<DayOfWeek>): string {\n        const dayAbbreviations: { [key in DayOfWeek]: string } = {\n            [DayOfWeek.MONDAY]: 'M',\n            [DayOfWeek.TUESDAY]: 'T',\n            [DayOfWeek.WEDNESDAY]: 'W',\n            [DayOfWeek.THURSDAY]: 'R',\n            [DayOfWeek.FRIDAY]: 'F',\n            [DayOfWeek.SATURDAY]: 'S',\n            [DayOfWeek.SUNDAY]: 'U'\n        };\n\n        return TimeUtils.DAYS_ORDER\n            .filter(day => days.has(day))\n            .map(day => dayAbbreviations[day])\n            .join('');\n    }\n\n    /**\n     * Generate time labels for the grid (only hourly: 7:00 AM, 8:00 AM, etc.)\n     */\n    static generateTimeLabels(): string[] {\n        const labels: string[] = [];\n        \n        for (let slot = 0; slot < TimeUtils.TOTAL_TIME_SLOTS; slot++) {\n            const hour = Math.floor(slot / TimeUtils.SLOTS_PER_HOUR) + TimeUtils.START_HOUR;\n            const minutes = (slot % TimeUtils.SLOTS_PER_HOUR) * 30;\n            \n            // Show labels for both :00 and :30 times\n            labels.push(TimeUtils.formatTime({ hours: hour, minutes: minutes, displayTime: '' }));\n        }\n        \n        return labels;\n    }\n\n    /**\n     * Get day name for display\n     */\n    static getDayName(day: DayOfWeek): string {\n        const dayNames: { [key in DayOfWeek]: string } = {\n            [DayOfWeek.MONDAY]: 'Monday',\n            [DayOfWeek.TUESDAY]: 'Tuesday',\n            [DayOfWeek.WEDNESDAY]: 'Wednesday',\n            [DayOfWeek.THURSDAY]: 'Thursday',\n            [DayOfWeek.FRIDAY]: 'Friday',\n            [DayOfWeek.SATURDAY]: 'Saturday',\n            [DayOfWeek.SUNDAY]: 'Sunday'\n        };\n\n        return dayNames[day];\n    }\n\n    /**\n     * Get abbreviated day name for display\n     */\n    static getDayAbbr(day: DayOfWeek): string {\n        const dayAbbrs: { [key in DayOfWeek]: string } = {\n            [DayOfWeek.MONDAY]: 'Mon',\n            [DayOfWeek.TUESDAY]: 'Tue',\n            [DayOfWeek.WEDNESDAY]: 'Wed',\n            [DayOfWeek.THURSDAY]: 'Thu',\n            [DayOfWeek.FRIDAY]: 'Fri',\n            [DayOfWeek.SATURDAY]: 'Sat',\n            [DayOfWeek.SUNDAY]: 'Sun'\n        };\n\n        return dayAbbrs[day];\n    }\n}","import { DayOfWeek, Course } from '../../types/types'\nimport { CourseSelectionService } from '../../services/CourseSelectionService'\nimport { TimeUtils } from '../utils/timeUtils'\n\nexport class ScheduleController {\n    private courseSelectionService: CourseSelectionService;\n    private elementToCourseMap = new WeakMap<HTMLElement, Course>();\n    private statePreserver?: { \n        preserve: () => Map<string, boolean>, \n        restore: (states: Map<string, boolean>) => void \n    };\n\n    constructor(courseSelectionService: CourseSelectionService) {\n        this.courseSelectionService = courseSelectionService;\n    }\n\n    setStatePreserver(statePreserver: { \n        preserve: () => Map<string, boolean>, \n        restore: (states: Map<string, boolean>) => void \n    }): void {\n        this.statePreserver = statePreserver;\n    }\n\n    displayScheduleSelectedCourses(): void {\n        const selectedCoursesContainer = document.getElementById('schedule-selected-courses');\n        const countElement = document.getElementById('schedule-selected-count');\n        \n        if (!selectedCoursesContainer || !countElement) return;\n\n        // Preserve dropdown states before refresh\n        const dropdownStates = this.statePreserver?.preserve();\n\n        const selectedCourses = this.courseSelectionService.getSelectedCourses();\n        \n        // Update count\n        countElement.textContent = `(${selectedCourses.length})`;\n\n        if (selectedCourses.length === 0) {\n            selectedCoursesContainer.innerHTML = '<div class=\"empty-state\">No courses selected yet</div>';\n            return;\n        }\n\n        // Sort selected courses by department and number\n        const sortedCourses = selectedCourses.sort((a, b) => {\n            const deptCompare = a.course.department.abbreviation.localeCompare(b.course.department.abbreviation);\n            if (deptCompare !== 0) return deptCompare;\n            return a.course.number.localeCompare(b.course.number);\n        });\n\n        let html = '';\n        sortedCourses.forEach(selectedCourse => {\n            const course = selectedCourse.course;\n            const credits = course.minCredits === course.maxCredits \n                ? `${course.minCredits} credits` \n                : `${course.minCredits}-${course.maxCredits} credits`;\n\n            // Group sections by term\n            const sectionsByTerm: { [term: string]: typeof course.sections } = {};\n            course.sections.forEach(section => {\n                if (!sectionsByTerm[section.term]) {\n                    sectionsByTerm[section.term] = [];\n                }\n                sectionsByTerm[section.term].push(section);\n            });\n\n            html += `\n                <div class=\"schedule-course-item collapsed\" >\n                    <div class=\"schedule-course-header dropdown-trigger\" >\n                        <div class=\"schedule-course-info\">\n                            <div class=\"schedule-course-code\">${course.department.abbreviation}${course.number}</div>\n                            <div class=\"schedule-course-name\">${course.name}</div>\n                            <div class=\"schedule-course-credits\">${credits}</div>\n                        </div>\n                        <div class=\"header-controls\">\n                            <span class=\"dropdown-arrow\">▼</span>\n                            <button class=\"course-remove-btn\"  title=\"Remove from selection\">\n                                ×\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"schedule-sections-container\">\n            `;\n\n            // Display sections grouped by term\n            const terms = Object.keys(sectionsByTerm).sort();\n            terms.forEach(term => {\n                html += `<div class=\"term-sections\" data-term=\"${term}\">`;\n                html += `<div class=\"term-label\">${term} Term</div>`;\n                \n                sectionsByTerm[term].forEach(section => {\n                    const isSelected = selectedCourse.selectedSectionNumber === section.number;\n                    const selectedClass = isSelected ? 'selected' : '';\n                    \n                    // Sort periods by type priority (lecture first, then lab, then discussion)\n                    const sortedPeriods = [...section.periods].sort((a, b) => {\n                        const typePriority = (type: string) => {\n                            const lower = type.toLowerCase();\n                            if (lower.includes('lec') || lower.includes('lecture')) return 1;\n                            if (lower.includes('lab')) return 2;\n                            if (lower.includes('dis') || lower.includes('discussion') || lower.includes('rec')) return 3;\n                            return 4;\n                        };\n                        return typePriority(a.type) - typePriority(b.type);\n                    });\n                    \n                    html += `\n                        <div class=\"section-option ${selectedClass}\"  data-section=\"${section.number}\">\n                            <div class=\"section-info\">\n                                <div class=\"section-number\">${section.number}</div>\n                                <div class=\"section-periods\">`;\n                    \n                    // Display all periods for this section\n                    sortedPeriods.forEach((period, index) => {\n                        const timeRange = TimeUtils.formatTimeRange(period.startTime, period.endTime);\n                        const days = TimeUtils.formatDays(period.days);\n                        const periodTypeLabel = this.getPeriodTypeLabel(period.type);\n                        \n                        html += `\n                            <div class=\"period-info\" data-period-type=\"${period.type.toLowerCase()}\">\n                                <div class=\"period-header\">\n                                    <span class=\"period-type-label\">${periodTypeLabel}</span>\n                                    <span class=\"period-schedule\">${days} ${timeRange}</span>\n                                </div>\n                                <div class=\"period-details\">\n                                    <span class=\"period-professor\">${period.professor}</span>\n                                    ${period.location ? `<span class=\"period-location\">${period.location}</span>` : ''}\n                                </div>\n                            </div>\n                        `;\n                    });\n                    \n                    html += `\n                                </div>\n                            </div>\n                            <button class=\"section-select-btn ${selectedClass}\"  data-section=\"${section.number}\">\n                                ${isSelected ? '✓' : '+'}\n                            </button>\n                        </div>\n                    `;\n                });\n                \n                html += `</div>`;\n            });\n\n            html += `\n                    </div>\n                </div>\n            `;\n        });\n\n        selectedCoursesContainer.innerHTML = html;\n\n        // Associate DOM elements with Course objects\n        const courseElements = selectedCoursesContainer.querySelectorAll('.schedule-course-item');\n        const removeButtons = selectedCoursesContainer.querySelectorAll('.course-remove-btn');\n        \n        courseElements.forEach((element, index) => {\n            const course = sortedCourses[index]?.course;\n            this.elementToCourseMap.set(element as HTMLElement, course);\n        });\n        \n        removeButtons.forEach((button, index) => {\n            const course = sortedCourses[index]?.course;\n            this.elementToCourseMap.set(button as HTMLElement, course);\n        });\n\n        // IMPORTANT: Associate section buttons with their Course objects\n        const sectionButtons = selectedCoursesContainer.querySelectorAll('.section-select-btn');\n        sectionButtons.forEach(button => {\n            const courseItem = button.closest('.schedule-course-item') as HTMLElement;\n            if (courseItem) {\n                const courseIndex = Array.from(courseElements).indexOf(courseItem);\n                if (courseIndex >= 0 && courseIndex < sortedCourses.length) {\n                    const course = sortedCourses[courseIndex].course;\n                    this.elementToCourseMap.set(button as HTMLElement, course);\n                }\n            }\n        });\n\n        // Restore dropdown states after refresh\n        if (dropdownStates) {\n            // Use setTimeout to ensure DOM is fully updated\n            setTimeout(() => {\n                this.statePreserver?.restore(dropdownStates);\n            }, 0);\n        }\n    }\n\n    handleSectionSelection(course: Course, sectionNumber: string): void {\n        const currentSelectedSection = this.courseSelectionService.getSelectedSection(course);\n        \n        if (currentSelectedSection === sectionNumber) {\n            // Deselect current section\n            this.courseSelectionService.setSelectedSection(course, null);\n        } else {\n            // Select new section (automatically deselects any previous section)\n            this.courseSelectionService.setSelectedSection(course, sectionNumber);\n        }\n        \n        // Note: UI refresh is handled automatically by the selection change listener\n        // No need to call displayScheduleSelectedCourses() here as it would cause duplicate refreshes\n    }\n\n    updateSectionButtonStates(course: Course, selectedSection: string | null): void {\n        // Find the schedule course item by matching the associated Course object\n        let courseItem: HTMLElement | null = null;\n        \n        document.querySelectorAll('.schedule-course-item').forEach(item => {\n            const itemCourse = this.elementToCourseMap.get(item as HTMLElement);\n            if (itemCourse && itemCourse.id === course.id) {\n                courseItem = item as HTMLElement;\n            }\n        });\n        \n        if (!courseItem) return;\n\n        const sectionButtons = courseItem.querySelectorAll('.section-select-btn');\n        const sectionOptions = courseItem.querySelectorAll('.section-option');\n\n        sectionButtons.forEach(button => {\n            const buttonSection = (button as HTMLElement).dataset.section;\n            const isSelected = buttonSection === selectedSection;\n            \n            // Update button appearance\n            if (isSelected) {\n                button.classList.add('selected');\n                button.textContent = '✓';\n            } else {\n                button.classList.remove('selected');\n                button.textContent = '+';\n            }\n        });\n\n        sectionOptions.forEach(option => {\n            const optionSection = (option as HTMLElement).dataset.section;\n            const isSelected = optionSection === selectedSection;\n            \n            // Update option appearance\n            if (isSelected) {\n                option.classList.add('selected');\n            } else {\n                option.classList.remove('selected');\n            }\n        });\n    }\n\n    renderScheduleGrids(): void {\n        const selectedCourses = this.courseSelectionService.getSelectedCourses();\n        const grids = ['A', 'B', 'C', 'D'];\n        \n        console.log('\\n=== RENDER SCHEDULE GRIDS ===');\n        console.log(`Processing ${selectedCourses.length} selected courses for terms: ${grids.join(', ')}`);\n        \n        grids.forEach(term => {\n            const gridContainer = document.getElementById(`schedule-grid-${term}`);\n            if (!gridContainer) return;\n            \n            // Filter courses for this term - use direct Section object access\n            const termCourses = selectedCourses.filter(sc => {\n                const hasSelectedSection = sc.selectedSection !== null;\n                \n                if (!hasSelectedSection) return false;\n                \n                // Debug: log term matching\n                console.log(`  Checking course ${sc.course.department.abbreviation}${sc.course.number} with term \"${sc.selectedSection!.term}\" against grid term \"${term}\"`);\n                \n                // Extract the actual term letter from the section's term string\n                const sectionTermLetter = this.extractTermLetter(sc.selectedSection!.term, sc.selectedSection!.number);\n                const matchesTerm = sectionTermLetter === term;\n                \n                console.log(`    Extracted term letter: \"${sectionTermLetter}\" from term:\"${sc.selectedSection!.term}\" section:\"${sc.selectedSection!.number}\"`);\n                \n                return matchesTerm;\n            });\n            \n            console.log(`Term ${term}: ${termCourses.length} courses`);\n            termCourses.forEach(tc => {\n                console.log(`  ${tc.course.department.abbreviation}${tc.course.number} (${tc.selectedSection!.periods.length} periods)`);\n            });\n            \n            if (termCourses.length === 0) {\n                // Check if there are selected courses without sections for better messaging\n                const coursesWithoutSections = selectedCourses.filter(sc => !sc.selectedSection);\n                this.renderEmptyGrid(gridContainer, term, coursesWithoutSections.length > 0);\n                return;\n            }\n            \n            this.renderPopulatedGrid(gridContainer, termCourses, term);\n        });\n        \n        console.log('=== END RENDER SCHEDULE GRIDS ===\\n');\n    }\n\n    private renderEmptyGrid(container: HTMLElement, term: string, hasCoursesWithoutSections: boolean = false): void {\n        const message = hasCoursesWithoutSections \n            ? `No sections selected for ${term} term<br><small>Select specific sections in the left panel to see schedule</small>`\n            : `No classes scheduled for ${term} term`;\n            \n        container.innerHTML = `\n            <div class=\"empty-schedule\">\n                <div class=\"empty-message\">${message}</div>\n            </div>\n        `;\n        container.classList.add('empty');\n    }\n\n    private renderPopulatedGrid(container: HTMLElement, courses: any[], term: string): void {\n        container.classList.remove('empty');\n        \n        // Create 5-day (Mon-Fri) × 24 time slot grid (7 AM - 7 PM, 30-min intervals)\n        const weekdays = [DayOfWeek.MONDAY, DayOfWeek.TUESDAY, DayOfWeek.WEDNESDAY, DayOfWeek.THURSDAY, DayOfWeek.FRIDAY];\n        const timeSlots = TimeUtils.TOTAL_TIME_SLOTS;\n        \n        let html = '';\n        \n        // First row: empty time cell + day headers\n        html += '<div class=\"time-label\"></div>'; // Empty corner cell\n        weekdays.forEach(day => {\n            html += `<div class=\"day-header\">${TimeUtils.getDayAbbr(day)}</div>`;\n        });\n        \n        // Time rows: time label + 5 schedule cells\n        for (let slot = 0; slot < timeSlots; slot++) {\n            const hour = Math.floor(slot / TimeUtils.SLOTS_PER_HOUR) + TimeUtils.START_HOUR;\n            const minutes = (slot % TimeUtils.SLOTS_PER_HOUR) * 30;\n            const timeLabel = TimeUtils.formatTime({ hours: hour, minutes: minutes, displayTime: '' });\n            \n            // Time label cell\n            html += `<div class=\"time-label\">${timeLabel}</div>`;\n            \n            // Schedule cells for each day\n            weekdays.forEach(day => {\n                const cell = this.getCellContent(courses, day, slot);\n                html += `<div class=\"schedule-cell ${cell.classes}\" data-day=\"${day}\" data-slot=\"${slot}\" style=\"position: relative;\">${cell.content}</div>`;\n            });\n        }\n        \n        container.innerHTML = html;\n    }\n\n    private getCellContent(courses: any[], day: DayOfWeek, timeSlot: number): { content: string, classes: string } {\n        // Find all sections that occupy this cell\n        const occupyingSections: any[] = [];\n        \n        // Log for a wider range to catch the course times\n        const shouldLog = timeSlot < 12 && courses.length > 0; // Log first 6 hours (7:00 AM - 1:00 PM)\n        \n        if (shouldLog && courses.length > 0) {\n            const hour = Math.floor(timeSlot / 2) + 7;\n            const minute = (timeSlot % 2) * 30;\n            console.log(`\\n--- getCellContent: ${day} ${hour}:${minute.toString().padStart(2, '0')} (slot ${timeSlot}) ---`);\n            console.log(`Checking ${courses.length} courses for this time slot`);\n        }\n        \n        for (const selectedCourse of courses) {\n            if (!selectedCourse.selectedSection) {\n                continue;\n            }\n            \n            const section = selectedCourse.selectedSection;\n            \n            // Check if this section has any period that occupies this time slot on this day\n            const periodsOnThisDay = section.periods.filter((period: any) => period.days.has(day));\n            \n            if (shouldLog && periodsOnThisDay.length > 0) {\n                console.log(`  Course ${selectedCourse.course.department.abbreviation}${selectedCourse.course.number} has ${periodsOnThisDay.length} periods on ${day}:`);\n                periodsOnThisDay.forEach(p => {\n                    console.log(`    ${p.type}: ${p.startTime.hours}:${p.startTime.minutes.toString().padStart(2, '0')}-${p.endTime.hours}:${p.endTime.minutes.toString().padStart(2, '0')}`);\n                });\n            }\n            \n            let sectionOccupiesSlot = false;\n            let sectionStartSlot = Infinity;\n            let sectionEndSlot = -1;\n            let isFirstSlot = false;\n            \n            for (const period of periodsOnThisDay) {\n                const startSlot = TimeUtils.timeToGridRowStart(period.startTime);\n                const endSlot = TimeUtils.timeToGridRowEnd(period.endTime);\n                \n                if (shouldLog) {\n                    console.log(`    Checking period ${period.type}: slots ${startSlot}-${endSlot} vs current slot ${timeSlot}`);\n                }\n                \n                if (timeSlot >= startSlot && timeSlot < endSlot) {\n                    sectionOccupiesSlot = true;\n                    sectionStartSlot = Math.min(sectionStartSlot, startSlot);\n                    sectionEndSlot = Math.max(sectionEndSlot, endSlot);\n                    \n                    if (shouldLog) {\n                        console.log(`      ✓ MATCHES! Period occupies slot ${timeSlot}`);\n                    }\n                }\n            }\n            \n            if (sectionOccupiesSlot) {\n                // Check if this is the first slot for this section on this day\n                isFirstSlot = timeSlot === sectionStartSlot;\n                \n                if (shouldLog) {\n                    console.log(`    Course ${selectedCourse.course.department.abbreviation}${selectedCourse.course.number} occupies slot, isFirstSlot: ${isFirstSlot}`);\n                }\n                \n                occupyingSections.push({\n                    course: selectedCourse,\n                    section,\n                    periodsOnThisDay,\n                    startSlot: sectionStartSlot,\n                    endSlot: sectionEndSlot,\n                    isFirstSlot\n                });\n            }\n        }\n        \n        if (occupyingSections.length === 0) {\n            return { content: '', classes: '' };\n        }\n        \n        // Check for conflicts\n        const hasConflict = occupyingSections.length > 1;\n        const primarySection = occupyingSections[0];\n        const courseColor = this.getCourseColor(primarySection.course.course.id);\n        \n        // Calculate how many rows this section should span\n        const rowSpan = primarySection.endSlot - primarySection.startSlot;\n        const heightInPixels = rowSpan * 30; // 30px per row\n        \n        console.log(`Course ${primarySection.course.course.department.abbreviation}${primarySection.course.course.number} should span ${rowSpan} rows (${heightInPixels}px) from slot ${primarySection.startSlot} to ${primarySection.endSlot}`);\n        \n        // Build content for the first section in the slot - simplified to show only course name\n        const content = primarySection.isFirstSlot ? `\n            <div class=\"section-block ${hasConflict ? 'conflict' : ''}\" style=\"\n                background-color: ${courseColor}; \n                height: ${heightInPixels}px;\n                width: 100%;\n                position: absolute;\n                top: 0;\n                left: 0;\n                z-index: 10;\n                border: 1px solid rgba(0,0,0,0.2);\n                border-radius: 3px;\n                box-sizing: border-box;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                text-align: center;\n                font-weight: bold;\n                font-size: 0.8rem;\n                color: white;\n                text-shadow: 1px 1px 1px rgba(0,0,0,0.3);\n                cursor: pointer;\n            \">\n                ${primarySection.course.course.department.abbreviation}${primarySection.course.course.number}\n            </div>\n        ` : ``; // Empty for continuation slots - the spanning block covers them\n        \n        // Only add classes for the first slot (where content actually appears)\n        const classes = primarySection.isFirstSlot ? \n            `occupied section-start ${hasConflict ? 'has-conflict' : ''}` :\n            ''; // No classes for continuation slots - they should be invisible\n        \n        return { content, classes };\n    }\n\n    private formatSectionPeriods(periods: any[]): string {\n        if (periods.length === 0) return '';\n        \n        // Group periods by type and format them\n        const periodsByType: { [type: string]: any[] } = {};\n        \n        for (const period of periods) {\n            const periodType = this.getPeriodTypeLabel(period.type);\n            if (!periodsByType[periodType]) {\n                periodsByType[periodType] = [];\n            }\n            periodsByType[periodType].push(period);\n        }\n        \n        // Create formatted list of periods\n        const periodStrings: string[] = [];\n        \n        // Sort by priority: Lecture, Lab, Discussion, etc.\n        const typeOrder = ['LEC', 'LAB', 'DIS', 'REC', 'SEM', 'STU', 'CONF'];\n        const sortedTypes = Object.keys(periodsByType).sort((a, b) => {\n            const indexA = typeOrder.indexOf(a);\n            const indexB = typeOrder.indexOf(b);\n            const priorityA = indexA === -1 ? 999 : indexA;\n            const priorityB = indexB === -1 ? 999 : indexB;\n            return priorityA - priorityB;\n        });\n        \n        for (const type of sortedTypes) {\n            const periodsOfType = periodsByType[type];\n            const timeRanges = periodsOfType.map(p => \n                TimeUtils.formatTimeRange(p.startTime, p.endTime)\n            ).join(', ');\n            \n            periodStrings.push(`<div class=\"period-type-info\">\n                <span class=\"period-type\">${type}</span>\n                <span class=\"period-times\">${timeRanges}</span>\n            </div>`);\n        }\n        \n        return periodStrings.join('');\n    }\n\n    private getCourseColor(courseId: string): string {\n        // Generate consistent colors for courses\n        const colors = [\n            '#4CAF50', '#2196F3', '#FF9800', '#9C27B0', '#F44336',\n            '#00BCD4', '#795548', '#607D8B', '#3F51B5', '#E91E63'\n        ];\n        \n        let hash = 0;\n        for (let i = 0; i < courseId.length; i++) {\n            hash = courseId.charCodeAt(i) + ((hash << 5) - hash);\n        }\n        \n        return colors[Math.abs(hash) % colors.length];\n    }\n\n    private getPeriodTypeLabel(type: string): string {\n        const lower = type.toLowerCase();\n        \n        if (lower.includes('lec') || lower.includes('lecture')) return 'LEC';\n        if (lower.includes('lab')) return 'LAB';\n        if (lower.includes('dis') || lower.includes('discussion')) return 'DIS';\n        if (lower.includes('rec') || lower.includes('recitation')) return 'REC';\n        if (lower.includes('sem') || lower.includes('seminar')) return 'SEM';\n        if (lower.includes('studio')) return 'STU';\n        if (lower.includes('conference') || lower.includes('conf')) return 'CONF';\n        \n        // Return abbreviated version for unknown types (first 3-4 chars)\n        return type.substring(0, Math.min(4, type.length)).toUpperCase();\n    }\n\n    private getPeriodTypeClass(type: string): string {\n        const lower = type.toLowerCase();\n        \n        if (lower.includes('lec') || lower.includes('lecture')) return 'period-lecture';\n        if (lower.includes('lab')) return 'period-lab';\n        if (lower.includes('dis') || lower.includes('discussion')) return 'period-discussion';\n        if (lower.includes('rec') || lower.includes('recitation')) return 'period-recitation';\n        if (lower.includes('sem') || lower.includes('seminar')) return 'period-seminar';\n        if (lower.includes('studio')) return 'period-studio';\n        if (lower.includes('conference') || lower.includes('conf')) return 'period-conference';\n        \n        return 'period-other';\n    }\n\n    getCourseFromElement(element: HTMLElement): Course | undefined {\n        return this.elementToCourseMap.get(element);\n    }\n\n    private extractTermLetter(termString: string, sectionNumber?: string): string {\n        // Option 1: Section number pattern (primary method - most reliable)\n        // Extract term from section numbers like \"A01\" -> A, \"D01\" -> D\n        if (sectionNumber) {\n            const sectionMatch = sectionNumber.match(/^([ABCD])/i);\n            if (sectionMatch) {\n                return sectionMatch[1].toUpperCase();\n            }\n        }\n        \n        // Option 2: Text format for future compatibility (\"2025 Fall A Term\", \"2026 Spring C Term\")\n        if (termString) {\n            const textMatch = termString.match(/\\b([ABCD])\\s+Term/i);\n            if (textMatch) {\n                return textMatch[1].toUpperCase();\n            }\n        }\n        \n        // Note: Removed incorrect numeric mapping - \"202201\" is academic year code, not term-specific\n        \n        // Ultimate fallback\n        return 'A';\n    }\n\n}","export class UIStateManager {\n    public currentView: 'list' | 'grid' = 'list';\n    public currentPage: 'planner' | 'schedule' = 'planner';\n\n    constructor() {}\n\n    setView(view: 'list' | 'grid'): void {\n        this.currentView = view;\n        \n        // Update button states\n        const viewListBtn = document.getElementById('view-list');\n        const viewGridBtn = document.getElementById('view-grid');\n        \n        if (viewListBtn && viewGridBtn) {\n            if (view === 'list') {\n                viewListBtn.classList.add('btn-primary', 'active');\n                viewListBtn.classList.remove('btn-secondary');\n                viewGridBtn.classList.add('btn-secondary');\n                viewGridBtn.classList.remove('btn-primary', 'active');\n            } else {\n                viewGridBtn.classList.add('btn-primary', 'active');\n                viewGridBtn.classList.remove('btn-secondary');\n                viewListBtn.classList.add('btn-secondary');\n                viewListBtn.classList.remove('btn-primary', 'active');\n            }\n        }\n    }\n\n    togglePage(): void {\n        const nextPage = this.currentPage === 'planner' ? 'schedule' : 'planner';\n        this.switchToPage(nextPage);\n    }\n\n    switchToPage(page: 'planner' | 'schedule'): void {\n        if (page === this.currentPage) return;\n\n        this.currentPage = page;\n\n        // Update button text based on current page\n        const scheduleButton = document.getElementById('schedule-btn');\n        if (scheduleButton) {\n            if (page === 'schedule') {\n                scheduleButton.textContent = 'Back to Classes';\n                this.showSchedulePage();\n            } else {\n                scheduleButton.textContent = 'Schedule';\n                this.showPlannerPage();\n            }\n        }\n    }\n\n    private showPlannerPage(): void {\n        const plannerPage = document.getElementById('planner-page');\n        const schedulePage = document.getElementById('schedule-page');\n\n        if (plannerPage) plannerPage.style.display = 'grid';\n        if (schedulePage) schedulePage.style.display = 'none';\n    }\n\n    private showSchedulePage(): void {\n        const plannerPage = document.getElementById('planner-page');\n        const schedulePage = document.getElementById('schedule-page');\n\n        if (plannerPage) plannerPage.style.display = 'none';\n        if (schedulePage) schedulePage.style.display = 'flex';\n        \n    }\n\n\n    showLoadingState(): void {\n        const departmentList = document.getElementById('department-list');\n        if (departmentList) {\n            departmentList.innerHTML = '<div class=\"loading-message\">Loading departments...</div>';\n        }\n    }\n\n    showErrorMessage(message: string): void {\n        const departmentList = document.getElementById('department-list');\n        if (departmentList) {\n            departmentList.innerHTML = `<div class=\"error-message\">${message}</div>`;\n        }\n        \n        const courseContainer = document.getElementById('course-container');\n        if (courseContainer) {\n            courseContainer.innerHTML = `<div class=\"error-message\">${message}</div>`;\n        }\n    }\n\n    syncHeaderHeights(): void {\n        const sidebarHeader = document.querySelector('.sidebar-header') as HTMLElement;\n        const contentHeader = document.querySelector('.content-header') as HTMLElement;\n        const panelHeaders = document.querySelectorAll('.panel-header') as NodeListOf<HTMLElement>;\n\n        if (!sidebarHeader || !contentHeader || !panelHeaders.length) {\n            return;\n        }\n\n        // Reset heights to natural size to get accurate measurements\n        document.documentElement.style.setProperty('--synced-header-height', 'auto');\n        \n        // Allow layout to settle\n        requestAnimationFrame(() => {\n            // Get natural heights of all headers\n            const sidebarHeight = sidebarHeader.offsetHeight;\n            const contentHeight = contentHeader.offsetHeight;\n            const panelHeights = Array.from(panelHeaders).map(header => header.offsetHeight);\n            \n            // Find the maximum height\n            const maxHeight = Math.max(sidebarHeight, contentHeight, ...panelHeights);\n            \n            // Set the synced height to match the tallest header\n            document.documentElement.style.setProperty('--synced-header-height', `${maxHeight}px`);\n        });\n    }\n\n    setupHeaderResizeObserver(): void {\n        if (!window.ResizeObserver) return;\n\n        const headers = [\n            document.querySelector('.sidebar-header'),\n            document.querySelector('.content-header'),\n            ...document.querySelectorAll('.panel-header')\n        ].filter(Boolean) as HTMLElement[];\n\n        if (!headers.length) return;\n\n        const resizeObserver = new ResizeObserver(() => {\n            this.syncHeaderHeights();\n        });\n\n        headers.forEach(header => {\n            resizeObserver.observe(header);\n        });\n    }\n}","export class TimestampManager {\n    constructor() {}\n\n    updateClientTimestamp(): void {\n        const clientTimestampElement = document.getElementById('client-timestamp');\n        if (clientTimestampElement) {\n            const now = new Date();\n            const options: Intl.DateTimeFormatOptions = {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric',\n                hour: 'numeric',\n                minute: '2-digit',\n                second: '2-digit',\n                hour12: true\n            };\n            const formattedTime = now.toLocaleDateString('en-US', options).replace(',', ' at');\n            clientTimestampElement.textContent = `Client loaded: ${formattedTime}`;\n        }\n    }\n\n    async loadServerTimestamp(): Promise<void> {\n        const serverTimestampElement = document.getElementById('server-timestamp');\n        if (!serverTimestampElement) return;\n\n        try {\n            const response = await fetch('./last-updated.json', {\n                cache: 'no-cache'\n            });\n            \n            if (response.ok) {\n                const timestampData = await response.json();\n                const serverDate = new Date(timestampData.timestamp);\n                const options: Intl.DateTimeFormatOptions = {\n                    month: 'short',\n                    day: 'numeric',\n                    year: 'numeric',\n                    hour: 'numeric',\n                    minute: '2-digit',\n                    second: '2-digit',\n                    hour12: true\n                };\n                const formattedTime = serverDate.toLocaleDateString('en-US', options).replace(',', ' at');\n                serverTimestampElement.textContent = `Server updated: ${formattedTime}`;\n            } else {\n                throw new Error(`Failed to fetch server timestamp: ${response.status}`);\n            }\n        } catch (error) {\n            console.warn('Failed to load server timestamp:', error);\n            serverTimestampElement.textContent = 'Server timestamp unavailable';\n        }\n    }\n}","import { Course, Department } from '../../types/types'\nimport { CourseDataService } from '../../services/courseDataService'\nimport { ThemeSelector } from '../components/ThemeSelector'\nimport { CourseSelectionService } from '../../services/CourseSelectionService'\nimport { ConflictDetector } from '../../core/ConflictDetector'\nimport { DepartmentController } from './DepartmentController'\nimport { CourseController } from './CourseController'\nimport { ScheduleController } from './ScheduleController'\nimport { UIStateManager } from './UIStateManager'\nimport { TimestampManager } from './TimestampManager'\n\nexport class MainController {\n    private courseDataService: CourseDataService;\n    private themeSelector: ThemeSelector;\n    private courseSelectionService: CourseSelectionService;\n    private conflictDetector: ConflictDetector;\n    private departmentController: DepartmentController;\n    private courseController: CourseController;\n    private scheduleController: ScheduleController;\n    private uiStateManager: UIStateManager;\n    private timestampManager: TimestampManager;\n    private allDepartments: Department[] = [];\n\n\n    constructor() {\n        this.courseDataService = new CourseDataService();\n        this.themeSelector = new ThemeSelector();\n        this.courseSelectionService = new CourseSelectionService();\n        this.conflictDetector = new ConflictDetector();\n        this.departmentController = new DepartmentController();\n        this.courseController = new CourseController(this.courseSelectionService);\n        this.scheduleController = new ScheduleController(this.courseSelectionService);\n        this.uiStateManager = new UIStateManager();\n        this.timestampManager = new TimestampManager();\n        \n        // Wire up state preservation for dropdown states\n        this.scheduleController.setStatePreserver({\n            preserve: () => this.preserveDropdownStates(),\n            restore: (states) => this.restoreDropdownStates(states)\n        });\n        \n        // Initialize tracking for course changes\n        const initialSelectedCourses = this.courseSelectionService.getSelectedCourses();\n        this.previousSelectedCoursesCount = initialSelectedCourses.length;\n        this.previousSelectedCoursesMap = new Map();\n        initialSelectedCourses.forEach(sc => {\n            this.previousSelectedCoursesMap.set(sc.course.id, sc.selectedSectionNumber);\n        });\n        \n        this.init();\n    }\n\n    private async init(): Promise<void> {\n        this.uiStateManager.showLoadingState();\n        await this.loadCourseData();\n        this.departmentController.displayDepartments();\n        this.setupEventListeners();\n        this.setupCourseSelectionListener();\n        this.courseController.displaySelectedCourses();\n        \n        \n        this.uiStateManager.syncHeaderHeights();\n        this.uiStateManager.setupHeaderResizeObserver();\n    }\n\n    private async loadCourseData(): Promise<void> {\n        try {\n            console.log('Loading course data...');\n            const scheduleDB = await this.courseDataService.loadCourseData();\n            this.allDepartments = scheduleDB.departments;\n            this.departmentController.setAllDepartments(this.allDepartments);\n            this.courseController.setAllDepartments(this.allDepartments);\n            this.courseSelectionService.setAllDepartments(this.allDepartments);\n            console.log(`Loaded ${this.allDepartments.length} departments`);\n            \n            // IMPORTANT: Reconstruct Section objects after course data is loaded\n            console.log('Reconstructing section objects for persisted selections...');\n            this.courseSelectionService.reconstructSectionObjects();\n            \n            this.timestampManager.updateClientTimestamp();\n            this.timestampManager.loadServerTimestamp();\n        } catch (error) {\n            console.error('Failed to load course data:', error);\n            this.uiStateManager.showErrorMessage('Failed to load course data. Please try refreshing the page.');\n        }\n    }\n\n\n    private setupEventListeners(): void {\n        // Department selection\n        document.addEventListener('click', (e) => {\n            const target = e.target as HTMLElement;\n            \n            \n            if (target.classList.contains('department-item')) {\n                const deptId = target.dataset.deptId;\n                if (deptId) {\n                    const department = this.departmentController.handleDepartmentClick(deptId);\n                    if (department) {\n                        this.courseController.displayCourses(department.courses, this.uiStateManager.currentView);\n                    }\n                }\n            }\n            \n            if (target.classList.contains('section-badge')) {\n                target.classList.toggle('selected');\n            }\n            \n            if (target.classList.contains('course-select-btn')) {\n                const courseElement = target.closest('.course-item, .course-card') as HTMLElement;\n                if (courseElement) {\n                    this.courseController.toggleCourseSelection(courseElement);\n                }\n            }\n\n            if (target.classList.contains('course-remove-btn')) {\n                const course = this.courseController.getCourseFromElement(target as HTMLElement);\n                if (course) {\n                    // Directly remove course (remove button means always unselect)\n                    this.courseSelectionService.unselectCourse(course);\n                }\n            }\n\n            // Handle section-related clicks FIRST (before dropdown logic)\n            if (target.classList.contains('section-select-btn')) {\n                e.stopPropagation();\n                const courseElement = target.closest('.schedule-course-item') as HTMLElement;\n                const sectionNumber = target.dataset.section;\n                \n                if (courseElement && sectionNumber) {\n                    const course = this.scheduleController.getCourseFromElement(courseElement);\n                    if (course) {\n                        this.scheduleController.handleSectionSelection(course, sectionNumber);\n                    }\n                }\n                return;\n            }\n\n            // Prevent dropdown closing for any other section-related clicks\n            if (target.classList.contains('section-option') || target.closest('.section-option') ||\n                target.classList.contains('section-info') || target.closest('.section-info') ||\n                target.classList.contains('section-number') || \n                target.classList.contains('section-schedule') || \n                target.classList.contains('section-professor')) {\n                e.stopPropagation();\n                e.preventDefault();\n                return;\n            }\n\n            if (target.classList.contains('dropdown-trigger') || target.closest('.dropdown-trigger')) {\n                const triggerElement = target.classList.contains('dropdown-trigger') \n                    ? target \n                    : target.closest('.dropdown-trigger') as HTMLElement;\n                    \n                if (triggerElement) {\n                    // Only trigger dropdown if clicking on course header area (not section-related elements)\n                    const shouldToggle = !target.classList.contains('course-remove-btn') && \n                        !target.classList.contains('section-select-btn') &&\n                        !target.classList.contains('section-number') && \n                        !target.classList.contains('section-schedule') && \n                        !target.classList.contains('section-professor') &&\n                        !target.closest('.section-option') &&\n                        !target.closest('.section-info') &&\n                        !target.closest('.schedule-sections-container');\n                        \n                    if (shouldToggle) {\n                        this.toggleCourseDropdown(triggerElement);\n                    }\n                }\n            }\n\n\n            if (target.closest('.course-item, .course-card') && !target.classList.contains('course-select-btn') && !target.classList.contains('section-badge')) {\n                const courseElement = target.closest('.course-item, .course-card') as HTMLElement;\n                if (courseElement) {\n                    this.courseController.selectCourse(courseElement);\n                }\n            }\n        });\n\n        // Search functionality\n        const searchInput = document.getElementById('search-input') as HTMLInputElement;\n        if (searchInput) {\n            searchInput.addEventListener('input', () => {\n                const filteredCourses = this.courseController.handleSearch(searchInput.value, this.departmentController.getSelectedDepartment());\n                this.courseController.displayCourses(filteredCourses, this.uiStateManager.currentView);\n            });\n        }\n\n        // Clear selection\n        const clearButton = document.getElementById('clear-selection');\n        if (clearButton) {\n            clearButton.addEventListener('click', () => {\n                this.clearSelection();\n            });\n        }\n\n        // Schedule navigation\n        const scheduleButton = document.getElementById('schedule-btn');\n        if (scheduleButton) {\n            scheduleButton.addEventListener('click', () => {\n                this.uiStateManager.togglePage();\n                if (this.uiStateManager.currentPage === 'schedule') {\n                    // Log selected section data for debugging  \n                    const selectedCourses = this.courseSelectionService.getSelectedCourses();\n                    console.log('=== SCHEDULE PAGE LOADED ===');\n                    console.log(`Found ${selectedCourses.length} selected courses with sections:`);\n                    \n                    selectedCourses.forEach(sc => {\n                        const hasSection = sc.selectedSection !== null;\n                        console.log(`${sc.course.department.abbreviation}${sc.course.number}: section ${sc.selectedSectionNumber} ${hasSection ? '✓' : '✗'}`);\n                        if (hasSection && sc.selectedSection) {\n                            console.log(`  Term: ${sc.selectedSection.term}, Periods: ${sc.selectedSection.periods.length}`);\n                            console.log(`  Full section object:`, sc.selectedSection);\n                            \n                            // Log each period in detail\n                            sc.selectedSection.periods.forEach((period, idx) => {\n                                console.log(`    Period ${idx + 1}:`, {\n                                    type: period.type,\n                                    professor: period.professor,\n                                    startTime: period.startTime,\n                                    endTime: period.endTime,\n                                    days: Array.from(period.days),\n                                    location: period.location,\n                                    building: period.building,\n                                    room: period.room\n                                });\n                                \n                                // Calculate and log time slots for debugging\n                                const startSlot = Math.floor(((period.startTime.hours * 60 + period.startTime.minutes) - (7 * 60)) / 10);\n                                const endSlot = Math.floor(((period.endTime.hours * 60 + period.endTime.minutes) - (7 * 60)) / 10);\n                                const duration = endSlot - startSlot;\n                                console.log(`      Time slots: ${startSlot} to ${endSlot} (span ${duration} rows)`);\n                            });\n                        }\n                    });\n                    console.log('=== END SCHEDULE SECTION DATA ===\\n');\n                    \n                    this.scheduleController.displayScheduleSelectedCourses();\n                    this.scheduleController.renderScheduleGrids();\n                }\n            });\n        }\n\n        // View toggle buttons\n        const viewListBtn = document.getElementById('view-list');\n        const viewGridBtn = document.getElementById('view-grid');\n        \n        if (viewListBtn) {\n            viewListBtn.addEventListener('click', () => {\n                this.uiStateManager.setView('list');\n                this.refreshCurrentView();\n            });\n        }\n        \n        if (viewGridBtn) {\n            viewGridBtn.addEventListener('click', () => {\n                this.uiStateManager.setView('grid');\n                this.refreshCurrentView();\n            });\n        }\n    }\n\n    private refreshCurrentView(): void {\n        const selectedDepartment = this.departmentController.getSelectedDepartment();\n        if (selectedDepartment) {\n            this.courseController.displayCourses(selectedDepartment.courses, this.uiStateManager.currentView);\n        } else {\n            // Check if we're showing search results\n            const searchInput = document.getElementById('search-input') as HTMLInputElement;\n            if (searchInput?.value.trim()) {\n                const filteredCourses = this.courseController.handleSearch(searchInput.value, null);\n                this.courseController.displayCourses(filteredCourses, this.uiStateManager.currentView);\n            }\n        }\n    }\n\n\n\n    private clearSelection(): void {\n        // Clear selected sections\n        document.querySelectorAll('.section-badge.selected').forEach(badge => {\n            badge.classList.remove('selected');\n        });\n\n        // Clear search\n        const searchInput = document.getElementById('search-input') as HTMLInputElement;\n        if (searchInput) {\n            searchInput.value = '';\n        }\n\n        // Reset to default state\n        const courseContainer = document.getElementById('course-container');\n        if (courseContainer) {\n            courseContainer.innerHTML = '<div class=\"loading-message\">Select a department to view courses...</div>';\n        }\n\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            contentHeader.textContent = 'Course Listings';\n        }\n\n        this.departmentController.clearDepartmentSelection();\n        this.courseController.clearCourseSelection();\n        this.courseController.displaySelectedCourses();\n    }\n\n\n\n\n\n\n    private previousSelectedCoursesCount = 0;\n    private previousSelectedCoursesMap = new Map<string, string | null>();\n\n    private setupCourseSelectionListener(): void {\n        this.courseSelectionService.onSelectionChange((selectedCourses) => {\n            const currentCount = selectedCourses.length;\n            const isCoursesAddedOrRemoved = currentCount !== this.previousSelectedCoursesCount;\n            \n            // Create current state map for comparison\n            const currentCoursesMap = new Map<string, string | null>();\n            selectedCourses.forEach(sc => {\n                currentCoursesMap.set(sc.course.id, sc.selectedSectionNumber);\n            });\n            \n            // Always update main course UI\n            this.courseController.refreshCourseSelectionUI();\n            this.courseController.displaySelectedCourses();\n            \n            if (isCoursesAddedOrRemoved) {\n                // Full refresh needed when courses are added/removed\n                this.scheduleController.displayScheduleSelectedCourses();\n            } else {\n                // Check if only section selections changed\n                let sectionSelectionsChanged = false;\n                for (const [courseId, selectedSection] of currentCoursesMap) {\n                    const previousSection = this.previousSelectedCoursesMap.get(courseId);\n                    if (previousSection !== selectedSection) {\n                        sectionSelectionsChanged = true;\n                        \n                        // Update visual state for this course\n                        const selectedCourse = selectedCourses.find(sc => sc.course.id === courseId);\n                        if (selectedCourse) {\n                            this.scheduleController.updateSectionButtonStates(selectedCourse.course, selectedSection);\n                        }\n                    }\n                }\n                \n                // Update schedule grids if any sections changed\n                if (sectionSelectionsChanged && this.uiStateManager.currentPage === 'schedule') {\n                    this.scheduleController.renderScheduleGrids();\n                }\n            }\n            \n            // Update tracking state\n            this.previousSelectedCoursesCount = currentCount;\n            this.previousSelectedCoursesMap = new Map(currentCoursesMap);\n        });\n    }\n\n\n    // Public methods for easy access to selected courses\n    public getSelectedCourses() {\n        return this.courseSelectionService.getSelectedCourses();\n    }\n\n    public getSelectedCoursesCount(): number {\n        return this.courseSelectionService.getSelectedCoursesCount();\n    }\n\n    public getCourseSelectionService(): CourseSelectionService {\n        return this.courseSelectionService;\n    }\n\n    private toggleCourseDropdown(triggerElement: HTMLElement): void {\n        const courseItem = triggerElement.closest('.schedule-course-item');\n        if (!courseItem) return;\n\n        const isCollapsed = courseItem.classList.contains('collapsed');\n        \n        if (isCollapsed) {\n            // Expand\n            courseItem.classList.remove('collapsed');\n            courseItem.classList.add('expanded');\n        } else {\n            // Collapse\n            courseItem.classList.remove('expanded');\n            courseItem.classList.add('collapsed');\n        }\n    }\n\n    private preserveDropdownStates(): Map<string, boolean> {\n        const states = new Map<string, boolean>();\n        document.querySelectorAll('.schedule-course-item').forEach(item => {\n            const course = this.scheduleController.getCourseFromElement(item as HTMLElement);\n            if (course) {\n                const isExpanded = item.classList.contains('expanded');\n                states.set(course.id, isExpanded);\n            }\n        });\n        return states;\n    }\n\n    private restoreDropdownStates(states: Map<string, boolean>): void {\n        document.querySelectorAll('.schedule-course-item').forEach(item => {\n            const course = this.scheduleController.getCourseFromElement(item as HTMLElement);\n            if (course && states.has(course.id)) {\n                const wasExpanded = states.get(course.id);\n                if (wasExpanded) {\n                    item.classList.remove('collapsed');\n                    item.classList.add('expanded');\n                } else {\n                    item.classList.remove('expanded');\n                    item.classList.add('collapsed');\n                }\n            }\n        });\n    }\n\n\n\n\n\n}","import './style.css'\nimport { MainController } from './ui/controllers/MainController'\n\n// Initialize the application\nnew MainController()"],"names":["DayOfWeek","_CourseDataService","freshData","error","response","jsonData","scheduleDB","departments","deptData","department","courseData","sections","sectionData","periods","periodData","timeStr","match","hours","minutes","displayHours","ampm","displayTime","days","daySet","day","maDept","dept","ma1024","course","section","period","idx","html","cached","cacheData","parsedData","cacheAge","maxAge","query","allCourses","queryLower","CourseDataService","ThemeManager","wpiClassic","wpiDark","wpiLight","highContrast","savedTheme","theme","themeId","oldTheme","newTheme","themeDefinition","event","root","key","value","str","preferredTheme","listener","themeJson","_StorageManager","state","serializedState","stored","schedule","schedules","existingIndex","s","serializedSchedules","scheduleId","filtered","preferences","serializedPreferences","exportData","data","operation","errorMessage","fallback","selectedCourses","serializedCourses","StorageManager","ThemeSelector","availableThemes","currentThemeId","isActive","option","currentTheme","selectedThemeId","selectedOption","CourseManager","isRequired","selectedCourse","sectionNumber","sectionObject","courses","deptAbbreviation","reconstructedCount","failedCount","Validators","p","time","timeRange","sc","input","courseId","email","CourseSelectionService","courseManager","storageManager","persistedCourses","c","ConflictType","ConflictDetector","conflicts","i","j","cacheKey","sectionConflicts","section1","section2","period1","period2","conflict","sharedDays","days1","days2","start1","end1","start2","end2","key1","key2","DepartmentController","deptId","d","contentHeader","departmentList","categories","categoryName","courseCount","category","a","b","item","clickedElement","CourseController","courseSelectionService","currentView","courseContainer","sortedCourses","hasWarning","isSelected","element","index","credits","selectedDepartment","filteredCourses","allElements","wasSelected","selectBtn","descriptionContainer","selectedCoursesContainer","countElement","deptCompare","button","_TimeUtils","totalMinutes","startMinutes","relativeMinutes","slot","boundedSlot","startTime","endTime","startRow","endRow","hours12","startFormatted","endFormatted","dayAbbreviations","labels","hour","TimeUtils","ScheduleController","statePreserver","dropdownStates","sectionsByTerm","term","selectedClass","sortedPeriods","typePriority","type","lower","periodTypeLabel","courseElements","removeButtons","courseItem","courseIndex","selectedSection","itemCourse","sectionButtons","sectionOptions","grids","gridContainer","termCourses","sectionTermLetter","matchesTerm","tc","coursesWithoutSections","container","hasCoursesWithoutSections","message","weekdays","timeSlots","timeLabel","cell","timeSlot","occupyingSections","shouldLog","minute","periodsOnThisDay","sectionOccupiesSlot","sectionStartSlot","sectionEndSlot","isFirstSlot","startSlot","endSlot","hasConflict","primarySection","courseColor","rowSpan","heightInPixels","content","classes","periodsByType","periodType","periodStrings","typeOrder","sortedTypes","indexA","indexB","timeRanges","colors","hash","termString","sectionMatch","textMatch","UIStateManager","view","viewListBtn","viewGridBtn","nextPage","page","scheduleButton","plannerPage","schedulePage","sidebarHeader","panelHeaders","sidebarHeight","contentHeight","panelHeights","header","maxHeight","headers","resizeObserver","TimestampManager","clientTimestampElement","now","options","formattedTime","serverTimestampElement","timestampData","serverDate","MainController","states","initialSelectedCourses","e","target","courseElement","triggerElement","searchInput","clearButton","hasSection","duration","badge","currentCount","isCoursesAddedOrRemoved","currentCoursesMap","sectionSelectionsChanged","isExpanded"],"mappings":"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"}