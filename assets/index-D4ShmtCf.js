(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))s(r);new MutationObserver(r=>{for(const i of r)if(i.type==="childList")for(const a of i.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&s(a)}).observe(document,{childList:!0,subtree:!0});function t(r){const i={};return r.integrity&&(i.integrity=r.integrity),r.referrerPolicy&&(i.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?i.credentials="include":r.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(r){if(r.ep)return;r.ep=!0;const i=t(r);fetch(r.href,i)}})();var o=(h=>(h.MONDAY="mon",h.TUESDAY="tue",h.WEDNESDAY="wed",h.THURSDAY="thu",h.FRIDAY="fri",h.SATURDAY="sat",h.SUNDAY="sun",h))(o||{});const S=class S{constructor(){this.scheduleDB=null}async loadCourseData(){try{console.log("Loading course data...");const e=await this.fetchFreshData();return this.scheduleDB=e,e}catch(e){throw console.error("Failed to load course data:",e),new Error("No course data available")}}async fetchFreshData(){console.log("Fetching course data from local static file...");const e=await fetch(S.WPI_COURSE_DATA_URL,{method:"GET",headers:{Accept:"application/json"},cache:"no-cache"});if(!e.ok)throw new Error(`Failed to fetch course data: ${e.status} ${e.statusText}`);const t=await e.json();return this.parseJSONData(t)}parseJSONData(e){console.log("Parsing JSON data...");const t={departments:[],generated:new Date().toISOString()};if(!e.Report_Entry||!Array.isArray(e.Report_Entry))throw console.error("Invalid JSON data structure:",e),new Error("Invalid JSON data structure");console.log(`Processing ${e.Report_Entry.length} course entries...`);const s=new Map;let r=0;for(const i of e.Report_Entry)try{this.processJSONEntry(i,s),r++}catch(a){console.warn("Failed to process entry:",i,a)}return t.departments=Array.from(s.values()),console.log(`Successfully processed ${r}/${e.Report_Entry.length} entries`),console.log(`Loaded ${t.departments.length} departments with course data`),t}processJSONEntry(e,t){const r=(e.Course_Title||"").match(/^([A-Z]+)\s+(\d+)\s*-\s*(.+)$/);if(!r)return;const[,i,a,n]=r,c=e.Academic_Units||e.Subject||i;let l=t.get(i);l||(l={abbreviation:i,name:c,courses:[]},t.set(i,l));const b=`${i}-${a}`;let m=l.courses.find(E=>E.id===b);m||(m={id:b,number:a,name:n,description:this.stripHtml(e.Course_Description||""),department:l,sections:[],minCredits:parseFloat(e.Credits||"3"),maxCredits:parseFloat(e.Credits||"3")},l.courses.push(m));const g=e.Course_Section?.match(/([A-Z]+\s+\d+)-([A-Z0-9]+)/),C=g?g[2]:"",[v,p]=(e.Enrolled_Capacity||"0/0").split("/").map(E=>parseInt(E)||0),[T,w]=(e.Waitlist_Waitlist_Capacity||"0/0").split("/").map(E=>parseInt(E)||0),$={crn:0,number:C,seats:p,seatsAvailable:p-v,actualWaitlist:T,maxWaitlist:w,note:e.Section_Status==="Waitlist"?"Waitlist Available":void 0,description:this.stripHtml(e.Course_Section_Description||""),term:e.Offering_Period||"",periods:[]};if(e.Meeting_Patterns&&e.Locations&&e.Instructors){const E={type:e.Instructional_Format||"Lecture",professor:e.Instructors||"",professorEmail:void 0,startTime:this.parseTimeFromPattern(e.Meeting_Patterns,!0),endTime:this.parseTimeFromPattern(e.Meeting_Patterns,!1),building:this.extractBuilding(e.Locations),room:this.extractRoom(e.Locations),location:e.Locations,seats:p,seatsAvailable:p-v,actualWaitlist:T,maxWaitlist:w,days:this.parseDaysFromPattern(e.Meeting_Day_Patterns||""),specificSection:C};$.periods.push(E)}m.sections.push($)}stripHtml(e){return e.replace(/<[^>]*>/g,"").replace(/&[^;]+;/g," ").trim()}extractBuilding(e){const t=e.match(/^([^0-9]+)/);return t?t[1].trim():""}extractRoom(e){const t=e.match(/([0-9]+[A-Z]*)$/);return t?t[1]:""}parseTimeFromPattern(e,t){const s=e.match(/(\d{1,2}:\d{2}\s*[AP]M)\s*-\s*(\d{1,2}:\d{2}\s*[AP]M)/);if(!s)return{hours:0,minutes:0,displayTime:"TBD"};const r=t?s[1]:s[2];return this.parseTime(r)}parseDaysFromPattern(e){const t=new Set,s={M:o.MONDAY,T:o.TUESDAY,W:o.WEDNESDAY,R:o.THURSDAY,F:o.FRIDAY,S:o.SATURDAY,U:o.SUNDAY};for(const r of e.replace(/-/g,""))s[r]&&t.add(s[r]);return t}parseTime(e){if(!e||e==="?")return{hours:0,minutes:0,displayTime:"TBD"};const t=e.match(/(\d{1,2}):(\d{2})(AM|PM)/i);if(!t)return{hours:0,minutes:0,displayTime:e};let s=parseInt(t[1]);const r=parseInt(t[2]),i=t[3].toUpperCase();return i==="PM"&&s!==12?s+=12:i==="AM"&&s===12&&(s=0),{hours:s,minutes:r,displayTime:e}}parseDays(e){if(!e||e==="?")return[];const t={mon:o.MONDAY,tue:o.TUESDAY,wed:o.WEDNESDAY,thu:o.THURSDAY,fri:o.FRIDAY,sat:o.SATURDAY,sun:o.SUNDAY};return e.split(",").map(s=>t[s.trim().toLowerCase()]).filter(Boolean)}getCachedData(){try{const e=localStorage.getItem(S.LOCAL_STORAGE_KEY);return e?JSON.parse(e).scheduleDB:null}catch(e){return console.warn("Failed to parse cached course data:",e),null}}cacheData(e){try{const t={scheduleDB:e,timestamp:Date.now()};localStorage.setItem(S.LOCAL_STORAGE_KEY,JSON.stringify(t)),console.log("Course data cached successfully")}catch(t){console.warn("Failed to cache course data:",t)}}isCacheExpired(){try{const e=localStorage.getItem(S.LOCAL_STORAGE_KEY);if(!e)return!0;const t=JSON.parse(e),s=Date.now()-t.timestamp,r=S.CACHE_EXPIRY_HOURS*60*60*1e3;return s>r}catch{return!0}}getScheduleDB(){return this.scheduleDB}searchCourses(e,t){if(!this.scheduleDB)return[];const s=[];for(const i of this.scheduleDB.departments)t&&t.length>0&&!t.includes(i.abbreviation.toLowerCase())||s.push(...i.courses);if(!e.trim())return s;const r=e.toLowerCase();return s.filter(i=>i.name.toLowerCase().includes(r)||i.number.toLowerCase().includes(r)||i.id.toLowerCase().includes(r)||i.department.abbreviation.toLowerCase().includes(r))}getAllDepartments(){return this.scheduleDB?.departments||[]}};S.WPI_COURSE_DATA_URL="./course-data.json",S.LOCAL_STORAGE_KEY="wpi-course-data",S.CACHE_EXPIRY_HOURS=1;let L=S;const O="WPI Classic",M="wpi-classic",x="Traditional WPI colors and styling",I={primary:"#ac2b37",primaryHover:"#8e2329",primaryLight:"#d4424f",secondary:"#f5f5f7",secondaryHover:"#e5e5e7",background:"#f5f5f7",backgroundAlt:"#ffffff",surface:"#ffffff",surfaceHover:"#fbfbfd",text:"#1d1d1f",textSecondary:"#86868b",textInverse:"#ffffff",border:"#e5e5e7",borderHover:"#d2d2d7",success:"#30d158",warning:"#ff9500",error:"#d32f2f",info:"#007aff"},H={fontFamily:"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",fontFamilyMono:"'SF Mono', Monaco, 'Cascadia Code', monospace"},P={baseUnit:"1rem",headerHeight:"64px",sidebarWidth:"280px",rightPanelWidth:"320px"},B={borderRadius:"6px",borderRadiusLarge:"8px",shadow:"0 1px 3px rgba(0,0,0,0.1)",shadowHover:"0 2px 8px rgba(172, 43, 55, 0.1)",transition:"all 0.2s ease"},F={name:O,id:M,description:x,colors:I,typography:H,spacing:P,effects:B},U="WPI Dark",N="wpi-dark",Y="Dark mode theme with WPI accent colors",W={primary:"#d4424f",primaryHover:"#ac2b37",primaryLight:"#e85a66",secondary:"#2c2c2e",secondaryHover:"#3a3a3c",background:"#1c1c1e",backgroundAlt:"#2c2c2e",surface:"#2c2c2e",surfaceHover:"#3a3a3c",text:"#ffffff",textSecondary:"#98989d",textInverse:"#1d1d1f",border:"#3a3a3c",borderHover:"#48484a",success:"#30d158",warning:"#ff9f0a",error:"#ff453a",info:"#64d2ff"},_={fontFamily:"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",fontFamilyMono:"'SF Mono', Monaco, 'Cascadia Code', monospace"},k={baseUnit:"1rem",headerHeight:"64px",sidebarWidth:"280px",rightPanelWidth:"320px"},G={borderRadius:"6px",borderRadiusLarge:"8px",shadow:"0 2px 8px rgba(0,0,0,0.3)",shadowHover:"0 4px 16px rgba(212, 66, 79, 0.2)",transition:"all 0.2s ease"},z={name:U,id:N,description:Y,colors:W,typography:_,spacing:k,effects:G},J="WPI Light",K="wpi-light",q="Clean light theme with softer WPI colors",V={primary:"#b8394a",primaryHover:"#9c2f3d",primaryLight:"#d4556b",secondary:"#f8f8fa",secondaryHover:"#ededef",background:"#ffffff",backgroundAlt:"#f8f8fa",surface:"#ffffff",surfaceHover:"#f8f8fa",text:"#2c2c2e",textSecondary:"#6d6d70",textInverse:"#ffffff",border:"#d1d1d6",borderHover:"#c7c7cc",success:"#28a745",warning:"#fd7e14",error:"#dc3545",info:"#17a2b8"},Z={fontFamily:"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",fontFamilyMono:"'SF Mono', Monaco, 'Cascadia Code', monospace"},X={baseUnit:"1rem",headerHeight:"64px",sidebarWidth:"280px",rightPanelWidth:"320px"},Q={borderRadius:"8px",borderRadiusLarge:"12px",shadow:"0 1px 4px rgba(0,0,0,0.08)",shadowHover:"0 3px 12px rgba(184, 57, 74, 0.15)",transition:"all 0.2s ease"},j={name:J,id:K,description:q,colors:V,typography:Z,spacing:X,effects:Q},ee="High Contrast",te="high-contrast",se="Accessibility-focused high contrast theme",re={primary:"#000000",primaryHover:"#333333",primaryLight:"#666666",secondary:"#ffffff",secondaryHover:"#f0f0f0",background:"#ffffff",backgroundAlt:"#f8f8f8",surface:"#ffffff",surfaceHover:"#f0f0f0",text:"#000000",textSecondary:"#444444",textInverse:"#ffffff",border:"#000000",borderHover:"#333333",success:"#006600",warning:"#cc6600",error:"#cc0000",info:"#0066cc"},ie={fontFamily:"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",fontFamilyMono:"'SF Mono', Monaco, 'Cascadia Code', monospace"},ne={baseUnit:"1rem",headerHeight:"64px",sidebarWidth:"280px",rightPanelWidth:"320px"},oe={borderRadius:"2px",borderRadiusLarge:"4px",shadow:"0 0 0 2px #000000",shadowHover:"0 0 0 3px #000000",transition:"all 0.1s ease"},ae={name:ee,id:te,description:se,colors:re,typography:ie,spacing:ne,effects:oe};class y{constructor(){this.currentTheme="wpi-classic",this.themes=new Map,this.listeners=new Set,this.storageKey="wpi-planner-theme",this.initializeThemes(),this.loadSavedTheme()}static getInstance(){return y.instance||(y.instance=new y),y.instance}initializeThemes(){this.registerTheme(F),this.registerTheme(z),this.registerTheme(j),this.registerTheme(ae)}loadSavedTheme(){try{const e=localStorage.getItem(this.storageKey);e&&this.themes.has(e)&&(this.currentTheme=e)}catch(e){console.warn("Failed to load saved theme preference:",e)}this.applyTheme(this.currentTheme)}registerTheme(e){if(!this.isValidTheme(e)){console.error("Invalid theme definition:",e);return}this.themes.set(e.id,e)}isValidTheme(e){return e&&typeof e.name=="string"&&typeof e.id=="string"&&typeof e.description=="string"&&e.colors&&e.typography&&e.spacing&&e.effects}getAvailableThemes(){return Array.from(this.themes.values())}getCurrentTheme(){return this.themes.get(this.currentTheme)||null}getCurrentThemeId(){return this.currentTheme}setTheme(e){if(!this.themes.has(e))return console.error(`Theme '${e}' not found`),!1;const t=this.currentTheme,s=e,r=this.themes.get(e);this.currentTheme=e,this.applyTheme(e),this.saveThemePreference(e);const i={oldTheme:t,newTheme:s,themeDefinition:r};return this.notifyListeners(i),!0}applyTheme(e){const t=this.themes.get(e);if(!t)return;const s=document.documentElement;Object.entries(t.colors).forEach(([r,i])=>{s.style.setProperty(`--color-${this.kebabCase(r)}`,i)}),Object.entries(t.typography).forEach(([r,i])=>{s.style.setProperty(`--font-${this.kebabCase(r)}`,i)}),Object.entries(t.spacing).forEach(([r,i])=>{s.style.setProperty(`--spacing-${this.kebabCase(r)}`,i)}),Object.entries(t.effects).forEach(([r,i])=>{s.style.setProperty(`--effect-${this.kebabCase(r)}`,i)}),document.body.className=document.body.className.replace(/theme-[\w-]+/g,"").trim(),document.body.classList.add(`theme-${e}`)}kebabCase(e){return e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}saveThemePreference(e){try{localStorage.setItem(this.storageKey,e)}catch(t){console.warn("Failed to save theme preference:",t)}}detectSystemPreference(){if(typeof window<"u"&&window.matchMedia){if(window.matchMedia("(prefers-color-scheme: dark)").matches)return"wpi-dark";if(window.matchMedia("(prefers-contrast: high)").matches)return"high-contrast"}return"wpi-classic"}useSystemPreference(){const e=this.detectSystemPreference();return this.setTheme(e)}onThemeChange(e){this.listeners.add(e)}offThemeChange(e){this.listeners.delete(e)}notifyListeners(e){this.listeners.forEach(t=>{try{t(e)}catch(s){console.error("Error in theme change listener:",s)}})}previewTheme(e){return this.themes.has(e)?(this.applyTheme(e),!0):!1}resetToCurrentTheme(){this.applyTheme(this.currentTheme)}exportCurrentTheme(){const e=this.getCurrentTheme();if(!e)throw new Error("No current theme to export");return JSON.stringify(e,null,2)}importTheme(e){try{const t=JSON.parse(e);return this.isValidTheme(t)?(this.registerTheme(t),!0):!1}catch(t){return console.error("Failed to import theme:",t),!1}}getThemeById(e){return this.themes.get(e)||null}hasTheme(e){return this.themes.has(e)}removeTheme(e){return["wpi-classic","wpi-dark","wpi-light","high-contrast"].includes(e)?(console.warn(`Cannot remove built-in theme: ${e}`),!1):(this.currentTheme===e&&this.setTheme("wpi-classic"),this.themes.delete(e))}}const u=class u{saveUserState(e){try{const t=this.serializeWithSets(e);localStorage.setItem(u.STORAGE_KEYS.USER_STATE,JSON.stringify(t))}catch(t){console.warn("Failed to save user state:",t)}}loadUserState(){try{const e=localStorage.getItem(u.STORAGE_KEYS.USER_STATE);if(!e)return null;const t=JSON.parse(e);return this.deserializeWithSets(t)}catch(e){return console.warn("Failed to load user state:",e),null}}saveSchedule(e){try{const t=this.loadAllSchedules(),s=t.findIndex(i=>i.id===e.id);s>=0?t[s]=e:t.push(e);const r=this.serializeWithSets(t);localStorage.setItem(u.STORAGE_KEYS.SCHEDULES,JSON.stringify(r))}catch(t){console.warn("Failed to save schedule:",t)}}loadSchedule(e){try{return this.loadAllSchedules().find(s=>s.id===e)||null}catch(t){return console.warn("Failed to load schedule:",t),null}}loadAllSchedules(){try{const e=localStorage.getItem(u.STORAGE_KEYS.SCHEDULES);if(!e)return[];const t=JSON.parse(e);return this.deserializeWithSets(t)}catch(e){return console.warn("Failed to load schedules:",e),[]}}deleteSchedule(e){try{const s=this.loadAllSchedules().filter(r=>r.id!==e);localStorage.setItem(u.STORAGE_KEYS.SCHEDULES,JSON.stringify(s))}catch(t){console.warn("Failed to delete schedule:",t)}}savePreferences(e){try{const t=this.serializeWithSets(e);localStorage.setItem(u.STORAGE_KEYS.PREFERENCES,JSON.stringify(t))}catch(t){console.warn("Failed to save preferences:",t)}}loadPreferences(){try{const e=localStorage.getItem(u.STORAGE_KEYS.PREFERENCES);if(!e)return this.getDefaultPreferences();const t=JSON.parse(e);return this.deserializeWithSets(t)}catch(e){return console.warn("Failed to load preferences:",e),this.getDefaultPreferences()}}getDefaultPreferences(){return{preferredTimeRange:{startTime:{hours:8,minutes:0},endTime:{hours:18,minutes:0}},preferredDays:new Set(["mon","tue","wed","thu","fri"]),avoidBackToBackClasses:!1,maxDailyHours:8,preferredBuildings:[],theme:"wpi-classic"}}clearAllData(){try{Object.values(u.STORAGE_KEYS).forEach(e=>{localStorage.removeItem(e)})}catch(e){console.warn("Failed to clear storage:",e)}}exportData(){const e=this.loadUserState(),t=this.loadAllSchedules(),s=this.loadPreferences(),r={version:"1.0",timestamp:new Date().toISOString(),state:e,schedules:t,preferences:s};return JSON.stringify(r,null,2)}importData(e){try{const t=JSON.parse(e);return t.state&&this.saveUserState(t.state),t.preferences&&this.savePreferences(t.preferences),t.schedules&&t.schedules.forEach(s=>{this.saveSchedule(s)}),!0}catch(t){return console.error("Failed to import data:",t),!1}}serializeWithSets(e){if(e==null)return e;if(e instanceof Set)return{__type:"Set",value:Array.from(e)};if(Array.isArray(e))return e.map(t=>this.serializeWithSets(t));if(typeof e=="object"){const t={};for(const s in e)e.hasOwnProperty(s)&&(t[s]=this.serializeWithSets(e[s]));return t}return e}deserializeWithSets(e){if(e==null)return e;if(typeof e=="object"&&e.__type==="Set")return new Set(e.value);if(Array.isArray(e))return e.map(t=>this.deserializeWithSets(t));if(typeof e=="object"){const t={};for(const s in e)e.hasOwnProperty(s)&&(t[s]=this.deserializeWithSets(e[s]));return t}return e}saveThemePreference(e){try{localStorage.setItem(u.STORAGE_KEYS.THEME,e)}catch(t){console.warn("Failed to save theme preference:",t)}}loadThemePreference(){try{return localStorage.getItem(u.STORAGE_KEYS.THEME)||"wpi-classic"}catch(e){return console.warn("Failed to load theme preference:",e),"wpi-classic"}}saveSelectedCourses(e){try{const t=this.serializeWithSets(e);localStorage.setItem(u.STORAGE_KEYS.SELECTED_COURSES,JSON.stringify(t))}catch(t){console.warn("Failed to save selected courses:",t)}}loadSelectedCourses(){try{const e=localStorage.getItem(u.STORAGE_KEYS.SELECTED_COURSES);if(!e)return[];const t=JSON.parse(e);return this.deserializeWithSets(t)}catch(e){return console.warn("Failed to load selected courses:",e),[]}}clearSelectedCourses(){try{localStorage.removeItem(u.STORAGE_KEYS.SELECTED_COURSES)}catch(e){console.warn("Failed to clear selected courses:",e)}}};u.STORAGE_KEYS={USER_STATE:"wpi-planner-user-state",PREFERENCES:"wpi-planner-preferences",SCHEDULES:"wpi-planner-schedules",SELECTED_COURSES:"wpi-planner-selected-courses",THEME:"wpi-planner-theme"};let A=u;class ce{constructor(){this.dropdownElement=null,this.optionsElement=null,this.currentThemeNameElement=null,this.isOpen=!1,this.themeManager=y.getInstance(),this.storageManager=new A,this.init()}init(){this.setupElements(),this.loadSavedTheme(),this.setupEventListeners(),this.renderThemeOptions()}setupElements(){this.dropdownElement=document.getElementById("theme-dropdown"),this.optionsElement=document.getElementById("theme-options"),this.currentThemeNameElement=document.getElementById("current-theme-name")}loadSavedTheme(){const e=this.storageManager.loadThemePreference();this.themeManager.setTheme(e),this.updateCurrentThemeDisplay()}setupEventListeners(){!this.dropdownElement||!this.optionsElement||(this.dropdownElement.addEventListener("click",e=>{e.stopPropagation(),this.toggleDropdown()}),document.addEventListener("click",()=>{this.closeDropdown()}),this.optionsElement.addEventListener("click",e=>{e.stopPropagation()}))}toggleDropdown(){this.isOpen?this.closeDropdown():this.openDropdown()}openDropdown(){!this.dropdownElement||!this.optionsElement||(this.isOpen=!0,this.dropdownElement.classList.add("open"),this.optionsElement.classList.add("show"))}closeDropdown(){!this.dropdownElement||!this.optionsElement||(this.isOpen=!1,this.dropdownElement.classList.remove("open"),this.optionsElement.classList.remove("show"))}renderThemeOptions(){if(!this.optionsElement)return;const e=this.themeManager.getAvailableThemes(),t=this.themeManager.getCurrentThemeId();let s="";e.forEach(r=>{const i=r.id===t;s+=`
                <div class="theme-option ${i?"active":""}" data-theme-id="${r.id}">
                    <div class="theme-option-name">${r.name}</div>
                    <div class="theme-option-description">${r.description}</div>
                </div>
            `}),this.optionsElement.innerHTML=s,this.optionsElement.querySelectorAll(".theme-option").forEach(r=>{r.addEventListener("click",()=>{const i=r.dataset.themeId;i&&this.selectTheme(i)})})}selectTheme(e){this.themeManager.setTheme(e)&&(this.storageManager.saveThemePreference(e),this.updateCurrentThemeDisplay(),this.updateActiveOption(e),this.closeDropdown())}updateCurrentThemeDisplay(){if(!this.currentThemeNameElement)return;const e=this.themeManager.getCurrentTheme();e&&(this.currentThemeNameElement.textContent=e.name)}updateActiveOption(e){if(!this.optionsElement)return;this.optionsElement.querySelectorAll(".theme-option").forEach(s=>{s.classList.remove("active")});const t=this.optionsElement.querySelector(`[data-theme-id="${e}"]`);t&&t.classList.add("active")}refresh(){this.renderThemeOptions(),this.updateCurrentThemeDisplay()}setTheme(e){this.selectTheme(e)}}const f=class f{constructor(){this.timestampElement=null,this.refreshButton=null,this.refreshTextElement=null,this.init()}init(){this.timestampElement=document.getElementById("data-timestamp"),this.refreshButton=document.getElementById("refresh-data"),this.refreshTextElement=document.getElementById("refresh-text"),this.setupEventListeners(),this.updateTimestamp(),this.updateRefreshButton(),setInterval(()=>{this.updateRefreshButton()},6e4)}setupEventListeners(){this.refreshButton&&this.refreshButton.addEventListener("click",()=>{this.handleRefresh()})}async updateTimestamp(){if(this.timestampElement)try{const t=(await fetch(f.COURSE_DATA_URL,{method:"HEAD",cache:"no-cache"})).headers.get("Last-Modified");if(t){const s=new Date(t);this.timestampElement.textContent=`Data last updated: ${this.formatTimestamp(s)}`}else{const s=new Date("2025-08-22T23:32:46-04:00");this.timestampElement.textContent=`Data last updated: ${this.formatTimestamp(s)}`}}catch(e){console.warn("Failed to get data timestamp:",e),this.timestampElement.textContent="Data timestamp unavailable"}}formatTimestamp(e){const t={month:"short",day:"numeric",year:"numeric",hour:"numeric",minute:"2-digit",hour12:!0};return e.toLocaleDateString("en-US",t).replace(","," at")}updateRefreshButton(){if(!this.refreshButton||!this.refreshTextElement)return;const e=this.getLastRefreshTime(),s=Date.now()-e;if(s<f.REFRESH_COOLDOWN_MS){this.refreshButton.disabled=!0;const r=f.REFRESH_COOLDOWN_MS-s,i=Math.ceil(r/(60*1e3));this.refreshTextElement.textContent=`Wait ${i}m`}else this.refreshButton.disabled=!1,this.refreshTextElement.textContent="Refresh"}async handleRefresh(){if(!(!this.refreshButton||this.refreshButton.disabled))try{this.refreshButton.classList.add("loading"),this.refreshButton.disabled=!0,this.refreshTextElement&&(this.refreshTextElement.textContent="Refreshing..."),await new Promise(e=>setTimeout(e,1500)),this.setLastRefreshTime(Date.now()),await this.updateTimestamp(),this.triggerDataReload(),this.showSuccess("Data refreshed successfully!")}catch(e){console.error("Failed to refresh data:",e),this.showError("Failed to refresh data. Please try again later.")}finally{this.refreshButton.classList.remove("loading"),this.updateRefreshButton()}}triggerDataReload(){window.dispatchEvent(new CustomEvent("data-refreshed"))}showSuccess(e){this.refreshTextElement?.textContent,this.refreshTextElement&&(this.refreshTextElement.textContent="✓ Success",setTimeout(()=>{this.refreshTextElement&&(this.refreshTextElement.textContent="Refresh")},2e3))}showError(e){this.refreshTextElement?.textContent,this.refreshTextElement&&(this.refreshTextElement.textContent="✗ Failed",setTimeout(()=>{this.refreshTextElement&&(this.refreshTextElement.textContent="Refresh")},2e3))}getLastRefreshTime(){try{const e=localStorage.getItem(f.LAST_REFRESH_KEY);return e?parseInt(e,10):0}catch{return 0}}setLastRefreshTime(e){try{localStorage.setItem(f.LAST_REFRESH_KEY,e.toString())}catch(t){console.warn("Failed to save refresh timestamp:",t)}}canRefresh(){const e=this.getLastRefreshTime();return Date.now()-e>=f.REFRESH_COOLDOWN_MS}async forceRefresh(){this.refreshButton&&(this.refreshButton.disabled=!1,await this.handleRefresh())}};f.REFRESH_COOLDOWN_MS=15*60*1e3,f.LAST_REFRESH_KEY="wpi-planner-last-refresh",f.COURSE_DATA_URL="./course-data.json";let R=f;class le{constructor(){this.selectedCourses=new Map,this.listeners=new Set}addCourse(e,t=!1){const s={course:e,selectedSection:null,preferredSections:[],deniedSections:[],isRequired:t};this.selectedCourses.set(e.id,s),this.notifyListeners()}removeCourse(e){this.selectedCourses.delete(e),this.notifyListeners()}updateSectionPreference(e,t,s){const r=this.selectedCourses.get(e);if(r){if(s==="preferred"){r.preferredSections.includes(t)||r.preferredSections.push(t);const i=r.deniedSections.indexOf(t);i>-1&&r.deniedSections.splice(i,1)}else{r.deniedSections.includes(t)||r.deniedSections.push(t);const i=r.preferredSections.indexOf(t);i>-1&&r.preferredSections.splice(i,1)}this.notifyListeners()}}getSelectedCourses(){return Array.from(this.selectedCourses.values())}getSelectedCourse(e){return this.selectedCourses.get(e)}isSelected(e){return this.selectedCourses.has(e)}getAvailableSections(e){const t=this.selectedCourses.get(e);return t?t.course.sections.filter(s=>!t.deniedSections.includes(s.number)):[]}clearAll(){this.selectedCourses.clear(),this.notifyListeners()}onSelectionChange(e){this.listeners.add(e)}offSelectionChange(e){this.listeners.delete(e)}setSelectedSection(e,t){const s=this.selectedCourses.get(e);s&&(s.selectedSection=t,this.notifyListeners())}getSelectedSection(e){return this.selectedCourses.get(e)?.selectedSection||null}getSelectedCoursesWithSections(){return this.getSelectedCourses()}loadSelectedCourses(e){this.selectedCourses.clear(),e.forEach(t=>{this.selectedCourses.set(t.course.id,t)}),this.notifyListeners()}notifyListeners(){const e=this.getSelectedCourses();this.listeners.forEach(t=>t(e))}}class de{constructor(){this.courseManager=new le,this.storageManager=new A,this.loadPersistedSelections(),this.setupPersistenceListener()}selectCourse(e,t=!1){this.courseManager.addCourse(e,t),this.persistSelections()}unselectCourse(e){this.courseManager.removeCourse(e),this.persistSelections()}toggleCourseSelection(e,t=!1){return this.isCourseSelected(e.id)?(this.unselectCourse(e.id),!1):(this.selectCourse(e,t),!0)}setSelectedSection(e,t){this.courseManager.setSelectedSection(e,t),this.persistSelections()}getSelectedSection(e){return this.courseManager.getSelectedSection(e)}setSectionPreference(e,t,s){this.courseManager.updateSectionPreference(e,t,s),this.persistSelections()}isCourseSelected(e){return this.courseManager.isSelected(e)}getSelectedCourses(){return this.courseManager.getSelectedCoursesWithSections()}getSelectedCourse(e){return this.courseManager.getSelectedCourse(e)}clearAllSelections(){this.courseManager.clearAll(),this.storageManager.clearSelectedCourses()}getSelectedCoursesCount(){return this.getSelectedCourses().length}getSelectedCourseIds(){return this.getSelectedCourses().map(e=>e.course.id)}onSelectionChange(e){this.courseManager.onSelectionChange(e)}offSelectionChange(e){this.courseManager.offSelectionChange(e)}loadPersistedSelections(){const e=this.storageManager.loadSelectedCourses();e.length>0&&this.courseManager.loadSelectedCourses(e)}setupPersistenceListener(){this.courseManager.onSelectionChange(e=>{this.storageManager.saveSelectedCourses(e)})}persistSelections(){const e=this.getSelectedCourses();this.storageManager.saveSelectedCourses(e)}exportSelections(){const e=this.getSelectedCourses();return JSON.stringify({version:"1.0",timestamp:new Date().toISOString(),selectedCourses:e},null,2)}importSelections(e){try{const t=JSON.parse(e);return t.selectedCourses&&Array.isArray(t.selectedCourses)?(this.courseManager.loadSelectedCourses(t.selectedCourses),!0):!1}catch(t){return console.error("Failed to import selections:",t),!1}}}const d=class d{static timeToGridRow(e){const t=e.hours*60+e.minutes,s=d.START_HOUR*60,r=t-s,i=Math.floor(r/30);return Math.max(0,Math.min(i,d.TOTAL_TIME_SLOTS-1))}static dayToGridColumn(e){return d.DAYS_ORDER.indexOf(e)}static calculateDuration(e,t){const s=d.timeToGridRow(e),r=d.timeToGridRow(t);return Math.max(1,r-s)}static isTimeInBounds(e){return e.hours>=d.START_HOUR&&e.hours<d.END_HOUR}static formatTime(e){if(e.displayTime)return e.displayTime;const t=e.hours===0?12:e.hours>12?e.hours-12:e.hours,s=e.hours>=12?"PM":"AM",r=e.minutes.toString().padStart(2,"0");return`${t}:${r} ${s}`}static formatTimeRange(e,t){const s=d.formatTime(e),r=d.formatTime(t);return e.hours<12&&t.hours<12?`${s.replace(" AM","")}-${r}`:e.hours>=12&&t.hours>=12?`${s.replace(" PM","")}-${r}`:`${s}-${r}`}static formatDays(e){const t={[o.MONDAY]:"M",[o.TUESDAY]:"T",[o.WEDNESDAY]:"W",[o.THURSDAY]:"R",[o.FRIDAY]:"F",[o.SATURDAY]:"S",[o.SUNDAY]:"U"};return d.DAYS_ORDER.filter(s=>e.has(s)).map(s=>t[s]).join("")}static generateTimeLabels(){const e=[];for(let t=d.START_HOUR;t<d.END_HOUR;t++)e.push(d.formatTime({hours:t,minutes:0,displayTime:""})),e.push(d.formatTime({hours:t,minutes:30,displayTime:""}));return e}static getDayName(e){return{[o.MONDAY]:"Monday",[o.TUESDAY]:"Tuesday",[o.WEDNESDAY]:"Wednesday",[o.THURSDAY]:"Thursday",[o.FRIDAY]:"Friday",[o.SATURDAY]:"Saturday",[o.SUNDAY]:"Sunday"}[e]}static getDayAbbr(e){return{[o.MONDAY]:"Mon",[o.TUESDAY]:"Tue",[o.WEDNESDAY]:"Wed",[o.THURSDAY]:"Thu",[o.FRIDAY]:"Fri",[o.SATURDAY]:"Sat",[o.SUNDAY]:"Sun"}[e]}};d.START_HOUR=7,d.END_HOUR=19,d.TOTAL_HOURS=12,d.SLOTS_PER_HOUR=2,d.TOTAL_TIME_SLOTS=d.TOTAL_HOURS*d.SLOTS_PER_HOUR,d.DAYS_ORDER=[o.MONDAY,o.TUESDAY,o.WEDNESDAY,o.THURSDAY,o.FRIDAY,o.SATURDAY,o.SUNDAY];let D=d;class ue{constructor(){this.allDepartments=[],this.selectedDepartment=null,this.selectedCourse=null,this.currentView="list",this.currentPage="planner",this.departmentCategories={BB:"Science",BCB:"Science",CH:"Science",CS:"Science",DS:"Science",GE:"Science",IMGD:"Science",MA:"Science",MTE:"Science",PTE:"Science",NE:"Science",PH:"Science",AE:"Engineering",AR:"Engineering",ARE:"Engineering",BME:"Engineering",CE:"Engineering",CHE:"Engineering",ECE:"Engineering",ES:"Engineering",FP:"Engineering",ME:"Engineering",MFE:"Engineering",MSE:"Engineering",NUE:"Engineering",RBE:"Engineering",SYE:"Engineering",BUS:"Business & Management",ECON:"Business & Management",MIS:"Business & Management",OIE:"Business & Management",EN:"Humanities & Arts",HI:"Humanities & Arts",HU:"Humanities & Arts",MU:"Humanities & Arts",RE:"Humanities & Arts",SP:"Humanities & Arts",TH:"Humanities & Arts",WR:"Humanities & Arts",GOV:"Social Sciences",PSY:"Social Sciences",SOC:"Social Sciences",SS:"Social Sciences"},this.courseDataService=new L,this.themeSelector=new ce,this.dataRefreshService=new R,this.courseSelectionService=new de,this.init()}async init(){this.showLoadingState(),await this.loadCourseData(),this.displayDepartments(),this.setupEventListeners(),this.setupDataRefreshListener(),this.setupCourseSelectionListener(),this.displaySelectedCourses(),this.syncHeaderHeights(),this.setupHeaderResizeObserver()}async loadCourseData(){try{console.log("Loading course data...");const e=await this.courseDataService.loadCourseData();this.allDepartments=e.departments,console.log(`Loaded ${this.allDepartments.length} departments`)}catch(e){console.error("Failed to load course data:",e),this.showErrorMessage("Failed to load course data. Please try refreshing the page.")}}displayDepartments(){const e=document.getElementById("department-list");if(!e)return;const t=this.groupDepartmentsByCategory();let s="";Object.entries(t).forEach(([r,i])=>{i.length!==0&&(s+=`
                <div class="department-category">
                    <div class="category-header">${r}</div>
                    <div class="department-list">
            `,i.forEach(a=>{const n=a.courses.length;s+=`
                    <div class="department-item" data-dept-id="${a.abbreviation}">
                        ${a.name} (${n})
                    </div>
                `}),s+=`
                    </div>
                </div>
            `)}),e.innerHTML=s}groupDepartmentsByCategory(){const e={Science:[],Engineering:[],"Business & Management":[],"Humanities & Arts":[],"Social Sciences":[],Other:[]};return this.allDepartments.forEach(t=>{const s=this.departmentCategories[t.abbreviation]||"Other";e[s].push(t)}),Object.keys(e).forEach(t=>{e[t].sort((s,r)=>s.name.localeCompare(r.name))}),e}setupEventListeners(){document.addEventListener("click",a=>{const n=a.target;if(n.classList.contains("department-item")){const c=n.dataset.deptId;c&&(this.selectDepartment(c),document.querySelectorAll(".department-item").forEach(l=>{l.classList.remove("active")}),n.classList.add("active"))}if(n.classList.contains("section-badge")&&n.classList.toggle("selected"),n.classList.contains("course-select-btn")){const c=n.dataset.courseId;c&&this.toggleCourseSelection(c)}if(n.classList.contains("course-remove-btn")){const c=n.dataset.courseId;c&&this.courseSelectionService.unselectCourse(c)}if(n.classList.contains("section-select-btn")){const c=n.dataset.courseId,l=n.dataset.section;c&&l&&this.handleSectionSelection(c,l)}if(n.closest(".course-item")&&!n.classList.contains("course-select-btn")&&!n.classList.contains("section-badge")){const l=n.closest(".course-item").dataset.courseId;l&&this.selectCourse(l)}});const e=document.getElementById("search-input");e&&e.addEventListener("input",()=>{this.handleSearch(e.value)});const t=document.getElementById("clear-selection");t&&t.addEventListener("click",()=>{this.clearSelection()});const s=document.getElementById("schedule-btn");s&&s.addEventListener("click",()=>{this.togglePage()});const r=document.getElementById("view-list"),i=document.getElementById("view-grid");r&&r.addEventListener("click",()=>{this.setView("list")}),i&&i.addEventListener("click",()=>{this.setView("grid")})}selectDepartment(e){const t=this.allDepartments.find(r=>r.abbreviation===e);if(!t)return;this.selectedDepartment=t,this.displayCourses(t.courses);const s=document.querySelector(".content-header h2");s&&(s.textContent=`${t.name} Courses`)}displayCourses(e){this.currentView==="grid"?this.displayCoursesGrid(e):this.displayCoursesList(e)}displayCoursesList(e){const t=document.getElementById("course-container");if(!t)return;if(e.length===0){t.innerHTML='<div class="empty-state">No courses found in this department.</div>';return}const s=e.sort((i,a)=>i.number.localeCompare(a.number));let r='<div class="course-list">';s.forEach(i=>{const a=this.courseHasWarning(i),n=i.sections.map(l=>l.number).filter(Boolean),c=this.courseSelectionService.isCourseSelected(i.id);r+=`
                <div class="course-item ${c?"selected":""}" data-course-id="${i.id}">
                    <div class="course-header">
                        <button class="course-select-btn ${c?"selected":""}" data-course-id="${i.id}" title="${c?"Remove from selection":"Add to selection"}">
                            ${c?"✓":"+"}
                        </button>
                        <div class="course-code">${i.department.abbreviation}${i.number}</div>
                        <div class="course-details">
                            <div class="course-name">
                                ${i.name}
                                ${a?'<span class="warning-icon">⚠</span>':""}
                            </div>
                            <div class="course-sections">
                                ${n.map(l=>`<span class="section-badge" data-section="${l}">${l}</span>`).join("")}
                            </div>
                        </div>
                    </div>
                </div>
            `}),r+="</div>",t.innerHTML=r}displayCoursesGrid(e){const t=document.getElementById("course-container");if(!t)return;if(e.length===0){t.innerHTML='<div class="empty-state">No courses found in this department.</div>';return}const s=e.sort((i,a)=>i.number.localeCompare(a.number));let r='<div class="course-grid">';s.forEach(i=>{const a=this.courseHasWarning(i),n=this.courseSelectionService.isCourseSelected(i.id),c=i.minCredits===i.maxCredits?i.minCredits:`${i.minCredits}-${i.maxCredits}`;r+=`
                <div class="course-card ${n?"selected":""}" data-course-id="${i.id}">
                    <div class="course-card-header">
                        <div class="course-code">${i.department.abbreviation}${i.number}</div>
                        <button class="course-select-btn ${n?"selected":""}" data-course-id="${i.id}" title="${n?"Remove from selection":"Add to selection"}">
                            ${n?"✓":"+"}
                        </button>
                    </div>
                    <div class="course-title">
                        ${i.name}
                        ${a?'<span class="warning-icon">⚠</span>':""}
                    </div>
                    <div class="course-info">
                        <span class="course-credits">${c} credits</span>
                        <span class="course-sections-count">${i.sections.length} section${i.sections.length!==1?"s":""}</span>
                    </div>
                </div>
            `}),r+="</div>",t.innerHTML=r}courseHasWarning(e){return Math.random()>.7}handleSearch(e){if(!e.trim()){this.selectedDepartment&&this.displayCourses(this.selectedDepartment.courses);return}const t=[];this.allDepartments.forEach(i=>{t.push(...i.courses)});const s=t.filter(i=>i.name.toLowerCase().includes(e.toLowerCase())||i.number.toLowerCase().includes(e.toLowerCase())||i.id.toLowerCase().includes(e.toLowerCase()));this.displayCourses(s);const r=document.querySelector(".content-header h2");r&&(r.textContent=`Search Results (${s.length})`)}clearSelection(){document.querySelectorAll(".section-badge.selected").forEach(r=>{r.classList.remove("selected")});const e=document.getElementById("search-input");e&&(e.value="");const t=document.getElementById("course-container");t&&(t.innerHTML='<div class="loading-message">Select a department to view courses...</div>');const s=document.querySelector(".content-header h2");s&&(s.textContent="Course Listings"),document.querySelectorAll(".department-item").forEach(r=>{r.classList.remove("active")}),this.selectedDepartment=null,this.selectedCourse=null,this.clearCourseDescription(),this.displaySelectedCourses()}selectCourse(e){let t=null;for(const r of this.allDepartments)if(t=r.courses.find(i=>i.id===e)||null,t)break;if(!t)return;this.selectedCourse=t,this.displayCourseDescription(t),document.querySelectorAll(".course-item").forEach(r=>{r.classList.remove("active")});const s=document.querySelector(`[data-course-id="${e}"]`);s&&s.classList.add("active")}displayCourseDescription(e){const t=document.getElementById("course-description");if(!t)return;const s=`
            <div class="course-info">
                <div class="course-title">${e.name}</div>
                <div class="course-code">${e.department.abbreviation}${e.number} (${e.minCredits===e.maxCredits?e.minCredits:`${e.minCredits}-${e.maxCredits}`} credits)</div>
            </div>
            <div class="course-description-text">${e.description}</div>
        `;t.innerHTML=s}clearCourseDescription(){const e=document.getElementById("course-description");e&&(e.innerHTML='<div class="empty-state">Select a course to view description</div>')}displaySelectedCourses(){const e=document.getElementById("selected-courses-list"),t=document.getElementById("selected-count");if(!e||!t)return;const s=this.courseSelectionService.getSelectedCourses();if(t.textContent=`(${s.length})`,s.length===0){e.innerHTML='<div class="empty-state">No courses selected yet</div>';return}const r=s.sort((a,n)=>{const c=a.course.department.abbreviation.localeCompare(n.course.department.abbreviation);return c!==0?c:a.course.number.localeCompare(n.course.number)});let i="";r.forEach(a=>{const n=a.course,c=n.minCredits===n.maxCredits?`${n.minCredits} credits`:`${n.minCredits}-${n.maxCredits} credits`;i+=`
                <div class="selected-course-item" data-course-id="${n.id}">
                    <div class="selected-course-info">
                        <div class="selected-course-code">${n.department.abbreviation}${n.number}</div>
                        <div class="selected-course-name">${n.name}</div>
                        <div class="selected-course-credits">${c}</div>
                    </div>
                    <button class="course-remove-btn" data-course-id="${n.id}" title="Remove from selection">
                        ×
                    </button>
                </div>
            `}),e.innerHTML=i}displayScheduleSelectedCourses(){const e=document.getElementById("schedule-selected-courses"),t=document.getElementById("schedule-selected-count");if(!e||!t)return;const s=this.courseSelectionService.getSelectedCourses();if(t.textContent=`(${s.length})`,s.length===0){e.innerHTML='<div class="empty-state">No courses selected yet</div>';return}const r=s.sort((a,n)=>{const c=a.course.department.abbreviation.localeCompare(n.course.department.abbreviation);return c!==0?c:a.course.number.localeCompare(n.course.number)});let i="";r.forEach(a=>{const n=a.course,c=n.minCredits===n.maxCredits?`${n.minCredits} credits`:`${n.minCredits}-${n.maxCredits} credits`,l={};n.sections.forEach(m=>{l[m.term]||(l[m.term]=[]),l[m.term].push(m)}),i+=`
                <div class="schedule-course-item" data-course-id="${n.id}">
                    <div class="schedule-course-header">
                        <div class="schedule-course-info">
                            <div class="schedule-course-code">${n.department.abbreviation}${n.number}</div>
                            <div class="schedule-course-name">${n.name}</div>
                            <div class="schedule-course-credits">${c}</div>
                        </div>
                        <button class="course-remove-btn" data-course-id="${n.id}" title="Remove from selection">
                            ×
                        </button>
                    </div>
                    <div class="schedule-sections-container">
            `,Object.keys(l).sort().forEach(m=>{i+=`<div class="term-sections" data-term="${m}">`,i+=`<div class="term-label">${m} Term</div>`,l[m].forEach(g=>{const C=a.selectedSection===g.number,v=C?"selected":"",p=g.periods[0];if(p){const T=D.formatTimeRange(p.startTime,p.endTime),w=D.formatDays(p.days);i+=`
                            <div class="section-option ${v}" data-course-id="${n.id}" data-section="${g.number}">
                                <div class="section-info">
                                    <div class="section-number">${g.number}</div>
                                    <div class="section-schedule">${w} ${T}</div>
                                    <div class="section-professor">${p.professor}</div>
                                </div>
                                <button class="section-select-btn ${v}" data-course-id="${n.id}" data-section="${g.number}">
                                    ${C?"✓":"+"}
                                </button>
                            </div>
                        `}}),i+="</div>"}),i+=`
                    </div>
                </div>
            `}),e.innerHTML=i}handleSectionSelection(e,t){this.courseSelectionService.getSelectedSection(e)===t?this.courseSelectionService.setSelectedSection(e,null):this.courseSelectionService.setSelectedSection(e,t),this.currentPage==="schedule"&&this.renderScheduleGrids()}toggleCourseSelection(e){let t=null;for(const r of this.allDepartments)if(t=r.courses.find(i=>i.id===e)||null,t)break;if(!t)return;const s=this.courseSelectionService.toggleCourseSelection(t);this.updateCourseSelectionUI(e,s)}updateCourseSelectionUI(e,t){const s=document.querySelector(`[data-course-id="${e}"]`),r=s?.querySelector(".course-select-btn");s&&r&&(t?(s.classList.add("selected"),r.textContent="✓",r.classList.add("selected")):(s.classList.remove("selected"),r.textContent="+",r.classList.remove("selected")))}setupCourseSelectionListener(){this.courseSelectionService.onSelectionChange(e=>{console.log(`Selected courses updated: ${e.length} courses selected`),this.refreshCourseSelectionUI(),this.displaySelectedCourses(),this.displayScheduleSelectedCourses()})}refreshCourseSelectionUI(){document.querySelectorAll(".course-item").forEach(e=>{const t=e.dataset.courseId;if(t){const s=this.courseSelectionService.isCourseSelected(t);this.updateCourseSelectionUI(t,s)}})}setupDataRefreshListener(){window.addEventListener("data-refreshed",async()=>{if(console.log("Data refresh detected, reloading course data..."),this.showLoadingState(),await this.loadCourseData(),this.displayDepartments(),this.selectedDepartment){const e=this.allDepartments.find(t=>t.abbreviation===this.selectedDepartment.abbreviation);e&&(this.selectedDepartment=e,this.displayCourses(e.courses))}})}showLoadingState(){const e=document.getElementById("department-list");e&&(e.innerHTML='<div class="loading-message">Loading departments...</div>')}showErrorMessage(e){const t=document.getElementById("department-list");t&&(t.innerHTML=`<div class="error-message">${e}</div>`);const s=document.getElementById("course-container");s&&(s.innerHTML=`<div class="error-message">${e}</div>`)}getSelectedCourses(){return this.courseSelectionService.getSelectedCourses()}getSelectedCoursesCount(){return this.courseSelectionService.getSelectedCoursesCount()}getCourseSelectionService(){return this.courseSelectionService}setView(e){this.currentView=e;const t=document.getElementById("view-list"),s=document.getElementById("view-grid");if(t&&s&&(e==="list"?(t.classList.add("btn-primary","active"),t.classList.remove("btn-secondary"),s.classList.add("btn-secondary"),s.classList.remove("btn-primary","active")):(s.classList.add("btn-primary","active"),s.classList.remove("btn-secondary"),t.classList.add("btn-secondary"),t.classList.remove("btn-primary","active"))),this.selectedDepartment)this.displayCourses(this.selectedDepartment.courses);else{const r=document.getElementById("search-input");r?.value.trim()&&this.handleSearch(r.value)}}syncHeaderHeights(){const e=document.querySelector(".sidebar-header"),t=document.querySelector(".content-header"),s=document.querySelectorAll(".panel-header");!e||!t||!s.length||(document.documentElement.style.setProperty("--synced-header-height","auto"),requestAnimationFrame(()=>{const r=e.offsetHeight,i=t.offsetHeight,a=Array.from(s).map(c=>c.offsetHeight),n=Math.max(r,i,...a);document.documentElement.style.setProperty("--synced-header-height",`${n}px`)}))}setupHeaderResizeObserver(){if(!window.ResizeObserver)return;const e=[document.querySelector(".sidebar-header"),document.querySelector(".content-header"),...document.querySelectorAll(".panel-header")].filter(Boolean);if(!e.length)return;const t=new ResizeObserver(()=>{this.syncHeaderHeights()});e.forEach(s=>{t.observe(s)})}togglePage(){const e=this.currentPage==="planner"?"schedule":"planner";this.switchToPage(e)}switchToPage(e){if(e===this.currentPage)return;this.currentPage=e;const t=document.getElementById("schedule-btn");t&&(e==="schedule"?(t.textContent="Back to Classes",this.showSchedulePage()):(t.textContent="Schedule",this.showPlannerPage()))}showPlannerPage(){const e=document.getElementById("planner-page"),t=document.getElementById("schedule-page");e&&(e.style.display="grid"),t&&(t.style.display="none")}showSchedulePage(){const e=document.getElementById("planner-page"),t=document.getElementById("schedule-page");e&&(e.style.display="none"),t&&(t.style.display="flex"),this.displayScheduleSelectedCourses()}}new ue;
//# sourceMappingURL=index-D4ShmtCf.js.map
