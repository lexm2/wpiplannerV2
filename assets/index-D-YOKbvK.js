(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))a(e);new MutationObserver(e=>{for(const r of e)if(r.type==="childList")for(const i of r.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&a(i)}).observe(document,{childList:!0,subtree:!0});function s(e){const r={};return e.integrity&&(r.integrity=e.integrity),e.referrerPolicy&&(r.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?r.credentials="include":e.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function a(e){if(e.ep)return;e.ep=!0;const r=s(e);fetch(e.href,r)}})();var c=(o=>(o.MONDAY="mon",o.TUESDAY="tue",o.WEDNESDAY="wed",o.THURSDAY="thu",o.FRIDAY="fri",o.SATURDAY="sat",o.SUNDAY="sun",o))(c||{});const n=class n{constructor(){this.scheduleDB=null}async loadCourseData(){try{const t=this.getCachedData();if(t&&!this.isCacheExpired())return this.scheduleDB=t,t;const s=await this.fetchFreshData();return this.cacheData(s),this.scheduleDB=s,s}catch(t){console.warn("Failed to load fresh course data, falling back to cached data:",t);const s=this.getCachedData();if(s)return this.scheduleDB=s,s;throw new Error("No course data available")}}async fetchFreshData(){console.log("Fetching fresh course data from GitHub Pages...");const t=await fetch(n.WPI_COURSE_DATA_URL,{method:"GET",headers:{Accept:"application/xml, text/xml"},cache:"no-cache"});if(!t.ok)throw new Error(`Failed to fetch course data: ${t.status} ${t.statusText}`);const s=await t.text();return this.parseXMLData(s)}parseXMLData(t){const a=new DOMParser().parseFromString(t,"text/xml"),e={departments:[],generated:""},r=a.getElementsByTagName("schedb");r.length>0&&(e.generated=r[0].getAttribute("generated")||"");const i=a.getElementsByTagName("dept");for(let u=0;u<i.length;u++){const d=i[u],h=this.parseDepartment(d);e.departments.push(h)}return console.log(`Loaded ${e.departments.length} departments with course data`),e}parseDepartment(t){const s={abbreviation:t.getAttribute("abbrev")||"",name:t.getAttribute("name")||"",courses:[]},a=t.getElementsByTagName("course");for(let e=0;e<a.length;e++){const r=a[e],i=this.parseCourse(r,s);s.courses.push(i)}return s}parseCourse(t,s){const a={id:`${s.abbreviation}-${t.getAttribute("number")}`,number:t.getAttribute("number")||"",name:t.getAttribute("name")||"",description:t.getAttribute("course_desc")||"",department:s,sections:[],minCredits:parseFloat(t.getAttribute("min-credits")||"3"),maxCredits:parseFloat(t.getAttribute("max-credits")||"3")},e=t.getElementsByTagName("section");for(let r=0;r<e.length;r++){const i=e[r],u=this.parseSection(i);a.sections.push(u)}return a}parseSection(t){const s={crn:parseInt(t.getAttribute("crn")||"0"),number:t.getAttribute("number")||"",seats:parseInt(t.getAttribute("seats")||"0"),seatsAvailable:parseInt(t.getAttribute("availableseats")||"0"),actualWaitlist:parseInt(t.getAttribute("actual_waitlist")||"0"),maxWaitlist:parseInt(t.getAttribute("max_waitlist")||"0"),note:t.getAttribute("note")||void 0,description:t.getAttribute("sec_desc")||"",term:t.getAttribute("part-of-term")||"",periods:[]},a=t.getElementsByTagName("period");for(let e=0;e<a.length;e++){const r=a[e],i=this.parsePeriod(r);s.periods.push(i)}return s}parsePeriod(t){const s=t.getAttribute("building")||"",a=t.getAttribute("room")||"";return{type:t.getAttribute("type")||"",professor:t.getAttribute("professor")||"",professorEmail:t.getAttribute("professor_email")||void 0,startTime:this.parseTime(t.getAttribute("starts")||""),endTime:this.parseTime(t.getAttribute("ends")||""),building:s,room:a,location:`${s} ${a}`.trim(),seats:parseInt(t.getAttribute("seats")||"0"),seatsAvailable:parseInt(t.getAttribute("availableseats")||"0"),actualWaitlist:parseInt(t.getAttribute("actual_waitlist")||"0"),maxWaitlist:parseInt(t.getAttribute("max_waitlist")||"0"),days:this.parseDays(t.getAttribute("days")||""),specificSection:t.getAttribute("section")||void 0}}parseTime(t){if(!t||t==="?")return{hours:0,minutes:0,displayTime:"TBD"};const s=t.match(/(\d{1,2}):(\d{2})(AM|PM)/i);if(!s)return{hours:0,minutes:0,displayTime:t};let a=parseInt(s[1]);const e=parseInt(s[2]),r=s[3].toUpperCase();return r==="PM"&&a!==12?a+=12:r==="AM"&&a===12&&(a=0),{hours:a,minutes:e,displayTime:t}}parseDays(t){if(!t||t==="?")return[];const s={mon:c.MONDAY,tue:c.TUESDAY,wed:c.WEDNESDAY,thu:c.THURSDAY,fri:c.FRIDAY,sat:c.SATURDAY,sun:c.SUNDAY};return t.split(",").map(a=>s[a.trim().toLowerCase()]).filter(Boolean)}getCachedData(){try{const t=localStorage.getItem(n.LOCAL_STORAGE_KEY);return t?JSON.parse(t).scheduleDB:null}catch(t){return console.warn("Failed to parse cached course data:",t),null}}cacheData(t){try{const s={scheduleDB:t,timestamp:Date.now()};localStorage.setItem(n.LOCAL_STORAGE_KEY,JSON.stringify(s)),console.log("Course data cached successfully")}catch(s){console.warn("Failed to cache course data:",s)}}isCacheExpired(){try{const t=localStorage.getItem(n.LOCAL_STORAGE_KEY);if(!t)return!0;const s=JSON.parse(t),a=Date.now()-s.timestamp,e=n.CACHE_EXPIRY_HOURS*60*60*1e3;return a>e}catch{return!0}}getScheduleDB(){return this.scheduleDB}searchCourses(t,s){if(!this.scheduleDB)return[];const a=[];for(const r of this.scheduleDB.departments)s&&s.length>0&&!s.includes(r.abbreviation.toLowerCase())||a.push(...r.courses);if(!t.trim())return a;const e=t.toLowerCase();return a.filter(r=>r.name.toLowerCase().includes(e)||r.number.toLowerCase().includes(e)||r.id.toLowerCase().includes(e)||r.department.abbreviation.toLowerCase().includes(e))}getAllDepartments(){return this.scheduleDB?.departments||[]}};n.WPI_COURSE_DATA_URL="https://planner.wpi.edu/new.schedb",n.LOCAL_STORAGE_KEY="wpi-course-data",n.CACHE_EXPIRY_HOURS=1;let l=n;class p{constructor(){this.courses=[],this.courseDataService=new l,this.init()}async init(){this.showLoadingState(),await this.loadCourseData(),this.displayCourseData()}async loadCourseData(){try{const t=await this.courseDataService.loadCourseData();for(const s of t.departments)this.courses.push(...s.courses);console.log(`Loaded ${this.courses.length} courses from ${t.departments.length} departments`)}catch(t){console.error("Failed to load course data:",t),this.showErrorMessage("Failed to load course data. Please try refreshing the page.")}}displayCourseData(){const t=document.getElementById("app");if(!t)return;let s=`
            <h1>WPI Course Data</h1>
            <p>Loaded ${this.courses.length} courses</p>
            <div class="course-stats">
                <h2>Departments:</h2>
                <ul>`;const a=new Map;this.courses.forEach(e=>{const r=e.department.abbreviation;a.set(r,(a.get(r)||0)+1)}),Array.from(a.entries()).sort(([e],[r])=>e.localeCompare(r)).forEach(([e,r])=>{s+=`<li>${e}: ${r} courses</li>`}),s+=`
                </ul>
            </div>
            <div class="sample-courses">
                <h2>Sample Courses:</h2>
                <ul>`,this.courses.slice(0,10).forEach(e=>{const r=e.minCredits===e.maxCredits?e.minCredits:`${e.minCredits}-${e.maxCredits}`;s+=`
                <li>
                    <strong>${e.department.abbreviation} ${e.number}</strong>: 
                    ${e.name} (${r} credits)
                    <br><small>${e.description}</small>
                </li>`}),s+=`
                </ul>
            </div>`,t.innerHTML=s}showLoadingState(){const t=document.getElementById("app");t&&(t.innerHTML='<div class="loading-message">Loading course data from WPI servers...</div>')}showErrorMessage(t){const s=document.getElementById("app");s&&(s.innerHTML=`<div class="error-message">${t}</div>`)}}new p;
//# sourceMappingURL=index-D-YOKbvK.js.map
