{"version":3,"file":"index-D4ShmtCf.js","sources":["../../src/types/types.ts","../../src/services/courseDataService.ts","../../src/themes/ThemeManager.ts","../../src/core/StorageManager.ts","../../src/ui/components/ThemeSelector.ts","../../src/services/DataRefreshService.ts","../../src/core/CourseManager.ts","../../src/services/CourseSelectionService.ts","../../src/ui/utils/timeUtils.ts","../../src/ui/controllers/MainController.ts","../../src/main.ts"],"sourcesContent":["export interface Course {\n    id: string;\n    number: string;\n    name: string;\n    description: string;\n    department: Department;\n    sections: Section[];\n    minCredits: number;\n    maxCredits: number;\n}\n\nexport interface Department {\n    abbreviation: string;\n    name: string;\n    courses: Course[];\n}\n\nexport interface Section {\n    crn: number;\n    number: string;\n    seats: number;\n    seatsAvailable: number;\n    actualWaitlist: number;\n    maxWaitlist: number;\n    note?: string;\n    description: string;\n    term: string;\n    periods: Period[];\n}\n\nexport interface Period {\n    type: string;\n    professor: string;\n    professorEmail?: string;\n    startTime: Time;\n    endTime: Time;\n    location: string;\n    building: string;\n    room: string;\n    seats: number;\n    seatsAvailable: number;\n    actualWaitlist: number;\n    maxWaitlist: number;\n    days: Set<DayOfWeek>;\n    specificSection?: string;\n}\n\nexport interface Time {\n    hours: number;\n    minutes: number;\n    displayTime: string;\n}\n\nexport enum DayOfWeek {\n    MONDAY = 'mon',\n    TUESDAY = 'tue',\n    WEDNESDAY = 'wed',\n    THURSDAY = 'thu',\n    FRIDAY = 'fri',\n    SATURDAY = 'sat',\n    SUNDAY = 'sun'\n}\n\nexport interface ScheduleDB {\n    departments: Department[];\n    generated: string;\n}\n\nexport interface PlannerState {\n    courses: Course[];\n    selectedYear: number;\n    searchTerm: string;\n    activeFilters: string[];\n    plan: {\n        [year: number]: {\n            fall: Course[];\n            spring: Course[];\n            summer: Course[];\n        };\n    };\n}\n\nexport type Semester = 'fall' | 'spring' | 'summer';","import { ScheduleDB, Department, Course, Section, Period, Time, DayOfWeek } from '../types/types'\n\nexport class CourseDataService {\n    private static readonly WPI_COURSE_DATA_URL = './course-data.json';\n    private static readonly LOCAL_STORAGE_KEY = 'wpi-course-data';\n    private static readonly CACHE_EXPIRY_HOURS = 1;\n\n    private scheduleDB: ScheduleDB | null = null;\n\n    constructor() {}\n\n    async loadCourseData(): Promise<ScheduleDB> {\n        try {\n            console.log('Loading course data...');\n            const freshData = await this.fetchFreshData();\n            this.scheduleDB = freshData;\n            return freshData;\n        } catch (error) {\n            console.error('Failed to load course data:', error);\n            throw new Error('No course data available');\n        }\n    }\n\n    private async fetchFreshData(): Promise<ScheduleDB> {\n        console.log('Fetching course data from local static file...');\n        \n        const response = await fetch(CourseDataService.WPI_COURSE_DATA_URL, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n            },\n            cache: 'no-cache'\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to fetch course data: ${response.status} ${response.statusText}`);\n        }\n\n        const jsonData = await response.json();\n        return this.parseJSONData(jsonData);\n    }\n\n    private parseJSONData(jsonData: any): ScheduleDB {\n        console.log('Parsing JSON data...');\n        const scheduleDB: ScheduleDB = {\n            departments: [],\n            generated: new Date().toISOString()\n        };\n\n        if (!jsonData.Report_Entry || !Array.isArray(jsonData.Report_Entry)) {\n            console.error('Invalid JSON data structure:', jsonData);\n            throw new Error('Invalid JSON data structure');\n        }\n\n        console.log(`Processing ${jsonData.Report_Entry.length} course entries...`);\n        const departmentMap = new Map<string, Department>();\n\n        let processed = 0;\n        for (const entry of jsonData.Report_Entry) {\n            try {\n                this.processJSONEntry(entry, departmentMap);\n                processed++;\n            } catch (error) {\n                console.warn('Failed to process entry:', entry, error);\n            }\n        }\n\n        scheduleDB.departments = Array.from(departmentMap.values());\n        console.log(`Successfully processed ${processed}/${jsonData.Report_Entry.length} entries`);\n        console.log(`Loaded ${scheduleDB.departments.length} departments with course data`);\n        return scheduleDB;\n    }\n\n    private processJSONEntry(entry: any, departmentMap: Map<string, Department>): void {\n        const courseTitle = entry.Course_Title || '';\n        const courseTitleMatch = courseTitle.match(/^([A-Z]+)\\s+(\\d+)\\s*-\\s*(.+)$/);\n        if (!courseTitleMatch) return;\n\n        const [, deptCode, courseNum, courseName] = courseTitleMatch;\n        const deptName = entry.Academic_Units || entry.Subject || deptCode;\n        \n        let department = departmentMap.get(deptCode);\n        if (!department) {\n            department = {\n                abbreviation: deptCode,\n                name: deptName,\n                courses: []\n            };\n            departmentMap.set(deptCode, department);\n        }\n\n        const courseId = `${deptCode}-${courseNum}`;\n        let course = department.courses.find(c => c.id === courseId);\n        if (!course) {\n            course = {\n                id: courseId,\n                number: courseNum,\n                name: courseName,\n                description: this.stripHtml(entry.Course_Description || ''),\n                department: department,\n                sections: [],\n                minCredits: parseFloat(entry.Credits || '3'),\n                maxCredits: parseFloat(entry.Credits || '3')\n            };\n            department.courses.push(course);\n        }\n\n        const sectionMatch = entry.Course_Section?.match(/([A-Z]+\\s+\\d+)-([A-Z0-9]+)/);\n        const sectionNumber = sectionMatch ? sectionMatch[2] : '';\n        \n        const [enrolled, capacity] = (entry.Enrolled_Capacity || '0/0').split('/').map((n: string) => parseInt(n) || 0);\n        const [waitlisted, waitlistCap] = (entry.Waitlist_Waitlist_Capacity || '0/0').split('/').map((n: string) => parseInt(n) || 0);\n        \n        const section: Section = {\n            crn: 0, // Not available in new format\n            number: sectionNumber,\n            seats: capacity,\n            seatsAvailable: capacity - enrolled,\n            actualWaitlist: waitlisted,\n            maxWaitlist: waitlistCap,\n            note: entry.Section_Status === 'Waitlist' ? 'Waitlist Available' : undefined,\n            description: this.stripHtml(entry.Course_Section_Description || ''),\n            term: entry.Offering_Period || '',\n            periods: []\n        };\n\n        if (entry.Meeting_Patterns && entry.Locations && entry.Instructors) {\n            const period: Period = {\n                type: entry.Instructional_Format || 'Lecture',\n                professor: entry.Instructors || '',\n                professorEmail: undefined,\n                startTime: this.parseTimeFromPattern(entry.Meeting_Patterns, true),\n                endTime: this.parseTimeFromPattern(entry.Meeting_Patterns, false),\n                building: this.extractBuilding(entry.Locations),\n                room: this.extractRoom(entry.Locations),\n                location: entry.Locations,\n                seats: capacity,\n                seatsAvailable: capacity - enrolled,\n                actualWaitlist: waitlisted,\n                maxWaitlist: waitlistCap,\n                days: this.parseDaysFromPattern(entry.Meeting_Day_Patterns || ''),\n                specificSection: sectionNumber\n            };\n            section.periods.push(period);\n        }\n\n        course.sections.push(section);\n    }\n\n    private stripHtml(html: string): string {\n        return html.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, ' ').trim();\n    }\n\n    private extractBuilding(location: string): string {\n        const match = location.match(/^([^0-9]+)/);\n        return match ? match[1].trim() : '';\n    }\n\n    private extractRoom(location: string): string {\n        const match = location.match(/([0-9]+[A-Z]*)$/);\n        return match ? match[1] : '';\n    }\n\n    private parseTimeFromPattern(pattern: string, isStart: boolean): Time {\n        const timeMatch = pattern.match(/(\\d{1,2}:\\d{2}\\s*[AP]M)\\s*-\\s*(\\d{1,2}:\\d{2}\\s*[AP]M)/);\n        if (!timeMatch) return { hours: 0, minutes: 0, displayTime: 'TBD' };\n        \n        const timeStr = isStart ? timeMatch[1] : timeMatch[2];\n        return this.parseTime(timeStr);\n    }\n\n    private parseDaysFromPattern(dayPattern: string): Set<DayOfWeek> {\n        const days = new Set<DayOfWeek>();\n        const dayMap: { [key: string]: DayOfWeek } = {\n            'M': DayOfWeek.MONDAY,\n            'T': DayOfWeek.TUESDAY, \n            'W': DayOfWeek.WEDNESDAY,\n            'R': DayOfWeek.THURSDAY,\n            'F': DayOfWeek.FRIDAY,\n            'S': DayOfWeek.SATURDAY,\n            'U': DayOfWeek.SUNDAY\n        };\n\n        for (const char of dayPattern.replace(/-/g, '')) {\n            if (dayMap[char]) {\n                days.add(dayMap[char]);\n            }\n        }\n        return days;\n    }\n\n    private parseTime(timeStr: string): Time {\n        if (!timeStr || timeStr === '?') {\n            return { hours: 0, minutes: 0, displayTime: 'TBD' };\n        }\n\n        const match = timeStr.match(/(\\d{1,2}):(\\d{2})(AM|PM)/i);\n        if (!match) {\n            return { hours: 0, minutes: 0, displayTime: timeStr };\n        }\n\n        let hours = parseInt(match[1]);\n        const minutes = parseInt(match[2]);\n        const ampm = match[3].toUpperCase();\n\n        if (ampm === 'PM' && hours !== 12) {\n            hours += 12;\n        } else if (ampm === 'AM' && hours === 12) {\n            hours = 0;\n        }\n\n        return {\n            hours,\n            minutes,\n            displayTime: timeStr\n        };\n    }\n\n    private parseDays(daysStr: string): DayOfWeek[] {\n        if (!daysStr || daysStr === '?') {\n            return [];\n        }\n\n        const dayMap: { [key: string]: DayOfWeek } = {\n            'mon': DayOfWeek.MONDAY,\n            'tue': DayOfWeek.TUESDAY,\n            'wed': DayOfWeek.WEDNESDAY,\n            'thu': DayOfWeek.THURSDAY,\n            'fri': DayOfWeek.FRIDAY,\n            'sat': DayOfWeek.SATURDAY,\n            'sun': DayOfWeek.SUNDAY\n        };\n\n        return daysStr.split(',').map(day => dayMap[day.trim().toLowerCase()]).filter(Boolean);\n    }\n\n    private getCachedData(): ScheduleDB | null {\n        try {\n            const cached = localStorage.getItem(CourseDataService.LOCAL_STORAGE_KEY);\n            if (!cached) return null;\n\n            const parsedData = JSON.parse(cached);\n            return parsedData.scheduleDB;\n        } catch (error) {\n            console.warn('Failed to parse cached course data:', error);\n            return null;\n        }\n    }\n\n    private cacheData(scheduleDB: ScheduleDB): void {\n        try {\n            const cacheData = {\n                scheduleDB,\n                timestamp: Date.now()\n            };\n            localStorage.setItem(CourseDataService.LOCAL_STORAGE_KEY, JSON.stringify(cacheData));\n            console.log('Course data cached successfully');\n        } catch (error) {\n            console.warn('Failed to cache course data:', error);\n        }\n    }\n\n    private isCacheExpired(): boolean {\n        try {\n            const cached = localStorage.getItem(CourseDataService.LOCAL_STORAGE_KEY);\n            if (!cached) return true;\n\n            const parsedData = JSON.parse(cached);\n            const cacheAge = Date.now() - parsedData.timestamp;\n            const maxAge = CourseDataService.CACHE_EXPIRY_HOURS * 60 * 60 * 1000;\n            \n            return cacheAge > maxAge;\n        } catch (error) {\n            return true;\n        }\n    }\n\n    getScheduleDB(): ScheduleDB | null {\n        return this.scheduleDB;\n    }\n\n    searchCourses(query: string, departments?: string[]): Course[] {\n        if (!this.scheduleDB) return [];\n\n        const allCourses: Course[] = [];\n        \n        for (const dept of this.scheduleDB.departments) {\n            if (departments && departments.length > 0 && !departments.includes(dept.abbreviation.toLowerCase())) {\n                continue;\n            }\n            allCourses.push(...dept.courses);\n        }\n\n        if (!query.trim()) {\n            return allCourses;\n        }\n\n        const queryLower = query.toLowerCase();\n        return allCourses.filter(course => \n            course.name.toLowerCase().includes(queryLower) ||\n            course.number.toLowerCase().includes(queryLower) ||\n            course.id.toLowerCase().includes(queryLower) ||\n            course.department.abbreviation.toLowerCase().includes(queryLower)\n        );\n    }\n\n    getAllDepartments(): Department[] {\n        return this.scheduleDB?.departments || [];\n    }\n}","import { ThemeDefinition, ThemeId, ThemeChangeEvent, ThemeChangeListener } from './types'\n\n// Import theme definitions\nimport wpiClassic from './definitions/wpi-classic.json'\nimport wpiDark from './definitions/wpi-dark.json'\nimport wpiLight from './definitions/wpi-light.json'\nimport highContrast from './definitions/high-contrast.json'\n\nexport class ThemeManager {\n    private static instance: ThemeManager;\n    private currentTheme: ThemeId = 'wpi-classic';\n    private themes: Map<ThemeId, ThemeDefinition> = new Map();\n    private listeners: Set<ThemeChangeListener> = new Set();\n    private readonly storageKey = 'wpi-planner-theme';\n\n    private constructor() {\n        this.initializeThemes();\n        this.loadSavedTheme();\n    }\n\n    static getInstance(): ThemeManager {\n        if (!ThemeManager.instance) {\n            ThemeManager.instance = new ThemeManager();\n        }\n        return ThemeManager.instance;\n    }\n\n    private initializeThemes(): void {\n        // Register built-in themes\n        this.registerTheme(wpiClassic as ThemeDefinition);\n        this.registerTheme(wpiDark as ThemeDefinition);\n        this.registerTheme(wpiLight as ThemeDefinition);\n        this.registerTheme(highContrast as ThemeDefinition);\n    }\n\n    private loadSavedTheme(): void {\n        try {\n            const savedTheme = localStorage.getItem(this.storageKey);\n            if (savedTheme && this.themes.has(savedTheme)) {\n                this.currentTheme = savedTheme;\n            }\n        } catch (error) {\n            console.warn('Failed to load saved theme preference:', error);\n        }\n        \n        // Apply the current theme\n        this.applyTheme(this.currentTheme);\n    }\n\n    registerTheme(theme: ThemeDefinition): void {\n        if (!this.isValidTheme(theme)) {\n            console.error('Invalid theme definition:', theme);\n            return;\n        }\n        \n        this.themes.set(theme.id, theme);\n    }\n\n    private isValidTheme(theme: any): theme is ThemeDefinition {\n        return theme &&\n            typeof theme.name === 'string' &&\n            typeof theme.id === 'string' &&\n            typeof theme.description === 'string' &&\n            theme.colors &&\n            theme.typography &&\n            theme.spacing &&\n            theme.effects;\n    }\n\n    getAvailableThemes(): ThemeDefinition[] {\n        return Array.from(this.themes.values());\n    }\n\n    getCurrentTheme(): ThemeDefinition | null {\n        return this.themes.get(this.currentTheme) || null;\n    }\n\n    getCurrentThemeId(): ThemeId {\n        return this.currentTheme;\n    }\n\n    setTheme(themeId: ThemeId): boolean {\n        if (!this.themes.has(themeId)) {\n            console.error(`Theme '${themeId}' not found`);\n            return false;\n        }\n\n        const oldTheme = this.currentTheme;\n        const newTheme = themeId;\n        const themeDefinition = this.themes.get(themeId)!;\n\n        this.currentTheme = themeId;\n        this.applyTheme(themeId);\n        this.saveThemePreference(themeId);\n\n        // Notify listeners\n        const event: ThemeChangeEvent = {\n            oldTheme,\n            newTheme,\n            themeDefinition\n        };\n        this.notifyListeners(event);\n\n        return true;\n    }\n\n    private applyTheme(themeId: ThemeId): void {\n        const theme = this.themes.get(themeId);\n        if (!theme) return;\n\n        const root = document.documentElement;\n\n        // Apply color variables\n        Object.entries(theme.colors).forEach(([key, value]) => {\n            root.style.setProperty(`--color-${this.kebabCase(key)}`, value);\n        });\n\n        // Apply typography variables\n        Object.entries(theme.typography).forEach(([key, value]) => {\n            root.style.setProperty(`--font-${this.kebabCase(key)}`, value);\n        });\n\n        // Apply spacing variables\n        Object.entries(theme.spacing).forEach(([key, value]) => {\n            root.style.setProperty(`--spacing-${this.kebabCase(key)}`, value);\n        });\n\n        // Apply effect variables\n        Object.entries(theme.effects).forEach(([key, value]) => {\n            root.style.setProperty(`--effect-${this.kebabCase(key)}`, value);\n        });\n\n        // Add theme class to body for theme-specific styling\n        document.body.className = document.body.className\n            .replace(/theme-[\\w-]+/g, '')\n            .trim();\n        document.body.classList.add(`theme-${themeId}`);\n    }\n\n    private kebabCase(str: string): string {\n        return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    }\n\n    private saveThemePreference(themeId: ThemeId): void {\n        try {\n            localStorage.setItem(this.storageKey, themeId);\n        } catch (error) {\n            console.warn('Failed to save theme preference:', error);\n        }\n    }\n\n    // System preference detection\n    detectSystemPreference(): ThemeId {\n        if (typeof window !== 'undefined' && window.matchMedia) {\n            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                return 'wpi-dark';\n            }\n            if (window.matchMedia('(prefers-contrast: high)').matches) {\n                return 'high-contrast';\n            }\n        }\n        return 'wpi-classic';\n    }\n\n    useSystemPreference(): boolean {\n        const preferredTheme = this.detectSystemPreference();\n        return this.setTheme(preferredTheme);\n    }\n\n    // Event listeners\n    onThemeChange(listener: ThemeChangeListener): void {\n        this.listeners.add(listener);\n    }\n\n    offThemeChange(listener: ThemeChangeListener): void {\n        this.listeners.delete(listener);\n    }\n\n    private notifyListeners(event: ThemeChangeEvent): void {\n        this.listeners.forEach(listener => {\n            try {\n                listener(event);\n            } catch (error) {\n                console.error('Error in theme change listener:', error);\n            }\n        });\n    }\n\n    // Theme preview (temporary application without saving)\n    previewTheme(themeId: ThemeId): boolean {\n        if (!this.themes.has(themeId)) return false;\n        this.applyTheme(themeId);\n        return true;\n    }\n\n    // Reset to current theme (cancel preview)\n    resetToCurrentTheme(): void {\n        this.applyTheme(this.currentTheme);\n    }\n\n    // Export/Import functionality\n    exportCurrentTheme(): string {\n        const theme = this.getCurrentTheme();\n        if (!theme) throw new Error('No current theme to export');\n        return JSON.stringify(theme, null, 2);\n    }\n\n    importTheme(themeJson: string): boolean {\n        try {\n            const theme = JSON.parse(themeJson);\n            if (this.isValidTheme(theme)) {\n                this.registerTheme(theme);\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error('Failed to import theme:', error);\n            return false;\n        }\n    }\n\n    // Theme utilities\n    getThemeById(themeId: ThemeId): ThemeDefinition | null {\n        return this.themes.get(themeId) || null;\n    }\n\n    hasTheme(themeId: ThemeId): boolean {\n        return this.themes.has(themeId);\n    }\n\n    removeTheme(themeId: ThemeId): boolean {\n        // Don't allow removal of built-in themes\n        const builtInThemes = ['wpi-classic', 'wpi-dark', 'wpi-light', 'high-contrast'];\n        if (builtInThemes.includes(themeId)) {\n            console.warn(`Cannot remove built-in theme: ${themeId}`);\n            return false;\n        }\n\n        if (this.currentTheme === themeId) {\n            this.setTheme('wpi-classic'); // Fallback to default\n        }\n\n        return this.themes.delete(themeId);\n    }\n}","import { Schedule, UserScheduleState, SchedulePreferences, SelectedCourse } from '../types/schedule'\n\nexport class StorageManager {\n    private static readonly STORAGE_KEYS = {\n        USER_STATE: 'wpi-planner-user-state',\n        PREFERENCES: 'wpi-planner-preferences',\n        SCHEDULES: 'wpi-planner-schedules',\n        SELECTED_COURSES: 'wpi-planner-selected-courses',\n        THEME: 'wpi-planner-theme'\n    };\n\n    saveUserState(state: UserScheduleState): void {\n        try {\n            const serializedState = this.serializeWithSets(state);\n            localStorage.setItem(StorageManager.STORAGE_KEYS.USER_STATE, JSON.stringify(serializedState));\n        } catch (error) {\n            console.warn('Failed to save user state:', error);\n        }\n    }\n\n    loadUserState(): UserScheduleState | null {\n        try {\n            const stored = localStorage.getItem(StorageManager.STORAGE_KEYS.USER_STATE);\n            if (!stored) return null;\n            \n            const parsed = JSON.parse(stored);\n            return this.deserializeWithSets(parsed);\n        } catch (error) {\n            console.warn('Failed to load user state:', error);\n            return null;\n        }\n    }\n\n    saveSchedule(schedule: Schedule): void {\n        try {\n            const schedules = this.loadAllSchedules();\n            const existingIndex = schedules.findIndex(s => s.id === schedule.id);\n            \n            if (existingIndex >= 0) {\n                schedules[existingIndex] = schedule;\n            } else {\n                schedules.push(schedule);\n            }\n            \n            const serializedSchedules = this.serializeWithSets(schedules);\n            localStorage.setItem(StorageManager.STORAGE_KEYS.SCHEDULES, JSON.stringify(serializedSchedules));\n        } catch (error) {\n            console.warn('Failed to save schedule:', error);\n        }\n    }\n\n    loadSchedule(scheduleId: string): Schedule | null {\n        try {\n            const schedules = this.loadAllSchedules();\n            return schedules.find(s => s.id === scheduleId) || null;\n        } catch (error) {\n            console.warn('Failed to load schedule:', error);\n            return null;\n        }\n    }\n\n    loadAllSchedules(): Schedule[] {\n        try {\n            const stored = localStorage.getItem(StorageManager.STORAGE_KEYS.SCHEDULES);\n            if (!stored) return [];\n            \n            const parsed = JSON.parse(stored);\n            return this.deserializeWithSets(parsed);\n        } catch (error) {\n            console.warn('Failed to load schedules:', error);\n            return [];\n        }\n    }\n\n    deleteSchedule(scheduleId: string): void {\n        try {\n            const schedules = this.loadAllSchedules();\n            const filtered = schedules.filter(s => s.id !== scheduleId);\n            localStorage.setItem(StorageManager.STORAGE_KEYS.SCHEDULES, JSON.stringify(filtered));\n        } catch (error) {\n            console.warn('Failed to delete schedule:', error);\n        }\n    }\n\n    savePreferences(preferences: SchedulePreferences): void {\n        try {\n            const serializedPreferences = this.serializeWithSets(preferences);\n            localStorage.setItem(StorageManager.STORAGE_KEYS.PREFERENCES, JSON.stringify(serializedPreferences));\n        } catch (error) {\n            console.warn('Failed to save preferences:', error);\n        }\n    }\n\n    loadPreferences(): SchedulePreferences | null {\n        try {\n            const stored = localStorage.getItem(StorageManager.STORAGE_KEYS.PREFERENCES);\n            if (!stored) return this.getDefaultPreferences();\n            \n            const parsed = JSON.parse(stored);\n            return this.deserializeWithSets(parsed);\n        } catch (error) {\n            console.warn('Failed to load preferences:', error);\n            return this.getDefaultPreferences();\n        }\n    }\n\n    private getDefaultPreferences(): SchedulePreferences {\n        return {\n            preferredTimeRange: {\n                startTime: { hours: 8, minutes: 0 },\n                endTime: { hours: 18, minutes: 0 }\n            },\n            preferredDays: new Set(['mon', 'tue', 'wed', 'thu', 'fri']),\n            avoidBackToBackClasses: false,\n            maxDailyHours: 8,\n            preferredBuildings: [],\n            theme: 'wpi-classic'\n        };\n    }\n\n    clearAllData(): void {\n        try {\n            Object.values(StorageManager.STORAGE_KEYS).forEach(key => {\n                localStorage.removeItem(key);\n            });\n        } catch (error) {\n            console.warn('Failed to clear storage:', error);\n        }\n    }\n\n    exportData(): string {\n        const state = this.loadUserState();\n        const schedules = this.loadAllSchedules();\n        const preferences = this.loadPreferences();\n\n        const exportData = {\n            version: '1.0',\n            timestamp: new Date().toISOString(),\n            state,\n            schedules,\n            preferences\n        };\n\n        return JSON.stringify(exportData, null, 2);\n    }\n\n    importData(jsonData: string): boolean {\n        try {\n            const data = JSON.parse(jsonData);\n            \n            if (data.state) this.saveUserState(data.state);\n            if (data.preferences) this.savePreferences(data.preferences);\n            if (data.schedules) {\n                data.schedules.forEach((schedule: Schedule) => {\n                    this.saveSchedule(schedule);\n                });\n            }\n            \n            return true;\n        } catch (error) {\n            console.error('Failed to import data:', error);\n            return false;\n        }\n    }\n\n    private serializeWithSets(obj: any): any {\n        if (obj === null || obj === undefined) {\n            return obj;\n        }\n        \n        if (obj instanceof Set) {\n            return { __type: 'Set', value: Array.from(obj) };\n        }\n        \n        if (Array.isArray(obj)) {\n            return obj.map(item => this.serializeWithSets(item));\n        }\n        \n        if (typeof obj === 'object') {\n            const result: any = {};\n            for (const key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    result[key] = this.serializeWithSets(obj[key]);\n                }\n            }\n            return result;\n        }\n        \n        return obj;\n    }\n\n    private deserializeWithSets(obj: any): any {\n        if (obj === null || obj === undefined) {\n            return obj;\n        }\n        \n        if (typeof obj === 'object' && obj.__type === 'Set') {\n            return new Set(obj.value);\n        }\n        \n        if (Array.isArray(obj)) {\n            return obj.map(item => this.deserializeWithSets(item));\n        }\n        \n        if (typeof obj === 'object') {\n            const result: any = {};\n            for (const key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    result[key] = this.deserializeWithSets(obj[key]);\n                }\n            }\n            return result;\n        }\n        \n        return obj;\n    }\n\n    saveThemePreference(themeId: string): void {\n        try {\n            localStorage.setItem(StorageManager.STORAGE_KEYS.THEME, themeId);\n        } catch (error) {\n            console.warn('Failed to save theme preference:', error);\n        }\n    }\n\n    loadThemePreference(): string {\n        try {\n            const savedTheme = localStorage.getItem(StorageManager.STORAGE_KEYS.THEME);\n            return savedTheme || 'wpi-classic';\n        } catch (error) {\n            console.warn('Failed to load theme preference:', error);\n            return 'wpi-classic';\n        }\n    }\n\n    saveSelectedCourses(selectedCourses: SelectedCourse[]): void {\n        try {\n            const serializedCourses = this.serializeWithSets(selectedCourses);\n            localStorage.setItem(StorageManager.STORAGE_KEYS.SELECTED_COURSES, JSON.stringify(serializedCourses));\n        } catch (error) {\n            console.warn('Failed to save selected courses:', error);\n        }\n    }\n\n    loadSelectedCourses(): SelectedCourse[] {\n        try {\n            const stored = localStorage.getItem(StorageManager.STORAGE_KEYS.SELECTED_COURSES);\n            if (!stored) return [];\n            \n            const parsed = JSON.parse(stored);\n            return this.deserializeWithSets(parsed);\n        } catch (error) {\n            console.warn('Failed to load selected courses:', error);\n            return [];\n        }\n    }\n\n    clearSelectedCourses(): void {\n        try {\n            localStorage.removeItem(StorageManager.STORAGE_KEYS.SELECTED_COURSES);\n        } catch (error) {\n            console.warn('Failed to clear selected courses:', error);\n        }\n    }\n}","import { ThemeManager } from '../../themes/ThemeManager'\nimport { StorageManager } from '../../core/StorageManager'\n\nexport class ThemeSelector {\n    private themeManager: ThemeManager;\n    private storageManager: StorageManager;\n    private dropdownElement: HTMLElement | null = null;\n    private optionsElement: HTMLElement | null = null;\n    private currentThemeNameElement: HTMLElement | null = null;\n    private isOpen: boolean = false;\n\n    constructor() {\n        this.themeManager = ThemeManager.getInstance();\n        this.storageManager = new StorageManager();\n        this.init();\n    }\n\n    private init(): void {\n        this.setupElements();\n        this.loadSavedTheme();\n        this.setupEventListeners();\n        this.renderThemeOptions();\n    }\n\n    private setupElements(): void {\n        this.dropdownElement = document.getElementById('theme-dropdown');\n        this.optionsElement = document.getElementById('theme-options');\n        this.currentThemeNameElement = document.getElementById('current-theme-name');\n    }\n\n    private loadSavedTheme(): void {\n        const savedTheme = this.storageManager.loadThemePreference();\n        this.themeManager.setTheme(savedTheme);\n        this.updateCurrentThemeDisplay();\n    }\n\n    private setupEventListeners(): void {\n        if (!this.dropdownElement || !this.optionsElement) return;\n\n        // Toggle dropdown\n        this.dropdownElement.addEventListener('click', (e) => {\n            e.stopPropagation();\n            this.toggleDropdown();\n        });\n\n        // Close dropdown when clicking outside\n        document.addEventListener('click', () => {\n            this.closeDropdown();\n        });\n\n        // Prevent closing when clicking inside options\n        this.optionsElement.addEventListener('click', (e) => {\n            e.stopPropagation();\n        });\n    }\n\n    private toggleDropdown(): void {\n        if (this.isOpen) {\n            this.closeDropdown();\n        } else {\n            this.openDropdown();\n        }\n    }\n\n    private openDropdown(): void {\n        if (!this.dropdownElement || !this.optionsElement) return;\n        \n        this.isOpen = true;\n        this.dropdownElement.classList.add('open');\n        this.optionsElement.classList.add('show');\n    }\n\n    private closeDropdown(): void {\n        if (!this.dropdownElement || !this.optionsElement) return;\n        \n        this.isOpen = false;\n        this.dropdownElement.classList.remove('open');\n        this.optionsElement.classList.remove('show');\n    }\n\n    private renderThemeOptions(): void {\n        if (!this.optionsElement) return;\n\n        const availableThemes = this.themeManager.getAvailableThemes();\n        const currentThemeId = this.themeManager.getCurrentThemeId();\n\n        let html = '';\n        availableThemes.forEach(theme => {\n            const isActive = theme.id === currentThemeId;\n            html += `\n                <div class=\"theme-option ${isActive ? 'active' : ''}\" data-theme-id=\"${theme.id}\">\n                    <div class=\"theme-option-name\">${theme.name}</div>\n                    <div class=\"theme-option-description\">${theme.description}</div>\n                </div>\n            `;\n        });\n\n        this.optionsElement.innerHTML = html;\n\n        // Add click listeners to theme options\n        this.optionsElement.querySelectorAll('.theme-option').forEach(option => {\n            option.addEventListener('click', () => {\n                const themeId = (option as HTMLElement).dataset.themeId;\n                if (themeId) {\n                    this.selectTheme(themeId);\n                }\n            });\n        });\n    }\n\n    private selectTheme(themeId: string): void {\n        // Apply theme\n        const success = this.themeManager.setTheme(themeId);\n        if (!success) return;\n\n        // Save to storage\n        this.storageManager.saveThemePreference(themeId);\n\n        // Update UI\n        this.updateCurrentThemeDisplay();\n        this.updateActiveOption(themeId);\n        this.closeDropdown();\n    }\n\n    private updateCurrentThemeDisplay(): void {\n        if (!this.currentThemeNameElement) return;\n\n        const currentTheme = this.themeManager.getCurrentTheme();\n        if (currentTheme) {\n            this.currentThemeNameElement.textContent = currentTheme.name;\n        }\n    }\n\n    private updateActiveOption(selectedThemeId: string): void {\n        if (!this.optionsElement) return;\n\n        // Remove active class from all options\n        this.optionsElement.querySelectorAll('.theme-option').forEach(option => {\n            option.classList.remove('active');\n        });\n\n        // Add active class to selected option\n        const selectedOption = this.optionsElement.querySelector(`[data-theme-id=\"${selectedThemeId}\"]`);\n        if (selectedOption) {\n            selectedOption.classList.add('active');\n        }\n    }\n\n    // Public method to refresh theme options (useful if themes are added dynamically)\n    public refresh(): void {\n        this.renderThemeOptions();\n        this.updateCurrentThemeDisplay();\n    }\n\n    // Public method to programmatically select a theme\n    public setTheme(themeId: string): void {\n        this.selectTheme(themeId);\n    }\n}","export class DataRefreshService {\n    private static readonly REFRESH_COOLDOWN_MS = 15 * 60 * 1000; // 15 minutes\n    private static readonly LAST_REFRESH_KEY = 'wpi-planner-last-refresh';\n    private static readonly COURSE_DATA_URL = './course-data.json';\n    \n    private timestampElement: HTMLElement | null = null;\n    private refreshButton: HTMLButtonElement | null = null;\n    private refreshTextElement: HTMLElement | null = null;\n\n    constructor() {\n        this.init();\n    }\n\n    private init(): void {\n        this.timestampElement = document.getElementById('data-timestamp');\n        this.refreshButton = document.getElementById('refresh-data') as HTMLButtonElement;\n        this.refreshTextElement = document.getElementById('refresh-text');\n\n        this.setupEventListeners();\n        this.updateTimestamp();\n        this.updateRefreshButton();\n        \n        // Update refresh button state every minute\n        setInterval(() => {\n            this.updateRefreshButton();\n        }, 60000);\n    }\n\n    private setupEventListeners(): void {\n        if (this.refreshButton) {\n            this.refreshButton.addEventListener('click', () => {\n                this.handleRefresh();\n            });\n        }\n    }\n\n    private async updateTimestamp(): Promise<void> {\n        if (!this.timestampElement) return;\n\n        try {\n            // Get file modification time from the server\n            const response = await fetch(DataRefreshService.COURSE_DATA_URL, { \n                method: 'HEAD',\n                cache: 'no-cache'\n            });\n            \n            const lastModified = response.headers.get('Last-Modified');\n            if (lastModified) {\n                const date = new Date(lastModified);\n                this.timestampElement.textContent = `Data last updated: ${this.formatTimestamp(date)}`;\n            } else {\n                // Fallback: use known git commit timestamp for course-data.json\n                const fallbackDate = new Date('2025-08-22T23:32:46-04:00');\n                this.timestampElement.textContent = `Data last updated: ${this.formatTimestamp(fallbackDate)}`;\n            }\n        } catch (error) {\n            console.warn('Failed to get data timestamp:', error);\n            this.timestampElement.textContent = 'Data timestamp unavailable';\n        }\n    }\n\n    private formatTimestamp(date: Date): string {\n        const options: Intl.DateTimeFormatOptions = {\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric',\n            hour: 'numeric',\n            minute: '2-digit',\n            hour12: true\n        };\n        return date.toLocaleDateString('en-US', options).replace(',', ' at');\n    }\n\n    private updateRefreshButton(): void {\n        if (!this.refreshButton || !this.refreshTextElement) return;\n\n        const lastRefresh = this.getLastRefreshTime();\n        const now = Date.now();\n        const timeSinceRefresh = now - lastRefresh;\n        \n        if (timeSinceRefresh < DataRefreshService.REFRESH_COOLDOWN_MS) {\n            // Still in cooldown\n            this.refreshButton.disabled = true;\n            const remainingTime = DataRefreshService.REFRESH_COOLDOWN_MS - timeSinceRefresh;\n            const minutes = Math.ceil(remainingTime / (60 * 1000));\n            this.refreshTextElement.textContent = `Wait ${minutes}m`;\n        } else {\n            // Cooldown expired\n            this.refreshButton.disabled = false;\n            this.refreshTextElement.textContent = 'Refresh';\n        }\n    }\n\n    private async handleRefresh(): Promise<void> {\n        if (!this.refreshButton || this.refreshButton.disabled) return;\n\n        try {\n            // Set loading state\n            this.refreshButton.classList.add('loading');\n            this.refreshButton.disabled = true;\n            if (this.refreshTextElement) {\n                this.refreshTextElement.textContent = 'Refreshing...';\n            }\n\n            // For now, simulate refresh by just clearing cache and reloading\n            // In a production environment, this would call a backend API\n            // that triggers the fetch-course-data.js script\n            \n            // Simulate API delay\n            await new Promise(resolve => setTimeout(resolve, 1500));\n            \n            // For demo purposes, just mark as successful\n            // In production, you'd want to call: node scripts/fetch-course-data.js\n            // or have a backend endpoint that does this\n            \n            // Update last refresh time\n            this.setLastRefreshTime(Date.now());\n            \n            // Update timestamp display\n            await this.updateTimestamp();\n            \n            // Trigger data reload in the application\n            this.triggerDataReload();\n            \n            this.showSuccess('Data refreshed successfully!');\n        } catch (error) {\n            console.error('Failed to refresh data:', error);\n            this.showError('Failed to refresh data. Please try again later.');\n        } finally {\n            // Remove loading state\n            this.refreshButton.classList.remove('loading');\n            this.updateRefreshButton();\n        }\n    }\n\n    private triggerDataReload(): void {\n        // Dispatch custom event to notify other parts of the app to reload data\n        window.dispatchEvent(new CustomEvent('data-refreshed'));\n    }\n\n    private showSuccess(message: string): void {\n        // Simple success feedback - could be enhanced with a toast system\n        const originalText = this.refreshTextElement?.textContent;\n        if (this.refreshTextElement) {\n            this.refreshTextElement.textContent = '✓ Success';\n            setTimeout(() => {\n                if (this.refreshTextElement) {\n                    this.refreshTextElement.textContent = 'Refresh';\n                }\n            }, 2000);\n        }\n    }\n\n    private showError(message: string): void {\n        // Simple error feedback\n        const originalText = this.refreshTextElement?.textContent;\n        if (this.refreshTextElement) {\n            this.refreshTextElement.textContent = '✗ Failed';\n            setTimeout(() => {\n                if (this.refreshTextElement) {\n                    this.refreshTextElement.textContent = 'Refresh';\n                }\n            }, 2000);\n        }\n    }\n\n    private getLastRefreshTime(): number {\n        try {\n            const stored = localStorage.getItem(DataRefreshService.LAST_REFRESH_KEY);\n            return stored ? parseInt(stored, 10) : 0;\n        } catch (error) {\n            return 0;\n        }\n    }\n\n    private setLastRefreshTime(timestamp: number): void {\n        try {\n            localStorage.setItem(DataRefreshService.LAST_REFRESH_KEY, timestamp.toString());\n        } catch (error) {\n            console.warn('Failed to save refresh timestamp:', error);\n        }\n    }\n\n    // Public method to check if refresh is available\n    public canRefresh(): boolean {\n        const lastRefresh = this.getLastRefreshTime();\n        const timeSinceRefresh = Date.now() - lastRefresh;\n        return timeSinceRefresh >= DataRefreshService.REFRESH_COOLDOWN_MS;\n    }\n\n    // Public method to force refresh (for testing)\n    public async forceRefresh(): Promise<void> {\n        if (this.refreshButton) {\n            this.refreshButton.disabled = false;\n            await this.handleRefresh();\n        }\n    }\n}","import { Course, Section } from '../types/types'\nimport { SelectedCourse, Schedule } from '../types/schedule'\n\nexport class CourseManager {\n    private selectedCourses: Map<string, SelectedCourse> = new Map();\n    private listeners: Set<(courses: SelectedCourse[]) => void> = new Set();\n\n    addCourse(course: Course, isRequired: boolean = false): void {\n        const selectedCourse: SelectedCourse = {\n            course,\n            selectedSection: null,\n            preferredSections: [],\n            deniedSections: [],\n            isRequired\n        };\n        \n        this.selectedCourses.set(course.id, selectedCourse);\n        this.notifyListeners();\n    }\n\n    removeCourse(courseId: string): void {\n        this.selectedCourses.delete(courseId);\n        this.notifyListeners();\n    }\n\n    updateSectionPreference(courseId: string, sectionNumber: string, preference: 'preferred' | 'denied'): void {\n        const selectedCourse = this.selectedCourses.get(courseId);\n        if (!selectedCourse) return;\n\n        if (preference === 'preferred') {\n            if (!selectedCourse.preferredSections.includes(sectionNumber)) {\n                selectedCourse.preferredSections.push(sectionNumber);\n            }\n            const deniedIndex = selectedCourse.deniedSections.indexOf(sectionNumber);\n            if (deniedIndex > -1) {\n                selectedCourse.deniedSections.splice(deniedIndex, 1);\n            }\n        } else {\n            if (!selectedCourse.deniedSections.includes(sectionNumber)) {\n                selectedCourse.deniedSections.push(sectionNumber);\n            }\n            const preferredIndex = selectedCourse.preferredSections.indexOf(sectionNumber);\n            if (preferredIndex > -1) {\n                selectedCourse.preferredSections.splice(preferredIndex, 1);\n            }\n        }\n        \n        this.notifyListeners();\n    }\n\n    getSelectedCourses(): SelectedCourse[] {\n        return Array.from(this.selectedCourses.values());\n    }\n\n    getSelectedCourse(courseId: string): SelectedCourse | undefined {\n        return this.selectedCourses.get(courseId);\n    }\n\n    isSelected(courseId: string): boolean {\n        return this.selectedCourses.has(courseId);\n    }\n\n    getAvailableSections(courseId: string): Section[] {\n        const selectedCourse = this.selectedCourses.get(courseId);\n        if (!selectedCourse) return [];\n\n        return selectedCourse.course.sections.filter(section => \n            !selectedCourse.deniedSections.includes(section.number)\n        );\n    }\n\n    clearAll(): void {\n        this.selectedCourses.clear();\n        this.notifyListeners();\n    }\n\n    onSelectionChange(listener: (courses: SelectedCourse[]) => void): void {\n        this.listeners.add(listener);\n    }\n\n    offSelectionChange(listener: (courses: SelectedCourse[]) => void): void {\n        this.listeners.delete(listener);\n    }\n\n    setSelectedSection(courseId: string, sectionNumber: string | null): void {\n        const selectedCourse = this.selectedCourses.get(courseId);\n        if (!selectedCourse) return;\n\n        selectedCourse.selectedSection = sectionNumber;\n        this.notifyListeners();\n    }\n\n    getSelectedSection(courseId: string): string | null {\n        const selectedCourse = this.selectedCourses.get(courseId);\n        return selectedCourse?.selectedSection || null;\n    }\n\n    getSelectedCoursesWithSections(): SelectedCourse[] {\n        return this.getSelectedCourses();\n    }\n\n    loadSelectedCourses(selectedCourses: SelectedCourse[]): void {\n        this.selectedCourses.clear();\n        selectedCourses.forEach(course => {\n            this.selectedCourses.set(course.course.id, course);\n        });\n        this.notifyListeners();\n    }\n\n    private notifyListeners(): void {\n        const courses = this.getSelectedCourses();\n        this.listeners.forEach(listener => listener(courses));\n    }\n}","import { Course } from '../types/types'\nimport { SelectedCourse } from '../types/schedule'\nimport { CourseManager } from '../core/CourseManager'\nimport { StorageManager } from '../core/StorageManager'\n\nexport class CourseSelectionService {\n    private courseManager: CourseManager;\n    private storageManager: StorageManager;\n\n    constructor() {\n        this.courseManager = new CourseManager();\n        this.storageManager = new StorageManager();\n        \n        this.loadPersistedSelections();\n        this.setupPersistenceListener();\n    }\n\n    selectCourse(course: Course, isRequired: boolean = false): void {\n        this.courseManager.addCourse(course, isRequired);\n        this.persistSelections();\n    }\n\n    unselectCourse(courseId: string): void {\n        this.courseManager.removeCourse(courseId);\n        this.persistSelections();\n    }\n\n    toggleCourseSelection(course: Course, isRequired: boolean = false): boolean {\n        const isSelected = this.isCourseSelected(course.id);\n        \n        if (isSelected) {\n            this.unselectCourse(course.id);\n            return false;\n        } else {\n            this.selectCourse(course, isRequired);\n            return true;\n        }\n    }\n\n    setSelectedSection(courseId: string, sectionNumber: string | null): void {\n        this.courseManager.setSelectedSection(courseId, sectionNumber);\n        this.persistSelections();\n    }\n\n    getSelectedSection(courseId: string): string | null {\n        return this.courseManager.getSelectedSection(courseId);\n    }\n\n    setSectionPreference(courseId: string, sectionNumber: string, preference: 'preferred' | 'denied'): void {\n        this.courseManager.updateSectionPreference(courseId, sectionNumber, preference);\n        this.persistSelections();\n    }\n\n    isCourseSelected(courseId: string): boolean {\n        return this.courseManager.isSelected(courseId);\n    }\n\n    getSelectedCourses(): SelectedCourse[] {\n        return this.courseManager.getSelectedCoursesWithSections();\n    }\n\n    getSelectedCourse(courseId: string): SelectedCourse | undefined {\n        return this.courseManager.getSelectedCourse(courseId);\n    }\n\n    clearAllSelections(): void {\n        this.courseManager.clearAll();\n        this.storageManager.clearSelectedCourses();\n    }\n\n    getSelectedCoursesCount(): number {\n        return this.getSelectedCourses().length;\n    }\n\n    getSelectedCourseIds(): string[] {\n        return this.getSelectedCourses().map(sc => sc.course.id);\n    }\n\n    onSelectionChange(listener: (courses: SelectedCourse[]) => void): void {\n        this.courseManager.onSelectionChange(listener);\n    }\n\n    offSelectionChange(listener: (courses: SelectedCourse[]) => void): void {\n        this.courseManager.offSelectionChange(listener);\n    }\n\n    private loadPersistedSelections(): void {\n        const persistedCourses = this.storageManager.loadSelectedCourses();\n        if (persistedCourses.length > 0) {\n            this.courseManager.loadSelectedCourses(persistedCourses);\n        }\n    }\n\n    private setupPersistenceListener(): void {\n        this.courseManager.onSelectionChange((courses) => {\n            this.storageManager.saveSelectedCourses(courses);\n        });\n    }\n\n    private persistSelections(): void {\n        const selectedCourses = this.getSelectedCourses();\n        this.storageManager.saveSelectedCourses(selectedCourses);\n    }\n\n    exportSelections(): string {\n        const selectedCourses = this.getSelectedCourses();\n        return JSON.stringify({\n            version: '1.0',\n            timestamp: new Date().toISOString(),\n            selectedCourses\n        }, null, 2);\n    }\n\n    importSelections(jsonData: string): boolean {\n        try {\n            const data = JSON.parse(jsonData);\n            if (data.selectedCourses && Array.isArray(data.selectedCourses)) {\n                this.courseManager.loadSelectedCourses(data.selectedCourses);\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error('Failed to import selections:', error);\n            return false;\n        }\n    }\n}","import { Time, DayOfWeek } from '../../types/types';\n\nexport class TimeUtils {\n    // Schedule grid constants - 7 AM to 7 PM (12 hours)\n    static readonly START_HOUR = 7;  // 7 AM\n    static readonly END_HOUR = 19;   // 7 PM\n    static readonly TOTAL_HOURS = 12;\n    static readonly SLOTS_PER_HOUR = 2; // 30-minute intervals\n    static readonly TOTAL_TIME_SLOTS = TimeUtils.TOTAL_HOURS * TimeUtils.SLOTS_PER_HOUR;\n\n    // Days of the week in order\n    static readonly DAYS_ORDER = [\n        DayOfWeek.MONDAY,\n        DayOfWeek.TUESDAY, \n        DayOfWeek.WEDNESDAY,\n        DayOfWeek.THURSDAY,\n        DayOfWeek.FRIDAY,\n        DayOfWeek.SATURDAY,\n        DayOfWeek.SUNDAY\n    ];\n\n    /**\n     * Convert a Time object to a grid row position (0-based)\n     * 7:00 AM = row 0, 7:30 AM = row 1, etc.\n     */\n    static timeToGridRow(time: Time): number {\n        const totalMinutes = time.hours * 60 + time.minutes;\n        const startMinutes = TimeUtils.START_HOUR * 60;\n        const relativeMinutes = totalMinutes - startMinutes;\n        \n        // Convert to 30-minute slots\n        const slot = Math.floor(relativeMinutes / 30);\n        \n        // Ensure within bounds\n        return Math.max(0, Math.min(slot, TimeUtils.TOTAL_TIME_SLOTS - 1));\n    }\n\n    /**\n     * Convert day of week to grid column position (0-based)\n     * Monday = 0, Tuesday = 1, etc.\n     */\n    static dayToGridColumn(day: DayOfWeek): number {\n        return TimeUtils.DAYS_ORDER.indexOf(day);\n    }\n\n    /**\n     * Calculate how many grid rows a time period spans\n     */\n    static calculateDuration(startTime: Time, endTime: Time): number {\n        const startRow = TimeUtils.timeToGridRow(startTime);\n        const endRow = TimeUtils.timeToGridRow(endTime);\n        return Math.max(1, endRow - startRow);\n    }\n\n    /**\n     * Check if a time is within the schedule grid bounds (7 AM - 7 PM)\n     */\n    static isTimeInBounds(time: Time): boolean {\n        return time.hours >= TimeUtils.START_HOUR && time.hours < TimeUtils.END_HOUR;\n    }\n\n    /**\n     * Format time for display (e.g., \"9:00 AM\", \"2:30 PM\")\n     */\n    static formatTime(time: Time): string {\n        if (time.displayTime) {\n            return time.displayTime;\n        }\n        \n        const hours12 = time.hours === 0 ? 12 : time.hours > 12 ? time.hours - 12 : time.hours;\n        const ampm = time.hours >= 12 ? 'PM' : 'AM';\n        const minutes = time.minutes.toString().padStart(2, '0');\n        \n        return `${hours12}:${minutes} ${ampm}`;\n    }\n\n    /**\n     * Format time range for display (e.g., \"9:00-9:50 AM\")\n     */\n    static formatTimeRange(startTime: Time, endTime: Time): string {\n        const startFormatted = TimeUtils.formatTime(startTime);\n        const endFormatted = TimeUtils.formatTime(endTime);\n        \n        // If same AM/PM, only show it once\n        if (startTime.hours < 12 && endTime.hours < 12) {\n            return `${startFormatted.replace(' AM', '')}-${endFormatted}`;\n        } else if (startTime.hours >= 12 && endTime.hours >= 12) {\n            return `${startFormatted.replace(' PM', '')}-${endFormatted}`;\n        } else {\n            return `${startFormatted}-${endFormatted}`;\n        }\n    }\n\n    /**\n     * Format days for display (e.g., \"MWF\", \"TR\")\n     */\n    static formatDays(days: Set<DayOfWeek>): string {\n        const dayAbbreviations: { [key in DayOfWeek]: string } = {\n            [DayOfWeek.MONDAY]: 'M',\n            [DayOfWeek.TUESDAY]: 'T',\n            [DayOfWeek.WEDNESDAY]: 'W',\n            [DayOfWeek.THURSDAY]: 'R',\n            [DayOfWeek.FRIDAY]: 'F',\n            [DayOfWeek.SATURDAY]: 'S',\n            [DayOfWeek.SUNDAY]: 'U'\n        };\n\n        return TimeUtils.DAYS_ORDER\n            .filter(day => days.has(day))\n            .map(day => dayAbbreviations[day])\n            .join('');\n    }\n\n    /**\n     * Generate time labels for the grid (7:00 AM, 7:30 AM, etc.)\n     */\n    static generateTimeLabels(): string[] {\n        const labels: string[] = [];\n        \n        for (let hour = TimeUtils.START_HOUR; hour < TimeUtils.END_HOUR; hour++) {\n            // Add hour:00\n            labels.push(TimeUtils.formatTime({ hours: hour, minutes: 0, displayTime: '' }));\n            // Add hour:30\n            labels.push(TimeUtils.formatTime({ hours: hour, minutes: 30, displayTime: '' }));\n        }\n        \n        return labels;\n    }\n\n    /**\n     * Get day name for display\n     */\n    static getDayName(day: DayOfWeek): string {\n        const dayNames: { [key in DayOfWeek]: string } = {\n            [DayOfWeek.MONDAY]: 'Monday',\n            [DayOfWeek.TUESDAY]: 'Tuesday',\n            [DayOfWeek.WEDNESDAY]: 'Wednesday',\n            [DayOfWeek.THURSDAY]: 'Thursday',\n            [DayOfWeek.FRIDAY]: 'Friday',\n            [DayOfWeek.SATURDAY]: 'Saturday',\n            [DayOfWeek.SUNDAY]: 'Sunday'\n        };\n\n        return dayNames[day];\n    }\n\n    /**\n     * Get abbreviated day name for display\n     */\n    static getDayAbbr(day: DayOfWeek): string {\n        const dayAbbrs: { [key in DayOfWeek]: string } = {\n            [DayOfWeek.MONDAY]: 'Mon',\n            [DayOfWeek.TUESDAY]: 'Tue',\n            [DayOfWeek.WEDNESDAY]: 'Wed',\n            [DayOfWeek.THURSDAY]: 'Thu',\n            [DayOfWeek.FRIDAY]: 'Fri',\n            [DayOfWeek.SATURDAY]: 'Sat',\n            [DayOfWeek.SUNDAY]: 'Sun'\n        };\n\n        return dayAbbrs[day];\n    }\n}","import { Course, Department } from '../../types/types'\nimport { CourseDataService } from '../../services/courseDataService'\nimport { ThemeSelector } from '../components/ThemeSelector'\nimport { DataRefreshService } from '../../services/DataRefreshService'\nimport { CourseSelectionService } from '../../services/CourseSelectionService'\nimport { TimeUtils } from '../utils/timeUtils'\n\nexport class MainController {\n    private courseDataService: CourseDataService;\n    private themeSelector: ThemeSelector;\n    private dataRefreshService: DataRefreshService;\n    private courseSelectionService: CourseSelectionService;\n    private allDepartments: Department[] = [];\n    private selectedDepartment: Department | null = null;\n    private selectedCourse: Course | null = null;\n    private currentView: 'list' | 'grid' = 'list';\n    private currentPage: 'planner' | 'schedule' = 'planner';\n\n    // Department categories based on WPI structure\n    private departmentCategories: { [key: string]: string } = {\n        // Science\n        'BB': 'Science',\n        'BCB': 'Science', \n        'CH': 'Science',\n        'CS': 'Science',\n        'DS': 'Science',\n        'GE': 'Science',\n        'IMGD': 'Science',\n        'MA': 'Science',\n        'MTE': 'Science',\n        'PTE': 'Science',\n        'NE': 'Science',\n        'PH': 'Science',\n        \n        // Engineering\n        'AE': 'Engineering',\n        'AR': 'Engineering',\n        'ARE': 'Engineering',\n        'BME': 'Engineering',\n        'CE': 'Engineering',\n        'CHE': 'Engineering',\n        'ECE': 'Engineering',\n        'ES': 'Engineering',\n        'FP': 'Engineering',\n        'ME': 'Engineering',\n        'MFE': 'Engineering',\n        'MSE': 'Engineering',\n        'NUE': 'Engineering',\n        'RBE': 'Engineering',\n        'SYE': 'Engineering',\n        \n        // Business & Management\n        'BUS': 'Business & Management',\n        'ECON': 'Business & Management',\n        'MIS': 'Business & Management',\n        'OIE': 'Business & Management',\n        \n        // Humanities & Arts\n        'EN': 'Humanities & Arts',\n        'HI': 'Humanities & Arts',\n        'HU': 'Humanities & Arts',\n        'MU': 'Humanities & Arts',\n        'RE': 'Humanities & Arts',\n        'SP': 'Humanities & Arts',\n        'TH': 'Humanities & Arts',\n        'WR': 'Humanities & Arts',\n        \n        // Social Sciences\n        'GOV': 'Social Sciences',\n        'PSY': 'Social Sciences',\n        'SOC': 'Social Sciences',\n        'SS': 'Social Sciences'\n    };\n\n    constructor() {\n        this.courseDataService = new CourseDataService();\n        this.themeSelector = new ThemeSelector();\n        this.dataRefreshService = new DataRefreshService();\n        this.courseSelectionService = new CourseSelectionService();\n        this.init();\n    }\n\n    private async init(): Promise<void> {\n        this.showLoadingState();\n        await this.loadCourseData();\n        this.displayDepartments();\n        this.setupEventListeners();\n        this.setupDataRefreshListener();\n        this.setupCourseSelectionListener();\n        this.displaySelectedCourses();\n        this.syncHeaderHeights();\n        this.setupHeaderResizeObserver();\n    }\n\n    private async loadCourseData(): Promise<void> {\n        try {\n            console.log('Loading course data...');\n            const scheduleDB = await this.courseDataService.loadCourseData();\n            this.allDepartments = scheduleDB.departments;\n            console.log(`Loaded ${this.allDepartments.length} departments`);\n        } catch (error) {\n            console.error('Failed to load course data:', error);\n            this.showErrorMessage('Failed to load course data. Please try refreshing the page.');\n        }\n    }\n\n    private displayDepartments(): void {\n        const departmentList = document.getElementById('department-list');\n        if (!departmentList) return;\n\n        // Group departments by category\n        const categories = this.groupDepartmentsByCategory();\n        \n        let html = '';\n        Object.entries(categories).forEach(([categoryName, departments]) => {\n            if (departments.length === 0) return;\n            \n            html += `\n                <div class=\"department-category\">\n                    <div class=\"category-header\">${categoryName}</div>\n                    <div class=\"department-list\">\n            `;\n            \n            departments.forEach(dept => {\n                const courseCount = dept.courses.length;\n                html += `\n                    <div class=\"department-item\" data-dept-id=\"${dept.abbreviation}\">\n                        ${dept.name} (${courseCount})\n                    </div>\n                `;\n            });\n            \n            html += `\n                    </div>\n                </div>\n            `;\n        });\n\n        departmentList.innerHTML = html;\n    }\n\n    private groupDepartmentsByCategory(): { [key: string]: Department[] } {\n        const categories: { [key: string]: Department[] } = {\n            'Science': [],\n            'Engineering': [],\n            'Business & Management': [],\n            'Humanities & Arts': [],\n            'Social Sciences': [],\n            'Other': []\n        };\n\n        this.allDepartments.forEach(dept => {\n            const category = this.departmentCategories[dept.abbreviation] || 'Other';\n            categories[category].push(dept);\n        });\n\n        // Sort departments within each category\n        Object.keys(categories).forEach(category => {\n            categories[category].sort((a, b) => a.name.localeCompare(b.name));\n        });\n\n        return categories;\n    }\n\n    private setupEventListeners(): void {\n        // Department selection\n        document.addEventListener('click', (e) => {\n            const target = e.target as HTMLElement;\n            \n            if (target.classList.contains('department-item')) {\n                const deptId = target.dataset.deptId;\n                if (deptId) {\n                    this.selectDepartment(deptId);\n                    \n                    // Update active state\n                    document.querySelectorAll('.department-item').forEach(item => {\n                        item.classList.remove('active');\n                    });\n                    target.classList.add('active');\n                }\n            }\n            \n            if (target.classList.contains('section-badge')) {\n                target.classList.toggle('selected');\n            }\n            \n            if (target.classList.contains('course-select-btn')) {\n                const courseId = target.dataset.courseId;\n                if (courseId) {\n                    this.toggleCourseSelection(courseId);\n                }\n            }\n\n            if (target.classList.contains('course-remove-btn')) {\n                const courseId = target.dataset.courseId;\n                if (courseId) {\n                    this.courseSelectionService.unselectCourse(courseId);\n                }\n            }\n\n            if (target.classList.contains('section-select-btn')) {\n                const courseId = target.dataset.courseId;\n                const sectionNumber = target.dataset.section;\n                if (courseId && sectionNumber) {\n                    this.handleSectionSelection(courseId, sectionNumber);\n                }\n            }\n\n            if (target.closest('.course-item') && !target.classList.contains('course-select-btn') && !target.classList.contains('section-badge')) {\n                const courseItem = target.closest('.course-item') as HTMLElement;\n                const courseId = courseItem.dataset.courseId;\n                if (courseId) {\n                    this.selectCourse(courseId);\n                }\n            }\n        });\n\n        // Search functionality\n        const searchInput = document.getElementById('search-input') as HTMLInputElement;\n        if (searchInput) {\n            searchInput.addEventListener('input', () => {\n                this.handleSearch(searchInput.value);\n            });\n        }\n\n        // Clear selection\n        const clearButton = document.getElementById('clear-selection');\n        if (clearButton) {\n            clearButton.addEventListener('click', () => {\n                this.clearSelection();\n            });\n        }\n\n        // Schedule navigation\n        const scheduleButton = document.getElementById('schedule-btn');\n        if (scheduleButton) {\n            scheduleButton.addEventListener('click', () => {\n                this.togglePage();\n            });\n        }\n\n        // View toggle buttons\n        const viewListBtn = document.getElementById('view-list');\n        const viewGridBtn = document.getElementById('view-grid');\n        \n        if (viewListBtn) {\n            viewListBtn.addEventListener('click', () => {\n                this.setView('list');\n            });\n        }\n        \n        if (viewGridBtn) {\n            viewGridBtn.addEventListener('click', () => {\n                this.setView('grid');\n            });\n        }\n    }\n\n    private selectDepartment(deptId: string): void {\n        const department = this.allDepartments.find(d => d.abbreviation === deptId);\n        if (!department) return;\n\n        this.selectedDepartment = department;\n        this.displayCourses(department.courses);\n        \n        // Update content header\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            contentHeader.textContent = `${department.name} Courses`;\n        }\n    }\n\n    private displayCourses(courses: Course[]): void {\n        if (this.currentView === 'grid') {\n            this.displayCoursesGrid(courses);\n        } else {\n            this.displayCoursesList(courses);\n        }\n    }\n\n    private displayCoursesList(courses: Course[]): void {\n        const courseContainer = document.getElementById('course-container');\n        if (!courseContainer) return;\n\n        if (courses.length === 0) {\n            courseContainer.innerHTML = '<div class=\"empty-state\">No courses found in this department.</div>';\n            return;\n        }\n\n        // Sort courses by course number\n        const sortedCourses = courses.sort((a, b) => a.number.localeCompare(b.number));\n\n        let html = '<div class=\"course-list\">';\n        \n        sortedCourses.forEach(course => {\n            const hasWarning = this.courseHasWarning(course);\n            const sections = course.sections.map(s => s.number).filter(Boolean);\n            const isSelected = this.courseSelectionService.isCourseSelected(course.id);\n            \n            html += `\n                <div class=\"course-item ${isSelected ? 'selected' : ''}\" data-course-id=\"${course.id}\">\n                    <div class=\"course-header\">\n                        <button class=\"course-select-btn ${isSelected ? 'selected' : ''}\" data-course-id=\"${course.id}\" title=\"${isSelected ? 'Remove from selection' : 'Add to selection'}\">\n                            ${isSelected ? '✓' : '+'}\n                        </button>\n                        <div class=\"course-code\">${course.department.abbreviation}${course.number}</div>\n                        <div class=\"course-details\">\n                            <div class=\"course-name\">\n                                ${course.name}\n                                ${hasWarning ? '<span class=\"warning-icon\">⚠</span>' : ''}\n                            </div>\n                            <div class=\"course-sections\">\n                                ${sections.map(section => \n                                    `<span class=\"section-badge\" data-section=\"${section}\">${section}</span>`\n                                ).join('')}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `;\n        });\n        \n        html += '</div>';\n        courseContainer.innerHTML = html;\n    }\n\n    private displayCoursesGrid(courses: Course[]): void {\n        const courseContainer = document.getElementById('course-container');\n        if (!courseContainer) return;\n\n        if (courses.length === 0) {\n            courseContainer.innerHTML = '<div class=\"empty-state\">No courses found in this department.</div>';\n            return;\n        }\n\n        // Sort courses by course number\n        const sortedCourses = courses.sort((a, b) => a.number.localeCompare(b.number));\n\n        let html = '<div class=\"course-grid\">';\n        \n        sortedCourses.forEach(course => {\n            const hasWarning = this.courseHasWarning(course);\n            const isSelected = this.courseSelectionService.isCourseSelected(course.id);\n            const credits = course.minCredits === course.maxCredits ? course.minCredits : `${course.minCredits}-${course.maxCredits}`;\n            \n            html += `\n                <div class=\"course-card ${isSelected ? 'selected' : ''}\" data-course-id=\"${course.id}\">\n                    <div class=\"course-card-header\">\n                        <div class=\"course-code\">${course.department.abbreviation}${course.number}</div>\n                        <button class=\"course-select-btn ${isSelected ? 'selected' : ''}\" data-course-id=\"${course.id}\" title=\"${isSelected ? 'Remove from selection' : 'Add to selection'}\">\n                            ${isSelected ? '✓' : '+'}\n                        </button>\n                    </div>\n                    <div class=\"course-title\">\n                        ${course.name}\n                        ${hasWarning ? '<span class=\"warning-icon\">⚠</span>' : ''}\n                    </div>\n                    <div class=\"course-info\">\n                        <span class=\"course-credits\">${credits} credits</span>\n                        <span class=\"course-sections-count\">${course.sections.length} section${course.sections.length !== 1 ? 's' : ''}</span>\n                    </div>\n                </div>\n            `;\n        });\n        \n        html += '</div>';\n        courseContainer.innerHTML = html;\n    }\n\n    private courseHasWarning(course: Course): boolean {\n        // Add logic to determine if a course has warnings\n        // For now, randomly add warnings to some courses for demo\n        return Math.random() > 0.7;\n    }\n\n    private handleSearch(query: string): void {\n        if (!query.trim()) {\n            if (this.selectedDepartment) {\n                this.displayCourses(this.selectedDepartment.courses);\n            }\n            return;\n        }\n\n        const allCourses: Course[] = [];\n        this.allDepartments.forEach(dept => {\n            allCourses.push(...dept.courses);\n        });\n\n        const filteredCourses = allCourses.filter(course => \n            course.name.toLowerCase().includes(query.toLowerCase()) ||\n            course.number.toLowerCase().includes(query.toLowerCase()) ||\n            course.id.toLowerCase().includes(query.toLowerCase())\n        );\n\n        this.displayCourses(filteredCourses);\n        \n        // Update header for search results\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            contentHeader.textContent = `Search Results (${filteredCourses.length})`;\n        }\n    }\n\n    private clearSelection(): void {\n        // Clear selected sections\n        document.querySelectorAll('.section-badge.selected').forEach(badge => {\n            badge.classList.remove('selected');\n        });\n\n        // Clear search\n        const searchInput = document.getElementById('search-input') as HTMLInputElement;\n        if (searchInput) {\n            searchInput.value = '';\n        }\n\n        // Reset to default state\n        const courseContainer = document.getElementById('course-container');\n        if (courseContainer) {\n            courseContainer.innerHTML = '<div class=\"loading-message\">Select a department to view courses...</div>';\n        }\n\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            contentHeader.textContent = 'Course Listings';\n        }\n\n        // Clear active department\n        document.querySelectorAll('.department-item').forEach(item => {\n            item.classList.remove('active');\n        });\n        this.selectedDepartment = null;\n        this.selectedCourse = null;\n        this.clearCourseDescription();\n        this.displaySelectedCourses();\n    }\n\n    private selectCourse(courseId: string): void {\n        // Find the course in all departments\n        let course: Course | null = null;\n        for (const dept of this.allDepartments) {\n            course = dept.courses.find(c => c.id === courseId) || null;\n            if (course) break;\n        }\n\n        if (!course) return;\n\n        this.selectedCourse = course;\n        this.displayCourseDescription(course);\n        \n        // Update active state for course items\n        document.querySelectorAll('.course-item').forEach(item => {\n            item.classList.remove('active');\n        });\n        \n        const selectedCourseElement = document.querySelector(`[data-course-id=\"${courseId}\"]`);\n        if (selectedCourseElement) {\n            selectedCourseElement.classList.add('active');\n        }\n    }\n\n    private displayCourseDescription(course: Course): void {\n        const descriptionContainer = document.getElementById('course-description');\n        if (!descriptionContainer) return;\n\n        const html = `\n            <div class=\"course-info\">\n                <div class=\"course-title\">${course.name}</div>\n                <div class=\"course-code\">${course.department.abbreviation}${course.number} (${course.minCredits === course.maxCredits ? course.minCredits : `${course.minCredits}-${course.maxCredits}`} credits)</div>\n            </div>\n            <div class=\"course-description-text\">${course.description}</div>\n        `;\n\n        descriptionContainer.innerHTML = html;\n    }\n\n    private clearCourseDescription(): void {\n        const descriptionContainer = document.getElementById('course-description');\n        if (descriptionContainer) {\n            descriptionContainer.innerHTML = '<div class=\"empty-state\">Select a course to view description</div>';\n        }\n    }\n\n    private displaySelectedCourses(): void {\n        const selectedCoursesContainer = document.getElementById('selected-courses-list');\n        const countElement = document.getElementById('selected-count');\n        \n        if (!selectedCoursesContainer || !countElement) return;\n\n        const selectedCourses = this.courseSelectionService.getSelectedCourses();\n        \n        // Update count\n        countElement.textContent = `(${selectedCourses.length})`;\n\n        if (selectedCourses.length === 0) {\n            selectedCoursesContainer.innerHTML = '<div class=\"empty-state\">No courses selected yet</div>';\n            return;\n        }\n\n        // Sort selected courses by department and number\n        const sortedCourses = selectedCourses.sort((a, b) => {\n            const deptCompare = a.course.department.abbreviation.localeCompare(b.course.department.abbreviation);\n            if (deptCompare !== 0) return deptCompare;\n            return a.course.number.localeCompare(b.course.number);\n        });\n\n        let html = '';\n        sortedCourses.forEach(selectedCourse => {\n            const course = selectedCourse.course;\n            const credits = course.minCredits === course.maxCredits \n                ? `${course.minCredits} credits` \n                : `${course.minCredits}-${course.maxCredits} credits`;\n\n            html += `\n                <div class=\"selected-course-item\" data-course-id=\"${course.id}\">\n                    <div class=\"selected-course-info\">\n                        <div class=\"selected-course-code\">${course.department.abbreviation}${course.number}</div>\n                        <div class=\"selected-course-name\">${course.name}</div>\n                        <div class=\"selected-course-credits\">${credits}</div>\n                    </div>\n                    <button class=\"course-remove-btn\" data-course-id=\"${course.id}\" title=\"Remove from selection\">\n                        ×\n                    </button>\n                </div>\n            `;\n        });\n\n        selectedCoursesContainer.innerHTML = html;\n    }\n\n    private displayScheduleSelectedCourses(): void {\n        const selectedCoursesContainer = document.getElementById('schedule-selected-courses');\n        const countElement = document.getElementById('schedule-selected-count');\n        \n        if (!selectedCoursesContainer || !countElement) return;\n\n        const selectedCourses = this.courseSelectionService.getSelectedCourses();\n        \n        // Update count\n        countElement.textContent = `(${selectedCourses.length})`;\n\n        if (selectedCourses.length === 0) {\n            selectedCoursesContainer.innerHTML = '<div class=\"empty-state\">No courses selected yet</div>';\n            return;\n        }\n\n        // Sort selected courses by department and number\n        const sortedCourses = selectedCourses.sort((a, b) => {\n            const deptCompare = a.course.department.abbreviation.localeCompare(b.course.department.abbreviation);\n            if (deptCompare !== 0) return deptCompare;\n            return a.course.number.localeCompare(b.course.number);\n        });\n\n        let html = '';\n        sortedCourses.forEach(selectedCourse => {\n            const course = selectedCourse.course;\n            const credits = course.minCredits === course.maxCredits \n                ? `${course.minCredits} credits` \n                : `${course.minCredits}-${course.maxCredits} credits`;\n\n            // Group sections by term\n            const sectionsByTerm: { [term: string]: typeof course.sections } = {};\n            course.sections.forEach(section => {\n                if (!sectionsByTerm[section.term]) {\n                    sectionsByTerm[section.term] = [];\n                }\n                sectionsByTerm[section.term].push(section);\n            });\n\n            html += `\n                <div class=\"schedule-course-item\" data-course-id=\"${course.id}\">\n                    <div class=\"schedule-course-header\">\n                        <div class=\"schedule-course-info\">\n                            <div class=\"schedule-course-code\">${course.department.abbreviation}${course.number}</div>\n                            <div class=\"schedule-course-name\">${course.name}</div>\n                            <div class=\"schedule-course-credits\">${credits}</div>\n                        </div>\n                        <button class=\"course-remove-btn\" data-course-id=\"${course.id}\" title=\"Remove from selection\">\n                            ×\n                        </button>\n                    </div>\n                    <div class=\"schedule-sections-container\">\n            `;\n\n            // Display sections grouped by term\n            const terms = Object.keys(sectionsByTerm).sort();\n            terms.forEach(term => {\n                html += `<div class=\"term-sections\" data-term=\"${term}\">`;\n                html += `<div class=\"term-label\">${term} Term</div>`;\n                \n                sectionsByTerm[term].forEach(section => {\n                    const isSelected = selectedCourse.selectedSection === section.number;\n                    const selectedClass = isSelected ? 'selected' : '';\n                    \n                    // Get primary period for display\n                    const primaryPeriod = section.periods[0];\n                    if (primaryPeriod) {\n                        const timeRange = TimeUtils.formatTimeRange(primaryPeriod.startTime, primaryPeriod.endTime);\n                        const days = TimeUtils.formatDays(primaryPeriod.days);\n                        \n                        html += `\n                            <div class=\"section-option ${selectedClass}\" data-course-id=\"${course.id}\" data-section=\"${section.number}\">\n                                <div class=\"section-info\">\n                                    <div class=\"section-number\">${section.number}</div>\n                                    <div class=\"section-schedule\">${days} ${timeRange}</div>\n                                    <div class=\"section-professor\">${primaryPeriod.professor}</div>\n                                </div>\n                                <button class=\"section-select-btn ${selectedClass}\" data-course-id=\"${course.id}\" data-section=\"${section.number}\">\n                                    ${isSelected ? '✓' : '+'}\n                                </button>\n                            </div>\n                        `;\n                    }\n                });\n                \n                html += `</div>`;\n            });\n\n            html += `\n                    </div>\n                </div>\n            `;\n        });\n\n        selectedCoursesContainer.innerHTML = html;\n    }\n\n    private handleSectionSelection(courseId: string, sectionNumber: string): void {\n        const currentSelectedSection = this.courseSelectionService.getSelectedSection(courseId);\n        \n        if (currentSelectedSection === sectionNumber) {\n            // Deselect current section\n            this.courseSelectionService.setSelectedSection(courseId, null);\n        } else {\n            // Select new section\n            this.courseSelectionService.setSelectedSection(courseId, sectionNumber);\n        }\n        \n        // Update schedule grids if we're on the schedule page\n        if (this.currentPage === 'schedule') {\n            this.renderScheduleGrids();\n        }\n    }\n\n    private toggleCourseSelection(courseId: string): void {\n        // Find the course in all departments\n        let course: Course | null = null;\n        for (const dept of this.allDepartments) {\n            course = dept.courses.find(c => c.id === courseId) || null;\n            if (course) break;\n        }\n\n        if (!course) return;\n\n        const wasSelected = this.courseSelectionService.toggleCourseSelection(course);\n        this.updateCourseSelectionUI(courseId, wasSelected);\n    }\n\n    private updateCourseSelectionUI(courseId: string, isSelected: boolean): void {\n        const courseElement = document.querySelector(`[data-course-id=\"${courseId}\"]`);\n        const selectBtn = courseElement?.querySelector('.course-select-btn');\n        \n        if (courseElement && selectBtn) {\n            if (isSelected) {\n                courseElement.classList.add('selected');\n                selectBtn.textContent = '✓';\n                selectBtn.classList.add('selected');\n            } else {\n                courseElement.classList.remove('selected');\n                selectBtn.textContent = '+';\n                selectBtn.classList.remove('selected');\n            }\n        }\n    }\n\n    private setupCourseSelectionListener(): void {\n        this.courseSelectionService.onSelectionChange((selectedCourses) => {\n            console.log(`Selected courses updated: ${selectedCourses.length} courses selected`);\n            // Update UI to reflect changes\n            this.refreshCourseSelectionUI();\n            this.displaySelectedCourses();\n            this.displayScheduleSelectedCourses();\n        });\n    }\n\n    private refreshCourseSelectionUI(): void {\n        // Update all course items to reflect current selection state\n        document.querySelectorAll('.course-item').forEach(item => {\n            const courseId = (item as HTMLElement).dataset.courseId;\n            if (courseId) {\n                const isSelected = this.courseSelectionService.isCourseSelected(courseId);\n                this.updateCourseSelectionUI(courseId, isSelected);\n            }\n        });\n    }\n\n    private setupDataRefreshListener(): void {\n        window.addEventListener('data-refreshed', async () => {\n            console.log('Data refresh detected, reloading course data...');\n            this.showLoadingState();\n            await this.loadCourseData();\n            this.displayDepartments();\n            \n            // If we have a selected department, refresh its courses too\n            if (this.selectedDepartment) {\n                const updatedDept = this.allDepartments.find(d => d.abbreviation === this.selectedDepartment!.abbreviation);\n                if (updatedDept) {\n                    this.selectedDepartment = updatedDept;\n                    this.displayCourses(updatedDept.courses);\n                }\n            }\n        });\n    }\n\n    private showLoadingState(): void {\n        const departmentList = document.getElementById('department-list');\n        if (departmentList) {\n            departmentList.innerHTML = '<div class=\"loading-message\">Loading departments...</div>';\n        }\n    }\n\n    private showErrorMessage(message: string): void {\n        const departmentList = document.getElementById('department-list');\n        if (departmentList) {\n            departmentList.innerHTML = `<div class=\"error-message\">${message}</div>`;\n        }\n        \n        const courseContainer = document.getElementById('course-container');\n        if (courseContainer) {\n            courseContainer.innerHTML = `<div class=\"error-message\">${message}</div>`;\n        }\n    }\n\n    // Public methods for easy access to selected courses\n    public getSelectedCourses() {\n        return this.courseSelectionService.getSelectedCourses();\n    }\n\n    public getSelectedCoursesCount(): number {\n        return this.courseSelectionService.getSelectedCoursesCount();\n    }\n\n    public getCourseSelectionService(): CourseSelectionService {\n        return this.courseSelectionService;\n    }\n\n    private setView(view: 'list' | 'grid'): void {\n        this.currentView = view;\n        \n        // Update button states\n        const viewListBtn = document.getElementById('view-list');\n        const viewGridBtn = document.getElementById('view-grid');\n        \n        if (viewListBtn && viewGridBtn) {\n            if (view === 'list') {\n                viewListBtn.classList.add('btn-primary', 'active');\n                viewListBtn.classList.remove('btn-secondary');\n                viewGridBtn.classList.add('btn-secondary');\n                viewGridBtn.classList.remove('btn-primary', 'active');\n            } else {\n                viewGridBtn.classList.add('btn-primary', 'active');\n                viewGridBtn.classList.remove('btn-secondary');\n                viewListBtn.classList.add('btn-secondary');\n                viewListBtn.classList.remove('btn-primary', 'active');\n            }\n        }\n        \n        // Re-render current courses if any are displayed\n        if (this.selectedDepartment) {\n            this.displayCourses(this.selectedDepartment.courses);\n        } else {\n            // Check if we're showing search results\n            const searchInput = document.getElementById('search-input') as HTMLInputElement;\n            if (searchInput?.value.trim()) {\n                this.handleSearch(searchInput.value);\n            }\n        }\n    }\n\n    private syncHeaderHeights(): void {\n        const sidebarHeader = document.querySelector('.sidebar-header') as HTMLElement;\n        const contentHeader = document.querySelector('.content-header') as HTMLElement;\n        const panelHeaders = document.querySelectorAll('.panel-header') as NodeListOf<HTMLElement>;\n\n        if (!sidebarHeader || !contentHeader || !panelHeaders.length) {\n            return;\n        }\n\n        // Reset heights to natural size to get accurate measurements\n        document.documentElement.style.setProperty('--synced-header-height', 'auto');\n        \n        // Allow layout to settle\n        requestAnimationFrame(() => {\n            // Get natural heights of all headers\n            const sidebarHeight = sidebarHeader.offsetHeight;\n            const contentHeight = contentHeader.offsetHeight;\n            const panelHeights = Array.from(panelHeaders).map(header => header.offsetHeight);\n            \n            // Find the maximum height\n            const maxHeight = Math.max(sidebarHeight, contentHeight, ...panelHeights);\n            \n            // Set the synced height to match the tallest header\n            document.documentElement.style.setProperty('--synced-header-height', `${maxHeight}px`);\n        });\n    }\n\n    private setupHeaderResizeObserver(): void {\n        if (!window.ResizeObserver) return;\n\n        const headers = [\n            document.querySelector('.sidebar-header'),\n            document.querySelector('.content-header'),\n            ...document.querySelectorAll('.panel-header')\n        ].filter(Boolean) as HTMLElement[];\n\n        if (!headers.length) return;\n\n        const resizeObserver = new ResizeObserver(() => {\n            this.syncHeaderHeights();\n        });\n\n        headers.forEach(header => {\n            resizeObserver.observe(header);\n        });\n    }\n\n    private togglePage(): void {\n        const nextPage = this.currentPage === 'planner' ? 'schedule' : 'planner';\n        this.switchToPage(nextPage);\n    }\n\n    private switchToPage(page: 'planner' | 'schedule'): void {\n        if (page === this.currentPage) return;\n\n        this.currentPage = page;\n\n        // Update button text based on current page\n        const scheduleButton = document.getElementById('schedule-btn');\n        if (scheduleButton) {\n            if (page === 'schedule') {\n                scheduleButton.textContent = 'Back to Classes';\n                this.showSchedulePage();\n            } else {\n                scheduleButton.textContent = 'Schedule';\n                this.showPlannerPage();\n            }\n        }\n    }\n\n    private showPlannerPage(): void {\n        const plannerPage = document.getElementById('planner-page');\n        const schedulePage = document.getElementById('schedule-page');\n\n        if (plannerPage) plannerPage.style.display = 'grid';\n        if (schedulePage) schedulePage.style.display = 'none';\n    }\n\n    private showSchedulePage(): void {\n        const plannerPage = document.getElementById('planner-page');\n        const schedulePage = document.getElementById('schedule-page');\n\n        if (plannerPage) plannerPage.style.display = 'none';\n        if (schedulePage) schedulePage.style.display = 'flex';\n        \n        // Update schedule page with current selected courses\n        this.displayScheduleSelectedCourses();\n    }\n}","import './style.css'\nimport { MainController } from './ui/controllers/MainController'\n\n// Initialize the application\nnew MainController()"],"names":["DayOfWeek","_CourseDataService","freshData","error","response","jsonData","scheduleDB","departmentMap","processed","entry","courseTitleMatch","deptCode","courseNum","courseName","deptName","department","courseId","course","c","sectionMatch","sectionNumber","enrolled","capacity","n","waitlisted","waitlistCap","section","period","html","location","match","pattern","isStart","timeMatch","timeStr","dayPattern","days","dayMap","char","hours","minutes","ampm","daysStr","day","cached","cacheData","parsedData","cacheAge","maxAge","query","departments","allCourses","dept","queryLower","CourseDataService","ThemeManager","wpiClassic","wpiDark","wpiLight","highContrast","savedTheme","theme","themeId","oldTheme","newTheme","themeDefinition","event","root","key","value","str","preferredTheme","listener","themeJson","_StorageManager","state","serializedState","stored","parsed","schedule","schedules","existingIndex","s","serializedSchedules","scheduleId","filtered","preferences","serializedPreferences","exportData","data","obj","item","result","selectedCourses","serializedCourses","StorageManager","ThemeSelector","availableThemes","currentThemeId","isActive","option","currentTheme","selectedThemeId","selectedOption","_DataRefreshService","lastModified","date","fallbackDate","options","lastRefresh","timeSinceRefresh","remainingTime","resolve","message","timestamp","DataRefreshService","CourseManager","isRequired","selectedCourse","preference","deniedIndex","preferredIndex","courses","CourseSelectionService","sc","persistedCourses","_TimeUtils","time","totalMinutes","startMinutes","relativeMinutes","slot","startTime","endTime","startRow","endRow","hours12","startFormatted","endFormatted","dayAbbreviations","labels","hour","TimeUtils","MainController","departmentList","categories","categoryName","courseCount","category","a","b","e","target","deptId","searchInput","clearButton","scheduleButton","viewListBtn","viewGridBtn","d","contentHeader","courseContainer","sortedCourses","hasWarning","sections","isSelected","credits","filteredCourses","badge","selectedCourseElement","descriptionContainer","selectedCoursesContainer","countElement","deptCompare","sectionsByTerm","term","selectedClass","primaryPeriod","timeRange","wasSelected","courseElement","selectBtn","updatedDept","view","sidebarHeader","panelHeaders","sidebarHeight","contentHeight","panelHeights","header","maxHeight","headers","resizeObserver","nextPage","page","plannerPage","schedulePage"],"mappings":"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"}