{"version":3,"file":"index-BFtVqR5N.js","sources":["../../src/types/types.ts","../../src/services/courseDataService.ts","../../src/themes/ThemeManager.ts","../../src/core/StorageManager.ts","../../src/ui/components/ThemeSelector.ts","../../src/core/CourseManager.ts","../../src/utils/validators.ts","../../src/services/CourseSelectionService.ts","../../src/types/schedule.ts","../../src/core/ConflictDetector.ts","../../src/ui/controllers/DepartmentController.ts","../../src/ui/controllers/CourseController.ts","../../src/ui/utils/timeUtils.ts","../../src/ui/controllers/ScheduleController.ts","../../src/ui/controllers/UIStateManager.ts","../../src/ui/controllers/TimestampManager.ts","../../src/ui/controllers/MainController.ts","../../src/main.ts"],"sourcesContent":["export interface Course {\n    id: string;\n    number: string;\n    name: string;\n    description: string;\n    department: Department;\n    sections: Section[];\n    minCredits: number;\n    maxCredits: number;\n}\n\nexport interface Department {\n    abbreviation: string;\n    name: string;\n    courses: Course[];\n}\n\nexport interface Section {\n    crn: number;\n    number: string;\n    seats: number;\n    seatsAvailable: number;\n    actualWaitlist: number;\n    maxWaitlist: number;\n    note?: string;\n    description: string;\n    term: string;\n    periods: Period[];\n}\n\nexport interface Period {\n    type: string;\n    professor: string;\n    professorEmail?: string;\n    startTime: Time;\n    endTime: Time;\n    location: string;\n    building: string;\n    room: string;\n    seats: number;\n    seatsAvailable: number;\n    actualWaitlist: number;\n    maxWaitlist: number;\n    days: Set<DayOfWeek>;\n    specificSection?: string;\n}\n\nexport interface Time {\n    hours: number;\n    minutes: number;\n    displayTime: string;\n}\n\nexport enum DayOfWeek {\n    MONDAY = 'mon',\n    TUESDAY = 'tue',\n    WEDNESDAY = 'wed',\n    THURSDAY = 'thu',\n    FRIDAY = 'fri',\n    SATURDAY = 'sat',\n    SUNDAY = 'sun'\n}\n\nexport interface ScheduleDB {\n    departments: Department[];\n    generated: string;\n}\n\nexport interface PlannerState {\n    courses: Course[];\n    selectedYear: number;\n    searchTerm: string;\n    activeFilters: string[];\n    plan: {\n        [year: number]: {\n            fall: Course[];\n            spring: Course[];\n            summer: Course[];\n        };\n    };\n}\n\nexport type Semester = 'fall' | 'spring' | 'summer';","import { ScheduleDB, Department, Course, Section, Period, Time, DayOfWeek } from '../types/types'\n\nexport class CourseDataService {\n    private static readonly WPI_COURSE_DATA_URL = './course-data.json';\n    private static readonly LOCAL_STORAGE_KEY = 'wpi-course-data';\n    private static readonly CACHE_EXPIRY_HOURS = 1;\n\n    private scheduleDB: ScheduleDB | null = null;\n\n    constructor() {}\n\n    async loadCourseData(): Promise<ScheduleDB> {\n        try {\n            console.log('Loading course data...');\n            const freshData = await this.fetchFreshData();\n            this.scheduleDB = freshData;\n            return freshData;\n        } catch (error) {\n            console.error('Failed to load course data:', error);\n            throw new Error('No course data available');\n        }\n    }\n\n    private async fetchFreshData(): Promise<ScheduleDB> {\n        console.log('Fetching course data from local static file...');\n        \n        const response = await fetch(CourseDataService.WPI_COURSE_DATA_URL, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n            },\n            cache: 'no-cache'\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to fetch course data: ${response.status} ${response.statusText}`);\n        }\n\n        const jsonData = await response.json();\n        return this.parseJSONData(jsonData);\n    }\n\n    private parseJSONData(jsonData: any): ScheduleDB {\n        console.log('Parsing JSON data...');\n        const scheduleDB: ScheduleDB = {\n            departments: [],\n            generated: new Date().toISOString()\n        };\n\n        if (!jsonData.Report_Entry || !Array.isArray(jsonData.Report_Entry)) {\n            console.error('Invalid JSON data structure:', jsonData);\n            throw new Error('Invalid JSON data structure');\n        }\n\n        console.log(`Processing ${jsonData.Report_Entry.length} course entries...`);\n        const departmentMap = new Map<string, Department>();\n\n        let processed = 0;\n        for (const entry of jsonData.Report_Entry) {\n            try {\n                this.processJSONEntry(entry, departmentMap);\n                processed++;\n            } catch (error) {\n                console.warn('Failed to process entry:', entry, error);\n            }\n        }\n\n        scheduleDB.departments = Array.from(departmentMap.values());\n        console.log(`Successfully processed ${processed}/${jsonData.Report_Entry.length} entries`);\n        console.log(`Loaded ${scheduleDB.departments.length} departments with course data`);\n        return scheduleDB;\n    }\n\n    private processJSONEntry(entry: any, departmentMap: Map<string, Department>): void {\n        const courseTitle = entry.Course_Title || '';\n        const courseTitleMatch = courseTitle.match(/^([A-Z]+)\\s+(\\d+)\\s*-\\s*(.+)$/);\n        if (!courseTitleMatch) return;\n\n        const [, deptCode, courseNum, courseName] = courseTitleMatch;\n        const deptName = entry.Academic_Units || entry.Subject || deptCode;\n        \n        const department = this.getOrCreateDepartment(deptCode, deptName, departmentMap);\n        const course = this.getOrCreateCourse(deptCode, courseNum, courseName, entry, department);\n        const section = this.createSectionFromEntry(entry, course);\n        \n        if (entry.Meeting_Patterns && entry.Locations && entry.Instructors) {\n            const period = this.createPeriodFromEntry(entry, section);\n            section.periods.push(period);\n        }\n\n        course.sections.push(section);\n    }\n\n    private getOrCreateDepartment(deptCode: string, deptName: string, departmentMap: Map<string, Department>): Department {\n        let department = departmentMap.get(deptCode);\n        if (!department) {\n            department = {\n                abbreviation: deptCode,\n                name: deptName,\n                courses: []\n            };\n            departmentMap.set(deptCode, department);\n        }\n        return department;\n    }\n\n    private getOrCreateCourse(deptCode: string, courseNum: string, courseName: string, entry: any, department: Department): Course {\n        const courseId = `${deptCode}-${courseNum}`;\n        let course = department.courses.find(c => c.id === courseId);\n        if (!course) {\n            course = {\n                id: courseId,\n                number: courseNum,\n                name: courseName,\n                description: this.stripHtml(entry.Course_Description || ''),\n                department: department,\n                sections: [],\n                minCredits: parseFloat(entry.Credits || '3'),\n                maxCredits: parseFloat(entry.Credits || '3')\n            };\n            department.courses.push(course);\n        }\n        return course;\n    }\n\n    private createSectionFromEntry(entry: any, course: Course): Section {\n        const sectionMatch = entry.Course_Section?.match(/([A-Z]+\\s+\\d+)-([A-Z0-9]+)/);\n        const sectionNumber = sectionMatch ? sectionMatch[2] : '';\n        \n        const [enrolled, capacity] = (entry.Enrolled_Capacity || '0/0').split('/').map((n: string) => parseInt(n) || 0);\n        const [waitlisted, waitlistCap] = (entry.Waitlist_Waitlist_Capacity || '0/0').split('/').map((n: string) => parseInt(n) || 0);\n        \n        return {\n            crn: 0, // Not available in new format\n            number: sectionNumber,\n            seats: capacity,\n            seatsAvailable: capacity - enrolled,\n            actualWaitlist: waitlisted,\n            maxWaitlist: waitlistCap,\n            note: entry.Section_Status === 'Waitlist' ? 'Waitlist Available' : undefined,\n            description: this.stripHtml(entry.Course_Section_Description || ''),\n            term: entry.Offering_Period || '',\n            periods: []\n        };\n    }\n\n    private createPeriodFromEntry(entry: any, section: Section): Period {\n        const [enrolled, capacity] = (entry.Enrolled_Capacity || '0/0').split('/').map((n: string) => parseInt(n) || 0);\n        const [waitlisted, waitlistCap] = (entry.Waitlist_Waitlist_Capacity || '0/0').split('/').map((n: string) => parseInt(n) || 0);\n        \n        return {\n            type: entry.Instructional_Format || 'Lecture',\n            professor: entry.Instructors || '',\n            professorEmail: undefined,\n            startTime: this.parseTimeFromPattern(entry.Meeting_Patterns, true),\n            endTime: this.parseTimeFromPattern(entry.Meeting_Patterns, false),\n            building: this.extractBuilding(entry.Locations),\n            room: this.extractRoom(entry.Locations),\n            location: entry.Locations,\n            seats: capacity,\n            seatsAvailable: capacity - enrolled,\n            actualWaitlist: waitlisted,\n            maxWaitlist: waitlistCap,\n            days: this.parseDaysFromPattern(entry.Meeting_Day_Patterns || ''),\n            specificSection: section.number\n        };\n    }\n\n    private stripHtml(html: string): string {\n        return html.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, ' ').trim();\n    }\n\n    private extractBuilding(location: string): string {\n        const match = location.match(/^([^0-9]+)/);\n        return match ? match[1].trim() : '';\n    }\n\n    private extractRoom(location: string): string {\n        const match = location.match(/([0-9]+[A-Z]*)$/);\n        return match ? match[1] : '';\n    }\n\n    private parseTimeFromPattern(pattern: string, isStart: boolean): Time {\n        const timeMatch = pattern.match(/(\\d{1,2}:\\d{2}\\s*[AP]M)\\s*-\\s*(\\d{1,2}:\\d{2}\\s*[AP]M)/);\n        if (!timeMatch) return { hours: 0, minutes: 0, displayTime: 'TBD' };\n        \n        const timeStr = isStart ? timeMatch[1] : timeMatch[2];\n        return this.parseTime(timeStr);\n    }\n\n    private parseDaysFromPattern(dayPattern: string): Set<DayOfWeek> {\n        return this.parseDays(dayPattern);\n    }\n\n    private parseTime(timeStr: string): Time {\n        if (!timeStr || timeStr === '?') {\n            return { hours: 0, minutes: 0, displayTime: 'TBD' };\n        }\n\n        const match = timeStr.match(/(\\d{1,2}):(\\d{2})(AM|PM)/i);\n        if (!match) {\n            return { hours: 0, minutes: 0, displayTime: timeStr };\n        }\n\n        let hours = parseInt(match[1]);\n        const minutes = parseInt(match[2]);\n        const ampm = match[3].toUpperCase();\n\n        if (ampm === 'PM' && hours !== 12) {\n            hours += 12;\n        } else if (ampm === 'AM' && hours === 12) {\n            hours = 0;\n        }\n\n        return {\n            hours,\n            minutes,\n            displayTime: timeStr\n        };\n    }\n\n    private parseDays(daysStr: string): Set<DayOfWeek> {\n        const days = new Set<DayOfWeek>();\n        \n        if (!daysStr || daysStr === '?') {\n            return days;\n        }\n\n        // Handle pattern format (M, T, W, R, F, S, U)\n        const patternDayMap: { [key: string]: DayOfWeek } = {\n            'M': DayOfWeek.MONDAY,\n            'T': DayOfWeek.TUESDAY, \n            'W': DayOfWeek.WEDNESDAY,\n            'R': DayOfWeek.THURSDAY,\n            'F': DayOfWeek.FRIDAY,\n            'S': DayOfWeek.SATURDAY,\n            'U': DayOfWeek.SUNDAY\n        };\n\n        // Handle full name format (mon, tue, wed, etc.)\n        const fullNameDayMap: { [key: string]: DayOfWeek } = {\n            'mon': DayOfWeek.MONDAY,\n            'tue': DayOfWeek.TUESDAY,\n            'wed': DayOfWeek.WEDNESDAY,\n            'thu': DayOfWeek.THURSDAY,\n            'fri': DayOfWeek.FRIDAY,\n            'sat': DayOfWeek.SATURDAY,\n            'sun': DayOfWeek.SUNDAY\n        };\n\n        // Check if it's a pattern format (single characters)\n        if (daysStr.length <= 7 && /^[MTWRFSU-]+$/.test(daysStr)) {\n            for (const char of daysStr.replace(/-/g, '')) {\n                if (patternDayMap[char]) {\n                    days.add(patternDayMap[char]);\n                }\n            }\n        } else {\n            // Handle comma-separated full names\n            const dayNames = daysStr.split(',').map(day => day.trim().toLowerCase());\n            for (const dayName of dayNames) {\n                if (fullNameDayMap[dayName]) {\n                    days.add(fullNameDayMap[dayName]);\n                }\n            }\n        }\n\n        return days;\n    }\n\n    private getCachedData(): ScheduleDB | null {\n        try {\n            const cached = localStorage.getItem(CourseDataService.LOCAL_STORAGE_KEY);\n            if (!cached) return null;\n\n            const parsedData = JSON.parse(cached);\n            return parsedData.scheduleDB;\n        } catch (error) {\n            console.warn('Failed to parse cached course data:', error);\n            return null;\n        }\n    }\n\n    private cacheData(scheduleDB: ScheduleDB): void {\n        try {\n            const cacheData = {\n                scheduleDB,\n                timestamp: Date.now()\n            };\n            localStorage.setItem(CourseDataService.LOCAL_STORAGE_KEY, JSON.stringify(cacheData));\n            console.log('Course data cached successfully');\n        } catch (error) {\n            console.warn('Failed to cache course data:', error);\n        }\n    }\n\n    private isCacheExpired(): boolean {\n        try {\n            const cached = localStorage.getItem(CourseDataService.LOCAL_STORAGE_KEY);\n            if (!cached) return true;\n\n            const parsedData = JSON.parse(cached);\n            const cacheAge = Date.now() - parsedData.timestamp;\n            const maxAge = CourseDataService.CACHE_EXPIRY_HOURS * 60 * 60 * 1000;\n            \n            return cacheAge > maxAge;\n        } catch (error) {\n            return true;\n        }\n    }\n\n    getScheduleDB(): ScheduleDB | null {\n        return this.scheduleDB;\n    }\n\n    searchCourses(query: string, departments?: string[]): Course[] {\n        if (!this.scheduleDB) return [];\n\n        const allCourses: Course[] = [];\n        \n        for (const dept of this.scheduleDB.departments) {\n            if (departments && departments.length > 0 && !departments.includes(dept.abbreviation.toLowerCase())) {\n                continue;\n            }\n            allCourses.push(...dept.courses);\n        }\n\n        if (!query.trim()) {\n            return allCourses;\n        }\n\n        const queryLower = query.toLowerCase();\n        return allCourses.filter(course => \n            course.name.toLowerCase().includes(queryLower) ||\n            course.number.toLowerCase().includes(queryLower) ||\n            course.id.toLowerCase().includes(queryLower) ||\n            course.department.abbreviation.toLowerCase().includes(queryLower)\n        );\n    }\n\n    getAllDepartments(): Department[] {\n        return this.scheduleDB?.departments || [];\n    }\n\n}","import { ThemeDefinition, ThemeId, ThemeChangeEvent, ThemeChangeListener } from './types'\n\n// Import theme definitions\nimport wpiClassic from './definitions/wpi-classic.json'\nimport wpiDark from './definitions/wpi-dark.json'\nimport wpiLight from './definitions/wpi-light.json'\nimport highContrast from './definitions/high-contrast.json'\n\nexport class ThemeManager {\n    private static instance: ThemeManager;\n    private currentTheme: ThemeId = 'wpi-classic';\n    private themes: Map<ThemeId, ThemeDefinition> = new Map();\n    private listeners: Set<ThemeChangeListener> = new Set();\n    private readonly storageKey = 'wpi-planner-theme';\n\n    private constructor() {\n        this.initializeThemes();\n        this.loadSavedTheme();\n    }\n\n    static getInstance(): ThemeManager {\n        if (!ThemeManager.instance) {\n            ThemeManager.instance = new ThemeManager();\n        }\n        return ThemeManager.instance;\n    }\n\n    private initializeThemes(): void {\n        // Register built-in themes\n        this.registerTheme(wpiClassic as ThemeDefinition);\n        this.registerTheme(wpiDark as ThemeDefinition);\n        this.registerTheme(wpiLight as ThemeDefinition);\n        this.registerTheme(highContrast as ThemeDefinition);\n    }\n\n    private loadSavedTheme(): void {\n        try {\n            const savedTheme = localStorage.getItem(this.storageKey);\n            if (savedTheme && this.themes.has(savedTheme)) {\n                this.currentTheme = savedTheme;\n            }\n        } catch (error) {\n            console.warn('Failed to load saved theme preference:', error);\n        }\n        \n        // Apply the current theme\n        this.applyTheme(this.currentTheme);\n    }\n\n    registerTheme(theme: ThemeDefinition): void {\n        if (!this.isValidTheme(theme)) {\n            console.error('Invalid theme definition:', theme);\n            return;\n        }\n        \n        this.themes.set(theme.id, theme);\n    }\n\n    private isValidTheme(theme: any): theme is ThemeDefinition {\n        return theme &&\n            typeof theme.name === 'string' &&\n            typeof theme.id === 'string' &&\n            typeof theme.description === 'string' &&\n            theme.colors &&\n            theme.typography &&\n            theme.spacing &&\n            theme.effects;\n    }\n\n    getAvailableThemes(): ThemeDefinition[] {\n        return Array.from(this.themes.values());\n    }\n\n    getCurrentTheme(): ThemeDefinition | null {\n        return this.themes.get(this.currentTheme) || null;\n    }\n\n    getCurrentThemeId(): ThemeId {\n        return this.currentTheme;\n    }\n\n    setTheme(themeId: ThemeId): boolean {\n        if (!this.themes.has(themeId)) {\n            console.error(`Theme '${themeId}' not found`);\n            return false;\n        }\n\n        const oldTheme = this.currentTheme;\n        const newTheme = themeId;\n        const themeDefinition = this.themes.get(themeId)!;\n\n        this.currentTheme = themeId;\n        this.applyTheme(themeId);\n        this.saveThemePreference(themeId);\n\n        // Notify listeners\n        const event: ThemeChangeEvent = {\n            oldTheme,\n            newTheme,\n            themeDefinition\n        };\n        this.notifyListeners(event);\n\n        return true;\n    }\n\n    private applyTheme(themeId: ThemeId): void {\n        const theme = this.themes.get(themeId);\n        if (!theme) return;\n\n        const root = document.documentElement;\n\n        // Apply color variables\n        Object.entries(theme.colors).forEach(([key, value]) => {\n            root.style.setProperty(`--color-${this.kebabCase(key)}`, value);\n        });\n\n        // Apply typography variables\n        Object.entries(theme.typography).forEach(([key, value]) => {\n            root.style.setProperty(`--font-${this.kebabCase(key)}`, value);\n        });\n\n        // Apply spacing variables\n        Object.entries(theme.spacing).forEach(([key, value]) => {\n            root.style.setProperty(`--spacing-${this.kebabCase(key)}`, value);\n        });\n\n        // Apply effect variables\n        Object.entries(theme.effects).forEach(([key, value]) => {\n            root.style.setProperty(`--effect-${this.kebabCase(key)}`, value);\n        });\n\n        // Add theme class to body for theme-specific styling\n        document.body.className = document.body.className\n            .replace(/theme-[\\w-]+/g, '')\n            .trim();\n        document.body.classList.add(`theme-${themeId}`);\n    }\n\n    private kebabCase(str: string): string {\n        return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    }\n\n    private saveThemePreference(themeId: ThemeId): void {\n        try {\n            localStorage.setItem(this.storageKey, themeId);\n        } catch (error) {\n            console.warn('Failed to save theme preference:', error);\n        }\n    }\n\n    // System preference detection\n    detectSystemPreference(): ThemeId {\n        if (typeof window !== 'undefined' && window.matchMedia) {\n            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                return 'wpi-dark';\n            }\n            if (window.matchMedia('(prefers-contrast: high)').matches) {\n                return 'high-contrast';\n            }\n        }\n        return 'wpi-classic';\n    }\n\n    useSystemPreference(): boolean {\n        const preferredTheme = this.detectSystemPreference();\n        return this.setTheme(preferredTheme);\n    }\n\n    // Event listeners\n    onThemeChange(listener: ThemeChangeListener): void {\n        this.listeners.add(listener);\n    }\n\n    offThemeChange(listener: ThemeChangeListener): void {\n        this.listeners.delete(listener);\n    }\n\n    private notifyListeners(event: ThemeChangeEvent): void {\n        this.listeners.forEach(listener => {\n            try {\n                listener(event);\n            } catch (error) {\n                console.error('Error in theme change listener:', error);\n            }\n        });\n    }\n\n    // Theme preview (temporary application without saving)\n    previewTheme(themeId: ThemeId): boolean {\n        if (!this.themes.has(themeId)) return false;\n        this.applyTheme(themeId);\n        return true;\n    }\n\n    // Reset to current theme (cancel preview)\n    resetToCurrentTheme(): void {\n        this.applyTheme(this.currentTheme);\n    }\n\n    // Export/Import functionality\n    exportCurrentTheme(): string {\n        const theme = this.getCurrentTheme();\n        if (!theme) throw new Error('No current theme to export');\n        return JSON.stringify(theme, null, 2);\n    }\n\n    importTheme(themeJson: string): boolean {\n        try {\n            const theme = JSON.parse(themeJson);\n            if (this.isValidTheme(theme)) {\n                this.registerTheme(theme);\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error('Failed to import theme:', error);\n            return false;\n        }\n    }\n\n    // Theme utilities\n    getThemeById(themeId: ThemeId): ThemeDefinition | null {\n        return this.themes.get(themeId) || null;\n    }\n\n    hasTheme(themeId: ThemeId): boolean {\n        return this.themes.has(themeId);\n    }\n\n    removeTheme(themeId: ThemeId): boolean {\n        // Don't allow removal of built-in themes\n        const builtInThemes = ['wpi-classic', 'wpi-dark', 'wpi-light', 'high-contrast'];\n        if (builtInThemes.includes(themeId)) {\n            console.warn(`Cannot remove built-in theme: ${themeId}`);\n            return false;\n        }\n\n        if (this.currentTheme === themeId) {\n            this.setTheme('wpi-classic'); // Fallback to default\n        }\n\n        return this.themes.delete(themeId);\n    }\n}","import { Schedule, UserScheduleState, SchedulePreferences, SelectedCourse } from '../types/schedule'\n\nexport class StorageManager {\n    private static readonly STORAGE_KEYS = {\n        USER_STATE: 'wpi-planner-user-state',\n        PREFERENCES: 'wpi-planner-preferences',\n        SCHEDULES: 'wpi-planner-schedules',\n        SELECTED_COURSES: 'wpi-planner-selected-courses',\n        THEME: 'wpi-planner-theme'\n    };\n\n    saveUserState(state: UserScheduleState): void {\n        this.handleStorageOperation(\n            () => {\n                const serializedState = JSON.stringify(state, this.replacer);\n                localStorage.setItem(StorageManager.STORAGE_KEYS.USER_STATE, serializedState);\n            },\n            'Failed to save user state'\n        );\n    }\n\n    loadUserState(): UserScheduleState | null {\n        return this.handleStorageOperation(\n            () => {\n                const stored = localStorage.getItem(StorageManager.STORAGE_KEYS.USER_STATE);\n                if (!stored) return null;\n                return JSON.parse(stored, this.reviver);\n            },\n            'Failed to load user state',\n            null\n        );\n    }\n\n    saveSchedule(schedule: Schedule): void {\n        this.handleStorageOperation(\n            () => {\n                const schedules = this.loadAllSchedules();\n                const existingIndex = schedules.findIndex(s => s.id === schedule.id);\n                \n                if (existingIndex >= 0) {\n                    schedules[existingIndex] = schedule;\n                } else {\n                    schedules.push(schedule);\n                }\n                \n                const serializedSchedules = JSON.stringify(schedules, this.replacer);\n                localStorage.setItem(StorageManager.STORAGE_KEYS.SCHEDULES, serializedSchedules);\n            },\n            'Failed to save schedule'\n        );\n    }\n\n    loadSchedule(scheduleId: string): Schedule | null {\n        try {\n            const schedules = this.loadAllSchedules();\n            return schedules.find(s => s.id === scheduleId) || null;\n        } catch (error) {\n            console.warn('Failed to load schedule:', error);\n            return null;\n        }\n    }\n\n    loadAllSchedules(): Schedule[] {\n        return this.handleStorageOperation(\n            () => {\n                const stored = localStorage.getItem(StorageManager.STORAGE_KEYS.SCHEDULES);\n                if (!stored) return [];\n                return JSON.parse(stored, this.reviver);\n            },\n            'Failed to load schedules',\n            []\n        );\n    }\n\n    deleteSchedule(scheduleId: string): void {\n        try {\n            const schedules = this.loadAllSchedules();\n            const filtered = schedules.filter(s => s.id !== scheduleId);\n            localStorage.setItem(StorageManager.STORAGE_KEYS.SCHEDULES, JSON.stringify(filtered));\n        } catch (error) {\n            console.warn('Failed to delete schedule:', error);\n        }\n    }\n\n    savePreferences(preferences: SchedulePreferences): void {\n        this.handleStorageOperation(\n            () => {\n                const serializedPreferences = JSON.stringify(preferences, this.replacer);\n                localStorage.setItem(StorageManager.STORAGE_KEYS.PREFERENCES, serializedPreferences);\n            },\n            'Failed to save preferences'\n        );\n    }\n\n    loadPreferences(): SchedulePreferences | null {\n        return this.handleStorageOperation(\n            () => {\n                const stored = localStorage.getItem(StorageManager.STORAGE_KEYS.PREFERENCES);\n                if (!stored) return this.getDefaultPreferences();\n                return JSON.parse(stored, this.reviver);\n            },\n            'Failed to load preferences',\n            this.getDefaultPreferences()\n        );\n    }\n\n    private getDefaultPreferences(): SchedulePreferences {\n        return {\n            preferredTimeRange: {\n                startTime: { hours: 8, minutes: 0 },\n                endTime: { hours: 18, minutes: 0 }\n            },\n            preferredDays: new Set(['mon', 'tue', 'wed', 'thu', 'fri']),\n            avoidBackToBackClasses: false,\n            theme: 'wpi-classic'\n        };\n    }\n\n    clearAllData(): void {\n        try {\n            Object.values(StorageManager.STORAGE_KEYS).forEach(key => {\n                localStorage.removeItem(key);\n            });\n        } catch (error) {\n            console.warn('Failed to clear storage:', error);\n        }\n    }\n\n    exportData(): string {\n        const state = this.loadUserState();\n        const schedules = this.loadAllSchedules();\n        const preferences = this.loadPreferences();\n\n        const exportData = {\n            version: '1.0',\n            timestamp: new Date().toISOString(),\n            state,\n            schedules,\n            preferences\n        };\n\n        return JSON.stringify(exportData, null, 2);\n    }\n\n    importData(jsonData: string): boolean {\n        try {\n            const data = JSON.parse(jsonData);\n            \n            if (data.state) this.saveUserState(data.state);\n            if (data.preferences) this.savePreferences(data.preferences);\n            if (data.schedules) {\n                data.schedules.forEach((schedule: Schedule) => {\n                    this.saveSchedule(schedule);\n                });\n            }\n            \n            return true;\n        } catch (error) {\n            console.error('Failed to import data:', error);\n            return false;\n        }\n    }\n\n    private handleStorageOperation<T>(\n        operation: () => T,\n        errorMessage: string,\n        fallback?: T\n    ): T | undefined {\n        try {\n            return operation();\n        } catch (error) {\n            console.warn(`${errorMessage}:`, error);\n            return fallback;\n        }\n    }\n\n    private readonly replacer = (key: string, value: any): any => {\n        if (value instanceof Set) {\n            return { __type: 'Set', value: [...value] };\n        }\n        // Break cyclic references - exclude department.courses when serializing courses\n        if (key === 'department' && value && value.courses) {\n            return {\n                abbreviation: value.abbreviation,\n                name: value.name\n                // Exclude courses array to prevent circular reference\n            };\n        }\n        return value;\n    };\n\n    private readonly reviver = (key: string, value: any): any => {\n        if (typeof value === 'object' && value !== null && value.__type === 'Set') {\n            return new Set(value.value);\n        }\n        return value;\n    };\n\n    saveThemePreference(themeId: string): void {\n        try {\n            localStorage.setItem(StorageManager.STORAGE_KEYS.THEME, themeId);\n        } catch (error) {\n            console.warn('Failed to save theme preference:', error);\n        }\n    }\n\n    loadThemePreference(): string {\n        try {\n            const savedTheme = localStorage.getItem(StorageManager.STORAGE_KEYS.THEME);\n            return savedTheme || 'wpi-classic';\n        } catch (error) {\n            console.warn('Failed to load theme preference:', error);\n            return 'wpi-classic';\n        }\n    }\n\n    saveSelectedCourses(selectedCourses: SelectedCourse[]): void {\n        this.handleStorageOperation(\n            () => {\n                const serializedCourses = JSON.stringify(selectedCourses, this.replacer);\n                localStorage.setItem(StorageManager.STORAGE_KEYS.SELECTED_COURSES, serializedCourses);\n            },\n            'Failed to save selected courses'\n        );\n    }\n\n    loadSelectedCourses(): SelectedCourse[] {\n        return this.handleStorageOperation(\n            () => {\n                const stored = localStorage.getItem(StorageManager.STORAGE_KEYS.SELECTED_COURSES);\n                if (!stored) return [];\n                return JSON.parse(stored, this.reviver);\n            },\n            'Failed to load selected courses',\n            []\n        );\n    }\n\n    clearSelectedCourses(): void {\n        try {\n            localStorage.removeItem(StorageManager.STORAGE_KEYS.SELECTED_COURSES);\n        } catch (error) {\n            console.warn('Failed to clear selected courses:', error);\n        }\n    }\n}","import { ThemeManager } from '../../themes/ThemeManager'\nimport { StorageManager } from '../../core/StorageManager'\n\nexport class ThemeSelector {\n    private themeManager: ThemeManager;\n    private storageManager: StorageManager;\n    private dropdownElement: HTMLElement | null = null;\n    private optionsElement: HTMLElement | null = null;\n    private currentThemeNameElement: HTMLElement | null = null;\n    private isOpen: boolean = false;\n\n    constructor() {\n        this.themeManager = ThemeManager.getInstance();\n        this.storageManager = new StorageManager();\n        this.init();\n    }\n\n    private init(): void {\n        this.setupElements();\n        this.loadSavedTheme();\n        this.setupEventListeners();\n        this.renderThemeOptions();\n    }\n\n    private setupElements(): void {\n        this.dropdownElement = document.getElementById('theme-dropdown');\n        this.optionsElement = document.getElementById('theme-options');\n        this.currentThemeNameElement = document.getElementById('current-theme-name');\n    }\n\n    private loadSavedTheme(): void {\n        const savedTheme = this.storageManager.loadThemePreference();\n        this.themeManager.setTheme(savedTheme);\n        this.updateCurrentThemeDisplay();\n    }\n\n    private setupEventListeners(): void {\n        if (!this.dropdownElement || !this.optionsElement) return;\n\n        // Toggle dropdown\n        this.dropdownElement.addEventListener('click', (e) => {\n            e.stopPropagation();\n            this.toggleDropdown();\n        });\n\n        // Close dropdown when clicking outside\n        document.addEventListener('click', () => {\n            this.closeDropdown();\n        });\n\n        // Prevent closing when clicking inside options\n        this.optionsElement.addEventListener('click', (e) => {\n            e.stopPropagation();\n        });\n    }\n\n    private toggleDropdown(): void {\n        if (this.isOpen) {\n            this.closeDropdown();\n        } else {\n            this.openDropdown();\n        }\n    }\n\n    private openDropdown(): void {\n        if (!this.dropdownElement || !this.optionsElement) return;\n        \n        this.isOpen = true;\n        this.dropdownElement.classList.add('open');\n        this.optionsElement.classList.add('show');\n    }\n\n    private closeDropdown(): void {\n        if (!this.dropdownElement || !this.optionsElement) return;\n        \n        this.isOpen = false;\n        this.dropdownElement.classList.remove('open');\n        this.optionsElement.classList.remove('show');\n    }\n\n    private renderThemeOptions(): void {\n        if (!this.optionsElement) return;\n\n        const availableThemes = this.themeManager.getAvailableThemes();\n        const currentThemeId = this.themeManager.getCurrentThemeId();\n\n        let html = '';\n        availableThemes.forEach(theme => {\n            const isActive = theme.id === currentThemeId;\n            html += `\n                <div class=\"theme-option ${isActive ? 'active' : ''}\" data-theme-id=\"${theme.id}\">\n                    <div class=\"theme-option-name\">${theme.name}</div>\n                    <div class=\"theme-option-description\">${theme.description}</div>\n                </div>\n            `;\n        });\n\n        this.optionsElement.innerHTML = html;\n\n        // Add click listeners to theme options\n        this.optionsElement.querySelectorAll('.theme-option').forEach(option => {\n            option.addEventListener('click', () => {\n                const themeId = (option as HTMLElement).dataset.themeId;\n                if (themeId) {\n                    this.selectTheme(themeId);\n                }\n            });\n        });\n    }\n\n    private selectTheme(themeId: string): void {\n        // Apply theme\n        const success = this.themeManager.setTheme(themeId);\n        if (!success) return;\n\n        // Save to storage\n        this.storageManager.saveThemePreference(themeId);\n\n        // Update UI\n        this.updateCurrentThemeDisplay();\n        this.updateActiveOption(themeId);\n        this.closeDropdown();\n    }\n\n    private updateCurrentThemeDisplay(): void {\n        if (!this.currentThemeNameElement) return;\n\n        const currentTheme = this.themeManager.getCurrentTheme();\n        if (currentTheme) {\n            this.currentThemeNameElement.textContent = currentTheme.name;\n        }\n    }\n\n    private updateActiveOption(selectedThemeId: string): void {\n        if (!this.optionsElement) return;\n\n        // Remove active class from all options\n        this.optionsElement.querySelectorAll('.theme-option').forEach(option => {\n            option.classList.remove('active');\n        });\n\n        // Add active class to selected option\n        const selectedOption = this.optionsElement.querySelector(`[data-theme-id=\"${selectedThemeId}\"]`);\n        if (selectedOption) {\n            selectedOption.classList.add('active');\n        }\n    }\n\n    // Public method to refresh theme options (useful if themes are added dynamically)\n    public refresh(): void {\n        this.renderThemeOptions();\n        this.updateCurrentThemeDisplay();\n    }\n\n    // Public method to programmatically select a theme\n    public setTheme(themeId: string): void {\n        this.selectTheme(themeId);\n    }\n}","import { Course, Section } from '../types/types'\nimport { SelectedCourse, Schedule } from '../types/schedule'\n\nexport class CourseManager {\n    private selectedCourses: Map<string, SelectedCourse> = new Map();\n    private listeners: Set<(courses: SelectedCourse[]) => void> = new Set();\n\n    addCourse(course: Course, isRequired: boolean = false): void {\n        const selectedCourse: SelectedCourse = {\n            course,\n            selectedSection: null,\n            isRequired\n        };\n        \n        this.selectedCourses.set(course.id, selectedCourse);\n        this.notifyListeners();\n    }\n\n    removeCourse(courseId: string): void {\n        this.selectedCourses.delete(courseId);\n        this.notifyListeners();\n    }\n\n\n    getSelectedCourses(): SelectedCourse[] {\n        return Array.from(this.selectedCourses.values());\n    }\n\n    getSelectedCourse(courseId: string): SelectedCourse | undefined {\n        return this.selectedCourses.get(courseId);\n    }\n\n    isSelected(courseId: string): boolean {\n        return this.selectedCourses.has(courseId);\n    }\n\n    getAvailableSections(courseId: string): Section[] {\n        const selectedCourse = this.selectedCourses.get(courseId);\n        if (!this.validateCourseExists(courseId, selectedCourse)) return [];\n\n        return selectedCourse!.course.sections;\n    }\n\n    clearAll(): void {\n        this.selectedCourses.clear();\n        this.notifyListeners();\n    }\n\n    onSelectionChange(listener: (courses: SelectedCourse[]) => void): void {\n        this.listeners.add(listener);\n    }\n\n    offSelectionChange(listener: (courses: SelectedCourse[]) => void): void {\n        this.listeners.delete(listener);\n    }\n\n    setSelectedSection(courseId: string, sectionNumber: string | null): void {\n        const selectedCourse = this.selectedCourses.get(courseId);\n        if (!this.validateCourseExists(courseId, selectedCourse)) return;\n\n        selectedCourse!.selectedSection = sectionNumber;\n        this.notifyListeners();\n    }\n\n    getSelectedSection(courseId: string): string | null {\n        const selectedCourse = this.selectedCourses.get(courseId);\n        return selectedCourse?.selectedSection || null;\n    }\n\n\n    loadSelectedCourses(selectedCourses: SelectedCourse[]): void {\n        this.selectedCourses.clear();\n        selectedCourses.forEach(course => {\n            this.selectedCourses.set(course.course.id, course);\n        });\n        this.notifyListeners();\n    }\n\n    private validateCourseExists(courseId: string, selectedCourse?: SelectedCourse): selectedCourse is SelectedCourse {\n        if (!selectedCourse) {\n            console.warn(`Course ${courseId} not found in selected courses`);\n            return false;\n        }\n        return true;\n    }\n\n    private notifyListeners(): void {\n        const courses = this.getSelectedCourses();\n        this.listeners.forEach(listener => listener(courses));\n    }\n}","import { Course, Section, Period, Department } from '../types/types'\nimport { Schedule, SelectedCourse, SchedulePreferences } from '../types/schedule'\n\nexport class Validators {\n    static isValidCourse(course: any): course is Course {\n        return course &&\n            typeof course.id === 'string' &&\n            typeof course.number === 'string' &&\n            typeof course.name === 'string' &&\n            typeof course.description === 'string' &&\n            this.isValidDepartment(course.department) &&\n            Array.isArray(course.sections) &&\n            course.sections.every((s: any) => this.isValidSection(s)) &&\n            typeof course.minCredits === 'number' &&\n            typeof course.maxCredits === 'number';\n    }\n\n    static isValidDepartment(department: any): department is Department {\n        return department &&\n            typeof department.abbreviation === 'string' &&\n            typeof department.name === 'string' &&\n            Array.isArray(department.courses);\n    }\n\n    static isValidSection(section: any): section is Section {\n        return section &&\n            typeof section.crn === 'number' &&\n            typeof section.number === 'string' &&\n            typeof section.seats === 'number' &&\n            typeof section.seatsAvailable === 'number' &&\n            typeof section.actualWaitlist === 'number' &&\n            typeof section.maxWaitlist === 'number' &&\n            typeof section.description === 'string' &&\n            typeof section.term === 'string' &&\n            Array.isArray(section.periods) &&\n            section.periods.every((p: any) => this.isValidPeriod(p));\n    }\n\n    static isValidPeriod(period: any): period is Period {\n        return period &&\n            typeof period.type === 'string' &&\n            typeof period.professor === 'string' &&\n            this.isValidTime(period.startTime) &&\n            this.isValidTime(period.endTime) &&\n            typeof period.location === 'string' &&\n            typeof period.building === 'string' &&\n            typeof period.room === 'string' &&\n            typeof period.seats === 'number' &&\n            typeof period.seatsAvailable === 'number' &&\n            typeof period.actualWaitlist === 'number' &&\n            typeof period.maxWaitlist === 'number' &&\n            period.days instanceof Set;\n    }\n\n    static isValidTime(time: any): boolean {\n        return time &&\n            typeof time.hours === 'number' &&\n            typeof time.minutes === 'number' &&\n            typeof time.displayTime === 'string' &&\n            time.hours >= 0 && time.hours <= 23 &&\n            time.minutes >= 0 && time.minutes <= 59;\n    }\n\n    static isValidSchedulePreferences(preferences: any): preferences is SchedulePreferences {\n        return preferences &&\n            this.isValidTimeRange(preferences.preferredTimeRange) &&\n            preferences.preferredDays instanceof Set &&\n            typeof preferences.avoidBackToBackClasses === 'boolean';\n    }\n\n    static isValidTimeRange(timeRange: any): boolean {\n        return timeRange &&\n            this.isValidTime(timeRange.startTime) &&\n            this.isValidTime(timeRange.endTime);\n    }\n\n    static isValidSelectedCourse(selectedCourse: any): selectedCourse is SelectedCourse {\n        return selectedCourse &&\n            this.isValidCourse(selectedCourse.course) &&\n            typeof selectedCourse.isRequired === 'boolean';\n    }\n\n    static isValidSchedule(schedule: any): schedule is Schedule {\n        return schedule &&\n            typeof schedule.id === 'string' &&\n            typeof schedule.name === 'string' &&\n            Array.isArray(schedule.selectedCourses) &&\n            schedule.selectedCourses.every((sc: any) => this.isValidSelectedCourse(sc)) &&\n            Array.isArray(schedule.generatedSchedules) &&\n            this.isValidSchedulePreferences(schedule.preferences);\n    }\n\n    static sanitizeString(input: string): string {\n        return input.replace(/<[^>]*>/g, '').trim();\n    }\n\n    static sanitizeCourseData(course: any): Course | null {\n        try {\n            if (!this.isValidCourse(course)) return null;\n\n            return {\n                ...course,\n                name: this.sanitizeString(course.name),\n                description: this.sanitizeString(course.description),\n                sections: course.sections.map((section: Section) => ({\n                    ...section,\n                    description: this.sanitizeString(section.description),\n                    periods: section.periods.map((period: Period) => ({\n                        ...period,\n                        professor: this.sanitizeString(period.professor),\n                        location: this.sanitizeString(period.location),\n                        building: this.sanitizeString(period.building),\n                        room: this.sanitizeString(period.room)\n                    }))\n                }))\n            };\n        } catch (error) {\n            console.warn('Error sanitizing course data:', error);\n            return null;\n        }\n    }\n\n    static validateCourseId(courseId: string): boolean {\n        // Format: DEPT-NUMBER (e.g., CS-1101, AB-1531, RBE-1001) \n        // Allow 2-4 letter department codes and 3-4 digit course numbers\n        return /^[A-Z]{2,4}-\\d{3,4}$/.test(courseId);\n    }\n\n    static validateSectionNumber(sectionNumber: string): boolean {\n        // Alphanumeric section numbers\n        return /^[A-Z0-9]+$/.test(sectionNumber);\n    }\n\n    static validateEmail(email: string): boolean {\n        return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n    }\n}","import { Course } from '../types/types'\nimport { SelectedCourse } from '../types/schedule'\nimport { CourseManager } from '../core/CourseManager'\nimport { StorageManager } from '../core/StorageManager'\nimport { Validators } from '../utils/validators'\n\nexport class CourseSelectionService {\n    private courseManager: CourseManager;\n    private storageManager: StorageManager;\n\n    constructor(courseManager?: CourseManager, storageManager?: StorageManager) {\n        this.courseManager = courseManager || new CourseManager();\n        this.storageManager = storageManager || new StorageManager();\n        \n        this.loadPersistedSelections();\n        this.setupPersistenceListener();\n    }\n\n    selectCourse(course: Course, isRequired: boolean = false): void {\n        if (!Validators.isValidCourse(course)) {\n            throw new Error('Invalid course object provided');\n        }\n        this.courseManager.addCourse(course, isRequired);\n    }\n\n    unselectCourse(courseId: string): void {\n        if (!courseId || !Validators.validateCourseId(courseId)) {\n            throw new Error('Invalid courseId provided');\n        }\n        this.courseManager.removeCourse(courseId);\n    }\n\n    toggleCourseSelection(course: Course, isRequired: boolean = false): boolean {\n        const isSelected = this.isCourseSelected(course.id);\n        \n        if (isSelected) {\n            this.unselectCourse(course.id);\n            return false;\n        } else {\n            this.selectCourse(course, isRequired);\n            return true;\n        }\n    }\n\n    setSelectedSection(courseId: string, sectionNumber: string | null): void {\n        if (!courseId || !Validators.validateCourseId(courseId)) {\n            throw new Error('Invalid courseId provided');\n        }\n        if (sectionNumber !== null && !Validators.validateSectionNumber(sectionNumber)) {\n            throw new Error('Invalid sectionNumber provided');\n        }\n        this.courseManager.setSelectedSection(courseId, sectionNumber);\n    }\n\n    getSelectedSection(courseId: string): string | null {\n        if (!courseId || !Validators.validateCourseId(courseId)) {\n            throw new Error('Invalid courseId provided');\n        }\n        return this.courseManager.getSelectedSection(courseId);\n    }\n\n    setSectionPreference(courseId: string, sectionNumber: string, preference: 'preferred' | 'denied'): void {\n        if (!courseId || !Validators.validateCourseId(courseId)) {\n            throw new Error('Invalid courseId provided');\n        }\n        if (!sectionNumber || !Validators.validateSectionNumber(sectionNumber)) {\n            throw new Error('Invalid sectionNumber provided');\n        }\n        if (!preference || !['preferred', 'denied'].includes(preference)) {\n            throw new Error('Invalid preference provided. Must be \"preferred\" or \"denied\"');\n        }\n        this.courseManager.updateSectionPreference(courseId, sectionNumber, preference);\n    }\n\n    isCourseSelected(courseId: string): boolean {\n        if (!courseId || !Validators.validateCourseId(courseId)) {\n            return false;\n        }\n        return this.courseManager.isSelected(courseId);\n    }\n\n    getSelectedCourses(): SelectedCourse[] {\n        return this.courseManager.getSelectedCourses();\n    }\n\n    getSelectedCourse(courseId: string): SelectedCourse | undefined {\n        if (!courseId || !Validators.validateCourseId(courseId)) {\n            return undefined;\n        }\n        return this.courseManager.getSelectedCourse(courseId);\n    }\n\n    clearAllSelections(): void {\n        this.courseManager.clearAll();\n        this.storageManager.clearSelectedCourses();\n    }\n\n    getSelectedCoursesCount(): number {\n        return this.getSelectedCourses().length;\n    }\n\n    getSelectedCourseIds(): string[] {\n        return this.getSelectedCourses().map(sc => sc.course.id);\n    }\n\n    onSelectionChange(listener: (courses: SelectedCourse[]) => void): void {\n        this.courseManager.onSelectionChange(listener);\n    }\n\n    offSelectionChange(listener: (courses: SelectedCourse[]) => void): void {\n        this.courseManager.offSelectionChange(listener);\n    }\n\n    private loadPersistedSelections(): void {\n        const persistedCourses = this.storageManager.loadSelectedCourses();\n        if (persistedCourses.length > 0) {\n            this.courseManager.loadSelectedCourses(persistedCourses);\n        }\n    }\n\n    private setupPersistenceListener(): void {\n        this.courseManager.onSelectionChange((courses) => {\n            this.storageManager.saveSelectedCourses(courses);\n        });\n    }\n\n    private persistSelections(): void {\n        const selectedCourses = this.getSelectedCourses();\n        this.storageManager.saveSelectedCourses(selectedCourses);\n    }\n\n    exportSelections(): string {\n        const selectedCourses = this.getSelectedCourses();\n        return JSON.stringify({\n            version: '1.0',\n            timestamp: new Date().toISOString(),\n            selectedCourses\n        }, null, 2);\n    }\n\n    importSelections(jsonData: string): boolean {\n        try {\n            const data = JSON.parse(jsonData);\n            if (data.selectedCourses && Array.isArray(data.selectedCourses)) {\n                this.courseManager.loadSelectedCourses(data.selectedCourses);\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error('Failed to import selections:', error);\n            return false;\n        }\n    }\n}","import { Course, Section } from './types'\n\nexport interface SelectedCourse {\n    course: Course;\n    selectedSection: string | null;\n    isRequired: boolean;\n}\n\nexport interface Schedule {\n    id: string;\n    name: string;\n    selectedCourses: SelectedCourse[];\n    generatedSchedules: ScheduleCombination[];\n    preferences: SchedulePreferences;\n}\n\nexport interface ScheduleCombination {\n    id: string;\n    sections: Section[];\n    conflicts: TimeConflict[];\n    isValid: boolean;\n}\n\nexport interface TimeConflict {\n    section1: Section;\n    section2: Section;\n    conflictType: ConflictType;\n    description: string;\n}\n\nexport interface SchedulePreferences {\n    preferredTimeRange: {\n        startTime: { hours: number; minutes: number };\n        endTime: { hours: number; minutes: number };\n    };\n    preferredDays: Set<string>;\n    avoidBackToBackClasses: boolean;\n    theme?: string;\n}\n\nexport enum ConflictType {\n    TIME_OVERLAP = 'time_overlap'\n}\n\nexport interface UserScheduleState {\n    activeSchedule: Schedule | null;\n    savedSchedules: Schedule[];\n    preferences: SchedulePreferences;\n}","import { Section, Period, DayOfWeek } from '../types/types'\nimport { TimeConflict, ConflictType } from '../types/schedule'\n\nexport class ConflictDetector {\n    private conflictCache = new Map<string, TimeConflict[]>();\n    detectConflicts(sections: Section[]): TimeConflict[] {\n        const conflicts: TimeConflict[] = [];\n        \n        for (let i = 0; i < sections.length; i++) {\n            for (let j = i + 1; j < sections.length; j++) {\n                const cacheKey = this.getCacheKey(sections[i], sections[j]);\n                let sectionConflicts = this.conflictCache.get(cacheKey);\n                \n                if (!sectionConflicts) {\n                    sectionConflicts = this.checkSectionConflicts(sections[i], sections[j]);\n                    this.conflictCache.set(cacheKey, sectionConflicts);\n                }\n                \n                conflicts.push(...sectionConflicts);\n            }\n        }\n        \n        return conflicts;\n    }\n\n    private checkSectionConflicts(section1: Section, section2: Section): TimeConflict[] {\n        const conflicts: TimeConflict[] = [];\n        \n        for (const period1 of section1.periods) {\n            for (const period2 of section2.periods) {\n                const conflict = this.checkPeriodConflict(period1, period2, section1, section2);\n                if (conflict) {\n                    conflicts.push(conflict);\n                }\n            }\n        }\n        \n        return conflicts;\n    }\n\n    private checkPeriodConflict(period1: Period, period2: Period, section1: Section, section2: Section): TimeConflict | null {\n        const sharedDays = this.getSharedDays(period1.days, period2.days);\n        if (sharedDays.length === 0) return null;\n\n        if (this.hasTimeOverlap(period1, period2)) {\n            return {\n                section1,\n                section2,\n                conflictType: ConflictType.TIME_OVERLAP,\n                description: `Time overlap on ${sharedDays.join(', ')}: ${period1.startTime.displayTime}-${period1.endTime.displayTime} conflicts with ${period2.startTime.displayTime}-${period2.endTime.displayTime}`\n            };\n        }\n\n        return null;\n    }\n\n    private getSharedDays(days1: Set<DayOfWeek>, days2: Set<DayOfWeek>): string[] {\n        return Array.from(new Set([...days1].filter(day => days2.has(day))));\n    }\n\n    private hasTimeOverlap(period1: Period, period2: Period): boolean {\n        const start1 = this.timeToMinutes(period1.startTime);\n        const end1 = this.timeToMinutes(period1.endTime);\n        const start2 = this.timeToMinutes(period2.startTime);\n        const end2 = this.timeToMinutes(period2.endTime);\n\n        return start1 < end2 && start2 < end1;\n    }\n\n    private timeToMinutes(time: { hours: number; minutes: number }): number {\n        return time.hours * 60 + time.minutes;\n    }\n\n    isValidSchedule(sections: Section[]): boolean {\n        const conflicts = this.detectConflicts(sections);\n        return conflicts.length === 0;\n    }\n\n    clearCache(): void {\n        this.conflictCache.clear();\n    }\n\n    private getCacheKey(section1: Section, section2: Section): string {\n        const key1 = `${section1.crn}-${section2.crn}`;\n        const key2 = `${section2.crn}-${section1.crn}`;\n        return key1 < key2 ? key1 : key2;\n    }\n}","import { Department } from '../../types/types'\n\nexport class DepartmentController {\n    private allDepartments: Department[] = [];\n    private selectedDepartment: Department | null = null;\n\n    // Department categories based on WPI structure\n    private departmentCategories: { [key: string]: string } = {\n        // Science\n        'BB': 'Science',\n        'BCB': 'Science', \n        'CH': 'Science',\n        'CS': 'Science',\n        'DS': 'Science',\n        'GE': 'Science',\n        'IMGD': 'Science',\n        'MA': 'Science',\n        'MTE': 'Science',\n        'PTE': 'Science',\n        'NE': 'Science',\n        'PH': 'Science',\n        \n        // Engineering\n        'AE': 'Engineering',\n        'AR': 'Engineering',\n        'ARE': 'Engineering',\n        'BME': 'Engineering',\n        'CE': 'Engineering',\n        'CHE': 'Engineering',\n        'ECE': 'Engineering',\n        'ES': 'Engineering',\n        'FP': 'Engineering',\n        'ME': 'Engineering',\n        'MFE': 'Engineering',\n        'MSE': 'Engineering',\n        'NUE': 'Engineering',\n        'RBE': 'Engineering',\n        'SYE': 'Engineering',\n        \n        // Business & Management\n        'BUS': 'Business & Management',\n        'ECON': 'Business & Management',\n        'MIS': 'Business & Management',\n        'OIE': 'Business & Management',\n        \n        // Humanities & Arts\n        'EN': 'Humanities & Arts',\n        'HI': 'Humanities & Arts',\n        'HU': 'Humanities & Arts',\n        'MU': 'Humanities & Arts',\n        'RE': 'Humanities & Arts',\n        'SP': 'Humanities & Arts',\n        'TH': 'Humanities & Arts',\n        'WR': 'Humanities & Arts',\n        \n        // Social Sciences\n        'GOV': 'Social Sciences',\n        'PSY': 'Social Sciences',\n        'SOC': 'Social Sciences',\n        'SS': 'Social Sciences'\n    };\n\n    constructor() {}\n\n    setAllDepartments(departments: Department[]): void {\n        this.allDepartments = departments;\n    }\n\n    getSelectedDepartment(): Department | null {\n        return this.selectedDepartment;\n    }\n\n    selectDepartment(deptId: string): Department | null {\n        const department = this.allDepartments.find(d => d.abbreviation === deptId);\n        if (!department) return null;\n\n        this.selectedDepartment = department;\n        \n        // Update content header\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            contentHeader.textContent = `${department.name} Courses`;\n        }\n\n        return department;\n    }\n\n    displayDepartments(): void {\n        const departmentList = document.getElementById('department-list');\n        if (!departmentList) return;\n\n        // Group departments by category\n        const categories = this.groupDepartmentsByCategory();\n        \n        let html = '';\n        Object.entries(categories).forEach(([categoryName, departments]) => {\n            if (departments.length === 0) return;\n            \n            html += `\n                <div class=\"department-category\">\n                    <div class=\"category-header\">${categoryName}</div>\n                    <div class=\"department-list\">\n            `;\n            \n            departments.forEach(dept => {\n                const courseCount = dept.courses.length;\n                html += `\n                    <div class=\"department-item\" data-dept-id=\"${dept.abbreviation}\">\n                        ${dept.name} (${courseCount})\n                    </div>\n                `;\n            });\n            \n            html += `\n                    </div>\n                </div>\n            `;\n        });\n\n        departmentList.innerHTML = html;\n    }\n\n    private groupDepartmentsByCategory(): { [key: string]: Department[] } {\n        const categories: { [key: string]: Department[] } = {\n            'Science': [],\n            'Engineering': [],\n            'Business & Management': [],\n            'Humanities & Arts': [],\n            'Social Sciences': [],\n            'Other': []\n        };\n\n        this.allDepartments.forEach(dept => {\n            const category = this.departmentCategories[dept.abbreviation] || 'Other';\n            categories[category].push(dept);\n        });\n\n        // Sort departments within each category\n        Object.keys(categories).forEach(category => {\n            categories[category].sort((a, b) => a.name.localeCompare(b.name));\n        });\n\n        return categories;\n    }\n\n    handleDepartmentClick(deptId: string): Department | null {\n        const department = this.selectDepartment(deptId);\n        \n        // Update active state\n        document.querySelectorAll('.department-item').forEach(item => {\n            item.classList.remove('active');\n        });\n        \n        const clickedElement = document.querySelector(`[data-dept-id=\"${deptId}\"]`);\n        if (clickedElement) {\n            clickedElement.classList.add('active');\n        }\n\n        return department;\n    }\n\n    clearDepartmentSelection(): void {\n        this.selectedDepartment = null;\n        \n        // Clear active department\n        document.querySelectorAll('.department-item').forEach(item => {\n            item.classList.remove('active');\n        });\n    }\n}","import { Course, Department } from '../../types/types'\nimport { CourseSelectionService } from '../../services/CourseSelectionService'\n\nexport class CourseController {\n    private allDepartments: Department[] = [];\n    private selectedCourse: Course | null = null;\n    private courseSelectionService: CourseSelectionService;\n\n    constructor(courseSelectionService: CourseSelectionService) {\n        this.courseSelectionService = courseSelectionService;\n    }\n\n    setAllDepartments(departments: Department[]): void {\n        this.allDepartments = departments;\n    }\n\n    getSelectedCourse(): Course | null {\n        return this.selectedCourse;\n    }\n\n    displayCourses(courses: Course[], currentView: 'list' | 'grid'): void {\n        if (currentView === 'grid') {\n            this.displayCoursesGrid(courses);\n        } else {\n            this.displayCoursesList(courses);\n        }\n    }\n\n    private displayCoursesList(courses: Course[]): void {\n        const courseContainer = document.getElementById('course-container');\n        if (!courseContainer) return;\n\n        if (courses.length === 0) {\n            courseContainer.innerHTML = '<div class=\"empty-state\">No courses found in this department.</div>';\n            return;\n        }\n\n        // Sort courses by course number\n        const sortedCourses = courses.sort((a, b) => a.number.localeCompare(b.number));\n\n        let html = '<div class=\"course-list\">';\n        \n        sortedCourses.forEach(course => {\n            const hasWarning = this.courseHasWarning(course);\n            const sections = course.sections.map(s => s.number).filter(Boolean);\n            const isSelected = this.courseSelectionService.isCourseSelected(course.id);\n            \n            html += `\n                <div class=\"course-item ${isSelected ? 'selected' : ''}\" data-course-id=\"${course.id}\">\n                    <div class=\"course-header\">\n                        <button class=\"course-select-btn ${isSelected ? 'selected' : ''}\" data-course-id=\"${course.id}\" title=\"${isSelected ? 'Remove from selection' : 'Add to selection'}\">\n                            ${isSelected ? '✓' : '+'}\n                        </button>\n                        <div class=\"course-code\">${course.department.abbreviation}${course.number}</div>\n                        <div class=\"course-details\">\n                            <div class=\"course-name\">\n                                ${course.name}\n                                ${hasWarning ? '<span class=\"warning-icon\">⚠</span>' : ''}\n                            </div>\n                            <div class=\"course-sections\">\n                                ${sections.map(section => \n                                    `<span class=\"section-badge\" data-section=\"${section}\">${section}</span>`\n                                ).join('')}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `;\n        });\n        \n        html += '</div>';\n        courseContainer.innerHTML = html;\n    }\n\n    private displayCoursesGrid(courses: Course[]): void {\n        const courseContainer = document.getElementById('course-container');\n        if (!courseContainer) return;\n\n        if (courses.length === 0) {\n            courseContainer.innerHTML = '<div class=\"empty-state\">No courses found in this department.</div>';\n            return;\n        }\n\n        // Sort courses by course number\n        const sortedCourses = courses.sort((a, b) => a.number.localeCompare(b.number));\n\n        let html = '<div class=\"course-grid\">';\n        \n        sortedCourses.forEach(course => {\n            const hasWarning = this.courseHasWarning(course);\n            const isSelected = this.courseSelectionService.isCourseSelected(course.id);\n            const credits = course.minCredits === course.maxCredits ? course.minCredits : `${course.minCredits}-${course.maxCredits}`;\n            \n            html += `\n                <div class=\"course-card ${isSelected ? 'selected' : ''}\" data-course-id=\"${course.id}\">\n                    <div class=\"course-card-header\">\n                        <div class=\"course-code\">${course.department.abbreviation}${course.number}</div>\n                        <button class=\"course-select-btn ${isSelected ? 'selected' : ''}\" data-course-id=\"${course.id}\" title=\"${isSelected ? 'Remove from selection' : 'Add to selection'}\">\n                            ${isSelected ? '✓' : '+'}\n                        </button>\n                    </div>\n                    <div class=\"course-title\">\n                        ${course.name}\n                        ${hasWarning ? '<span class=\"warning-icon\">⚠</span>' : ''}\n                    </div>\n                    <div class=\"course-info\">\n                        <span class=\"course-credits\">${credits} credits</span>\n                        <span class=\"course-sections-count\">${course.sections.length} section${course.sections.length !== 1 ? 's' : ''}</span>\n                    </div>\n                </div>\n            `;\n        });\n        \n        html += '</div>';\n        courseContainer.innerHTML = html;\n    }\n\n    private courseHasWarning(course: Course): boolean {\n        // Check if ALL sections are fully enrolled (no available options)\n        return course.sections.every(section => section.seatsAvailable <= 0);\n    }\n\n    handleSearch(query: string, selectedDepartment: Department | null): Course[] {\n        if (!query.trim()) {\n            return selectedDepartment ? selectedDepartment.courses : [];\n        }\n\n        const allCourses: Course[] = [];\n        this.allDepartments.forEach(dept => {\n            allCourses.push(...dept.courses);\n        });\n\n        const filteredCourses = allCourses.filter(course => \n            course.name.toLowerCase().includes(query.toLowerCase()) ||\n            course.number.toLowerCase().includes(query.toLowerCase()) ||\n            course.id.toLowerCase().includes(query.toLowerCase())\n        );\n\n        // Update header for search results\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            contentHeader.textContent = `Search Results (${filteredCourses.length})`;\n        }\n\n        return filteredCourses;\n    }\n\n    selectCourse(courseId: string): Course | null {\n        // Find the course in all departments\n        let course: Course | null = null;\n        for (const dept of this.allDepartments) {\n            course = dept.courses.find(c => c.id === courseId) || null;\n            if (course) break;\n        }\n\n        if (!course) return null;\n\n        this.selectedCourse = course;\n        this.displayCourseDescription(course);\n        \n        // Update active state for course items\n        document.querySelectorAll('.course-item').forEach(item => {\n            item.classList.remove('active');\n        });\n        \n        const selectedCourseElement = document.querySelector(`[data-course-id=\"${courseId}\"]`);\n        if (selectedCourseElement) {\n            selectedCourseElement.classList.add('active');\n        }\n\n        return course;\n    }\n\n    toggleCourseSelection(courseId: string): boolean {\n        // Find the course in all departments\n        let course: Course | null = null;\n        for (const dept of this.allDepartments) {\n            course = dept.courses.find(c => c.id === courseId) || null;\n            if (course) break;\n        }\n\n        if (!course) return false;\n\n        const wasSelected = this.courseSelectionService.toggleCourseSelection(course);\n        this.updateCourseSelectionUI(courseId, wasSelected);\n        return wasSelected;\n    }\n\n    private updateCourseSelectionUI(courseId: string, isSelected: boolean): void {\n        const courseElement = document.querySelector(`[data-course-id=\"${courseId}\"]`);\n        const selectBtn = courseElement?.querySelector('.course-select-btn');\n        \n        if (courseElement && selectBtn) {\n            if (isSelected) {\n                courseElement.classList.add('selected');\n                selectBtn.textContent = '✓';\n                selectBtn.classList.add('selected');\n            } else {\n                courseElement.classList.remove('selected');\n                selectBtn.textContent = '+';\n                selectBtn.classList.remove('selected');\n            }\n        }\n    }\n\n    refreshCourseSelectionUI(): void {\n        // Update all course items to reflect current selection state\n        document.querySelectorAll('.course-item').forEach(item => {\n            const courseId = (item as HTMLElement).dataset.courseId;\n            if (courseId) {\n                const isSelected = this.courseSelectionService.isCourseSelected(courseId);\n                this.updateCourseSelectionUI(courseId, isSelected);\n            }\n        });\n    }\n\n    private displayCourseDescription(course: Course): void {\n        const descriptionContainer = document.getElementById('course-description');\n        if (!descriptionContainer) return;\n\n        const html = `\n            <div class=\"course-info\">\n                <div class=\"course-title\">${course.name}</div>\n                <div class=\"course-code\">${course.department.abbreviation}${course.number} (${course.minCredits === course.maxCredits ? course.minCredits : `${course.minCredits}-${course.maxCredits}`} credits)</div>\n            </div>\n            <div class=\"course-description-text\">${course.description}</div>\n        `;\n\n        descriptionContainer.innerHTML = html;\n    }\n\n    clearCourseDescription(): void {\n        const descriptionContainer = document.getElementById('course-description');\n        if (descriptionContainer) {\n            descriptionContainer.innerHTML = '<div class=\"empty-state\">Select a course to view description</div>';\n        }\n    }\n\n    clearCourseSelection(): void {\n        this.selectedCourse = null;\n        this.clearCourseDescription();\n    }\n\n    displaySelectedCourses(): void {\n        const selectedCoursesContainer = document.getElementById('selected-courses-list');\n        const countElement = document.getElementById('selected-count');\n        \n        if (!selectedCoursesContainer || !countElement) return;\n\n        const selectedCourses = this.courseSelectionService.getSelectedCourses();\n        \n        // Update count\n        countElement.textContent = `(${selectedCourses.length})`;\n\n        if (selectedCourses.length === 0) {\n            selectedCoursesContainer.innerHTML = '<div class=\"empty-state\">No courses selected yet</div>';\n            return;\n        }\n\n        // Sort selected courses by department and number\n        const sortedCourses = selectedCourses.sort((a, b) => {\n            const deptCompare = a.course.department.abbreviation.localeCompare(b.course.department.abbreviation);\n            if (deptCompare !== 0) return deptCompare;\n            return a.course.number.localeCompare(b.course.number);\n        });\n\n        let html = '';\n        sortedCourses.forEach(selectedCourse => {\n            const course = selectedCourse.course;\n            const credits = course.minCredits === course.maxCredits \n                ? `${course.minCredits} credits` \n                : `${course.minCredits}-${course.maxCredits} credits`;\n\n            html += `\n                <div class=\"selected-course-item\" data-course-id=\"${course.id}\">\n                    <div class=\"selected-course-info\">\n                        <div class=\"selected-course-code\">${course.department.abbreviation}${course.number}</div>\n                        <div class=\"selected-course-name\">${course.name}</div>\n                        <div class=\"selected-course-credits\">${credits}</div>\n                    </div>\n                    <button class=\"course-remove-btn\" data-course-id=\"${course.id}\" title=\"Remove from selection\">\n                        ×\n                    </button>\n                </div>\n            `;\n        });\n\n        selectedCoursesContainer.innerHTML = html;\n    }\n}","import { Time, DayOfWeek } from '../../types/types';\n\nexport class TimeUtils {\n    // Schedule grid constants - 7 AM to 7 PM (12 hours)\n    static readonly START_HOUR = 7;  // 7 AM\n    static readonly END_HOUR = 19;   // 7 PM\n    static readonly TOTAL_HOURS = 12;\n    static readonly SLOTS_PER_HOUR = 2; // 30-minute intervals\n    static readonly TOTAL_TIME_SLOTS = TimeUtils.TOTAL_HOURS * TimeUtils.SLOTS_PER_HOUR;\n\n    // Days of the week in order\n    static readonly DAYS_ORDER = [\n        DayOfWeek.MONDAY,\n        DayOfWeek.TUESDAY, \n        DayOfWeek.WEDNESDAY,\n        DayOfWeek.THURSDAY,\n        DayOfWeek.FRIDAY,\n        DayOfWeek.SATURDAY,\n        DayOfWeek.SUNDAY\n    ];\n\n    /**\n     * Convert a Time object to a grid row position (0-based)\n     * 7:00 AM = row 0, 7:30 AM = row 1, etc.\n     */\n    static timeToGridRow(time: Time): number {\n        const totalMinutes = time.hours * 60 + time.minutes;\n        const startMinutes = TimeUtils.START_HOUR * 60;\n        const relativeMinutes = totalMinutes - startMinutes;\n        \n        // Convert to 30-minute slots\n        const slot = Math.floor(relativeMinutes / 30);\n        \n        // Ensure within bounds\n        return Math.max(0, Math.min(slot, TimeUtils.TOTAL_TIME_SLOTS - 1));\n    }\n\n    /**\n     * Convert day of week to grid column position (0-based)\n     * Monday = 0, Tuesday = 1, etc.\n     */\n    static dayToGridColumn(day: DayOfWeek): number {\n        return TimeUtils.DAYS_ORDER.indexOf(day);\n    }\n\n    /**\n     * Calculate how many grid rows a time period spans\n     */\n    static calculateDuration(startTime: Time, endTime: Time): number {\n        const startRow = TimeUtils.timeToGridRow(startTime);\n        const endRow = TimeUtils.timeToGridRow(endTime);\n        return Math.max(1, endRow - startRow);\n    }\n\n    /**\n     * Check if a time is within the schedule grid bounds (7 AM - 7 PM)\n     */\n    static isTimeInBounds(time: Time): boolean {\n        return time.hours >= TimeUtils.START_HOUR && time.hours < TimeUtils.END_HOUR;\n    }\n\n    /**\n     * Format time for display (e.g., \"9:00 AM\", \"2:30 PM\")\n     */\n    static formatTime(time: Time): string {\n        if (time.displayTime) {\n            return time.displayTime;\n        }\n        \n        const hours12 = time.hours === 0 ? 12 : time.hours > 12 ? time.hours - 12 : time.hours;\n        const ampm = time.hours >= 12 ? 'PM' : 'AM';\n        const minutes = time.minutes.toString().padStart(2, '0');\n        \n        return `${hours12}:${minutes} ${ampm}`;\n    }\n\n    /**\n     * Format time range for display (e.g., \"9:00-9:50 AM\")\n     */\n    static formatTimeRange(startTime: Time, endTime: Time): string {\n        const startFormatted = TimeUtils.formatTime(startTime);\n        const endFormatted = TimeUtils.formatTime(endTime);\n        \n        // If same AM/PM, only show it once\n        if (startTime.hours < 12 && endTime.hours < 12) {\n            return `${startFormatted.replace(' AM', '')}-${endFormatted}`;\n        } else if (startTime.hours >= 12 && endTime.hours >= 12) {\n            return `${startFormatted.replace(' PM', '')}-${endFormatted}`;\n        } else {\n            return `${startFormatted}-${endFormatted}`;\n        }\n    }\n\n    /**\n     * Format days for display (e.g., \"MWF\", \"TR\")\n     */\n    static formatDays(days: Set<DayOfWeek>): string {\n        const dayAbbreviations: { [key in DayOfWeek]: string } = {\n            [DayOfWeek.MONDAY]: 'M',\n            [DayOfWeek.TUESDAY]: 'T',\n            [DayOfWeek.WEDNESDAY]: 'W',\n            [DayOfWeek.THURSDAY]: 'R',\n            [DayOfWeek.FRIDAY]: 'F',\n            [DayOfWeek.SATURDAY]: 'S',\n            [DayOfWeek.SUNDAY]: 'U'\n        };\n\n        return TimeUtils.DAYS_ORDER\n            .filter(day => days.has(day))\n            .map(day => dayAbbreviations[day])\n            .join('');\n    }\n\n    /**\n     * Generate time labels for the grid (7:00 AM, 7:30 AM, etc.)\n     */\n    static generateTimeLabels(): string[] {\n        const labels: string[] = [];\n        \n        for (let hour = TimeUtils.START_HOUR; hour < TimeUtils.END_HOUR; hour++) {\n            // Add hour:00\n            labels.push(TimeUtils.formatTime({ hours: hour, minutes: 0, displayTime: '' }));\n            // Add hour:30\n            labels.push(TimeUtils.formatTime({ hours: hour, minutes: 30, displayTime: '' }));\n        }\n        \n        return labels;\n    }\n\n    /**\n     * Get day name for display\n     */\n    static getDayName(day: DayOfWeek): string {\n        const dayNames: { [key in DayOfWeek]: string } = {\n            [DayOfWeek.MONDAY]: 'Monday',\n            [DayOfWeek.TUESDAY]: 'Tuesday',\n            [DayOfWeek.WEDNESDAY]: 'Wednesday',\n            [DayOfWeek.THURSDAY]: 'Thursday',\n            [DayOfWeek.FRIDAY]: 'Friday',\n            [DayOfWeek.SATURDAY]: 'Saturday',\n            [DayOfWeek.SUNDAY]: 'Sunday'\n        };\n\n        return dayNames[day];\n    }\n\n    /**\n     * Get abbreviated day name for display\n     */\n    static getDayAbbr(day: DayOfWeek): string {\n        const dayAbbrs: { [key in DayOfWeek]: string } = {\n            [DayOfWeek.MONDAY]: 'Mon',\n            [DayOfWeek.TUESDAY]: 'Tue',\n            [DayOfWeek.WEDNESDAY]: 'Wed',\n            [DayOfWeek.THURSDAY]: 'Thu',\n            [DayOfWeek.FRIDAY]: 'Fri',\n            [DayOfWeek.SATURDAY]: 'Sat',\n            [DayOfWeek.SUNDAY]: 'Sun'\n        };\n\n        return dayAbbrs[day];\n    }\n}","import { DayOfWeek } from '../../types/types'\nimport { CourseSelectionService } from '../../services/CourseSelectionService'\nimport { TimeUtils } from '../utils/timeUtils'\n\nexport class ScheduleController {\n    private courseSelectionService: CourseSelectionService;\n    private statePreserver?: { \n        preserve: () => Map<string, boolean>, \n        restore: (states: Map<string, boolean>) => void \n    };\n\n    constructor(courseSelectionService: CourseSelectionService) {\n        this.courseSelectionService = courseSelectionService;\n    }\n\n    setStatePreserver(statePreserver: { \n        preserve: () => Map<string, boolean>, \n        restore: (states: Map<string, boolean>) => void \n    }): void {\n        this.statePreserver = statePreserver;\n    }\n\n    displayScheduleSelectedCourses(): void {\n        const selectedCoursesContainer = document.getElementById('schedule-selected-courses');\n        const countElement = document.getElementById('schedule-selected-count');\n        \n        if (!selectedCoursesContainer || !countElement) return;\n\n        // Preserve dropdown states before refresh\n        const dropdownStates = this.statePreserver?.preserve();\n\n        const selectedCourses = this.courseSelectionService.getSelectedCourses();\n        \n        // Update count\n        countElement.textContent = `(${selectedCourses.length})`;\n\n        if (selectedCourses.length === 0) {\n            selectedCoursesContainer.innerHTML = '<div class=\"empty-state\">No courses selected yet</div>';\n            return;\n        }\n\n        // Sort selected courses by department and number\n        const sortedCourses = selectedCourses.sort((a, b) => {\n            const deptCompare = a.course.department.abbreviation.localeCompare(b.course.department.abbreviation);\n            if (deptCompare !== 0) return deptCompare;\n            return a.course.number.localeCompare(b.course.number);\n        });\n\n        let html = '';\n        sortedCourses.forEach(selectedCourse => {\n            const course = selectedCourse.course;\n            const credits = course.minCredits === course.maxCredits \n                ? `${course.minCredits} credits` \n                : `${course.minCredits}-${course.maxCredits} credits`;\n\n            // Group sections by term\n            const sectionsByTerm: { [term: string]: typeof course.sections } = {};\n            course.sections.forEach(section => {\n                if (!sectionsByTerm[section.term]) {\n                    sectionsByTerm[section.term] = [];\n                }\n                sectionsByTerm[section.term].push(section);\n            });\n\n            html += `\n                <div class=\"schedule-course-item collapsed\" data-course-id=\"${course.id}\">\n                    <div class=\"schedule-course-header dropdown-trigger\" data-course-id=\"${course.id}\">\n                        <div class=\"schedule-course-info\">\n                            <div class=\"schedule-course-code\">${course.department.abbreviation}${course.number}</div>\n                            <div class=\"schedule-course-name\">${course.name}</div>\n                            <div class=\"schedule-course-credits\">${credits}</div>\n                        </div>\n                        <div class=\"header-controls\">\n                            <span class=\"dropdown-arrow\">▼</span>\n                            <button class=\"course-remove-btn\" data-course-id=\"${course.id}\" title=\"Remove from selection\">\n                                ×\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"schedule-sections-container\">\n            `;\n\n            // Display sections grouped by term\n            const terms = Object.keys(sectionsByTerm).sort();\n            terms.forEach(term => {\n                html += `<div class=\"term-sections\" data-term=\"${term}\">`;\n                html += `<div class=\"term-label\">${term} Term</div>`;\n                \n                sectionsByTerm[term].forEach(section => {\n                    const isSelected = selectedCourse.selectedSection === section.number;\n                    const selectedClass = isSelected ? 'selected' : '';\n                    \n                    // Sort periods by type priority (lecture first, then lab, then discussion)\n                    const sortedPeriods = [...section.periods].sort((a, b) => {\n                        const typePriority = (type: string) => {\n                            const lower = type.toLowerCase();\n                            if (lower.includes('lec') || lower.includes('lecture')) return 1;\n                            if (lower.includes('lab')) return 2;\n                            if (lower.includes('dis') || lower.includes('discussion') || lower.includes('rec')) return 3;\n                            return 4;\n                        };\n                        return typePriority(a.type) - typePriority(b.type);\n                    });\n                    \n                    html += `\n                        <div class=\"section-option ${selectedClass}\" data-course-id=\"${course.id}\" data-section=\"${section.number}\">\n                            <div class=\"section-info\">\n                                <div class=\"section-number\">${section.number}</div>\n                                <div class=\"section-periods\">`;\n                    \n                    // Display all periods for this section\n                    sortedPeriods.forEach((period, index) => {\n                        const timeRange = TimeUtils.formatTimeRange(period.startTime, period.endTime);\n                        const days = TimeUtils.formatDays(period.days);\n                        const periodTypeLabel = this.getPeriodTypeLabel(period.type);\n                        \n                        html += `\n                            <div class=\"period-info\" data-period-type=\"${period.type.toLowerCase()}\">\n                                <div class=\"period-header\">\n                                    <span class=\"period-type-label\">${periodTypeLabel}</span>\n                                    <span class=\"period-schedule\">${days} ${timeRange}</span>\n                                </div>\n                                <div class=\"period-details\">\n                                    <span class=\"period-professor\">${period.professor}</span>\n                                    ${period.location ? `<span class=\"period-location\">${period.location}</span>` : ''}\n                                </div>\n                            </div>\n                        `;\n                    });\n                    \n                    html += `\n                                </div>\n                            </div>\n                            <button class=\"section-select-btn ${selectedClass}\" data-course-id=\"${course.id}\" data-section=\"${section.number}\">\n                                ${isSelected ? '✓' : '+'}\n                            </button>\n                        </div>\n                    `;\n                });\n                \n                html += `</div>`;\n            });\n\n            html += `\n                    </div>\n                </div>\n            `;\n        });\n\n        selectedCoursesContainer.innerHTML = html;\n\n        // Restore dropdown states after refresh\n        if (dropdownStates) {\n            // Use setTimeout to ensure DOM is fully updated\n            setTimeout(() => {\n                this.statePreserver?.restore(dropdownStates);\n            }, 0);\n        }\n    }\n\n    handleSectionSelection(courseId: string, sectionNumber: string): void {\n        const currentSelectedSection = this.courseSelectionService.getSelectedSection(courseId);\n        \n        if (currentSelectedSection === sectionNumber) {\n            // Deselect current section\n            this.courseSelectionService.setSelectedSection(courseId, null);\n        } else {\n            // Select new section (automatically deselects any previous section)\n            this.courseSelectionService.setSelectedSection(courseId, sectionNumber);\n        }\n        \n        // Note: UI refresh is handled automatically by the selection change listener\n        // No need to call displayScheduleSelectedCourses() here as it would cause duplicate refreshes\n    }\n\n    updateSectionButtonStates(courseId: string, selectedSection: string | null): void {\n        // Find the schedule course item specifically (not main course items)\n        const courseItem = document.querySelector(`.schedule-course-item[data-course-id=\"${courseId}\"]`);\n        if (!courseItem) return;\n\n        const sectionButtons = courseItem.querySelectorAll('.section-select-btn');\n        const sectionOptions = courseItem.querySelectorAll('.section-option');\n\n        sectionButtons.forEach(button => {\n            const buttonSection = (button as HTMLElement).dataset.section;\n            const isSelected = buttonSection === selectedSection;\n            \n            // Update button appearance\n            if (isSelected) {\n                button.classList.add('selected');\n                button.textContent = '✓';\n            } else {\n                button.classList.remove('selected');\n                button.textContent = '+';\n            }\n        });\n\n        sectionOptions.forEach(option => {\n            const optionSection = (option as HTMLElement).dataset.section;\n            const isSelected = optionSection === selectedSection;\n            \n            // Update option appearance\n            if (isSelected) {\n                option.classList.add('selected');\n            } else {\n                option.classList.remove('selected');\n            }\n        });\n    }\n\n    renderScheduleGrids(): void {\n        const selectedCourses = this.courseSelectionService.getSelectedCourses();\n        const grids = ['A', 'B', 'C', 'D'];\n        \n        grids.forEach(term => {\n            const gridContainer = document.getElementById(`schedule-grid-${term}`);\n            if (!gridContainer) return;\n            \n            // Filter courses for this term\n            const termCourses = selectedCourses.filter(sc => \n                sc.selectedSection && \n                sc.course.sections.some(section => \n                    section.number === sc.selectedSection && \n                    section.term.toUpperCase().includes(term)\n                )\n            );\n            \n            if (termCourses.length === 0) {\n                this.renderEmptyGrid(gridContainer, term);\n                return;\n            }\n            \n            this.renderPopulatedGrid(gridContainer, termCourses, term);\n        });\n    }\n\n    private renderEmptyGrid(container: HTMLElement, term: string): void {\n        container.innerHTML = `\n            <div class=\"empty-schedule\">\n                <div class=\"empty-message\">No classes scheduled for ${term} term</div>\n            </div>\n        `;\n        container.classList.add('empty');\n    }\n\n    private renderPopulatedGrid(container: HTMLElement, courses: any[], term: string): void {\n        container.classList.remove('empty');\n        \n        // Create 5-day (Mon-Fri) × 24 time slot grid (7 AM - 7 PM, 30-min intervals)\n        const weekdays = [DayOfWeek.MONDAY, DayOfWeek.TUESDAY, DayOfWeek.WEDNESDAY, DayOfWeek.THURSDAY, DayOfWeek.FRIDAY];\n        const timeSlots = TimeUtils.TOTAL_TIME_SLOTS;\n        \n        let html = `\n            <div class=\"schedule-grid-header\">\n                <div class=\"time-column-header\"></div>\n                ${weekdays.map(day => `\n                    <div class=\"day-header\">${TimeUtils.getDayAbbr(day)}</div>\n                `).join('')}\n            </div>\n            <div class=\"schedule-grid-body\">\n        `;\n        \n        // Generate time rows\n        for (let slot = 0; slot < timeSlots; slot++) {\n            const hour = Math.floor(slot / 2) + TimeUtils.START_HOUR;\n            const minute = (slot % 2) * 30;\n            const timeLabel = slot % 2 === 0 ? TimeUtils.formatTime({ hours: hour, minutes: minute, displayTime: '' }) : '';\n            \n            html += `\n                <div class=\"schedule-row\">\n                    <div class=\"time-label\">${timeLabel}</div>\n                    ${weekdays.map(day => {\n                        const cell = this.getCellContent(courses, day, slot);\n                        return `<div class=\"schedule-cell ${cell.classes}\" data-day=\"${day}\" data-slot=\"${slot}\">${cell.content}</div>`;\n                    }).join('')}\n                </div>\n            `;\n        }\n        \n        html += '</div>';\n        container.innerHTML = html;\n    }\n\n    private getCellContent(courses: any[], day: DayOfWeek, timeSlot: number): { content: string, classes: string } {\n        // Find all courses that occupy this cell\n        const occupyingCourses: any[] = [];\n        \n        for (const selectedCourse of courses) {\n            if (!selectedCourse.selectedSection) continue;\n            \n            const section = selectedCourse.course.sections.find((s: { number: any }) => s.number === selectedCourse.selectedSection);\n            if (!section) continue;\n            \n            for (const period of section.periods) {\n                if (!period.days.has(day)) continue;\n                \n                const startSlot = TimeUtils.timeToGridRow(period.startTime);\n                const endSlot = TimeUtils.timeToGridRow(period.endTime);\n                \n                if (timeSlot >= startSlot && timeSlot < endSlot) {\n                    occupyingCourses.push({\n                        course: selectedCourse,\n                        section,\n                        period,\n                        startSlot,\n                        endSlot,\n                        isFirstSlot: timeSlot === startSlot\n                    });\n                }\n            }\n        }\n        \n        if (occupyingCourses.length === 0) {\n            return { content: '', classes: '' };\n        }\n        \n        // Check for conflicts\n        const hasConflict = occupyingCourses.length > 1;\n        const primaryCourse = occupyingCourses[0];\n        const courseColor = this.getCourseColor(primaryCourse.course.course.id);\n        \n        // Build content for the first course in the slot\n        const periodTypeClass = this.getPeriodTypeClass(primaryCourse.period.type);\n        const periodTypeLabel = this.getPeriodTypeLabel(primaryCourse.period.type);\n        \n        const content = primaryCourse.isFirstSlot ? `\n            <div class=\"course-block ${periodTypeClass} ${hasConflict ? 'conflict' : ''}\" style=\"background-color: ${courseColor}\">\n                <div class=\"course-header\">\n                    <div class=\"course-title\">${primaryCourse.course.course.department.abbreviation}${primaryCourse.course.course.number}</div>\n                    <div class=\"period-type-badge\">${periodTypeLabel}</div>\n                </div>\n                <div class=\"course-time\">${TimeUtils.formatTimeRange(primaryCourse.period.startTime, primaryCourse.period.endTime)}</div>\n                <div class=\"course-location\">${primaryCourse.period.location}</div>\n                <div class=\"course-professor\">${primaryCourse.period.professor}</div>\n                ${hasConflict ? '<div class=\"conflict-indicator\">⚠ Conflict</div>' : ''}\n            </div>\n        ` : `<div class=\"course-continuation ${periodTypeClass} ${hasConflict ? 'conflict' : ''}\"></div>`;\n        \n        const classes = `occupied ${primaryCourse.isFirstSlot ? 'course-start' : 'course-continuation'} ${hasConflict ? 'has-conflict' : ''}`;\n        \n        return { content, classes };\n    }\n\n    private getCourseColor(courseId: string): string {\n        // Generate consistent colors for courses\n        const colors = [\n            '#4CAF50', '#2196F3', '#FF9800', '#9C27B0', '#F44336',\n            '#00BCD4', '#795548', '#607D8B', '#3F51B5', '#E91E63'\n        ];\n        \n        let hash = 0;\n        for (let i = 0; i < courseId.length; i++) {\n            hash = courseId.charCodeAt(i) + ((hash << 5) - hash);\n        }\n        \n        return colors[Math.abs(hash) % colors.length];\n    }\n\n    private getPeriodTypeLabel(type: string): string {\n        const lower = type.toLowerCase();\n        \n        if (lower.includes('lec') || lower.includes('lecture')) return 'LEC';\n        if (lower.includes('lab')) return 'LAB';\n        if (lower.includes('dis') || lower.includes('discussion')) return 'DIS';\n        if (lower.includes('rec') || lower.includes('recitation')) return 'REC';\n        if (lower.includes('sem') || lower.includes('seminar')) return 'SEM';\n        if (lower.includes('studio')) return 'STU';\n        if (lower.includes('conference') || lower.includes('conf')) return 'CONF';\n        \n        // Return abbreviated version for unknown types (first 3-4 chars)\n        return type.substring(0, Math.min(4, type.length)).toUpperCase();\n    }\n\n    private getPeriodTypeClass(type: string): string {\n        const lower = type.toLowerCase();\n        \n        if (lower.includes('lec') || lower.includes('lecture')) return 'period-lecture';\n        if (lower.includes('lab')) return 'period-lab';\n        if (lower.includes('dis') || lower.includes('discussion')) return 'period-discussion';\n        if (lower.includes('rec') || lower.includes('recitation')) return 'period-recitation';\n        if (lower.includes('sem') || lower.includes('seminar')) return 'period-seminar';\n        if (lower.includes('studio')) return 'period-studio';\n        if (lower.includes('conference') || lower.includes('conf')) return 'period-conference';\n        \n        return 'period-other';\n    }\n}","export class UIStateManager {\n    public currentView: 'list' | 'grid' = 'list';\n    public currentPage: 'planner' | 'schedule' = 'planner';\n\n    constructor() {}\n\n    setView(view: 'list' | 'grid'): void {\n        this.currentView = view;\n        \n        // Update button states\n        const viewListBtn = document.getElementById('view-list');\n        const viewGridBtn = document.getElementById('view-grid');\n        \n        if (viewListBtn && viewGridBtn) {\n            if (view === 'list') {\n                viewListBtn.classList.add('btn-primary', 'active');\n                viewListBtn.classList.remove('btn-secondary');\n                viewGridBtn.classList.add('btn-secondary');\n                viewGridBtn.classList.remove('btn-primary', 'active');\n            } else {\n                viewGridBtn.classList.add('btn-primary', 'active');\n                viewGridBtn.classList.remove('btn-secondary');\n                viewListBtn.classList.add('btn-secondary');\n                viewListBtn.classList.remove('btn-primary', 'active');\n            }\n        }\n    }\n\n    togglePage(): void {\n        const nextPage = this.currentPage === 'planner' ? 'schedule' : 'planner';\n        this.switchToPage(nextPage);\n    }\n\n    switchToPage(page: 'planner' | 'schedule'): void {\n        if (page === this.currentPage) return;\n\n        this.currentPage = page;\n\n        // Update button text based on current page\n        const scheduleButton = document.getElementById('schedule-btn');\n        if (scheduleButton) {\n            if (page === 'schedule') {\n                scheduleButton.textContent = 'Back to Classes';\n                this.showSchedulePage();\n            } else {\n                scheduleButton.textContent = 'Schedule';\n                this.showPlannerPage();\n            }\n        }\n    }\n\n    private showPlannerPage(): void {\n        const plannerPage = document.getElementById('planner-page');\n        const schedulePage = document.getElementById('schedule-page');\n\n        if (plannerPage) plannerPage.style.display = 'grid';\n        if (schedulePage) schedulePage.style.display = 'none';\n    }\n\n    private showSchedulePage(): void {\n        const plannerPage = document.getElementById('planner-page');\n        const schedulePage = document.getElementById('schedule-page');\n\n        if (plannerPage) plannerPage.style.display = 'none';\n        if (schedulePage) schedulePage.style.display = 'flex';\n    }\n\n    showLoadingState(): void {\n        const departmentList = document.getElementById('department-list');\n        if (departmentList) {\n            departmentList.innerHTML = '<div class=\"loading-message\">Loading departments...</div>';\n        }\n    }\n\n    showErrorMessage(message: string): void {\n        const departmentList = document.getElementById('department-list');\n        if (departmentList) {\n            departmentList.innerHTML = `<div class=\"error-message\">${message}</div>`;\n        }\n        \n        const courseContainer = document.getElementById('course-container');\n        if (courseContainer) {\n            courseContainer.innerHTML = `<div class=\"error-message\">${message}</div>`;\n        }\n    }\n\n    syncHeaderHeights(): void {\n        const sidebarHeader = document.querySelector('.sidebar-header') as HTMLElement;\n        const contentHeader = document.querySelector('.content-header') as HTMLElement;\n        const panelHeaders = document.querySelectorAll('.panel-header') as NodeListOf<HTMLElement>;\n\n        if (!sidebarHeader || !contentHeader || !panelHeaders.length) {\n            return;\n        }\n\n        // Reset heights to natural size to get accurate measurements\n        document.documentElement.style.setProperty('--synced-header-height', 'auto');\n        \n        // Allow layout to settle\n        requestAnimationFrame(() => {\n            // Get natural heights of all headers\n            const sidebarHeight = sidebarHeader.offsetHeight;\n            const contentHeight = contentHeader.offsetHeight;\n            const panelHeights = Array.from(panelHeaders).map(header => header.offsetHeight);\n            \n            // Find the maximum height\n            const maxHeight = Math.max(sidebarHeight, contentHeight, ...panelHeights);\n            \n            // Set the synced height to match the tallest header\n            document.documentElement.style.setProperty('--synced-header-height', `${maxHeight}px`);\n        });\n    }\n\n    setupHeaderResizeObserver(): void {\n        if (!window.ResizeObserver) return;\n\n        const headers = [\n            document.querySelector('.sidebar-header'),\n            document.querySelector('.content-header'),\n            ...document.querySelectorAll('.panel-header')\n        ].filter(Boolean) as HTMLElement[];\n\n        if (!headers.length) return;\n\n        const resizeObserver = new ResizeObserver(() => {\n            this.syncHeaderHeights();\n        });\n\n        headers.forEach(header => {\n            resizeObserver.observe(header);\n        });\n    }\n}","export class TimestampManager {\n    constructor() {}\n\n    updateClientTimestamp(): void {\n        const clientTimestampElement = document.getElementById('client-timestamp');\n        if (clientTimestampElement) {\n            const now = new Date();\n            const options: Intl.DateTimeFormatOptions = {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric',\n                hour: 'numeric',\n                minute: '2-digit',\n                second: '2-digit',\n                hour12: true\n            };\n            const formattedTime = now.toLocaleDateString('en-US', options).replace(',', ' at');\n            clientTimestampElement.textContent = `Client loaded: ${formattedTime}`;\n        }\n    }\n\n    async loadServerTimestamp(): Promise<void> {\n        const serverTimestampElement = document.getElementById('server-timestamp');\n        if (!serverTimestampElement) return;\n\n        try {\n            const response = await fetch('./last-updated.json', {\n                cache: 'no-cache'\n            });\n            \n            if (response.ok) {\n                const timestampData = await response.json();\n                const serverDate = new Date(timestampData.timestamp);\n                const options: Intl.DateTimeFormatOptions = {\n                    month: 'short',\n                    day: 'numeric',\n                    year: 'numeric',\n                    hour: 'numeric',\n                    minute: '2-digit',\n                    second: '2-digit',\n                    hour12: true\n                };\n                const formattedTime = serverDate.toLocaleDateString('en-US', options).replace(',', ' at');\n                serverTimestampElement.textContent = `Server updated: ${formattedTime}`;\n            } else {\n                throw new Error(`Failed to fetch server timestamp: ${response.status}`);\n            }\n        } catch (error) {\n            console.warn('Failed to load server timestamp:', error);\n            serverTimestampElement.textContent = 'Server timestamp unavailable';\n        }\n    }\n}","import { Course, Department } from '../../types/types'\nimport { CourseDataService } from '../../services/courseDataService'\nimport { ThemeSelector } from '../components/ThemeSelector'\nimport { CourseSelectionService } from '../../services/CourseSelectionService'\nimport { ConflictDetector } from '../../core/ConflictDetector'\nimport { DepartmentController } from './DepartmentController'\nimport { CourseController } from './CourseController'\nimport { ScheduleController } from './ScheduleController'\nimport { UIStateManager } from './UIStateManager'\nimport { TimestampManager } from './TimestampManager'\n\nexport class MainController {\n    private courseDataService: CourseDataService;\n    private themeSelector: ThemeSelector;\n    private courseSelectionService: CourseSelectionService;\n    private conflictDetector: ConflictDetector;\n    private departmentController: DepartmentController;\n    private courseController: CourseController;\n    private scheduleController: ScheduleController;\n    private uiStateManager: UIStateManager;\n    private timestampManager: TimestampManager;\n    private allDepartments: Department[] = [];\n\n\n    constructor() {\n        this.courseDataService = new CourseDataService();\n        this.themeSelector = new ThemeSelector();\n        this.courseSelectionService = new CourseSelectionService();\n        this.conflictDetector = new ConflictDetector();\n        this.departmentController = new DepartmentController();\n        this.courseController = new CourseController(this.courseSelectionService);\n        this.scheduleController = new ScheduleController(this.courseSelectionService);\n        this.uiStateManager = new UIStateManager();\n        this.timestampManager = new TimestampManager();\n        \n        // Wire up state preservation for dropdown states\n        this.scheduleController.setStatePreserver({\n            preserve: () => this.preserveDropdownStates(),\n            restore: (states) => this.restoreDropdownStates(states)\n        });\n        \n        // Initialize tracking for course changes\n        const initialSelectedCourses = this.courseSelectionService.getSelectedCourses();\n        this.previousSelectedCoursesCount = initialSelectedCourses.length;\n        this.previousSelectedCoursesMap = new Map();\n        initialSelectedCourses.forEach(sc => {\n            this.previousSelectedCoursesMap.set(sc.course.id, sc.selectedSection);\n        });\n        \n        this.init();\n    }\n\n    private async init(): Promise<void> {\n        this.uiStateManager.showLoadingState();\n        await this.loadCourseData();\n        this.departmentController.displayDepartments();\n        this.setupEventListeners();\n        this.setupCourseSelectionListener();\n        this.courseController.displaySelectedCourses();\n        this.uiStateManager.syncHeaderHeights();\n        this.uiStateManager.setupHeaderResizeObserver();\n    }\n\n    private async loadCourseData(): Promise<void> {\n        try {\n            console.log('Loading course data...');\n            const scheduleDB = await this.courseDataService.loadCourseData();\n            this.allDepartments = scheduleDB.departments;\n            this.departmentController.setAllDepartments(this.allDepartments);\n            this.courseController.setAllDepartments(this.allDepartments);\n            console.log(`Loaded ${this.allDepartments.length} departments`);\n            this.timestampManager.updateClientTimestamp();\n            this.timestampManager.loadServerTimestamp();\n        } catch (error) {\n            console.error('Failed to load course data:', error);\n            this.uiStateManager.showErrorMessage('Failed to load course data. Please try refreshing the page.');\n        }\n    }\n\n\n    private setupEventListeners(): void {\n        // Department selection\n        document.addEventListener('click', (e) => {\n            const target = e.target as HTMLElement;\n            \n            \n            if (target.classList.contains('department-item')) {\n                const deptId = target.dataset.deptId;\n                if (deptId) {\n                    const department = this.departmentController.handleDepartmentClick(deptId);\n                    if (department) {\n                        this.courseController.displayCourses(department.courses, this.uiStateManager.currentView);\n                    }\n                }\n            }\n            \n            if (target.classList.contains('section-badge')) {\n                target.classList.toggle('selected');\n            }\n            \n            if (target.classList.contains('course-select-btn')) {\n                const courseId = target.dataset.courseId;\n                if (courseId) {\n                    this.courseController.toggleCourseSelection(courseId);\n                }\n            }\n\n            if (target.classList.contains('course-remove-btn')) {\n                const courseId = target.dataset.courseId;\n                if (courseId) {\n                    // Directly remove course (remove button means always unselect)\n                    this.courseSelectionService.unselectCourse(courseId);\n                }\n            }\n\n            // Handle section-related clicks FIRST (before dropdown logic)\n            if (target.classList.contains('section-select-btn')) {\n                e.stopPropagation();\n                const courseId = target.dataset.courseId;\n                const sectionNumber = target.dataset.section;\n                if (courseId && sectionNumber) {\n                    this.scheduleController.handleSectionSelection(courseId, sectionNumber);\n                }\n                return;\n            }\n\n            // Prevent dropdown closing for any other section-related clicks\n            if (target.classList.contains('section-option') || target.closest('.section-option') ||\n                target.classList.contains('section-info') || target.closest('.section-info') ||\n                target.classList.contains('section-number') || \n                target.classList.contains('section-schedule') || \n                target.classList.contains('section-professor')) {\n                e.stopPropagation();\n                e.preventDefault();\n                return;\n            }\n\n            if (target.classList.contains('dropdown-trigger') || target.closest('.dropdown-trigger')) {\n                const triggerElement = target.classList.contains('dropdown-trigger') \n                    ? target \n                    : target.closest('.dropdown-trigger') as HTMLElement;\n                    \n                if (triggerElement) {\n                    // Only trigger dropdown if clicking on course header area (not section-related elements)\n                    const shouldToggle = !target.classList.contains('course-remove-btn') && \n                        !target.classList.contains('section-select-btn') &&\n                        !target.classList.contains('section-number') && \n                        !target.classList.contains('section-schedule') && \n                        !target.classList.contains('section-professor') &&\n                        !target.closest('.section-option') &&\n                        !target.closest('.section-info') &&\n                        !target.closest('.schedule-sections-container');\n                        \n                    if (shouldToggle) {\n                        this.toggleCourseDropdown(triggerElement);\n                    }\n                }\n            }\n\n\n            if (target.closest('.course-item') && !target.classList.contains('course-select-btn') && !target.classList.contains('section-badge')) {\n                const courseItem = target.closest('.course-item') as HTMLElement;\n                const courseId = courseItem.dataset.courseId;\n                if (courseId) {\n                    this.courseController.selectCourse(courseId);\n                }\n            }\n        });\n\n        // Search functionality\n        const searchInput = document.getElementById('search-input') as HTMLInputElement;\n        if (searchInput) {\n            searchInput.addEventListener('input', () => {\n                const filteredCourses = this.courseController.handleSearch(searchInput.value, this.departmentController.getSelectedDepartment());\n                this.courseController.displayCourses(filteredCourses, this.uiStateManager.currentView);\n            });\n        }\n\n        // Clear selection\n        const clearButton = document.getElementById('clear-selection');\n        if (clearButton) {\n            clearButton.addEventListener('click', () => {\n                this.clearSelection();\n            });\n        }\n\n        // Schedule navigation\n        const scheduleButton = document.getElementById('schedule-btn');\n        if (scheduleButton) {\n            scheduleButton.addEventListener('click', () => {\n                this.uiStateManager.togglePage();\n                if (this.uiStateManager.currentPage === 'schedule') {\n                    this.scheduleController.displayScheduleSelectedCourses();\n                    this.scheduleController.renderScheduleGrids();\n                }\n            });\n        }\n\n        // View toggle buttons\n        const viewListBtn = document.getElementById('view-list');\n        const viewGridBtn = document.getElementById('view-grid');\n        \n        if (viewListBtn) {\n            viewListBtn.addEventListener('click', () => {\n                this.uiStateManager.setView('list');\n                this.refreshCurrentView();\n            });\n        }\n        \n        if (viewGridBtn) {\n            viewGridBtn.addEventListener('click', () => {\n                this.uiStateManager.setView('grid');\n                this.refreshCurrentView();\n            });\n        }\n    }\n\n    private refreshCurrentView(): void {\n        const selectedDepartment = this.departmentController.getSelectedDepartment();\n        if (selectedDepartment) {\n            this.courseController.displayCourses(selectedDepartment.courses, this.uiStateManager.currentView);\n        } else {\n            // Check if we're showing search results\n            const searchInput = document.getElementById('search-input') as HTMLInputElement;\n            if (searchInput?.value.trim()) {\n                const filteredCourses = this.courseController.handleSearch(searchInput.value, null);\n                this.courseController.displayCourses(filteredCourses, this.uiStateManager.currentView);\n            }\n        }\n    }\n\n\n\n    private clearSelection(): void {\n        // Clear selected sections\n        document.querySelectorAll('.section-badge.selected').forEach(badge => {\n            badge.classList.remove('selected');\n        });\n\n        // Clear search\n        const searchInput = document.getElementById('search-input') as HTMLInputElement;\n        if (searchInput) {\n            searchInput.value = '';\n        }\n\n        // Reset to default state\n        const courseContainer = document.getElementById('course-container');\n        if (courseContainer) {\n            courseContainer.innerHTML = '<div class=\"loading-message\">Select a department to view courses...</div>';\n        }\n\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            contentHeader.textContent = 'Course Listings';\n        }\n\n        this.departmentController.clearDepartmentSelection();\n        this.courseController.clearCourseSelection();\n        this.courseController.displaySelectedCourses();\n    }\n\n\n\n\n\n\n    private previousSelectedCoursesCount = 0;\n    private previousSelectedCoursesMap = new Map<string, string | null>();\n\n    private setupCourseSelectionListener(): void {\n        this.courseSelectionService.onSelectionChange((selectedCourses) => {\n            const currentCount = selectedCourses.length;\n            const isCoursesAddedOrRemoved = currentCount !== this.previousSelectedCoursesCount;\n            \n            // Create current state map for comparison\n            const currentCoursesMap = new Map<string, string | null>();\n            selectedCourses.forEach(sc => {\n                currentCoursesMap.set(sc.course.id, sc.selectedSection);\n            });\n            \n            // Always update main course UI\n            this.courseController.refreshCourseSelectionUI();\n            this.courseController.displaySelectedCourses();\n            \n            if (isCoursesAddedOrRemoved) {\n                // Full refresh needed when courses are added/removed\n                this.scheduleController.displayScheduleSelectedCourses();\n            } else {\n                // Check if only section selections changed\n                let sectionSelectionsChanged = false;\n                for (const [courseId, selectedSection] of currentCoursesMap) {\n                    const previousSection = this.previousSelectedCoursesMap.get(courseId);\n                    if (previousSection !== selectedSection) {\n                        sectionSelectionsChanged = true;\n                        // Update just this course's section buttons\n                        this.scheduleController.updateSectionButtonStates(courseId, selectedSection);\n                    }\n                }\n                \n                // Update schedule grids if any sections changed\n                if (sectionSelectionsChanged && this.uiStateManager.currentPage === 'schedule') {\n                    this.scheduleController.renderScheduleGrids();\n                }\n            }\n            \n            // Update tracking state\n            this.previousSelectedCoursesCount = currentCount;\n            this.previousSelectedCoursesMap = new Map(currentCoursesMap);\n        });\n    }\n\n\n\n    // Public methods for easy access to selected courses\n    public getSelectedCourses() {\n        return this.courseSelectionService.getSelectedCourses();\n    }\n\n    public getSelectedCoursesCount(): number {\n        return this.courseSelectionService.getSelectedCoursesCount();\n    }\n\n    public getCourseSelectionService(): CourseSelectionService {\n        return this.courseSelectionService;\n    }\n\n    private toggleCourseDropdown(triggerElement: HTMLElement): void {\n        const courseItem = triggerElement.closest('.schedule-course-item');\n        if (!courseItem) return;\n\n        const isCollapsed = courseItem.classList.contains('collapsed');\n        \n        if (isCollapsed) {\n            // Expand\n            courseItem.classList.remove('collapsed');\n            courseItem.classList.add('expanded');\n        } else {\n            // Collapse\n            courseItem.classList.remove('expanded');\n            courseItem.classList.add('collapsed');\n        }\n    }\n\n    private preserveDropdownStates(): Map<string, boolean> {\n        const states = new Map<string, boolean>();\n        document.querySelectorAll('.schedule-course-item').forEach(item => {\n            const courseId = (item as HTMLElement).dataset.courseId;\n            if (courseId) {\n                const isExpanded = item.classList.contains('expanded');\n                states.set(courseId, isExpanded);\n            }\n        });\n        return states;\n    }\n\n    private restoreDropdownStates(states: Map<string, boolean>): void {\n        document.querySelectorAll('.schedule-course-item').forEach(item => {\n            const courseId = (item as HTMLElement).dataset.courseId;\n            if (courseId && states.has(courseId)) {\n                const wasExpanded = states.get(courseId);\n                if (wasExpanded) {\n                    item.classList.remove('collapsed');\n                    item.classList.add('expanded');\n                } else {\n                    item.classList.remove('expanded');\n                    item.classList.add('collapsed');\n                }\n            }\n        });\n    }\n\n\n\n\n\n}","import './style.css'\nimport { MainController } from './ui/controllers/MainController'\n\n// Initialize the application\nnew MainController()"],"names":["DayOfWeek","_CourseDataService","freshData","error","response","jsonData","scheduleDB","departmentMap","processed","entry","courseTitleMatch","deptCode","courseNum","courseName","deptName","department","course","section","period","courseId","c","sectionMatch","sectionNumber","enrolled","capacity","n","waitlisted","waitlistCap","html","location","match","pattern","isStart","timeMatch","timeStr","dayPattern","hours","minutes","ampm","daysStr","days","patternDayMap","fullNameDayMap","char","dayNames","day","dayName","cached","cacheData","parsedData","cacheAge","maxAge","query","departments","allCourses","dept","queryLower","CourseDataService","ThemeManager","wpiClassic","wpiDark","wpiLight","highContrast","savedTheme","theme","themeId","oldTheme","newTheme","themeDefinition","event","root","key","value","str","preferredTheme","listener","themeJson","_StorageManager","state","serializedState","stored","schedule","schedules","existingIndex","s","serializedSchedules","scheduleId","filtered","preferences","serializedPreferences","exportData","data","operation","errorMessage","fallback","selectedCourses","serializedCourses","StorageManager","ThemeSelector","availableThemes","currentThemeId","isActive","option","currentTheme","selectedThemeId","selectedOption","CourseManager","isRequired","selectedCourse","courses","Validators","p","time","timeRange","sc","input","email","CourseSelectionService","courseManager","storageManager","preference","persistedCourses","ConflictType","ConflictDetector","sections","conflicts","i","j","cacheKey","sectionConflicts","section1","section2","period1","period2","conflict","sharedDays","days1","days2","start1","end1","start2","end2","key1","key2","DepartmentController","deptId","d","contentHeader","departmentList","categories","categoryName","courseCount","category","a","b","item","clickedElement","CourseController","courseSelectionService","currentView","courseContainer","sortedCourses","hasWarning","isSelected","credits","selectedDepartment","filteredCourses","selectedCourseElement","wasSelected","courseElement","selectBtn","descriptionContainer","selectedCoursesContainer","countElement","deptCompare","_TimeUtils","totalMinutes","startMinutes","relativeMinutes","slot","startTime","endTime","startRow","endRow","hours12","startFormatted","endFormatted","dayAbbreviations","labels","hour","TimeUtils","ScheduleController","statePreserver","dropdownStates","sectionsByTerm","term","selectedClass","sortedPeriods","typePriority","type","lower","index","periodTypeLabel","selectedSection","courseItem","sectionButtons","sectionOptions","button","gridContainer","termCourses","container","weekdays","timeSlots","minute","timeLabel","cell","timeSlot","occupyingCourses","startSlot","endSlot","hasConflict","primaryCourse","courseColor","periodTypeClass","content","classes","colors","hash","UIStateManager","view","viewListBtn","viewGridBtn","nextPage","page","scheduleButton","plannerPage","schedulePage","message","sidebarHeader","panelHeaders","sidebarHeight","contentHeight","panelHeights","header","maxHeight","headers","resizeObserver","TimestampManager","clientTimestampElement","now","options","formattedTime","serverTimestampElement","timestampData","serverDate","MainController","states","initialSelectedCourses","e","target","triggerElement","searchInput","clearButton","badge","currentCount","isCoursesAddedOrRemoved","currentCoursesMap","sectionSelectionsChanged","isExpanded"],"mappings":"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"}