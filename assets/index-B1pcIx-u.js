(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))r(s);new MutationObserver(s=>{for(const a of s)if(a.type==="childList")for(const l of a.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&r(l)}).observe(document,{childList:!0,subtree:!0});function e(s){const a={};return s.integrity&&(a.integrity=s.integrity),s.referrerPolicy&&(a.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?a.credentials="include":s.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function r(s){if(s.ep)return;s.ep=!0;const a=e(s);fetch(s.href,a)}})();var o=(i=>(i.MONDAY="mon",i.TUESDAY="tue",i.WEDNESDAY="wed",i.THURSDAY="thu",i.FRIDAY="fri",i.SATURDAY="sat",i.SUNDAY="sun",i))(o||{});const c=class c{constructor(){this.scheduleDB=null}async loadCourseData(){try{const t=this.getCachedData();if(t&&!this.isCacheExpired())return this.scheduleDB=t,t;const e=await this.fetchFreshData();return this.cacheData(e),this.scheduleDB=e,e}catch(t){console.warn("Failed to load fresh course data, falling back to cached data:",t);const e=this.getCachedData();if(e)return this.scheduleDB=e,e;throw new Error("No course data available")}}async fetchFreshData(){console.log("Fetching course data from local static file...");const t=await fetch(c.WPI_COURSE_DATA_URL,{method:"GET",headers:{Accept:"application/json"},cache:"no-cache"});if(!t.ok)throw new Error(`Failed to fetch course data: ${t.status} ${t.statusText}`);const e=await t.json();return this.parseJSONData(e)}parseJSONData(t){const e={departments:[],generated:new Date().toISOString()};if(!t.Report_Entry||!Array.isArray(t.Report_Entry))throw new Error("Invalid JSON data structure");const r=new Map;for(const s of t.Report_Entry)this.processJSONEntry(s,r);return e.departments=Array.from(r.values()),console.log(`Loaded ${e.departments.length} departments with course data`),e}processJSONEntry(t,e){const s=(t.Course_Title||"").match(/^([A-Z]+)\s+(\d+)\s*-\s*(.+)$/);if(!s)return;const[,a,l,S]=s,w=t.Academic_Units||t.Subject||a;let d=e.get(a);d||(d={abbreviation:a,name:w,courses:[]},e.set(a,d));const m=`${a}-${l}`;let u=d.courses.find(n=>n.id===m);u||(u={id:m,number:l,name:S,description:this.stripHtml(t.Course_Description||""),department:d,sections:[],minCredits:parseFloat(t.Credits||"3"),maxCredits:parseFloat(t.Credits||"3")},d.courses.push(u));const f=t.Course_Section?.match(/([A-Z]+\s+\d+)-([A-Z0-9]+)/),D=f?f[2]:"",[g,h]=(t.Enrolled_Capacity||"0/0").split("/").map(n=>parseInt(n)||0),[A,C]=(t.Waitlist_Waitlist_Capacity||"0/0").split("/").map(n=>parseInt(n)||0),E={crn:0,number:D,seats:h,seatsAvailable:h-g,actualWaitlist:A,maxWaitlist:C,note:t.Section_Status==="Waitlist"?"Waitlist Available":void 0,description:this.stripHtml(t.Course_Section_Description||""),term:t.Offering_Period||"",periods:[]};if(t.Meeting_Patterns&&t.Locations&&t.Instructors){const n={type:t.Instructional_Format||"Lecture",professor:t.Instructors||"",professorEmail:void 0,startTime:this.parseTimeFromPattern(t.Meeting_Patterns,!0),endTime:this.parseTimeFromPattern(t.Meeting_Patterns,!1),building:this.extractBuilding(t.Locations),room:this.extractRoom(t.Locations),location:t.Locations,seats:h,seatsAvailable:h-g,actualWaitlist:A,maxWaitlist:C,days:this.parseDaysFromPattern(t.Meeting_Day_Patterns||""),specificSection:D};E.periods.push(n)}u.sections.push(E)}stripHtml(t){return t.replace(/<[^>]*>/g,"").replace(/&[^;]+;/g," ").trim()}extractBuilding(t){const e=t.match(/^([^0-9]+)/);return e?e[1].trim():""}extractRoom(t){const e=t.match(/([0-9]+[A-Z]*)$/);return e?e[1]:""}parseTimeFromPattern(t,e){const r=t.match(/(\d{1,2}:\d{2}\s*[AP]M)\s*-\s*(\d{1,2}:\d{2}\s*[AP]M)/);if(!r)return{hours:0,minutes:0,displayTime:"TBD"};const s=e?r[1]:r[2];return this.parseTime(s)}parseDaysFromPattern(t){const e=new Set,r={M:o.MONDAY,T:o.TUESDAY,W:o.WEDNESDAY,R:o.THURSDAY,F:o.FRIDAY,S:o.SATURDAY,U:o.SUNDAY};for(const s of t.replace(/-/g,""))r[s]&&e.add(r[s]);return e}parseTime(t){if(!t||t==="?")return{hours:0,minutes:0,displayTime:"TBD"};const e=t.match(/(\d{1,2}):(\d{2})(AM|PM)/i);if(!e)return{hours:0,minutes:0,displayTime:t};let r=parseInt(e[1]);const s=parseInt(e[2]),a=e[3].toUpperCase();return a==="PM"&&r!==12?r+=12:a==="AM"&&r===12&&(r=0),{hours:r,minutes:s,displayTime:t}}parseDays(t){if(!t||t==="?")return[];const e={mon:o.MONDAY,tue:o.TUESDAY,wed:o.WEDNESDAY,thu:o.THURSDAY,fri:o.FRIDAY,sat:o.SATURDAY,sun:o.SUNDAY};return t.split(",").map(r=>e[r.trim().toLowerCase()]).filter(Boolean)}getCachedData(){try{const t=localStorage.getItem(c.LOCAL_STORAGE_KEY);return t?JSON.parse(t).scheduleDB:null}catch(t){return console.warn("Failed to parse cached course data:",t),null}}cacheData(t){try{const e={scheduleDB:t,timestamp:Date.now()};localStorage.setItem(c.LOCAL_STORAGE_KEY,JSON.stringify(e)),console.log("Course data cached successfully")}catch(e){console.warn("Failed to cache course data:",e)}}isCacheExpired(){try{const t=localStorage.getItem(c.LOCAL_STORAGE_KEY);if(!t)return!0;const e=JSON.parse(t),r=Date.now()-e.timestamp,s=c.CACHE_EXPIRY_HOURS*60*60*1e3;return r>s}catch{return!0}}getScheduleDB(){return this.scheduleDB}searchCourses(t,e){if(!this.scheduleDB)return[];const r=[];for(const a of this.scheduleDB.departments)e&&e.length>0&&!e.includes(a.abbreviation.toLowerCase())||r.push(...a.courses);if(!t.trim())return r;const s=t.toLowerCase();return r.filter(a=>a.name.toLowerCase().includes(s)||a.number.toLowerCase().includes(s)||a.id.toLowerCase().includes(s)||a.department.abbreviation.toLowerCase().includes(s))}getAllDepartments(){return this.scheduleDB?.departments||[]}};c.WPI_COURSE_DATA_URL="/course-data.json",c.LOCAL_STORAGE_KEY="wpi-course-data",c.CACHE_EXPIRY_HOURS=1;let p=c;class T{constructor(){this.courses=[],this.courseDataService=new p,this.init()}async init(){this.showLoadingState(),await this.loadCourseData(),this.displayCourseData()}async loadCourseData(){try{const t=await this.courseDataService.loadCourseData();for(const e of t.departments)this.courses.push(...e.courses);console.log(`Loaded ${this.courses.length} courses from ${t.departments.length} departments`)}catch(t){console.error("Failed to load course data:",t),this.showErrorMessage("Failed to load course data. Please try refreshing the page.")}}displayCourseData(){const t=document.getElementById("app");if(!t)return;let e=`
            <h1>WPI Course Data</h1>
            <p>Loaded ${this.courses.length} courses</p>
            <div class="course-stats">
                <h2>Departments:</h2>
                <ul>`;const r=new Map;this.courses.forEach(s=>{const a=s.department.abbreviation;r.set(a,(r.get(a)||0)+1)}),Array.from(r.entries()).sort(([s],[a])=>s.localeCompare(a)).forEach(([s,a])=>{e+=`<li>${s}: ${a} courses</li>`}),e+=`
                </ul>
            </div>
            <div class="sample-courses">
                <h2>Sample Courses:</h2>
                <ul>`,this.courses.slice(0,10).forEach(s=>{const a=s.minCredits===s.maxCredits?s.minCredits:`${s.minCredits}-${s.maxCredits}`;e+=`
                <li>
                    <strong>${s.department.abbreviation} ${s.number}</strong>: 
                    ${s.name} (${a} credits)
                    <br><small>${s.description}</small>
                </li>`}),e+=`
                </ul>
            </div>`,t.innerHTML=e}showLoadingState(){const t=document.getElementById("app");t&&(t.innerHTML='<div class="loading-message">Loading course data from WPI servers...</div>')}showErrorMessage(t){const e=document.getElementById("app");e&&(e.innerHTML=`<div class="error-message">${t}</div>`)}}new T;
//# sourceMappingURL=index-B1pcIx-u.js.map
