{"version":3,"file":"index-DhUV8q80.js","sources":["../../src/types/types.ts","../../src/services/courseDataService.ts","../../src/themes/ThemeManager.ts","../../src/core/TransactionalStorageManager.ts","../../src/core/ProfileStateManager.ts","../../src/services/StorageService.ts","../../src/ui/components/ThemeSelector.ts","../../src/ui/components/ScheduleSelector.ts","../../src/core/DataValidator.ts","../../src/core/RetryManager.ts","../../src/core/ProfileMigrationService.ts","../../src/utils/validators.ts","../../src/services/CourseSelectionService.ts","../../src/types/schedule.ts","../../src/core/ConflictDetector.ts","../../src/services/ModalService.ts","../../src/utils/departmentUtils.ts","../../src/ui/controllers/DepartmentController.ts","../../src/utils/RequestCancellation.ts","../../src/ui/utils/ProgressiveRenderer.ts","../../src/utils/PerformanceMetrics.ts","../../src/ui/controllers/CourseController.ts","../../src/ui/utils/timeUtils.ts","../../src/utils/typeGuards.ts","../../src/ui/controllers/ScheduleController.ts","../../src/ui/controllers/SectionInfoModalController.ts","../../src/ui/controllers/InfoModalController.ts","../../src/ui/controllers/FilterModalController.ts","../../src/ui/controllers/ScheduleFilterModalController.ts","../../src/core/FilterState.ts","../../src/services/FilterService.ts","../../src/core/filters/CourseSelectionFilter.ts","../../src/core/filters/PeriodDaysFilter.ts","../../src/core/filters/PeriodProfessorFilter.ts","../../src/core/filters/PeriodTypeFilter.ts","../../src/core/filters/PeriodTermFilter.ts","../../src/core/filters/PeriodAvailabilityFilter.ts","../../src/core/filters/PeriodConflictFilter.ts","../../src/core/filters/SectionCodeFilter.ts","../../src/core/filters/DepartmentFilter.ts","../../src/core/filters/AvailabilityFilter.ts","../../src/core/filters/CreditRangeFilter.ts","../../src/core/filters/ProfessorFilter.ts","../../src/core/filters/TermFilter.ts","../../src/core/filters/SearchTextFilter.ts","../../src/core/filters/index.ts","../../src/services/ScheduleFilterService.ts","../../src/services/searchService.ts","../../src/ui/controllers/UIStateManager.ts","../../src/ui/controllers/TimestampManager.ts","../../src/services/DepartmentSyncService.ts","../../src/services/ScheduleManagementService.ts","../../src/ui/controllers/MainController.ts","../../src/main.ts"],"sourcesContent":["export interface Course {\n    id: string;\n    number: string;\n    name: string;\n    description: string;\n    department: Department;\n    sections: Section[];\n    minCredits: number;\n    maxCredits: number;\n}\n\nexport interface Department {\n    abbreviation: string;\n    name: string;\n    courses: Course[];\n}\n\nexport interface Section {\n    crn: number;\n    number: string;\n    seats: number;\n    seatsAvailable: number;\n    actualWaitlist: number;\n    maxWaitlist: number;\n    note?: string;\n    description: string;\n    term: string;\n    computedTerm: string; // Computed academic term letter (A, B, C, D)\n    periods: Period[];\n}\n\nexport interface Period {\n    type: string;\n    professor: string;\n    professorEmail?: string;\n    startTime: Time;\n    endTime: Time;\n    location: string;\n    building: string;\n    room: string;\n    seats: number;\n    seatsAvailable: number;\n    actualWaitlist: number;\n    maxWaitlist: number;\n    days: Set<DayOfWeek>;\n    specificSection?: string;\n}\n\nexport interface Time {\n    hours: number;\n    minutes: number;\n    displayTime: string;\n}\n\nexport enum DayOfWeek {\n    MONDAY = 'mon',\n    TUESDAY = 'tue',\n    WEDNESDAY = 'wed',\n    THURSDAY = 'thu',\n    FRIDAY = 'fri',\n    SATURDAY = 'sat',\n    SUNDAY = 'sun'\n}\n\nexport interface ScheduleDB {\n    departments: Department[];\n    generated: string;\n}\n\nexport interface PlannerState {\n    courses: Course[];\n    selectedYear: number;\n    searchTerm: string;\n    activeFilters: string[];\n    plan: {\n        [year: number]: {\n            fall: Course[];\n            spring: Course[];\n            summer: Course[];\n        };\n    };\n}\n\nexport type Semester = 'fall' | 'spring' | 'summer';","import { ScheduleDB, Department, Course, Section, Period, Time, DayOfWeek } from '../types/types'\n\nexport class CourseDataService {\n    private static readonly WPI_COURSE_DATA_URL = './course-data-constructed.json';\n    private static readonly LOCAL_STORAGE_KEY = 'wpi-course-data';\n    private static readonly CACHE_EXPIRY_HOURS = 1;\n\n    private scheduleDB: ScheduleDB | null = null;\n\n    constructor() {}\n\n    async loadCourseData(): Promise<ScheduleDB> {\n        try {\n            const freshData = await this.fetchFreshData();\n            this.scheduleDB = freshData;\n            return freshData;\n        } catch (error) {\n            console.error('Failed to load course data:', error);\n            throw new Error('No course data available');\n        }\n    }\n\n    private async fetchFreshData(): Promise<ScheduleDB> {\n        \n        const response = await fetch(CourseDataService.WPI_COURSE_DATA_URL, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n            },\n            cache: 'no-cache'\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to fetch course data: ${response.status} ${response.statusText}`);\n        }\n\n        const jsonData = await response.json();\n        return this.parseJSONData(jsonData);\n    }\n\n    private parseJSONData(jsonData: any): ScheduleDB {\n        \n        if (!jsonData.departments || !Array.isArray(jsonData.departments)) {\n            console.error('Invalid JSON data structure:', jsonData);\n            throw new Error('Invalid JSON data structure - missing departments array');\n        }\n\n        \n        const scheduleDB: ScheduleDB = {\n            departments: this.parseConstructedDepartments(jsonData.departments),\n            generated: jsonData.generated || new Date().toISOString()\n        };\n        \n        \n        // Log sections for MA1024 specifically\n        this.logMA1024Sections(scheduleDB);\n        \n        return scheduleDB;\n    }\n\n    private parseConstructedDepartments(departments: any[]): Department[] {\n        return departments.map(deptData => {\n            const department: Department = {\n                abbreviation: deptData.abbreviation,\n                name: deptData.name,\n                courses: []\n            };\n            \n            department.courses = deptData.courses.map((courseData: any) => {\n                const course: Course = {\n                    id: courseData.id,\n                    number: courseData.number,\n                    name: courseData.name,\n                    description: this.stripHtml(courseData.description || ''),\n                    department: department,\n                    sections: this.parseConstructedSections(courseData.sections || []),\n                    minCredits: courseData.min_credits || 0,\n                    maxCredits: courseData.max_credits || 0\n                };\n                return course;\n            });\n            \n            return department;\n        });\n    }\n\n    private parseConstructedSections(sections: any[]): Section[] {\n        return sections.map(sectionData => {\n            const rawTerm = sectionData.term || '';\n            const sectionNumber = sectionData.number || '';\n            \n            // Use pre-computed term from Java backend\n            const computedTerm: string = sectionData.computedTerm;\n            \n            const section: Section = {\n                crn: sectionData.crn || 0,\n                number: sectionNumber,\n                seats: sectionData.seats || 0,\n                seatsAvailable: sectionData.seats_available || 0,\n                actualWaitlist: sectionData.actual_waitlist || 0,\n                maxWaitlist: sectionData.max_waitlist || 0,\n                note: sectionData.note,\n                description: this.stripHtml(sectionData.description || ''),\n                term: rawTerm,\n                computedTerm: computedTerm,\n                periods: this.parseConstructedPeriods(sectionData.periods || [])\n            };\n            \n            return section;\n        });\n    }\n    \n    private parseConstructedPeriods(periods: any[]): Period[] {\n        return periods.map(periodData => {\n            const period: Period = {\n                type: periodData.type || 'Lecture',\n                professor: periodData.professor || '',\n                professorEmail: undefined,\n                startTime: this.parseConstructedTime(periodData.start_time),\n                endTime: this.parseConstructedTime(periodData.end_time),\n                location: periodData.location || '',\n                building: periodData.building || '',\n                room: periodData.room || '',\n                seats: periodData.seats || 0,\n                seatsAvailable: periodData.seats_available || 0,\n                actualWaitlist: periodData.actual_waitlist || 0,\n                maxWaitlist: periodData.max_waitlist || 0,\n                days: this.parseConstructedDays(periodData.days || []),\n                specificSection: periodData.specific_section\n            };\n            return period;\n        });\n    }\n    \n    private parseConstructedTime(timeStr: string): Time {\n        if (!timeStr || timeStr === 'TBA') {\n            return { hours: 0, minutes: 0, displayTime: 'TBD' };\n        }\n        \n        // Parse \"HH:MM\" format from constructed data\n        const match = timeStr.match(/(\\d{1,2}):(\\d{2})/);\n        if (!match) {\n            return { hours: 0, minutes: 0, displayTime: timeStr };\n        }\n        \n        const hours = parseInt(match[1]);\n        const minutes = parseInt(match[2]);\n        \n        // Convert to display format\n        const displayHours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;\n        const ampm = hours >= 12 ? 'PM' : 'AM';\n        const displayTime = `${displayHours}:${minutes.toString().padStart(2, '0')} ${ampm}`;\n        \n        return { hours, minutes, displayTime };\n    }\n    \n    private parseConstructedDays(days: string[]): Set<DayOfWeek> {\n        const daySet = new Set<DayOfWeek>();\n        \n        for (const day of days) {\n            switch (day.toLowerCase()) {\n                case 'mon': daySet.add(DayOfWeek.MONDAY); break;\n                case 'tue': daySet.add(DayOfWeek.TUESDAY); break;\n                case 'wed': daySet.add(DayOfWeek.WEDNESDAY); break;\n                case 'thu': daySet.add(DayOfWeek.THURSDAY); break;\n                case 'fri': daySet.add(DayOfWeek.FRIDAY); break;\n                case 'sat': daySet.add(DayOfWeek.SATURDAY); break;\n                case 'sun': daySet.add(DayOfWeek.SUNDAY); break;\n            }\n        }\n        \n        return daySet;\n    }\n\n    private logMA1024Sections(scheduleDB: ScheduleDB): void {\n        // Debug logging method - keeping for development purposes but not logging on boot\n    }\n\n\n\n    private stripHtml(html: string): string {\n        return html.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, ' ').trim();\n    }\n\n\n\n    private getCachedData(): ScheduleDB | null {\n        try {\n            const cached = localStorage.getItem(CourseDataService.LOCAL_STORAGE_KEY);\n            if (!cached) return null;\n\n            const parsedData = JSON.parse(cached);\n            return parsedData.scheduleDB;\n        } catch (error) {\n            console.warn('Failed to parse cached course data:', error);\n            return null;\n        }\n    }\n\n    private cacheData(scheduleDB: ScheduleDB): void {\n        try {\n            const cacheData = {\n                scheduleDB,\n                timestamp: Date.now()\n            };\n            localStorage.setItem(CourseDataService.LOCAL_STORAGE_KEY, JSON.stringify(cacheData));\n        } catch (error) {\n            console.warn('Failed to cache course data:', error);\n        }\n    }\n\n    private isCacheExpired(): boolean {\n        try {\n            const cached = localStorage.getItem(CourseDataService.LOCAL_STORAGE_KEY);\n            if (!cached) return true;\n\n            const parsedData = JSON.parse(cached);\n            const cacheAge = Date.now() - parsedData.timestamp;\n            const maxAge = CourseDataService.CACHE_EXPIRY_HOURS * 60 * 60 * 1000;\n            \n            return cacheAge > maxAge;\n        } catch (error) {\n            return true;\n        }\n    }\n\n    getScheduleDB(): ScheduleDB | null {\n        return this.scheduleDB;\n    }\n\n    searchCourses(query: string, departments?: string[]): Course[] {\n        if (!this.scheduleDB) return [];\n\n        const allCourses: Course[] = [];\n        \n        for (const dept of this.scheduleDB.departments) {\n            if (departments && departments.length > 0 && !departments.includes(dept.abbreviation.toLowerCase())) {\n                continue;\n            }\n            allCourses.push(...dept.courses);\n        }\n\n        if (!query.trim()) {\n            return allCourses;\n        }\n\n        const queryLower = query.toLowerCase();\n        return allCourses.filter(course => \n            course.name.toLowerCase().includes(queryLower) ||\n            course.number.toLowerCase().includes(queryLower) ||\n            course.id.toLowerCase().includes(queryLower) ||\n            course.department.abbreviation.toLowerCase().includes(queryLower)\n        );\n    }\n\n    getAllDepartments(): Department[] {\n        return this.scheduleDB?.departments || [];\n    }\n\n}","import { ThemeDefinition, ThemeId, ThemeChangeEvent, ThemeChangeListener } from './types'\n\n// Import theme definitions\nimport wpiClassic from './definitions/wpi-classic.json'\nimport wpiDark from './definitions/wpi-dark.json'\nimport wpiLight from './definitions/wpi-light.json'\nimport highContrast from './definitions/high-contrast.json'\n\n/**\n * ═══════════════════════════════════════════════════════════════════════════════\n * ThemeManager - Singleton Theme System with Pluggable Storage Strategy\n * ═══════════════════════════════════════════════════════════════════════════════\n * \n * ARCHITECTURE ROLE:\n * - Singleton theme management system coordinating all theme operations\n * - Theme definition registry with JSON-based theme loading\n * - CSS variable application engine for dynamic theme switching\n * - Storage abstraction layer using Strategy pattern for persistence\n * - Event broadcasting system for theme change notifications\n * \n * DEPENDENCIES:\n * - ThemeStorage interface → Pluggable storage strategy (StorageService or DefaultThemeStorage)\n * - Theme JSON definitions → wpi-classic.json, wpi-dark.json, wpi-light.json, high-contrast.json\n * - ThemeDefinition types → Type safety for theme structure validation\n * - DOM CSS Custom Properties → :root CSS variable manipulation\n * \n * USED BY:\n * - ThemeSelector → UI component for theme selection interface\n * - MainController → Initialization and StorageService integration\n * - StorageService → Implements ThemeStorage interface for unified persistence\n * - Application CSS → Consumes CSS custom properties set by theme system\n * \n * STORAGE STRATEGY PATTERN:\n * 1. Default: Uses DefaultThemeStorage with direct localStorage access\n * 2. Injected: MainController injects StorageService via setStorage()\n * 3. Strategy allows swapping between storage implementations\n * 4. Unified storage integration through StorageService ThemeStorage implementation\n * \n * DATA FLOW:\n * Theme Loading:\n * 1. initializeThemes() loads JSON theme definitions\n * 2. loadSavedTheme() retrieves preference via storage strategy\n * 3. applyTheme() sets CSS custom properties on :root\n * 4. DOM reflects new theme variables throughout application\n * \n * Theme Changing:\n * 1. setTheme(themeId) validates theme exists\n * 2. applyTheme() updates CSS custom properties\n * 3. saveThemePreference() persists via storage strategy\n * 4. notifyListeners() broadcasts ThemeChangeEvent\n * 5. UI components update to reflect theme change\n * \n * KEY FEATURES:\n * - Singleton pattern ensuring single theme management instance\n * - Strategy pattern for pluggable storage (DefaultThemeStorage ↔ StorageService)\n * - Observer pattern for theme change event broadcasting\n * - JSON-based theme definition system with validation\n * - CSS custom property management for dynamic styling\n * - Theme registration system for extensibility\n * - System preference detection (light/dark mode)\n * \n * INTEGRATION POINTS:\n * - Implements dependency injection for storage strategy\n * - Coordinates with MainController for unified storage setup\n * - Provides ThemeStorage interface for StorageService implementation\n * - Integrates with CSS system via custom property manipulation\n * - Event system integration for UI component notifications\n * \n * ARCHITECTURAL PATTERNS:\n * - Singleton: Single instance across application lifetime\n * - Strategy: Pluggable storage implementation (ThemeStorage interface)\n * - Observer: Event-driven theme change notifications\n * - Registry: Theme definition registration and management\n * - Dependency Injection: Storage strategy injection via setStorage()\n * \n * ═══════════════════════════════════════════════════════════════════════════════\n */\n\nexport interface ThemeStorage {\n    loadThemePreference(): string;\n    saveThemePreference(themeId: string): void;\n}\n\nclass DefaultThemeStorage implements ThemeStorage {\n    private readonly storageKey = 'wpi-planner-theme';\n\n    loadThemePreference(): string {\n        try {\n            const savedTheme = localStorage.getItem(this.storageKey);\n            return savedTheme || 'wpi-classic';\n        } catch (error) {\n            console.warn('Failed to load theme preference:', error);\n            return 'wpi-classic';\n        }\n    }\n\n    saveThemePreference(themeId: string): void {\n        try {\n            localStorage.setItem(this.storageKey, themeId);\n        } catch (error) {\n            console.warn('Failed to save theme preference:', error);\n        }\n    }\n}\n\nexport class ThemeManager {\n    private static instance: ThemeManager;\n    private currentTheme: ThemeId = 'wpi-classic';\n    private themes: Map<ThemeId, ThemeDefinition> = new Map();\n    private listeners: Set<ThemeChangeListener> = new Set();\n    private storage: ThemeStorage = new DefaultThemeStorage();\n\n    private constructor() {\n        this.initializeThemes();\n        this.loadSavedTheme();\n    }\n\n    static getInstance(): ThemeManager {\n        if (!ThemeManager.instance) {\n            ThemeManager.instance = new ThemeManager();\n        }\n        return ThemeManager.instance;\n    }\n\n    static resetInstance(): void {\n        ThemeManager.instance = null as any;\n    }\n\n    setStorage(storage: ThemeStorage): void {\n        this.storage = storage;\n        this.loadSavedTheme();\n    }\n\n    private initializeThemes(): void {\n        // Register built-in themes\n        this.registerTheme(wpiClassic as ThemeDefinition);\n        this.registerTheme(wpiDark as ThemeDefinition);\n        this.registerTheme(wpiLight as ThemeDefinition);\n        this.registerTheme(highContrast as ThemeDefinition);\n    }\n\n    private loadSavedTheme(): void {\n        const savedTheme = this.storage.loadThemePreference();\n        if (savedTheme && this.themes.has(savedTheme as ThemeId)) {\n            this.currentTheme = savedTheme as ThemeId;\n        }\n        \n        // Apply the current theme\n        this.applyTheme(this.currentTheme);\n    }\n\n    registerTheme(theme: ThemeDefinition): void {\n        if (!this.isValidTheme(theme)) {\n            console.error('Invalid theme definition:', theme);\n            return;\n        }\n        \n        this.themes.set(theme.id, theme);\n    }\n\n    private isValidTheme(theme: any): theme is ThemeDefinition {\n        return theme &&\n            typeof theme.name === 'string' &&\n            typeof theme.id === 'string' &&\n            typeof theme.description === 'string' &&\n            theme.colors &&\n            theme.typography &&\n            theme.spacing &&\n            theme.effects;\n    }\n\n    getAvailableThemes(): ThemeDefinition[] {\n        return Array.from(this.themes.values());\n    }\n\n    getCurrentTheme(): ThemeDefinition | null {\n        return this.themes.get(this.currentTheme) || null;\n    }\n\n    getCurrentThemeId(): ThemeId {\n        return this.currentTheme;\n    }\n\n    setTheme(themeId: ThemeId): boolean {\n        if (!this.themes.has(themeId)) {\n            console.error(`Theme '${themeId}' not found`);\n            return false;\n        }\n\n        const oldTheme = this.currentTheme;\n        const newTheme = themeId;\n        const themeDefinition = this.themes.get(themeId)!;\n\n        this.currentTheme = themeId;\n        this.applyTheme(themeId);\n        this.saveThemePreference(themeId);\n\n        // Notify listeners\n        const event: ThemeChangeEvent = {\n            oldTheme,\n            newTheme,\n            themeDefinition\n        };\n        this.notifyListeners(event);\n\n        return true;\n    }\n\n    private applyTheme(themeId: ThemeId): void {\n        const theme = this.themes.get(themeId);\n        if (!theme) return;\n\n        const root = document.documentElement;\n\n        // Apply color variables\n        Object.entries(theme.colors).forEach(([key, value]) => {\n            root.style.setProperty(`--color-${this.kebabCase(key)}`, value);\n        });\n\n        // Apply typography variables\n        Object.entries(theme.typography).forEach(([key, value]) => {\n            root.style.setProperty(`--font-${this.kebabCase(key)}`, value);\n        });\n\n        // Apply spacing variables\n        Object.entries(theme.spacing).forEach(([key, value]) => {\n            root.style.setProperty(`--spacing-${this.kebabCase(key)}`, value);\n        });\n\n        // Apply effect variables\n        Object.entries(theme.effects).forEach(([key, value]) => {\n            root.style.setProperty(`--effect-${this.kebabCase(key)}`, value);\n        });\n\n        // Add theme class to body for theme-specific styling\n        document.body.className = document.body.className\n            .replace(/theme-[\\w-]+/g, '')\n            .trim();\n        document.body.classList.add(`theme-${themeId}`);\n    }\n\n    private kebabCase(str: string): string {\n        return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    }\n\n    private saveThemePreference(themeId: ThemeId): void {\n        this.storage.saveThemePreference(themeId);\n    }\n\n    // System preference detection\n    detectSystemPreference(): ThemeId {\n        if (typeof window !== 'undefined' && window.matchMedia) {\n            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                return 'wpi-dark';\n            }\n            if (window.matchMedia('(prefers-contrast: high)').matches) {\n                return 'high-contrast';\n            }\n        }\n        return 'wpi-classic';\n    }\n\n    useSystemPreference(): boolean {\n        const preferredTheme = this.detectSystemPreference();\n        return this.setTheme(preferredTheme);\n    }\n\n    // Event listeners\n    onThemeChange(listener: ThemeChangeListener): void {\n        this.listeners.add(listener);\n    }\n\n    offThemeChange(listener: ThemeChangeListener): void {\n        this.listeners.delete(listener);\n    }\n\n    private notifyListeners(event: ThemeChangeEvent): void {\n        this.listeners.forEach(listener => {\n            try {\n                listener(event);\n            } catch (error) {\n                console.error('Error in theme change listener:', error);\n            }\n        });\n    }\n\n    // Theme preview (temporary application without saving)\n    previewTheme(themeId: ThemeId): boolean {\n        if (!this.themes.has(themeId)) return false;\n        this.applyTheme(themeId);\n        return true;\n    }\n\n    // Reset to current theme (cancel preview)\n    resetToCurrentTheme(): void {\n        this.applyTheme(this.currentTheme);\n    }\n\n    // Export/Import functionality\n    exportCurrentTheme(): string {\n        const theme = this.getCurrentTheme();\n        if (!theme) throw new Error('No current theme to export');\n        return JSON.stringify(theme, null, 2);\n    }\n\n    importTheme(themeJson: string): boolean {\n        try {\n            const theme = JSON.parse(themeJson);\n            if (this.isValidTheme(theme)) {\n                this.registerTheme(theme);\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error('Failed to import theme:', error);\n            return false;\n        }\n    }\n\n    // Theme utilities\n    getThemeById(themeId: ThemeId): ThemeDefinition | null {\n        return this.themes.get(themeId) || null;\n    }\n\n    hasTheme(themeId: ThemeId): boolean {\n        return this.themes.has(themeId);\n    }\n\n    removeTheme(themeId: ThemeId): boolean {\n        // Don't allow removal of built-in themes\n        const builtInThemes = ['wpi-classic', 'wpi-dark', 'wpi-light', 'high-contrast'];\n        if (builtInThemes.includes(themeId)) {\n            console.warn(`Cannot remove built-in theme: ${themeId}`);\n            return false;\n        }\n\n        if (this.currentTheme === themeId) {\n            this.setTheme('wpi-classic'); // Fallback to default\n        }\n\n        return this.themes.delete(themeId);\n    }\n}","import { Schedule, UserScheduleState, SchedulePreferences, SelectedCourse } from '../types/schedule'\n\nexport interface StorageTransaction {\n    id: string;\n    operations: StorageOperation[];\n    timestamp: number;\n    backupData: Map<string, any>;\n}\n\nexport interface StorageOperation {\n    type: 'save' | 'delete';\n    key: string;\n    value?: any;\n    previousValue?: any;\n}\n\nexport interface TransactionResult {\n    success: boolean;\n    transactionId: string;\n    error?: Error;\n    rolledBack?: boolean;\n}\n\nexport class TransactionalStorageManager {\n    private static readonly STORAGE_KEYS = {\n        USER_STATE: 'wpi-planner-user-state',\n        PREFERENCES: 'wpi-planner-preferences',\n        SCHEDULES: 'wpi-planner-schedules',\n        SELECTED_COURSES: 'wpi-planner-selected-courses',\n        THEME: 'wpi-planner-theme',\n        ACTIVE_SCHEDULE_ID: 'wpi-planner-active-schedule-id',\n        TRANSACTION_LOG: 'wpi-planner-transaction-log'\n    };\n\n    private activeTransactions = new Map<string, StorageTransaction>();\n    private transactionCounter = 0;\n\n    async executeTransaction(operations: (() => void)[]): Promise<TransactionResult> {\n        const transactionId = this.generateTransactionId();\n        const transaction: StorageTransaction = {\n            id: transactionId,\n            operations: [],\n            timestamp: Date.now(),\n            backupData: new Map()\n        };\n\n        this.activeTransactions.set(transactionId, transaction);\n\n        try {\n            // Create backup of all keys we might modify\n            const keysToBackup = this.extractKeysFromOperations(operations);\n            this.createBackup(transaction, keysToBackup);\n\n            // Execute all operations\n            for (const operation of operations) {\n                operation();\n            }\n\n            // Verify data integrity after operations\n            const integrityCheck = this.verifyDataIntegrity();\n            if (!integrityCheck.valid) {\n                throw new Error(`Data integrity check failed: ${integrityCheck.error}`);\n            }\n\n            // Commit transaction\n            this.commitTransaction(transaction);\n            \n            return {\n                success: true,\n                transactionId\n            };\n\n        } catch (error) {\n            console.warn(`Transaction ${transactionId} failed, rolling back:`, error);\n            const rollbackSuccess = this.rollbackTransaction(transaction);\n            \n            return {\n                success: false,\n                transactionId,\n                error: error as Error,\n                rolledBack: rollbackSuccess\n            };\n        } finally {\n            this.activeTransactions.delete(transactionId);\n        }\n    }\n\n    saveUserState(state: UserScheduleState): TransactionResult {\n        return this.executeSyncTransaction(() => {\n            const serializedState = this.safeStringify(state);\n            localStorage.setItem(TransactionalStorageManager.STORAGE_KEYS.USER_STATE, serializedState);\n        });\n    }\n\n    loadUserState(): { data: UserScheduleState | null; valid: boolean; error?: string } {\n        return this.safeLoad<UserScheduleState | null>(\n            TransactionalStorageManager.STORAGE_KEYS.USER_STATE,\n            null,\n            'user state'\n        );\n    }\n\n    saveSchedule(schedule: Schedule): TransactionResult {\n        return this.executeSyncTransaction(() => {\n            const schedules = this.loadAllSchedules().data || [];\n            const existingIndex = schedules.findIndex(s => s.id === schedule.id);\n            \n            if (existingIndex >= 0) {\n                schedules[existingIndex] = schedule;\n            } else {\n                schedules.push(schedule);\n            }\n            \n            const serializedSchedules = this.safeStringify(schedules);\n            localStorage.setItem(TransactionalStorageManager.STORAGE_KEYS.SCHEDULES, serializedSchedules);\n        });\n    }\n\n    loadSchedule(scheduleId: string): { data: Schedule | null; valid: boolean; error?: string } {\n        const schedulesResult = this.loadAllSchedules();\n        if (!schedulesResult.valid || !schedulesResult.data) {\n            return { data: null, valid: false, error: schedulesResult.error };\n        }\n\n        const schedule = schedulesResult.data.find(s => s.id === scheduleId) || null;\n        return { data: schedule, valid: true };\n    }\n\n    loadAllSchedules(): { data: Schedule[] | null; valid: boolean; error?: string } {\n        return this.safeLoad<Schedule[]>(\n            TransactionalStorageManager.STORAGE_KEYS.SCHEDULES,\n            [],\n            'schedules'\n        );\n    }\n\n    deleteSchedule(scheduleId: string): TransactionResult {\n        return this.executeSyncTransaction(() => {\n            const schedules = this.loadAllSchedules().data || [];\n            const filtered = schedules.filter(s => s.id !== scheduleId);\n            const serializedSchedules = this.safeStringify(filtered);\n            localStorage.setItem(TransactionalStorageManager.STORAGE_KEYS.SCHEDULES, serializedSchedules);\n        });\n    }\n\n    savePreferences(preferences: SchedulePreferences): TransactionResult {\n        return this.executeSyncTransaction(() => {\n            const serializedPreferences = this.safeStringify(preferences);\n            localStorage.setItem(TransactionalStorageManager.STORAGE_KEYS.PREFERENCES, serializedPreferences);\n        });\n    }\n\n    loadPreferences(): { data: SchedulePreferences; valid: boolean; error?: string } {\n        const result = this.safeLoad<SchedulePreferences>(\n            TransactionalStorageManager.STORAGE_KEYS.PREFERENCES,\n            this.getDefaultPreferences(),\n            'preferences'\n        );\n        \n        return {\n            data: result.data || this.getDefaultPreferences(),\n            valid: result.valid,\n            error: result.error\n        };\n    }\n\n    saveSelectedCourses(selectedCourses: SelectedCourse[]): TransactionResult {\n        const result = this.executeSyncTransaction(() => {\n            const serializedCourses = this.safeStringify(selectedCourses);\n            localStorage.setItem(TransactionalStorageManager.STORAGE_KEYS.SELECTED_COURSES, serializedCourses);\n        });\n        return result;\n    }\n\n    loadSelectedCourses(): { data: SelectedCourse[]; valid: boolean; error?: string } {\n        const result = this.safeLoad<SelectedCourse[]>(\n            TransactionalStorageManager.STORAGE_KEYS.SELECTED_COURSES,\n            [],\n            'selected courses'\n        );\n        \n        \n        return {\n            data: result.data || [],\n            valid: result.valid,\n            error: result.error\n        };\n    }\n\n    saveThemePreference(themeId: string): TransactionResult {\n        return this.executeSyncTransaction(() => {\n            localStorage.setItem(TransactionalStorageManager.STORAGE_KEYS.THEME, themeId);\n        });\n    }\n\n    loadThemePreference(): { data: string; valid: boolean; error?: string } {\n        try {\n            const savedTheme = localStorage.getItem(TransactionalStorageManager.STORAGE_KEYS.THEME);\n            return { \n                data: savedTheme || 'wpi-classic',\n                valid: true\n            };\n        } catch (error) {\n            return { \n                data: 'wpi-classic',\n                valid: false,\n                error: `Failed to load theme preference: ${error}`\n            };\n        }\n    }\n\n    saveActiveScheduleId(scheduleId: string | null): TransactionResult {\n        return this.executeSyncTransaction(() => {\n            if (scheduleId) {\n                localStorage.setItem(TransactionalStorageManager.STORAGE_KEYS.ACTIVE_SCHEDULE_ID, scheduleId);\n            } else {\n                localStorage.removeItem(TransactionalStorageManager.STORAGE_KEYS.ACTIVE_SCHEDULE_ID);\n            }\n        });\n    }\n\n    loadActiveScheduleId(): { data: string | null; valid: boolean; error?: string } {\n        try {\n            const saved = localStorage.getItem(TransactionalStorageManager.STORAGE_KEYS.ACTIVE_SCHEDULE_ID);\n            return { \n                data: saved && saved.length > 0 ? saved : null,\n                valid: true\n            };\n        } catch (error) {\n            return { \n                data: null,\n                valid: false,\n                error: `Failed to load active schedule ID: ${error}`\n            };\n        }\n    }\n\n    clearAllData(): TransactionResult {\n        return this.executeSyncTransaction(() => {\n            Object.values(TransactionalStorageManager.STORAGE_KEYS).forEach(key => {\n                if (key !== TransactionalStorageManager.STORAGE_KEYS.TRANSACTION_LOG) {\n                    localStorage.removeItem(key);\n                }\n            });\n        });\n    }\n\n    exportData(): { data: string | null; valid: boolean; error?: string } {\n        try {\n            const state = this.loadUserState().data;\n            const schedules = this.loadAllSchedules().data || [];\n            const preferences = this.loadPreferences().data;\n            const selectedCourses = this.loadSelectedCourses().data || [];\n\n            const exportData = {\n                version: '2.0',\n                timestamp: new Date().toISOString(),\n                checksum: '',\n                state,\n                schedules,\n                preferences,\n                selectedCourses\n            };\n\n            // Generate checksum for integrity verification\n            const dataString = JSON.stringify({\n                state: exportData.state,\n                schedules: exportData.schedules,\n                preferences: exportData.preferences,\n                selectedCourses: exportData.selectedCourses\n            });\n            exportData.checksum = this.generateChecksum(dataString);\n\n            return {\n                data: JSON.stringify(exportData, null, 2),\n                valid: true\n            };\n        } catch (error) {\n            return {\n                data: null,\n                valid: false,\n                error: `Failed to export data: ${error}`\n            };\n        }\n    }\n\n    importData(jsonData: string): TransactionResult {\n        return this.executeSyncTransaction(() => {\n            const data = JSON.parse(jsonData);\n            \n            // Verify checksum if available\n            if (data.checksum) {\n                const verifyData = {\n                    state: data.state,\n                    schedules: data.schedules,\n                    preferences: data.preferences,\n                    selectedCourses: data.selectedCourses\n                };\n                const calculatedChecksum = this.generateChecksum(JSON.stringify(verifyData));\n                if (calculatedChecksum !== data.checksum) {\n                    throw new Error('Data integrity check failed - checksum mismatch');\n                }\n            }\n            \n            if (data.state) {\n                localStorage.setItem(TransactionalStorageManager.STORAGE_KEYS.USER_STATE, this.safeStringify(data.state));\n            }\n            if (data.preferences) {\n                localStorage.setItem(TransactionalStorageManager.STORAGE_KEYS.PREFERENCES, this.safeStringify(data.preferences));\n            }\n            if (data.schedules) {\n                localStorage.setItem(TransactionalStorageManager.STORAGE_KEYS.SCHEDULES, this.safeStringify(data.schedules));\n            }\n            if (data.selectedCourses) {\n                localStorage.setItem(TransactionalStorageManager.STORAGE_KEYS.SELECTED_COURSES, this.safeStringify(data.selectedCourses));\n            }\n        });\n    }\n\n    private executeSyncTransaction(operation: () => void): TransactionResult {\n        const transactionId = this.generateTransactionId();\n        const transaction: StorageTransaction = {\n            id: transactionId,\n            operations: [],\n            timestamp: Date.now(),\n            backupData: new Map()\n        };\n\n        try {\n            // Create backup of current localStorage state\n            this.createFullBackup(transaction);\n\n            // Execute operation\n            operation();\n\n            // Verify data integrity\n            const integrityCheck = this.verifyDataIntegrity();\n            if (!integrityCheck.valid) {\n                throw new Error(`Data integrity check failed: ${integrityCheck.error}`);\n            }\n\n            return {\n                success: true,\n                transactionId\n            };\n\n        } catch (error) {\n            console.warn(`Sync transaction ${transactionId} failed, rolling back:`, error);\n            const rollbackSuccess = this.rollbackTransaction(transaction);\n            \n            return {\n                success: false,\n                transactionId,\n                error: error as Error,\n                rolledBack: rollbackSuccess\n            };\n        }\n    }\n\n    private safeLoad<T>(key: string, defaultValue: T, dataType: string): { data: T | null; valid: boolean; error?: string } {\n        try {\n            const stored = localStorage.getItem(key);\n            if (!stored) {\n                return { data: defaultValue, valid: true };\n            }\n            \n            const parsed = JSON.parse(stored, this.reviver);\n            return { data: parsed, valid: true };\n        } catch (error) {\n            console.warn(`Failed to load ${dataType}:`, error);\n            return { \n                data: defaultValue,\n                valid: false,\n                error: `Failed to load ${dataType}: ${error}`\n            };\n        }\n    }\n\n    private safeStringify(data: any): string {\n        return JSON.stringify(data, this.replacer);\n    }\n\n    private readonly replacer = (key: string, value: any): any => {\n        if (value instanceof Set) {\n            return { __type: 'Set', value: [...value] };\n        }\n\n        if (key === 'department' && value && value.courses) {\n            return {\n                abbreviation: value.abbreviation,\n                name: value.name\n            };\n        }\n\n        if (key === 'selectedSection' && value && typeof value === 'object' && value.number) {\n            return undefined;\n        }\n\n        return value;\n    };\n\n    private readonly reviver = (key: string, value: any): any => {\n        if (typeof value === 'object' && value !== null && value.__type === 'Set') {\n            return new Set(value.value);\n        }\n        return value;\n    };\n\n    private getDefaultPreferences(): SchedulePreferences {\n        return {\n            preferredTimeRange: {\n                startTime: { hours: 8, minutes: 0 },\n                endTime: { hours: 18, minutes: 0 }\n            },\n            preferredDays: new Set(['mon', 'tue', 'wed', 'thu', 'fri']),\n            avoidBackToBackClasses: false,\n            theme: 'wpi-classic'\n        };\n    }\n\n    private generateTransactionId(): string {\n        return `tx_${Date.now()}_${++this.transactionCounter}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    private extractKeysFromOperations(operations: (() => void)[]): string[] {\n        return Object.values(TransactionalStorageManager.STORAGE_KEYS);\n    }\n\n    private createBackup(transaction: StorageTransaction, keys: string[]): void {\n        for (const key of keys) {\n            try {\n                const value = localStorage.getItem(key);\n                transaction.backupData.set(key, value);\n            } catch (error) {\n                console.warn(`Failed to backup key ${key}:`, error);\n            }\n        }\n    }\n\n    private createFullBackup(transaction: StorageTransaction): void {\n        const keys = Object.values(TransactionalStorageManager.STORAGE_KEYS);\n        this.createBackup(transaction, keys);\n    }\n\n    private rollbackTransaction(transaction: StorageTransaction): boolean {\n        try {\n            for (const [key, value] of transaction.backupData.entries()) {\n                if (value === null) {\n                    localStorage.removeItem(key);\n                } else {\n                    localStorage.setItem(key, value);\n                }\n            }\n            return true;\n        } catch (error) {\n            console.error(`Failed to rollback transaction ${transaction.id}:`, error);\n            return false;\n        }\n    }\n\n    private commitTransaction(transaction: StorageTransaction): void {\n        // Log successful transaction for debugging\n        console.log(`Transaction ${transaction.id} committed successfully`);\n    }\n\n    private verifyDataIntegrity(): { valid: boolean; error?: string } {\n        try {\n            // Check that localStorage is still accessible\n            const testKey = 'wpi-integrity-test';\n            const testValue = 'test';\n            localStorage.setItem(testKey, testValue);\n            const retrieved = localStorage.getItem(testKey);\n            localStorage.removeItem(testKey);\n            \n            if (retrieved !== testValue) {\n                return { valid: false, error: 'localStorage read/write test failed' };\n            }\n\n            // Verify key data structures can be parsed\n            const schedules = this.loadAllSchedules();\n            if (!schedules.valid) {\n                return { valid: false, error: `Schedule data invalid: ${schedules.error}` };\n            }\n\n            const preferences = this.loadPreferences();\n            if (!preferences.valid) {\n                return { valid: false, error: `Preferences data invalid: ${preferences.error}` };\n            }\n\n            const selectedCourses = this.loadSelectedCourses();\n            if (!selectedCourses.valid) {\n                return { valid: false, error: `Selected courses data invalid: ${selectedCourses.error}` };\n            }\n\n            return { valid: true };\n        } catch (error) {\n            return { valid: false, error: `Integrity check failed: ${error}` };\n        }\n    }\n\n    private generateChecksum(data: string): string {\n        let hash = 0;\n        if (data.length === 0) return hash.toString();\n        \n        for (let i = 0; i < data.length; i++) {\n            const char = data.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash; // Convert to 32-bit integer\n        }\n        \n        return hash.toString();\n    }\n\n    isHealthy(): { healthy: boolean; issues: string[] } {\n        const issues: string[] = [];\n        \n        try {\n            // Test localStorage availability\n            const testKey = 'wpi-health-check';\n            localStorage.setItem(testKey, 'test');\n            localStorage.removeItem(testKey);\n        } catch (error) {\n            issues.push(`localStorage unavailable: ${error}`);\n        }\n\n        // Check data integrity\n        const integrityCheck = this.verifyDataIntegrity();\n        if (!integrityCheck.valid) {\n            issues.push(`Data integrity issue: ${integrityCheck.error}`);\n        }\n\n        // Check for active transactions that might be stuck\n        if (this.activeTransactions.size > 0) {\n            const stuckTransactions = Array.from(this.activeTransactions.values())\n                .filter(tx => Date.now() - tx.timestamp > 30000); // 30 seconds\n            \n            if (stuckTransactions.length > 0) {\n                issues.push(`${stuckTransactions.length} transactions stuck for >30s`);\n            }\n        }\n\n        return {\n            healthy: issues.length === 0,\n            issues\n        };\n    }\n}","import { Schedule, SchedulePreferences, SelectedCourse } from '../types/schedule'\nimport { Course, Section } from '../types/types'\nimport { TransactionalStorageManager, TransactionResult } from './TransactionalStorageManager'\n\nexport interface StateChangeEvent {\n    type: 'schedule_changed' | 'courses_changed' | 'preferences_changed' | 'active_schedule_changed' | 'save_state_changed';\n    data: any;\n    timestamp: number;\n    source: string;\n}\n\nexport interface ProfileState {\n    activeScheduleId: string | null;\n    schedules: Schedule[];\n    selectedCourses: SelectedCourse[];\n    preferences: SchedulePreferences;\n    isLoading: boolean;\n    lastSaved: number;\n    hasUnsavedChanges: boolean;\n}\n\nexport type StateChangeListener = (event: StateChangeEvent, state: ProfileState) => void;\n\n/**\n * ═══════════════════════════════════════════════════════════════════════════════\n * ProfileStateManager - Unified Application State & Persistence Foundation\n * ═══════════════════════════════════════════════════════════════════════════════\n * \n * ARCHITECTURE ROLE:\n * - Single source of truth for all application data and state management\n * - Central coordination hub for course selections, schedules, and user preferences\n * - Foundation layer that eliminates data corruption through unified persistence\n * - Event-driven state management with real-time notifications across all components\n * - Core persistence coordinator integrating with transactional storage system\n * \n * DEPENDENCIES:\n * - TransactionalStorageManager → Low-level storage operations with atomic transactions\n * - Schedule, SelectedCourse, SchedulePreferences types → Data models and contracts\n * - Course type → Core academic data structure for course selection operations\n * - StateChangeEvent system → Event-driven architecture for cross-component notifications\n * - localStorage (via TransactionalStorageManager) → Browser persistence layer\n * \n * USED BY:\n * - CourseSelectionService → High-level course selection API with ProfileStateManager coordination\n * - ScheduleManagementService → Schedule operations and multi-schedule management\n * - StorageService → Singleton bridge to ProfileStateManager for legacy components\n * - MainController → Application initialization and core functionality coordination  \n * - ThemeManager → User preferences and theme persistence\n * - ALL UI Controllers → State access and event-driven updates\n * - ALL Services → Shared state access and persistence operations\n * \n * UNIFIED STORAGE ARCHITECTURE:\n * Before (Multiple Storage Systems - Data Corruption Issues):\n * ```\n * CourseManager ←→ localStorage\n * StorageManager ←→ localStorage  \n * ThemeManager ←→ localStorage\n * [Competing writes, data corruption, inconsistent state]\n * ```\n * \n * After (Unified Architecture - Single Source of Truth):\n * ```\n *                ProfileStateManager (Single Source of Truth)\n *                            ↓\n *                TransactionalStorageManager\n *                            ↓\n *                       localStorage\n *                            ↑\n *      ┌─────────────────────────────────────────────────────┐\n *      │                                                     │\n * StorageService ←→ ThemeManager    CourseSelectionService    MainController\n *      ↑\n * ThemeSelector\n * ```\n * \n * DATA FLOW & STATE MANAGEMENT:\n * State Update Process:\n * 1. External component calls ProfileStateManager method (selectCourse, createSchedule, etc.)\n * 2. withStateUpdate() wrapper executes the state change atomically\n * 3. hasUnsavedChanges flag set to true, save state change event emitted\n * 4. Debounced save (500ms) triggers background persistence via TransactionalStorageManager\n * 5. StateChangeEvent emitted to all registered listeners with new state\n * 6. Event queue processes events asynchronously to prevent recursion\n * 7. UI components receive events and update accordingly\n * \n * Persistence Flow:\n * 1. State changes trigger debouncedSave() to batch operations\n * 2. save() method creates transactional operations array\n * 3. TransactionalStorageManager.executeTransaction() ensures atomicity\n * 4. On success: hasUnsavedChanges = false, lastSaved timestamp updated\n * 5. save_state_changed event emitted for UI feedback\n * \n * Loading Flow:\n * 1. initializeFromStorage() during constructor\n * 2. loadFromStorage() coordinates data loading from multiple storage keys\n * 3. Preferences, schedules, active schedule ID loaded in sequence\n * 4. Selected courses loaded from active schedule or fallback to standalone\n * 5. Default schedule created if none exist\n * 6. Loading flags cleared, state marked as clean (no unsaved changes)\n * \n * KEY FEATURES:\n * - Atomic state updates with transactional persistence\n * - Event-driven architecture with cross-component notifications\n * - Debounced saves (500ms) to prevent excessive storage operations\n * - Multi-schedule support with active schedule management\n * - Course selection with section tracking and preferences\n * - Schedule preferences management (time ranges, preferred days, themes)\n * - Export/import functionality for data portability\n * - Health checking and consistency validation\n * - Comprehensive state access API with immutable getters\n * - Debug utilities for development and troubleshooting\n * \n * STATE MANAGEMENT FEATURES:\n * Course Selection:\n * - selectCourse() / unselectCourse() with required/optional flagging\n * - setSelectedSection() for section-specific choices\n * - clearAllSelections() for bulk operations\n * - Automatic active schedule synchronization\n * \n * Schedule Management:\n * - createSchedule() / saveCurrentAsSchedule() for schedule creation\n * - setActiveSchedule() for switching between saved schedules\n * - updateSchedule() / deleteSchedule() for schedule maintenance\n * - renameSchedule() / duplicateSchedule() for schedule management\n * - Automatic course loading when switching schedules\n * \n * INTEGRATION POINTS:\n * - Foundation for unified storage system replacing competing storage systems\n * - Event hub for all application state changes and cross-component coordination\n * - Persistence coordinator ensuring data consistency across browser sessions\n * - State provider for all services requiring course selection or schedule data\n * - Bridge to TransactionalStorageManager for atomic storage operations\n * - Initialization target for MainController during application startup\n * \n * ARCHITECTURAL PATTERNS:\n * - Singleton: Single instance shared across all application components\n * - Observer: Event-driven notifications to registered listeners\n * - Command: State update methods encapsulate business logic\n * - Repository: Centralized data access with consistent API\n * - Transaction: Atomic persistence operations via TransactionalStorageManager\n * - Facade: Simplified state management API hiding complex persistence logic\n * \n * BENEFITS ACHIEVED:\n * - Eliminated data corruption from competing storage systems\n * - Single source of truth prevents inconsistent state\n * - Event-driven updates ensure UI consistency across components\n * - Debounced saves optimize performance and reduce storage overhead\n * - Transactional persistence prevents partial data corruption\n * - Comprehensive state management reduces component coupling\n * - Health checking enables proactive issue detection\n * - Export/import enables data portability and backup functionality\n * \n * RECENT ARCHITECTURAL EVOLUTION:\n * - Replaced CourseManager + StorageManager dual system\n * - Integrated TransactionalStorageManager for atomic operations\n * - Added comprehensive event system for cross-component coordination\n * - Implemented debounced saving for performance optimization\n * - Added multi-schedule support with active schedule management\n * - Integrated health checking and consistency validation\n * \n * ═══════════════════════════════════════════════════════════════════════════════\n */\nexport class ProfileStateManager {\n    private state: ProfileState;\n    private listeners = new Set<StateChangeListener>();\n    private storageManager: TransactionalStorageManager;\n    private saveDebounceTimer: NodeJS.Timeout | null = null;\n    private readonly DEBOUNCE_DELAY = 500; // 500ms debounce\n    private isLoadingFlag = false;\n    private eventQueue: StateChangeEvent[] = [];\n    private processingQueue = false;\n\n    constructor(storageManager?: TransactionalStorageManager) {\n        this.storageManager = storageManager || new TransactionalStorageManager();\n        this.state = this.createInitialState();\n        this.initializeFromStorage();\n    }\n\n    // Public API for state access\n    getState(): Readonly<ProfileState> {\n        return { ...this.state };\n    }\n\n    getActiveSchedule(): Schedule | null {\n        if (!this.state.activeScheduleId) return null;\n        return this.state.schedules.find(s => s.id === this.state.activeScheduleId) || null;\n    }\n\n    getAllSchedules(): Schedule[] {\n        return [...this.state.schedules];\n    }\n\n    getSelectedCourses(): SelectedCourse[] {\n        return [...this.state.selectedCourses];\n    }\n\n    getSelectedCourse(course: Course): SelectedCourse | undefined {\n        return this.state.selectedCourses.find(sc => sc.course.id === course.id);\n    }\n\n    getPreferences(): SchedulePreferences {\n        return { ...this.state.preferences };\n    }\n\n    hasUnsavedChanges(): boolean {\n        return this.state.hasUnsavedChanges;\n    }\n\n    isLoading(): boolean {\n        return this.state.isLoading || this.isLoadingFlag;\n    }\n\n    // Course selection methods\n    selectCourse(course: Course, isRequired: boolean = false, source: string = 'user'): void {\n        this.withStateUpdate(() => {\n            const existingIndex = this.state.selectedCourses.findIndex(sc => sc.course.id === course.id);\n            \n            if (existingIndex >= 0) {\n                // Update existing selection\n                this.state.selectedCourses[existingIndex] = {\n                    ...this.state.selectedCourses[existingIndex],\n                    isRequired\n                };\n            } else {\n                // Add new selection\n                const selectedCourse: SelectedCourse = {\n                    course,\n                    selectedSection: null,\n                    selectedSectionNumber: null,\n                    isRequired\n                };\n                this.state.selectedCourses.push(selectedCourse);\n            }\n\n            this.updateActiveScheduleWithCurrentCourses();\n            this.emitEvent('courses_changed', { course, action: 'selected', isRequired }, source);\n        });\n    }\n\n    unselectCourse(course: Course, source: string = 'user'): void {\n        this.withStateUpdate(() => {\n            const index = this.state.selectedCourses.findIndex(sc => sc.course.id === course.id);\n            if (index >= 0) {\n                this.state.selectedCourses.splice(index, 1);\n                this.updateActiveScheduleWithCurrentCourses();\n                this.emitEvent('courses_changed', { course, action: 'unselected' }, source);\n            }\n        });\n    }\n\n    setSelectedSection(course: Course, sectionNumber: string | null, source: string = 'user'): void {\n        this.withStateUpdate(() => {\n            const selectedCourse = this.state.selectedCourses.find(sc => sc.course.id === course.id);\n            if (selectedCourse) {\n                let sectionObject: Section | null = null;\n                \n                if (sectionNumber) {\n                    // Find the section in the course\n                    sectionObject = course.sections.find(s => s.number === sectionNumber) || null;\n                    \n                    // Validate section object has required properties\n                    if (sectionObject && !sectionObject.computedTerm) {\n                        console.warn(`Section ${sectionNumber} for course ${course.department.abbreviation}${course.number} is missing computedTerm property`);\n                        // Don't set the section if it's missing required data\n                        sectionObject = null;\n                    }\n                    \n                    if (!sectionObject && sectionNumber) {\n                        console.warn(`Section ${sectionNumber} not found in course ${course.department.abbreviation}${course.number} sections:`, \n                            course.sections.map(s => s.number));\n                    }\n                }\n\n                // Ensure we never set undefined - always use null\n                selectedCourse.selectedSection = sectionObject;\n                selectedCourse.selectedSectionNumber = sectionObject ? sectionNumber : null;\n\n                this.updateActiveScheduleWithCurrentCourses();\n                this.emitEvent('courses_changed', { course, sectionNumber, action: 'section_changed' }, source);\n            }\n        });\n    }\n\n    clearAllSelections(source: string = 'user'): void {\n        this.withStateUpdate(() => {\n            this.state.selectedCourses = [];\n            this.updateActiveScheduleWithCurrentCourses();\n            this.emitEvent('courses_changed', { action: 'cleared' }, source);\n        });\n    }\n\n    // Schedule management methods\n    createSchedule(name: string, source: string = 'user'): Schedule {\n        return this.withStateUpdateSync(() => {\n            const schedule: Schedule = {\n                id: this.generateScheduleId(),\n                name,\n                selectedCourses: [...this.state.selectedCourses],\n                generatedSchedules: []\n            };\n\n            this.state.schedules.push(schedule);\n            this.emitEvent('schedule_changed', { schedule, action: 'created' }, source);\n            return schedule;\n        });\n    }\n\n    saveCurrentAsSchedule(name: string, source: string = 'user'): Schedule {\n        return this.createSchedule(name, source);\n    }\n\n    setActiveSchedule(scheduleId: string, source: string = 'user'): boolean {\n        return this.withStateUpdateSync(() => {\n            const schedule = this.state.schedules.find(s => s.id === scheduleId);\n            if (!schedule) return false;\n\n            this.isLoadingFlag = true;\n            this.state.activeScheduleId = scheduleId;\n\n            // Load schedule's courses\n            this.state.selectedCourses = [...schedule.selectedCourses];\n\n            this.emitEvent('active_schedule_changed', { schedule }, source);\n            this.emitEvent('courses_changed', { action: 'loaded_from_schedule', schedule }, source);\n\n            // Save active schedule ID\n            this.debouncedSave();\n            this.isLoadingFlag = false;\n            return true;\n        });\n    }\n\n    updateSchedule(scheduleId: string, updates: Partial<Schedule>, source: string = 'user'): boolean {\n        return this.withStateUpdateSync(() => {\n            const index = this.state.schedules.findIndex(s => s.id === scheduleId);\n            if (index < 0) return false;\n\n            this.state.schedules[index] = { ...this.state.schedules[index], ...updates };\n            \n            // If this is the active schedule, emit active schedule changed event\n            if (scheduleId === this.state.activeScheduleId) {\n                this.emitEvent('active_schedule_changed', { schedule: this.state.schedules[index] }, source);\n            }\n            \n            this.emitEvent('schedule_changed', { schedule: this.state.schedules[index], action: 'updated' }, source);\n            return true;\n        });\n    }\n\n    deleteSchedule(scheduleId: string, source: string = 'user'): boolean {\n        return this.withStateUpdateSync(() => {\n            const scheduleIndex = this.state.schedules.findIndex(s => s.id === scheduleId);\n            if (scheduleIndex < 0) return false;\n\n            // Don't allow deleting if it's the only schedule\n            if (this.state.schedules.length <= 1) return false;\n\n            const deletedSchedule = this.state.schedules[scheduleIndex];\n            this.state.schedules.splice(scheduleIndex, 1);\n\n            // If we deleted the active schedule, switch to another one\n            if (this.state.activeScheduleId === scheduleId) {\n                const nextSchedule = this.state.schedules[0];\n                this.state.activeScheduleId = nextSchedule.id;\n                this.state.selectedCourses = [...nextSchedule.selectedCourses];\n                this.emitEvent('active_schedule_changed', { schedule: nextSchedule }, source);\n            }\n\n            this.emitEvent('schedule_changed', { schedule: deletedSchedule, action: 'deleted' }, source);\n            return true;\n        });\n    }\n\n    renameSchedule(scheduleId: string, newName: string, source: string = 'user'): boolean {\n        return this.updateSchedule(scheduleId, { name: newName }, source);\n    }\n\n    duplicateSchedule(scheduleId: string, newName: string, source: string = 'user'): Schedule | null {\n        const originalSchedule = this.state.schedules.find(s => s.id === scheduleId);\n        if (!originalSchedule) return null;\n\n        return this.withStateUpdateSync(() => {\n            const duplicatedSchedule: Schedule = {\n                id: this.generateScheduleId(),\n                name: newName,\n                selectedCourses: [...originalSchedule.selectedCourses],\n                generatedSchedules: [...originalSchedule.generatedSchedules]\n            };\n\n            this.state.schedules.push(duplicatedSchedule);\n            this.emitEvent('schedule_changed', { schedule: duplicatedSchedule, action: 'duplicated' }, source);\n            return duplicatedSchedule;\n        });\n    }\n\n    // Preferences management\n    updatePreferences(updates: Partial<SchedulePreferences>, source: string = 'user'): void {\n        this.withStateUpdate(() => {\n            this.state.preferences = { ...this.state.preferences, ...updates };\n            this.emitEvent('preferences_changed', { preferences: this.state.preferences }, source);\n        });\n    }\n\n    // Event handling\n    addListener(listener: StateChangeListener): void {\n        this.listeners.add(listener);\n    }\n\n    removeListener(listener: StateChangeListener): void {\n        this.listeners.delete(listener);\n    }\n\n    removeAllListeners(): void {\n        this.listeners.clear();\n    }\n\n    // Persistence methods\n    async save(): Promise<TransactionResult> {\n        if (this.saveDebounceTimer) {\n            clearTimeout(this.saveDebounceTimer);\n            this.saveDebounceTimer = null;\n        }\n\n        const operations = [\n            () => {\n                // Save active schedule ID\n                this.storageManager.saveActiveScheduleId(this.state.activeScheduleId);\n            },\n            () => {\n                // Save all schedules\n                this.state.schedules.forEach(schedule => {\n                    this.storageManager.saveSchedule(schedule);\n                });\n            },\n            () => {\n                // Save selected courses\n                this.storageManager.saveSelectedCourses(this.state.selectedCourses);\n            },\n            () => {\n                // Save preferences\n                this.storageManager.savePreferences(this.state.preferences);\n            }\n        ];\n\n        const result = await this.storageManager.executeTransaction(operations);\n        \n        if (result.success) {\n            const previousUnsavedState = this.state.hasUnsavedChanges;\n            this.state.hasUnsavedChanges = false;\n            this.state.lastSaved = Date.now();\n            \n            // Emit save state change event if state actually changed\n            if (previousUnsavedState) {\n                this.emitEvent('save_state_changed', { hasUnsavedChanges: false }, 'system');\n            }\n        }\n\n        return result;\n    }\n\n    async loadFromStorage(): Promise<boolean> {\n        try {\n            this.state.isLoading = true;\n            this.isLoadingFlag = true;\n\n            // Load preferences first\n            const preferencesResult = this.storageManager.loadPreferences();\n            if (preferencesResult.valid && preferencesResult.data) {\n                this.state.preferences = preferencesResult.data;\n            }\n\n            // Load all schedules\n            const schedulesResult = this.storageManager.loadAllSchedules();\n            if (schedulesResult.valid && schedulesResult.data) {\n                this.state.schedules = schedulesResult.data;\n            }\n\n            // Load active schedule ID\n            const activeIdResult = this.storageManager.loadActiveScheduleId();\n            if (activeIdResult.valid && activeIdResult.data) {\n                this.state.activeScheduleId = activeIdResult.data;\n            }\n\n            // Load selected courses for active schedule or standalone\n            let loadedCourses: SelectedCourse[] = [];\n            if (this.state.activeScheduleId) {\n                const activeSchedule = this.state.schedules.find(s => s.id === this.state.activeScheduleId);\n                if (activeSchedule) {\n                    loadedCourses = activeSchedule.selectedCourses;\n                    console.log(`📂 ProfileStateManager: Loaded ${loadedCourses.length} courses from active schedule \"${activeSchedule.name}\"`);\n                }\n            }\n\n            // Fall back to standalone selected courses if no active schedule\n            if (loadedCourses.length === 0) {\n                const coursesResult = this.storageManager.loadSelectedCourses();\n                if (coursesResult.valid && coursesResult.data) {\n                    loadedCourses = coursesResult.data;\n                    console.log(`📂 ProfileStateManager: Loaded ${loadedCourses.length} standalone courses from storage`);\n                } else {\n                    console.log('📂 ProfileStateManager: No standalone courses found in storage');\n                }\n            }\n\n            this.state.selectedCourses = loadedCourses;\n            console.log(`📊 ProfileStateManager: Final loaded course count: ${loadedCourses.length}`);\n\n            // If no schedules exist, create a default one\n            if (this.state.schedules.length === 0) {\n                const defaultSchedule = this.createSchedule('My Schedule', 'system');\n                this.state.activeScheduleId = defaultSchedule.id;\n            }\n\n            // If no active schedule but schedules exist, set the first one as active\n            if (!this.state.activeScheduleId && this.state.schedules.length > 0) {\n                this.state.activeScheduleId = this.state.schedules[0].id;\n            }\n\n            this.state.hasUnsavedChanges = false;\n            this.state.lastSaved = Date.now();\n            return true;\n\n        } catch (error) {\n            console.error('Failed to load from storage:', error);\n            return false;\n        } finally {\n            this.state.isLoading = false;\n            this.isLoadingFlag = false;\n        }\n    }\n\n    // Export/Import functionality\n    exportData(): string | null {\n        const exportResult = this.storageManager.exportData();\n        return exportResult.valid ? exportResult.data : null;\n    }\n\n    async importData(jsonData: string): Promise<TransactionResult> {\n        const result = this.storageManager.importData(jsonData);\n        if (result.success) {\n            // Reload state from storage after successful import\n            await this.loadFromStorage();\n            this.emitEvent('schedule_changed', { action: 'imported' }, 'system');\n        }\n        return result;\n    }\n\n    // Health check\n    isHealthy(): { healthy: boolean; issues: string[] } {\n        const storageHealth = this.storageManager.isHealthy();\n        const issues = [...storageHealth.issues];\n\n        // Check state consistency\n        if (this.state.activeScheduleId && !this.state.schedules.find(s => s.id === this.state.activeScheduleId)) {\n            issues.push('Active schedule ID references non-existent schedule');\n        }\n\n        return {\n            healthy: issues.length === 0,\n            issues\n        };\n    }\n\n    // Private helper methods\n    private createInitialState(): ProfileState {\n        return {\n            activeScheduleId: null,\n            schedules: [],\n            selectedCourses: [],\n            preferences: {\n                preferredTimeRange: {\n                    startTime: { hours: 8, minutes: 0 },\n                    endTime: { hours: 18, minutes: 0 }\n                },\n                preferredDays: new Set(['mon', 'tue', 'wed', 'thu', 'fri']),\n                avoidBackToBackClasses: false,\n                theme: 'wpi-classic'\n            },\n            isLoading: false,\n            lastSaved: 0,\n            hasUnsavedChanges: false\n        };\n    }\n\n    private async initializeFromStorage(): Promise<void> {\n        await this.loadFromStorage();\n    }\n\n    private withStateUpdate<T>(updateFn: () => T): T {\n        const previousUnsavedState = this.state.hasUnsavedChanges;\n        const result = updateFn();\n        this.state.hasUnsavedChanges = true;\n        \n        // Emit save state change event if state actually changed\n        if (!previousUnsavedState) {\n            this.emitEvent('save_state_changed', { hasUnsavedChanges: true }, 'system');\n        }\n        \n        this.debouncedSave();\n        return result;\n    }\n\n    private withStateUpdateSync<T>(updateFn: () => T): T {\n        const previousUnsavedState = this.state.hasUnsavedChanges;\n        const result = updateFn();\n        this.state.hasUnsavedChanges = true;\n        \n        // Emit save state change event if state actually changed\n        if (!previousUnsavedState) {\n            this.emitEvent('save_state_changed', { hasUnsavedChanges: true }, 'system');\n        }\n        \n        this.debouncedSave();\n        return result;\n    }\n\n    private updateActiveScheduleWithCurrentCourses(): void {\n        if (this.state.activeScheduleId) {\n            const activeScheduleIndex = this.state.schedules.findIndex(s => s.id === this.state.activeScheduleId);\n            if (activeScheduleIndex >= 0) {\n                this.state.schedules[activeScheduleIndex].selectedCourses = [...this.state.selectedCourses];\n            }\n        }\n    }\n\n    private debouncedSave(): void {\n        if (this.saveDebounceTimer) {\n            clearTimeout(this.saveDebounceTimer);\n        }\n\n        this.saveDebounceTimer = setTimeout(async () => {\n            if (!this.isLoadingFlag) {\n                await this.save();\n            }\n        }, this.DEBOUNCE_DELAY);\n    }\n\n    private emitEvent(type: StateChangeEvent['type'], data: any, source: string): void {\n        const event: StateChangeEvent = {\n            type,\n            data,\n            timestamp: Date.now(),\n            source\n        };\n\n        this.eventQueue.push(event);\n        this.processEventQueue();\n    }\n\n    private processEventQueue(): void {\n        if (this.processingQueue) return;\n        this.processingQueue = true;\n\n        // Process events in next tick to avoid recursion\n        setTimeout(() => {\n            const eventsToProcess = [...this.eventQueue];\n            this.eventQueue = [];\n\n            eventsToProcess.forEach(event => {\n                this.listeners.forEach(listener => {\n                    try {\n                        listener(event, this.getState());\n                    } catch (error) {\n                        console.error('Error in state change listener:', error);\n                    }\n                });\n            });\n\n            this.processingQueue = false;\n\n            // If more events were queued while processing, process them\n            if (this.eventQueue.length > 0) {\n                this.processEventQueue();\n            }\n        }, 0);\n    }\n\n    private generateScheduleId(): string {\n        return `schedule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    // Debug methods\n    debugState(): void {\n        console.log('=== PROFILE STATE DEBUG ===');\n        console.log('Active Schedule ID:', this.state.activeScheduleId);\n        console.log('Schedules:', this.state.schedules.map(s => ({\n            id: s.id,\n            name: s.name,\n            courseCount: s.selectedCourses.length\n        })));\n        console.log('Selected Courses:', this.state.selectedCourses.length);\n        console.log('Has Unsaved Changes:', this.state.hasUnsavedChanges);\n        console.log('Last Saved:', new Date(this.state.lastSaved).toISOString());\n        console.log('Listeners:', this.listeners.size);\n        console.log('Health Check:', this.isHealthy());\n        console.log('===============================');\n    }\n}","import { ProfileStateManager } from '../core/ProfileStateManager'\nimport { SchedulePreferences, Schedule, SelectedCourse } from '../types/schedule'\nimport { ThemeStorage } from '../themes/ThemeManager'\n\n/**\n * ═══════════════════════════════════════════════════════════════════════════════\n * StorageService - Unified Storage Interface & Coordination Hub\n * ═══════════════════════════════════════════════════════════════════════════════\n * \n * ARCHITECTURE ROLE:\n * - Central storage coordinator implementing Singleton pattern\n * - Unified interface abstracting ProfileStateManager complexity\n * - Strategy pattern implementation for ThemeStorage interface\n * - Bridge between UI components and core storage system\n * \n * DEPENDENCIES:\n * - ProfileStateManager → Core state management with transactional storage\n * - ThemeStorage interface → Pluggable theme persistence strategy\n * - Schedule/SelectedCourse types → Data structure definitions\n * \n * USED BY:\n * - ThemeSelector → Theme preference persistence\n * - ThemeManager → Pluggable storage via ThemeStorage interface\n * - MainController → Singleton instance coordination\n * - Any component requiring persistent storage operations\n * \n * DATA FLOW:\n * 1. UI Component calls StorageService method\n * 2. StorageService translates to ProfileStateManager operation\n * 3. ProfileStateManager coordinates with TransactionalStorageManager\n * 4. TransactionalStorageManager handles localStorage with rollback support\n * 5. Events propagate back through ProfileStateManager listeners\n * 6. UI components receive state change notifications\n * \n * KEY FEATURES:\n * - Singleton instance management with dependency injection support\n * - Auto-initialization with error handling\n * - Theme storage integration via interface implementation\n * - Simplified API hiding ProfileStateManager complexity\n * - Comprehensive CRUD operations for all persistent data types\n * - Health monitoring and data integrity checks\n * \n * INTEGRATION POINTS:\n * - Implements ThemeStorage for ThemeManager dependency injection\n * - Shares ProfileStateManager instance across application\n * - Coordinates with MainController for service initialization\n * - Provides unified error handling and logging\n * \n * ARCHITECTURAL PATTERNS:\n * - Singleton: Single instance across application lifetime\n * - Facade: Simplified interface to complex ProfileStateManager\n * - Strategy: Implements ThemeStorage interface for theme system\n * - Dependency Injection: Accepts ProfileStateManager in constructor\n * \n * ═══════════════════════════════════════════════════════════════════════════════\n */\nexport class StorageService implements ThemeStorage {\n    private static instance: StorageService | null = null;\n    private profileStateManager: ProfileStateManager;\n    private isInitialized = false;\n\n    private constructor(profileStateManager?: ProfileStateManager) {\n        this.profileStateManager = profileStateManager || new ProfileStateManager();\n    }\n\n    static getInstance(profileStateManager?: ProfileStateManager): StorageService {\n        if (!StorageService.instance) {\n            StorageService.instance = new StorageService(profileStateManager);\n        }\n        return StorageService.instance;\n    }\n\n    static resetInstance(): void {\n        StorageService.instance = null;\n    }\n\n    async initialize(): Promise<boolean> {\n        if (this.isInitialized) return true;\n        \n        try {\n            await this.profileStateManager.loadFromStorage();\n            this.isInitialized = true;\n            return true;\n        } catch (error) {\n            console.error('Failed to initialize StorageService:', error);\n            return false;\n        }\n    }\n\n    // Theme operations\n    saveThemePreference(themeId: string): void {\n        this.profileStateManager.updatePreferences({ theme: themeId }, 'storage-service');\n    }\n\n    loadThemePreference(): string {\n        const preferences = this.profileStateManager.getPreferences();\n        return preferences.theme || 'wpi-classic';\n    }\n\n    // Preferences operations\n    savePreferences(preferences: SchedulePreferences): void {\n        this.profileStateManager.updatePreferences(preferences, 'storage-service');\n    }\n\n    loadPreferences(): SchedulePreferences {\n        return this.profileStateManager.getPreferences();\n    }\n\n    // Schedule operations\n    saveSchedule(schedule: Schedule): boolean {\n        return this.profileStateManager.updateSchedule(schedule.id, schedule, 'storage-service');\n    }\n\n    loadSchedule(scheduleId: string): Schedule | null {\n        return this.profileStateManager.getAllSchedules().find(s => s.id === scheduleId) || null;\n    }\n\n    loadAllSchedules(): Schedule[] {\n        return this.profileStateManager.getAllSchedules();\n    }\n\n    deleteSchedule(scheduleId: string): boolean {\n        return this.profileStateManager.deleteSchedule(scheduleId, 'storage-service');\n    }\n\n    // Selected courses operations\n    saveSelectedCourses(selectedCourses: SelectedCourse[]): void {\n        // Clear all selections first, then add the new ones\n        this.profileStateManager.clearAllSelections('storage-service');\n        selectedCourses.forEach(sc => {\n            this.profileStateManager.selectCourse(sc.course, sc.isRequired, 'storage-service');\n            if (sc.selectedSectionNumber) {\n                this.profileStateManager.setSelectedSection(sc.course, sc.selectedSectionNumber, 'storage-service');\n            }\n        });\n    }\n\n    loadSelectedCourses(): SelectedCourse[] {\n        return this.profileStateManager.getSelectedCourses();\n    }\n\n    clearSelectedCourses(): void {\n        this.profileStateManager.clearAllSelections('storage-service');\n    }\n\n    // Active schedule operations\n    saveActiveScheduleId(scheduleId: string | null): void {\n        if (scheduleId) {\n            this.profileStateManager.setActiveSchedule(scheduleId, 'storage-service');\n        }\n    }\n\n    loadActiveScheduleId(): string | null {\n        const activeSchedule = this.profileStateManager.getActiveSchedule();\n        return activeSchedule?.id || null;\n    }\n\n    clearActiveScheduleId(): void {\n        // Set to the first available schedule or null\n        const schedules = this.profileStateManager.getAllSchedules();\n        if (schedules.length > 0) {\n            this.profileStateManager.setActiveSchedule(schedules[0].id, 'storage-service');\n        }\n    }\n\n    // Data management\n    async save(): Promise<boolean> {\n        const result = await this.profileStateManager.save();\n        return result.success;\n    }\n\n    hasUnsavedChanges(): boolean {\n        return this.profileStateManager.hasUnsavedChanges();\n    }\n\n    async exportData(): Promise<string | null> {\n        return this.profileStateManager.exportData();\n    }\n\n    async importData(jsonData: string): Promise<boolean> {\n        const result = await this.profileStateManager.importData(jsonData);\n        return result.success;\n    }\n\n    clearAllData(): void {\n        this.profileStateManager.clearAllSelections('storage-service');\n        // Note: We don't clear preferences or schedules completely, just reset to defaults\n    }\n\n    // Access to underlying ProfileStateManager for advanced operations\n    getProfileStateManager(): ProfileStateManager {\n        return this.profileStateManager;\n    }\n\n    // Health check\n    isHealthy(): { healthy: boolean; issues: string[] } {\n        return this.profileStateManager.isHealthy();\n    }\n}","import { ThemeManager } from '../../themes/ThemeManager'\nimport { StorageService } from '../../services/StorageService'\n\n/**\n * ═══════════════════════════════════════════════════════════════════════════════\n * ThemeSelector - Theme Switching UI Component with Persistent Storage\n * ═══════════════════════════════════════════════════════════════════════════════\n * \n * ARCHITECTURE ROLE:\n * - UI component bridging user theme selection with theme management system\n * - Dropdown interface controller with event-driven state management\n * - Integration point between theme system and unified storage architecture\n * - Persistent storage coordinator for theme preferences\n * \n * DEPENDENCIES:\n * - ThemeManager → Theme application, available theme registry, current theme state\n * - StorageService → Unified storage interface for theme preference persistence\n * - DOM Elements → #theme-dropdown, #theme-options, #current-theme-name\n * \n * USED BY:\n * - MainController → Instantiated and integrated into main application\n * - End Users → Direct interaction through dropdown UI element\n * - Theme system → Responds to theme changes via ThemeManager events\n * \n * DATA FLOW:\n * 1. User clicks theme dropdown → toggleDropdown()\n * 2. User selects theme option → selectTheme(themeId)\n * 3. ThemeManager.setTheme() applies theme to DOM\n * 4. StorageService.saveThemePreference() persists selection\n * 5. UI updates: current theme display, dropdown state, active option\n * 6. Dropdown closes and state resets\n * \n * Initialization Flow:\n * 1. Constructor gets ThemeManager + StorageService singletons\n * 2. setupElements() binds DOM references\n * 3. loadSavedTheme() restores persisted preference\n * 4. setupEventListeners() binds UI interactions\n * 5. renderThemeOptions() populates dropdown content\n * \n * KEY FEATURES:\n * - Dropdown UI management (open/close state, outside click handling)\n * - Theme option rendering with active state indication\n * - Persistent theme preference loading/saving via unified storage\n * - Real-time UI updates reflecting theme changes\n * - Event delegation for dynamically generated theme options\n * - Public API for programmatic theme changes\n * \n * INTEGRATION POINTS:\n * - Connected to unified storage system via StorageService\n * - Integrates with ThemeManager singleton for theme operations\n * - Coordinated by MainController during application initialization\n * - DOM-dependent component requiring specific HTML structure\n * \n * ARCHITECTURAL PATTERNS:\n * - MVC: Model (ThemeManager), View (DOM), Controller (ThemeSelector)\n * - Observer: Responds to theme system changes and user interactions\n * - Singleton Integration: Uses ThemeManager and StorageService singletons\n * - Event Delegation: Dynamic theme option handling\n * \n * ═══════════════════════════════════════════════════════════════════════════════\n */\nexport class ThemeSelector {\n    private themeManager: ThemeManager;\n    private storageService: StorageService;\n    private dropdownElement: HTMLElement | null = null;\n    private optionsElement: HTMLElement | null = null;\n    private currentThemeNameElement: HTMLElement | null = null;\n    private isOpen: boolean = false;\n\n    constructor() {\n        this.themeManager = ThemeManager.getInstance();\n        this.storageService = StorageService.getInstance();\n        this.init();\n    }\n\n    private init(): void {\n        this.setupElements();\n        this.loadSavedTheme();\n        this.setupEventListeners();\n        this.renderThemeOptions();\n    }\n\n    private setupElements(): void {\n        this.dropdownElement = document.getElementById('theme-dropdown');\n        this.optionsElement = document.getElementById('theme-options');\n        this.currentThemeNameElement = document.getElementById('current-theme-name');\n    }\n\n    private loadSavedTheme(): void {\n        const savedTheme = this.storageService.loadThemePreference();\n        this.themeManager.setTheme(savedTheme);\n        this.updateCurrentThemeDisplay();\n    }\n\n    private setupEventListeners(): void {\n        if (!this.dropdownElement || !this.optionsElement) return;\n\n        // Toggle dropdown\n        this.dropdownElement.addEventListener('click', (e) => {\n            e.stopPropagation();\n            this.toggleDropdown();\n        });\n\n        // Close dropdown when clicking outside\n        document.addEventListener('click', () => {\n            this.closeDropdown();\n        });\n\n        // Prevent closing when clicking inside options\n        this.optionsElement.addEventListener('click', (e) => {\n            e.stopPropagation();\n        });\n    }\n\n    private toggleDropdown(): void {\n        if (this.isOpen) {\n            this.closeDropdown();\n        } else {\n            this.openDropdown();\n        }\n    }\n\n    private openDropdown(): void {\n        if (!this.dropdownElement || !this.optionsElement) return;\n        \n        this.isOpen = true;\n        this.dropdownElement.classList.add('open');\n        this.optionsElement.classList.add('show');\n    }\n\n    private closeDropdown(): void {\n        if (!this.dropdownElement || !this.optionsElement) return;\n        \n        this.isOpen = false;\n        this.dropdownElement.classList.remove('open');\n        this.optionsElement.classList.remove('show');\n    }\n\n    private renderThemeOptions(): void {\n        if (!this.optionsElement) return;\n\n        const availableThemes = this.themeManager.getAvailableThemes();\n        const currentThemeId = this.themeManager.getCurrentThemeId();\n\n        let html = '';\n        availableThemes.forEach(theme => {\n            const isActive = theme.id === currentThemeId;\n            html += `\n                <div class=\"theme-option ${isActive ? 'active' : ''}\" data-theme-id=\"${theme.id}\">\n                    <div class=\"theme-option-name\">${theme.name}</div>\n                    <div class=\"theme-option-description\">${theme.description}</div>\n                </div>\n            `;\n        });\n\n        this.optionsElement.innerHTML = html;\n\n        // Add click listeners to theme options\n        this.optionsElement.querySelectorAll('.theme-option').forEach(option => {\n            option.addEventListener('click', () => {\n                const themeId = (option as HTMLElement).dataset.themeId;\n                if (themeId) {\n                    this.selectTheme(themeId);\n                }\n            });\n        });\n    }\n\n    private selectTheme(themeId: string): void {\n        // Apply theme\n        const success = this.themeManager.setTheme(themeId);\n        if (!success) return;\n\n        // Save to storage\n        this.storageService.saveThemePreference(themeId);\n\n        // Update UI\n        this.updateCurrentThemeDisplay();\n        this.updateActiveOption(themeId);\n        this.closeDropdown();\n    }\n\n    private updateCurrentThemeDisplay(): void {\n        if (!this.currentThemeNameElement) return;\n\n        const currentTheme = this.themeManager.getCurrentTheme();\n        if (currentTheme) {\n            this.currentThemeNameElement.textContent = currentTheme.name;\n        }\n    }\n\n    private updateActiveOption(selectedThemeId: string): void {\n        if (!this.optionsElement) return;\n\n        // Remove active class from all options\n        this.optionsElement.querySelectorAll('.theme-option').forEach(option => {\n            option.classList.remove('active');\n        });\n\n        // Add active class to selected option\n        const selectedOption = this.optionsElement.querySelector(`[data-theme-id=\"${selectedThemeId}\"]`);\n        if (selectedOption) {\n            selectedOption.classList.add('active');\n        }\n    }\n\n    // Public method to refresh theme options (useful if themes are added dynamically)\n    public refresh(): void {\n        this.renderThemeOptions();\n        this.updateCurrentThemeDisplay();\n    }\n\n    // Public method to programmatically select a theme\n    public setTheme(themeId: string): void {\n        this.selectTheme(themeId);\n    }\n}","import { Schedule } from '../../types/schedule'\nimport { ScheduleManagementService } from '../../services/ScheduleManagementService'\n\nexport class ScheduleSelector {\n    private scheduleManagementService: ScheduleManagementService;\n    private container: HTMLElement;\n    private currentActiveSchedule: Schedule | null = null;\n    private isDropdownOpen = false;\n    private scheduleListClickHandler: ((e: Event) => void) | null = null;\n    private scheduleListDblClickHandler: ((e: Event) => void) | null = null;\n    private lastScheduleListHTML = '';\n\n    constructor(scheduleManagementService: ScheduleManagementService, containerId: string) {\n        this.scheduleManagementService = scheduleManagementService;\n        \n        const container = document.getElementById(containerId);\n        if (!container) {\n            throw new Error(`Container with ID '${containerId}' not found`);\n        }\n        \n        this.container = container;\n        this.init();\n    }\n\n    private init(): void {\n        this.render();\n        this.setupEventListeners();\n        this.setupScheduleChangeListener();\n        this.setupCourseSelectionListener();\n        \n        this.currentActiveSchedule = this.scheduleManagementService.getActiveSchedule();\n        this.updateDisplay();\n        \n        // IMPORTANT: Always populate the schedule list during initialization\n        // This ensures schedules show up even if dropdown hasn't been opened yet\n        this.initialScheduleListPopulation();\n    }\n\n    private render(): void {\n        this.container.innerHTML = `\n            <div class=\"schedule-selector\">\n                <div class=\"schedule-selector-trigger\" id=\"schedule-selector-trigger\">\n                    <div class=\"schedule-selector-content\">\n                        <div class=\"schedule-selector-icon\">📋</div>\n                        <div class=\"schedule-selector-text\">\n                            <div class=\"schedule-name\" id=\"active-schedule-name\">My Schedule</div>\n                            <div class=\"schedule-subtitle\">Active Schedule</div>\n                        </div>\n                    </div>\n                    <div class=\"schedule-selector-arrow\">▼</div>\n                </div>\n                \n                <div class=\"schedule-selector-dropdown\" id=\"schedule-selector-dropdown\">\n                    <div class=\"schedule-dropdown-header\">\n                        <h3>Schedules</h3>\n                        <button class=\"btn btn-primary btn-small\" id=\"new-schedule-btn\">+ New</button>\n                    </div>\n                    \n                    <div class=\"schedule-list\" id=\"schedule-list\">\n                        <!-- Schedule items will be populated here -->\n                    </div>\n                    \n                    <div class=\"schedule-dropdown-footer\">\n                        <button class=\"btn btn-secondary btn-small\" id=\"import-schedule-btn\">Import</button>\n                        <button class=\"btn btn-secondary btn-small\" id=\"export-schedule-btn\">Export</button>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private setupEventListeners(): void {\n        const trigger = this.container.querySelector('#schedule-selector-trigger') as HTMLElement;\n        const dropdown = this.container.querySelector('#schedule-selector-dropdown') as HTMLElement;\n        const newScheduleBtn = this.container.querySelector('#new-schedule-btn') as HTMLElement;\n        const importBtn = this.container.querySelector('#import-schedule-btn') as HTMLElement;\n        const exportBtn = this.container.querySelector('#export-schedule-btn') as HTMLElement;\n\n        trigger?.addEventListener('click', (e) => {\n            e.stopPropagation();\n            this.toggleDropdown();\n        });\n\n        document.addEventListener('click', (e) => {\n            if (!this.container.contains(e.target as Node)) {\n                this.closeDropdown();\n                this.closeAllScheduleMenus();\n            }\n        });\n\n        newScheduleBtn?.addEventListener('click', (e) => {\n            e.stopPropagation();\n            this.createNewSchedule();\n        });\n\n        importBtn?.addEventListener('click', (e) => {\n            e.stopPropagation();\n            this.importSchedule();\n        });\n\n        exportBtn?.addEventListener('click', (e) => {\n            e.stopPropagation();\n            this.exportActiveSchedule();\n        });\n\n        dropdown?.addEventListener('click', (e) => {\n            e.stopPropagation();\n            console.log('Dropdown click event:', e.target);\n        });\n    }\n\n    private setupScheduleChangeListener(): void {\n        // Listen for active schedule changes\n        this.scheduleManagementService.onActiveScheduleChange((activeSchedule) => {\n            this.currentActiveSchedule = activeSchedule;\n            this.updateDisplay();\n        });\n        \n        // Listen for schedule list changes (creation, deletion, etc.)\n        this.scheduleManagementService.addScheduleListener((event) => {\n            // Always refresh the schedule list when schedules are created/deleted/updated\n            this.refreshScheduleList();\n        });\n    }\n\n    private setupCourseSelectionListener(): void {\n        // Listen for course selection changes to update the course count display\n        this.scheduleManagementService.getCourseSelectionService().onSelectionChange(() => {\n            // Only update the schedule list if dropdown is open to avoid unnecessary DOM work\n            if (this.isDropdownOpen) {\n                this.updateScheduleList();\n            }\n        });\n    }\n\n    private toggleDropdown(): void {\n        if (this.isDropdownOpen) {\n            this.closeDropdown();\n        } else {\n            this.openDropdown();\n        }\n    }\n\n    private openDropdown(): void {\n        const dropdown = this.container.querySelector('#schedule-selector-dropdown') as HTMLElement;\n        if (dropdown) {\n            dropdown.style.display = 'block';\n            this.isDropdownOpen = true;\n            this.container.classList.add('dropdown-open');\n            this.updateScheduleList();\n        }\n    }\n\n    private closeDropdown(): void {\n        const dropdown = this.container.querySelector('#schedule-selector-dropdown') as HTMLElement;\n        if (dropdown) {\n            dropdown.style.display = 'none';\n            this.isDropdownOpen = false;\n            this.container.classList.remove('dropdown-open');\n        }\n    }\n\n    private closeAllScheduleMenus(): void {\n        document.querySelectorAll('.schedule-item-menu').forEach(menu => {\n            (menu as HTMLElement).style.display = 'none';\n        });\n    }\n\n    private updateDisplay(): void {\n        const activeScheduleNameEl = this.container.querySelector('#active-schedule-name') as HTMLElement;\n        \n        if (activeScheduleNameEl) {\n            if (this.currentActiveSchedule) {\n                activeScheduleNameEl.textContent = this.currentActiveSchedule.name;\n            } else {\n                activeScheduleNameEl.textContent = 'No Schedule';\n            }\n        }\n\n        if (this.isDropdownOpen) {\n            this.updateScheduleList();\n        }\n    }\n\n    private initialScheduleListPopulation(): void {\n        try {\n            const schedules = this.scheduleManagementService.getAllSchedules();\n            if (schedules.length > 0) {\n                this.updateScheduleList();\n            }\n        } catch (error) {\n            console.error('Failed to populate initial schedule list:', error);\n        }\n    }\n\n    private updateScheduleList(): void {\n        const scheduleList = this.container.querySelector('#schedule-list') as HTMLElement;\n        if (!scheduleList) return;\n\n        const schedules = this.scheduleManagementService.getAllSchedules();\n        const activeScheduleId = this.scheduleManagementService.getActiveScheduleId();\n\n        if (schedules.length === 0) {\n            const emptyHTML = '<div class=\"schedule-list-empty\">No schedules found</div>';\n            if (scheduleList.innerHTML !== emptyHTML) {\n                scheduleList.innerHTML = emptyHTML;\n            }\n            return;\n        }\n\n        const newHTML = schedules.map(schedule => {\n            const isActive = schedule.id === activeScheduleId;\n            \n            // For active schedule, get live course count; for others, use stored count\n            const courseCount = isActive ? \n                this.scheduleManagementService.getCourseSelectionService().getSelectedCourses().length :\n                schedule.selectedCourses.length;\n            \n            return `\n                <div class=\"schedule-item ${isActive ? 'active' : ''}\" data-schedule-id=\"${schedule.id}\">\n                    <div class=\"schedule-item-info\">\n                        <div class=\"schedule-item-name\" data-editable=\"true\" data-original-name=\"${schedule.name}\">${schedule.name}</div>\n                        <div class=\"schedule-item-details\">${courseCount} course${courseCount === 1 ? '' : 's'}</div>\n                    </div>\n                    <div class=\"schedule-item-actions\">\n                        ${isActive ? '<span class=\"active-indicator\">✓</span>' : '<button class=\"btn-link switch-btn\">Switch</button>'}\n                        <button class=\"btn-link menu-btn\" title=\"More options\">⋮</button>\n                    </div>\n                    <div class=\"schedule-item-menu\" style=\"display: none;\">\n                        <button class=\"menu-action\" data-action=\"rename\">Rename</button>\n                        <button class=\"menu-action\" data-action=\"duplicate\">Duplicate</button>\n                        <button class=\"menu-action\" data-action=\"export\">Export</button>\n                        ${schedules.length > 1 ? '<button class=\"menu-action danger\" data-action=\"delete\">Delete</button>' : ''}\n                    </div>\n                </div>\n            `;\n        }).join('');\n\n        // Only update DOM if content has actually changed\n        if (this.lastScheduleListHTML !== newHTML) {\n            this.lastScheduleListHTML = newHTML;\n            scheduleList.innerHTML = newHTML;\n            this.setupScheduleItemListeners();\n        }\n    }\n\n    private setupScheduleItemListeners(): void {\n        const scheduleList = this.container.querySelector('#schedule-list') as HTMLElement;\n        if (!scheduleList) return;\n\n        // Remove existing listeners to prevent memory leaks\n        this.removeScheduleItemListeners();\n\n        // Create and store new handlers\n        this.scheduleListClickHandler = (e) => {\n            const target = e.target as HTMLElement;\n\n            if (target.classList.contains('switch-btn')) {\n                const scheduleId = target.closest('.schedule-item')?.getAttribute('data-schedule-id');\n                if (scheduleId) {\n                    this.switchToSchedule(scheduleId);\n                }\n            }\n\n            if (target.classList.contains('menu-btn')) {\n                e.stopPropagation();\n                this.toggleScheduleMenu(target);\n            }\n\n            if (target.classList.contains('menu-action')) {\n                const action = target.getAttribute('data-action');\n                const scheduleId = target.closest('.schedule-item')?.getAttribute('data-schedule-id');\n                if (action && scheduleId) {\n                    this.handleScheduleAction(action, scheduleId);\n                }\n            }\n        };\n\n        this.scheduleListDblClickHandler = (e) => {\n            const target = e.target as HTMLElement;\n            if (target.classList.contains('schedule-item-name')) {\n                this.startRenaming(target);\n            }\n        };\n\n        // Add listeners\n        scheduleList.addEventListener('click', this.scheduleListClickHandler);\n        scheduleList.addEventListener('dblclick', this.scheduleListDblClickHandler);\n    }\n\n    private removeScheduleItemListeners(): void {\n        const scheduleList = this.container.querySelector('#schedule-list') as HTMLElement;\n        if (!scheduleList) return;\n\n        if (this.scheduleListClickHandler) {\n            scheduleList.removeEventListener('click', this.scheduleListClickHandler);\n        }\n        if (this.scheduleListDblClickHandler) {\n            scheduleList.removeEventListener('dblclick', this.scheduleListDblClickHandler);\n        }\n    }\n\n    private toggleScheduleMenu(menuBtn: HTMLElement): void {\n        // Close all other menus first\n        document.querySelectorAll('.schedule-item-menu').forEach(menu => {\n            const currentMenu = menuBtn.closest('.schedule-item')?.querySelector('.schedule-item-menu');\n            if (menu !== currentMenu) {\n                (menu as HTMLElement).style.display = 'none';\n            }\n        });\n\n        // Find the menu for this button using closest parent approach\n        const scheduleItem = menuBtn.closest('.schedule-item');\n        if (!scheduleItem) return;\n\n        const menu = scheduleItem.querySelector('.schedule-item-menu') as HTMLElement;\n        if (menu) {\n            const isCurrentlyHidden = menu.style.display === 'none' || menu.style.display === '';\n            \n            if (isCurrentlyHidden) {\n                // Calculate position relative to viewport\n                const btnRect = menuBtn.getBoundingClientRect();\n                const menuWidth = 120; // min-width from CSS\n                const menuHeight = 160; // estimated height\n                \n                // Position menu below and to the right of button\n                let left = btnRect.right - menuWidth;\n                let top = btnRect.bottom + 4; // small gap\n                \n                // Ensure menu stays within viewport\n                const viewportWidth = window.innerWidth;\n                const viewportHeight = window.innerHeight;\n                \n                // Adjust horizontal position if menu would go off-screen\n                if (left < 8) {\n                    left = 8; // minimum padding from left edge\n                } else if (left + menuWidth > viewportWidth - 8) {\n                    left = viewportWidth - menuWidth - 8; // minimum padding from right edge\n                }\n                \n                // Adjust vertical position if menu would go off-screen\n                if (top + menuHeight > viewportHeight - 8) {\n                    top = btnRect.top - menuHeight - 4; // position above button\n                }\n                \n                // Apply positioning\n                menu.style.left = `${left}px`;\n                menu.style.top = `${top}px`;\n                menu.style.display = 'block';\n            } else {\n                menu.style.display = 'none';\n            }\n        }\n    }\n\n    private handleScheduleAction(action: string, scheduleId: string): void {\n        try {\n            switch (action) {\n                case 'rename':\n                    this.renameSchedule(scheduleId);\n                    break;\n                case 'duplicate':\n                    this.duplicateSchedule(scheduleId);\n                    break;\n                case 'export':\n                    this.exportSchedule(scheduleId);\n                    break;\n                case 'delete':\n                    this.deleteSchedule(scheduleId);\n                    break;\n            }\n        } catch (error) {\n            console.error(`Failed to ${action} schedule:`, error);\n            alert(`Failed to ${action} schedule. Please try again.`);\n        }\n\n        // Close all menus after action\n        document.querySelectorAll('.schedule-item-menu').forEach(menu => {\n            (menu as HTMLElement).style.display = 'none';\n        });\n    }\n\n    private switchToSchedule(scheduleId: string): void {\n        this.setLoadingState(true);\n        \n        try {\n            this.scheduleManagementService.setActiveSchedule(scheduleId);\n        } catch (error) {\n            console.error('Failed to switch schedule:', error);\n            alert('Failed to switch schedule. Please try again.');\n        } finally {\n            setTimeout(() => {\n                this.setLoadingState(false);\n                this.closeDropdown();\n            }, 100);\n        }\n    }\n\n    private async createNewSchedule(): Promise<void> {\n        const name = prompt('Enter name for new schedule:', 'New Schedule');\n        \n        if (name && name.trim()) {\n            const trimmedName = name.trim();\n            this.setLoadingState(true);\n            \n            try {\n                const result = await this.scheduleManagementService.createNewSchedule(trimmedName);\n                \n                if (result.success && result.schedule) {\n                    await this.scheduleManagementService.setActiveSchedule(result.schedule.id);\n                } else {\n                    throw new Error(result.error || 'Failed to create schedule');\n                }\n            } catch (error) {\n                console.error('Failed to create new schedule:', error);\n                alert('Failed to create new schedule. Please try again.');\n            } finally {\n                setTimeout(() => {\n                    this.setLoadingState(false);\n                    this.closeDropdown();\n                }, 100);\n            }\n        }\n    }\n\n    private renameSchedule(scheduleId: string): void {\n        const schedule = this.scheduleManagementService.loadSchedule(scheduleId);\n        if (!schedule) return;\n\n        const newName = prompt('Enter new name:', schedule.name);\n        if (newName && newName.trim() && newName.trim() !== schedule.name) {\n            this.scheduleManagementService.renameSchedule(scheduleId, newName.trim());\n            this.updateScheduleList();\n        }\n    }\n\n    private duplicateSchedule(scheduleId: string): void {\n        const schedule = this.scheduleManagementService.loadSchedule(scheduleId);\n        if (!schedule) return;\n\n        const newName = prompt('Enter name for duplicate:', `${schedule.name} (Copy)`);\n        if (newName && newName.trim()) {\n            this.scheduleManagementService.duplicateSchedule(scheduleId, newName.trim());\n            this.updateScheduleList();\n        }\n    }\n\n    private async deleteSchedule(scheduleId: string): Promise<void> {\n        const schedule = this.scheduleManagementService.loadSchedule(scheduleId);\n        if (!schedule) return;\n\n        const confirmDelete = confirm(`Are you sure you want to delete \"${schedule.name}\"? This action cannot be undone.`);\n        if (confirmDelete) {\n            const result = await this.scheduleManagementService.deleteSchedule(scheduleId);\n            if (result.success) {\n                this.updateScheduleList();\n            } else {\n                alert(result.error || 'Cannot delete the last remaining schedule.');\n            }\n        }\n    }\n\n    private async exportSchedule(scheduleId: string): Promise<void> {\n        const exportResult = await this.scheduleManagementService.exportSchedule(scheduleId);\n        if (exportResult.success && exportResult.data) {\n            const schedule = this.scheduleManagementService.loadSchedule(scheduleId);\n            const filename = `${schedule?.name || 'schedule'}.json`;\n            this.downloadJSON(exportResult.data, filename);\n        } else {\n            alert(exportResult.error || 'Failed to export schedule');\n        }\n    }\n\n    private exportActiveSchedule(): void {\n        const activeScheduleId = this.scheduleManagementService.getActiveScheduleId();\n        if (activeScheduleId) {\n            this.exportSchedule(activeScheduleId);\n            this.closeDropdown();\n        }\n    }\n\n    private importSchedule(): void {\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.accept = '.json';\n        \n        input.onchange = (e) => {\n            const file = (e.target as HTMLInputElement).files?.[0];\n            if (file) {\n                const reader = new FileReader();\n                reader.onload = async (event) => {\n                    const jsonData = event.target?.result as string;\n                    const importResult = await this.scheduleManagementService.importSchedule(jsonData);\n                    \n                    if (importResult.success && importResult.schedule) {\n                        alert(`Successfully imported \"${importResult.schedule.name}\"`);\n                        this.updateScheduleList();\n                    } else {\n                        alert(importResult.error || 'Failed to import schedule. Please check the file format.');\n                    }\n                };\n                reader.readAsText(file);\n            }\n        };\n        \n        input.click();\n        this.closeDropdown();\n    }\n\n    private downloadJSON(data: string, filename: string): void {\n        const blob = new Blob([data], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    }\n\n    private startRenaming(nameElement: HTMLElement): void {\n        const originalName = nameElement.getAttribute('data-original-name') || nameElement.textContent || '';\n        const scheduleId = nameElement.closest('.schedule-item')?.getAttribute('data-schedule-id');\n        if (!scheduleId) return;\n\n        const input = document.createElement('input');\n        input.type = 'text';\n        input.value = originalName;\n        input.className = 'schedule-name-input';\n\n        const finishRename = () => {\n            const newName = input.value.trim();\n            if (newName && newName !== originalName) {\n                this.scheduleManagementService.renameSchedule(scheduleId, newName);\n            }\n            nameElement.textContent = newName || originalName;\n            nameElement.setAttribute('data-original-name', newName || originalName);\n            nameElement.style.display = 'block';\n            input.remove();\n        };\n\n        input.addEventListener('blur', finishRename);\n        input.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter') {\n                input.blur();\n            } else if (e.key === 'Escape') {\n                input.value = originalName;\n                input.blur();\n            }\n        });\n\n        nameElement.style.display = 'none';\n        nameElement.parentNode?.insertBefore(input, nameElement.nextSibling);\n        input.focus();\n        input.select();\n    }\n\n    public refresh(): void {\n        this.currentActiveSchedule = this.scheduleManagementService.getActiveSchedule();\n        this.updateDisplay();\n        this.refreshScheduleList();\n    }\n\n    public refreshScheduleList(): void {\n        // Always update the schedule list, regardless of dropdown state\n        // This ensures the list is current when the dropdown is opened\n        try {\n            this.updateScheduleList();\n        } catch (error) {\n            console.error('Error refreshing schedule list:', error);\n        }\n    }\n\n    private setLoadingState(loading: boolean): void {\n        const trigger = this.container.querySelector('#schedule-selector-trigger') as HTMLElement;\n        const activeScheduleName = this.container.querySelector('#active-schedule-name') as HTMLElement;\n        \n        if (trigger && activeScheduleName) {\n            if (loading) {\n                trigger.style.opacity = '0.6';\n                trigger.style.pointerEvents = 'none';\n                activeScheduleName.textContent = 'Switching...';\n            } else {\n                trigger.style.opacity = '1';\n                trigger.style.pointerEvents = 'auto';\n                this.updateDisplay();\n            }\n        }\n    }\n}","import { Schedule, UserScheduleState, SchedulePreferences, SelectedCourse } from '../types/schedule'\nimport { Course, Section, Department } from '../types/types'\n\nexport interface ValidationResult {\n    valid: boolean;\n    errors: ValidationError[];\n    warnings: ValidationWarning[];\n}\n\nexport interface ValidationError {\n    field: string;\n    message: string;\n    severity: 'error' | 'critical';\n    code: string;\n}\n\nexport interface ValidationWarning {\n    field: string;\n    message: string;\n    suggestion?: string;\n}\n\nexport interface SchemaValidationOptions {\n    allowPartialData?: boolean;\n    strict?: boolean;\n    repairInPlace?: boolean;\n}\n\nexport class DataValidator {\n    private static readonly CURRENT_SCHEMA_VERSION = '2.0';\n    \n    // Schema validation for core data types\n    validateSchedule(schedule: any, options: SchemaValidationOptions = {}): ValidationResult {\n        const result: ValidationResult = { valid: true, errors: [], warnings: [] };\n\n        if (!schedule || typeof schedule !== 'object') {\n            result.errors.push({\n                field: 'schedule',\n                message: 'Schedule must be an object',\n                severity: 'critical',\n                code: 'INVALID_TYPE'\n            });\n            result.valid = false;\n            return result;\n        }\n\n        // Validate required fields\n        this.validateRequiredField(schedule, 'id', 'string', result);\n        this.validateRequiredField(schedule, 'name', 'string', result);\n        \n        // Validate arrays\n        if (!Array.isArray(schedule.selectedCourses)) {\n            result.errors.push({\n                field: 'schedule.selectedCourses',\n                message: 'selectedCourses must be an array',\n                severity: 'error',\n                code: 'INVALID_ARRAY'\n            });\n            result.valid = false;\n        } else {\n            // Validate each selected course\n            schedule.selectedCourses.forEach((course: any, index: number) => {\n                const courseValidation = this.validateSelectedCourse(course, { ...options, allowPartialData: true });\n                if (!courseValidation.valid) {\n                    courseValidation.errors.forEach(error => {\n                        result.errors.push({\n                            ...error,\n                            field: `schedule.selectedCourses[${index}].${error.field}`\n                        });\n                    });\n                    result.valid = false;\n                }\n                result.warnings.push(...courseValidation.warnings);\n            });\n        }\n\n        if (!Array.isArray(schedule.generatedSchedules)) {\n            result.errors.push({\n                field: 'schedule.generatedSchedules',\n                message: 'generatedSchedules must be an array',\n                severity: 'error',\n                code: 'INVALID_ARRAY'\n            });\n            result.valid = false;\n        }\n\n        // Auto-repair missing fields if requested\n        if (options.repairInPlace && result.valid) {\n            this.repairSchedule(schedule);\n        }\n\n        return result;\n    }\n\n    validateSelectedCourse(selectedCourse: any, options: SchemaValidationOptions = {}): ValidationResult {\n        const result: ValidationResult = { valid: true, errors: [], warnings: [] };\n\n        if (!selectedCourse || typeof selectedCourse !== 'object') {\n            result.errors.push({\n                field: 'selectedCourse',\n                message: 'SelectedCourse must be an object',\n                severity: 'critical',\n                code: 'INVALID_TYPE'\n            });\n            result.valid = false;\n            return result;\n        }\n\n        // Validate course object\n        if (!selectedCourse.course) {\n            result.errors.push({\n                field: 'course',\n                message: 'Course is required',\n                severity: 'critical',\n                code: 'MISSING_REQUIRED'\n            });\n            result.valid = false;\n        } else {\n            const courseValidation = this.validateCourse(selectedCourse.course, options);\n            if (!courseValidation.valid) {\n                courseValidation.errors.forEach(error => {\n                    result.errors.push({\n                        ...error,\n                        field: `course.${error.field}`\n                    });\n                });\n                result.valid = false;\n            }\n            result.warnings.push(...courseValidation.warnings);\n        }\n\n        // Validate isRequired field\n        if (typeof selectedCourse.isRequired !== 'boolean') {\n            if (options.repairInPlace) {\n                selectedCourse.isRequired = false;\n                result.warnings.push({\n                    field: 'isRequired',\n                    message: 'isRequired should be boolean, defaulted to false'\n                });\n            } else {\n                result.errors.push({\n                    field: 'isRequired',\n                    message: 'isRequired must be a boolean',\n                    severity: 'error',\n                    code: 'INVALID_TYPE'\n                });\n                result.valid = false;\n            }\n        }\n\n        // Validate section selection consistency\n        const hasSelectedSection = selectedCourse.selectedSection !== null;\n        const hasSelectedSectionNumber = selectedCourse.selectedSectionNumber !== null;\n\n        if (hasSelectedSection !== hasSelectedSectionNumber) {\n            result.warnings.push({\n                field: 'selectedSection',\n                message: 'selectedSection and selectedSectionNumber should be consistent',\n                suggestion: 'Consider reconstructing section objects after data load'\n            });\n        }\n\n        // Validate section number format if present\n        if (selectedCourse.selectedSectionNumber && typeof selectedCourse.selectedSectionNumber !== 'string') {\n            result.errors.push({\n                field: 'selectedSectionNumber',\n                message: 'selectedSectionNumber must be a string or null',\n                severity: 'error',\n                code: 'INVALID_TYPE'\n            });\n            result.valid = false;\n        }\n\n        return result;\n    }\n\n    validateCourse(course: any, options: SchemaValidationOptions = {}): ValidationResult {\n        const result: ValidationResult = { valid: true, errors: [], warnings: [] };\n\n        if (!course || typeof course !== 'object') {\n            result.errors.push({\n                field: 'course',\n                message: 'Course must be an object',\n                severity: 'critical',\n                code: 'INVALID_TYPE'\n            });\n            result.valid = false;\n            return result;\n        }\n\n        // Validate required fields\n        this.validateRequiredField(course, 'id', 'string', result);\n        this.validateRequiredField(course, 'number', 'string', result);\n        this.validateRequiredField(course, 'name', 'string', result);\n\n        // Validate credits (should be number)\n        if (course.credits !== undefined && (typeof course.credits !== 'number' || course.credits < 0)) {\n            result.errors.push({\n                field: 'credits',\n                message: 'Credits must be a non-negative number',\n                severity: 'error',\n                code: 'INVALID_CREDITS'\n            });\n            result.valid = false;\n        }\n\n        // Validate department\n        if (!course.department || typeof course.department !== 'object') {\n            result.errors.push({\n                field: 'department',\n                message: 'Department must be an object',\n                severity: 'error',\n                code: 'MISSING_DEPARTMENT'\n            });\n            result.valid = false;\n        } else {\n            const deptValidation = this.validateDepartment(course.department, options);\n            if (!deptValidation.valid) {\n                deptValidation.errors.forEach(error => {\n                    result.errors.push({\n                        ...error,\n                        field: `department.${error.field}`\n                    });\n                });\n                result.valid = false;\n            }\n        }\n\n        // Validate sections array\n        if (!Array.isArray(course.sections)) {\n            result.errors.push({\n                field: 'sections',\n                message: 'Sections must be an array',\n                severity: 'error',\n                code: 'INVALID_ARRAY'\n            });\n            result.valid = false;\n        } else if (course.sections.length === 0) {\n            result.warnings.push({\n                field: 'sections',\n                message: 'Course has no sections',\n                suggestion: 'Verify course data is complete'\n            });\n        }\n\n        return result;\n    }\n\n    validateDepartment(department: any, options: SchemaValidationOptions = {}): ValidationResult {\n        const result: ValidationResult = { valid: true, errors: [], warnings: [] };\n\n        if (!department || typeof department !== 'object') {\n            result.errors.push({\n                field: 'department',\n                message: 'Department must be an object',\n                severity: 'critical',\n                code: 'INVALID_TYPE'\n            });\n            result.valid = false;\n            return result;\n        }\n\n        this.validateRequiredField(department, 'abbreviation', 'string', result);\n        this.validateRequiredField(department, 'name', 'string', result);\n\n        // Validate abbreviation format (should be uppercase letters)\n        if (department.abbreviation && !/^[A-Z]{2,6}$/.test(department.abbreviation)) {\n            result.warnings.push({\n                field: 'abbreviation',\n                message: 'Department abbreviation should be 2-6 uppercase letters',\n                suggestion: 'Consider normalizing department abbreviations'\n            });\n        }\n\n        return result;\n    }\n\n    validateSchedulePreferences(preferences: any, options: SchemaValidationOptions = {}): ValidationResult {\n        const result: ValidationResult = { valid: true, errors: [], warnings: [] };\n\n        if (!preferences || typeof preferences !== 'object') {\n            result.errors.push({\n                field: 'preferences',\n                message: 'Preferences must be an object',\n                severity: 'critical',\n                code: 'INVALID_TYPE'\n            });\n            result.valid = false;\n            return result;\n        }\n\n        // Validate preferredTimeRange\n        if (preferences.preferredTimeRange) {\n            const timeRange = preferences.preferredTimeRange;\n            \n            if (!timeRange.startTime || !timeRange.endTime) {\n                result.errors.push({\n                    field: 'preferredTimeRange',\n                    message: 'Time range must have startTime and endTime',\n                    severity: 'error',\n                    code: 'MISSING_TIME_RANGE'\n                });\n                result.valid = false;\n            } else {\n                // Validate time format\n                if (!this.isValidTimeObject(timeRange.startTime) || !this.isValidTimeObject(timeRange.endTime)) {\n                    result.errors.push({\n                        field: 'preferredTimeRange',\n                        message: 'Time objects must have valid hours and minutes',\n                        severity: 'error',\n                        code: 'INVALID_TIME_FORMAT'\n                    });\n                    result.valid = false;\n                }\n                \n                // Check logical time ordering\n                if (this.timeToMinutes(timeRange.startTime) >= this.timeToMinutes(timeRange.endTime)) {\n                    result.errors.push({\n                        field: 'preferredTimeRange',\n                        message: 'Start time must be before end time',\n                        severity: 'error',\n                        code: 'INVALID_TIME_ORDER'\n                    });\n                    result.valid = false;\n                }\n            }\n        }\n\n        // Validate preferredDays\n        if (preferences.preferredDays) {\n            if (!(preferences.preferredDays instanceof Set)) {\n                // Try to convert if it's an array\n                if (Array.isArray(preferences.preferredDays)) {\n                    if (options.repairInPlace) {\n                        preferences.preferredDays = new Set(preferences.preferredDays);\n                        result.warnings.push({\n                            field: 'preferredDays',\n                            message: 'Converted preferredDays array to Set'\n                        });\n                    } else {\n                        result.errors.push({\n                            field: 'preferredDays',\n                            message: 'preferredDays must be a Set',\n                            severity: 'error',\n                            code: 'INVALID_SET'\n                        });\n                        result.valid = false;\n                    }\n                }\n            }\n\n            if (preferences.preferredDays instanceof Set) {\n                const validDays = new Set(['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']);\n                for (const day of preferences.preferredDays) {\n                    if (!validDays.has(day)) {\n                        result.warnings.push({\n                            field: 'preferredDays',\n                            message: `Unknown day: ${day}`,\n                            suggestion: 'Valid days are: mon, tue, wed, thu, fri, sat, sun'\n                        });\n                    }\n                }\n            }\n        }\n\n        // Validate boolean fields\n        if (preferences.avoidBackToBackClasses !== undefined && typeof preferences.avoidBackToBackClasses !== 'boolean') {\n            if (options.repairInPlace) {\n                preferences.avoidBackToBackClasses = Boolean(preferences.avoidBackToBackClasses);\n                result.warnings.push({\n                    field: 'avoidBackToBackClasses',\n                    message: 'Converted avoidBackToBackClasses to boolean'\n                });\n            } else {\n                result.errors.push({\n                    field: 'avoidBackToBackClasses',\n                    message: 'avoidBackToBackClasses must be a boolean',\n                    severity: 'error',\n                    code: 'INVALID_TYPE'\n                });\n                result.valid = false;\n            }\n        }\n\n        return result;\n    }\n\n    validateUserScheduleState(userState: any, options: SchemaValidationOptions = {}): ValidationResult {\n        const result: ValidationResult = { valid: true, errors: [], warnings: [] };\n\n        if (!userState || typeof userState !== 'object') {\n            result.errors.push({\n                field: 'userState',\n                message: 'UserScheduleState must be an object',\n                severity: 'critical',\n                code: 'INVALID_TYPE'\n            });\n            result.valid = false;\n            return result;\n        }\n\n        // Validate savedSchedules\n        if (!Array.isArray(userState.savedSchedules)) {\n            result.errors.push({\n                field: 'savedSchedules',\n                message: 'savedSchedules must be an array',\n                severity: 'error',\n                code: 'INVALID_ARRAY'\n            });\n            result.valid = false;\n        } else {\n            userState.savedSchedules.forEach((schedule: any, index: number) => {\n                const scheduleValidation = this.validateSchedule(schedule, options);\n                if (!scheduleValidation.valid) {\n                    scheduleValidation.errors.forEach(error => {\n                        result.errors.push({\n                            ...error,\n                            field: `savedSchedules[${index}].${error.field}`\n                        });\n                    });\n                    result.valid = false;\n                }\n                result.warnings.push(...scheduleValidation.warnings);\n            });\n        }\n\n        // Validate preferences\n        if (userState.preferences) {\n            const preferencesValidation = this.validateSchedulePreferences(userState.preferences, options);\n            if (!preferencesValidation.valid) {\n                preferencesValidation.errors.forEach(error => {\n                    result.errors.push({\n                        ...error,\n                        field: `preferences.${error.field}`\n                    });\n                });\n                result.valid = false;\n            }\n            result.warnings.push(...preferencesValidation.warnings);\n        }\n\n        return result;\n    }\n\n    // Data integrity checks\n    checkDataIntegrity(data: { schedules?: Schedule[], selectedCourses?: SelectedCourse[], activeScheduleId?: string | null }): ValidationResult {\n        const result: ValidationResult = { valid: true, errors: [], warnings: [] };\n\n        if (!data.schedules || !data.selectedCourses) {\n            return result; // Can't check integrity without both pieces\n        }\n\n        // Check if active schedule ID references a valid schedule\n        if (data.activeScheduleId) {\n            const activeScheduleExists = data.schedules.some(s => s.id === data.activeScheduleId);\n            if (!activeScheduleExists) {\n                result.errors.push({\n                    field: 'activeScheduleId',\n                    message: 'Active schedule ID references non-existent schedule',\n                    severity: 'error',\n                    code: 'DANGLING_REFERENCE'\n                });\n                result.valid = false;\n            }\n        }\n\n        // Check for duplicate schedule IDs\n        const scheduleIds = data.schedules.map(s => s.id);\n        const duplicateIds = scheduleIds.filter((id, index) => scheduleIds.indexOf(id) !== index);\n        if (duplicateIds.length > 0) {\n            result.errors.push({\n                field: 'schedules',\n                message: `Duplicate schedule IDs found: ${duplicateIds.join(', ')}`,\n                severity: 'critical',\n                code: 'DUPLICATE_IDS'\n            });\n            result.valid = false;\n        }\n\n        // Check for orphaned selected courses (courses not in any schedule)\n        const allScheduleCourses = new Set();\n        data.schedules.forEach(schedule => {\n            schedule.selectedCourses.forEach(sc => {\n                allScheduleCourses.add(sc.course.id);\n            });\n        });\n\n        const orphanedCourses = data.selectedCourses.filter(sc => !allScheduleCourses.has(sc.course.id));\n        if (orphanedCourses.length > 0) {\n            result.warnings.push({\n                field: 'selectedCourses',\n                message: `${orphanedCourses.length} selected courses are not in any schedule`,\n                suggestion: 'Consider cleaning up orphaned course selections'\n            });\n        }\n\n        return result;\n    }\n\n    // Repair functions\n    repairSchedule(schedule: Schedule): void {\n        // Ensure generatedSchedules is an array\n        if (!Array.isArray(schedule.generatedSchedules)) {\n            schedule.generatedSchedules = [];\n        }\n\n        // Ensure selectedCourses is an array\n        if (!Array.isArray(schedule.selectedCourses)) {\n            schedule.selectedCourses = [];\n        }\n\n        // Repair each selected course\n        schedule.selectedCourses.forEach(selectedCourse => {\n            this.repairSelectedCourse(selectedCourse);\n        });\n    }\n\n    repairSelectedCourse(selectedCourse: SelectedCourse): void {\n        // Ensure isRequired is boolean\n        if (typeof selectedCourse.isRequired !== 'boolean') {\n            selectedCourse.isRequired = false;\n        }\n\n        // Ensure section consistency\n        if (selectedCourse.selectedSectionNumber && !selectedCourse.selectedSection) {\n            // Try to find the section object\n            const section = selectedCourse.course.sections?.find(s => s.number === selectedCourse.selectedSectionNumber);\n            selectedCourse.selectedSection = section || null;\n        }\n\n        if (selectedCourse.selectedSection && !selectedCourse.selectedSectionNumber) {\n            selectedCourse.selectedSectionNumber = selectedCourse.selectedSection.number;\n        }\n    }\n\n    // Schema migration utilities\n    detectSchemaVersion(data: any): string {\n        if (data.version) return data.version;\n        \n        // Try to detect version based on data structure\n        if (data.selectedCourses && Array.isArray(data.selectedCourses)) {\n            // Check if selectedCourses has both selectedSection and selectedSectionNumber\n            const hasModernStructure = data.selectedCourses.some((sc: any) => \n                sc.hasOwnProperty('selectedSection') && sc.hasOwnProperty('selectedSectionNumber')\n            );\n            if (hasModernStructure) return '2.0';\n        }\n\n        return '1.0'; // Default to oldest version\n    }\n\n    // Helper methods\n    private validateRequiredField(obj: any, field: string, expectedType: string, result: ValidationResult): void {\n        if (obj[field] === undefined || obj[field] === null) {\n            result.errors.push({\n                field,\n                message: `${field} is required`,\n                severity: 'error',\n                code: 'MISSING_REQUIRED'\n            });\n            result.valid = false;\n        } else if (typeof obj[field] !== expectedType) {\n            result.errors.push({\n                field,\n                message: `${field} must be a ${expectedType}`,\n                severity: 'error',\n                code: 'INVALID_TYPE'\n            });\n            result.valid = false;\n        }\n    }\n\n    private isValidTimeObject(time: any): boolean {\n        return time && \n               typeof time === 'object' &&\n               typeof time.hours === 'number' &&\n               typeof time.minutes === 'number' &&\n               time.hours >= 0 && time.hours < 24 &&\n               time.minutes >= 0 && time.minutes < 60;\n    }\n\n    private timeToMinutes(time: { hours: number; minutes: number }): number {\n        return time.hours * 60 + time.minutes;\n    }\n\n    // Batch validation for multiple items\n    validateBatch<T>(\n        items: T[], \n        validator: (item: T, options?: SchemaValidationOptions) => ValidationResult,\n        options: SchemaValidationOptions = {}\n    ): ValidationResult {\n        const result: ValidationResult = { valid: true, errors: [], warnings: [] };\n\n        items.forEach((item, index) => {\n            const itemResult = validator(item, options);\n            if (!itemResult.valid) {\n                itemResult.errors.forEach(error => {\n                    result.errors.push({\n                        ...error,\n                        field: `[${index}].${error.field}`\n                    });\n                });\n                result.valid = false;\n            }\n            result.warnings.push(...itemResult.warnings.map(warning => ({\n                ...warning,\n                field: `[${index}].${warning.field}`\n            })));\n        });\n\n        return result;\n    }\n}","export interface RetryConfig {\n    maxAttempts: number;\n    baseDelay: number;\n    maxDelay: number;\n    exponentialBackoff: boolean;\n    jitter: boolean;\n    retryCondition?: (error: Error, attempt: number) => boolean;\n}\n\nexport interface RetryResult<T> {\n    success: boolean;\n    result?: T;\n    error?: Error;\n    attempts: number;\n    totalTime: number;\n    lastAttemptTime: number;\n}\n\nexport interface RetryOptions {\n    operationName?: string;\n    timeout?: number;\n    maxAttempts?: number;\n    onRetry?: (attempt: number, error: Error, nextDelay: number) => void;\n    onSuccess?: (result: any, attempts: number) => void;\n    onFinalFailure?: (error: Error, attempts: number) => void;\n}\n\nexport class RetryManager {\n    private static readonly DEFAULT_CONFIG: RetryConfig = {\n        maxAttempts: 3,\n        baseDelay: 1000, // 1 second\n        maxDelay: 10000, // 10 seconds\n        exponentialBackoff: true,\n        jitter: true,\n        retryCondition: (error: Error) => {\n            // Retry on transient errors\n            return error.name === 'QuotaExceededError' ||\n                   error.name === 'DataCloneError' ||\n                   error.message.includes('localStorage') ||\n                   error.message.includes('transaction') ||\n                   error.message.includes('network') ||\n                   error.message.includes('timeout');\n        }\n    };\n\n    constructor(private config: RetryConfig = RetryManager.DEFAULT_CONFIG) {\n        this.config = { ...RetryManager.DEFAULT_CONFIG, ...config };\n    }\n\n    async executeWithRetry<T>(\n        operation: () => Promise<T> | T,\n        options: RetryOptions = {}\n    ): Promise<RetryResult<T>> {\n        const startTime = Date.now();\n        let lastError: Error | undefined;\n        let attempt = 0;\n\n        const operationName = options.operationName || 'anonymous operation';\n\n        while (attempt < this.config.maxAttempts) {\n            attempt++;\n            const attemptStartTime = Date.now();\n\n            try {\n                // Apply timeout if specified\n                const result = options.timeout \n                    ? await this.withTimeout(operation, options.timeout)\n                    : await Promise.resolve(operation());\n\n                const totalTime = Date.now() - startTime;\n                \n                if (options.onSuccess) {\n                    try {\n                        options.onSuccess(result, attempt);\n                    } catch (callbackError) {\n                        console.warn('Error in onSuccess callback:', callbackError);\n                    }\n                }\n\n\n                return {\n                    success: true,\n                    result,\n                    attempts: attempt,\n                    totalTime,\n                    lastAttemptTime: Date.now() - attemptStartTime\n                };\n\n            } catch (error) {\n                const errorObj = error instanceof Error ? error : new Error(String(error));\n                lastError = errorObj;\n\n                console.warn(`❌ ${operationName} failed on attempt ${attempt}/${this.config.maxAttempts}:`, errorObj.message);\n\n                // Check if we should retry this error\n                const shouldRetry = this.shouldRetry(errorObj, attempt);\n                \n                if (!shouldRetry || attempt >= this.config.maxAttempts) {\n                    break;\n                }\n\n                // Calculate delay for next attempt\n                const delay = this.calculateDelay(attempt);\n                \n                if (options.onRetry) {\n                    try {\n                        options.onRetry(attempt, errorObj, delay);\n                    } catch (callbackError) {\n                        console.warn('Error in onRetry callback:', callbackError);\n                    }\n                }\n\n                console.log(`🔄 Retrying ${operationName} in ${delay}ms (attempt ${attempt + 1}/${this.config.maxAttempts})`);\n                \n                // Wait before next attempt\n                await this.delay(delay);\n            }\n        }\n\n        const totalTime = Date.now() - startTime;\n        \n        if (options.onFinalFailure && lastError) {\n            try {\n                options.onFinalFailure(lastError, attempt);\n            } catch (callbackError) {\n                console.warn('Error in onFinalFailure callback:', callbackError);\n            }\n        }\n\n        console.error(`💥 ${operationName} failed after ${attempt} attempts over ${totalTime}ms`);\n\n        return {\n            success: false,\n            error: lastError,\n            attempts: attempt,\n            totalTime,\n            lastAttemptTime: 0\n        };\n    }\n\n    // Specialized retry methods for common patterns\n    async retryStorageOperation<T>(\n        operation: () => T,\n        options: RetryOptions = {}\n    ): Promise<RetryResult<T>> {\n        const storageConfig: RetryConfig = {\n            ...this.config,\n            maxAttempts: 3,\n            baseDelay: 500,\n            retryCondition: (error: Error) => {\n                return error.name === 'QuotaExceededError' ||\n                       error.name === 'SecurityError' ||\n                       error.message.includes('localStorage') ||\n                       error.message.includes('storage');\n            }\n        };\n\n        const tempManager = new RetryManager(storageConfig);\n        return tempManager.executeWithRetry(operation, {\n            operationName: 'storage operation',\n            ...options\n        });\n    }\n\n    async retryNetworkOperation<T>(\n        operation: () => Promise<T>,\n        options: RetryOptions = {}\n    ): Promise<RetryResult<T>> {\n        const networkConfig: RetryConfig = {\n            ...this.config,\n            maxAttempts: 5,\n            baseDelay: 1000,\n            maxDelay: 30000,\n            retryCondition: (error: Error) => {\n                return error.name === 'NetworkError' ||\n                       error.name === 'TimeoutError' ||\n                       error.message.includes('fetch') ||\n                       error.message.includes('network') ||\n                       error.message.includes('timeout');\n            }\n        };\n\n        const tempManager = new RetryManager(networkConfig);\n        return tempManager.executeWithRetry(operation, {\n            operationName: 'network operation',\n            timeout: 30000, // 30 second timeout\n            ...options\n        });\n    }\n\n    async retryTransactionOperation<T>(\n        operation: () => T,\n        options: RetryOptions = {}\n    ): Promise<RetryResult<T>> {\n        const transactionConfig: RetryConfig = {\n            ...this.config,\n            maxAttempts: 2, // Transactions should be quick to retry\n            baseDelay: 100,\n            maxDelay: 1000,\n            exponentialBackoff: false,\n            retryCondition: (error: Error) => {\n                return error.message.includes('transaction') ||\n                       error.message.includes('conflict') ||\n                       error.message.includes('integrity');\n            }\n        };\n\n        const tempManager = new RetryManager(transactionConfig);\n        return tempManager.executeWithRetry(operation, {\n            operationName: 'transaction operation',\n            ...options\n        });\n    }\n\n    // Circuit breaker pattern for frequently failing operations\n    createCircuitBreaker<T>(\n        operation: () => Promise<T> | T,\n        options: {\n            failureThreshold: number;\n            recoveryTimeout: number;\n            operationName?: string;\n        }\n    ): () => Promise<RetryResult<T>> {\n        let failureCount = 0;\n        let lastFailureTime = 0;\n        let isCircuitOpen = false;\n\n        const { failureThreshold, recoveryTimeout, operationName = 'circuit breaker operation' } = options;\n\n        return async (): Promise<RetryResult<T>> => {\n            const now = Date.now();\n\n            // Check if circuit should be closed (recovered)\n            if (isCircuitOpen && (now - lastFailureTime) > recoveryTimeout) {\n                console.log(`🔄 Circuit breaker for ${operationName} attempting recovery`);\n                isCircuitOpen = false;\n                failureCount = 0;\n            }\n\n            // If circuit is open, fail fast\n            if (isCircuitOpen) {\n                console.warn(`⚡ Circuit breaker for ${operationName} is OPEN - failing fast`);\n                return {\n                    success: false,\n                    error: new Error(`Circuit breaker is open for ${operationName}`),\n                    attempts: 0,\n                    totalTime: 0,\n                    lastAttemptTime: 0\n                };\n            }\n\n            // Execute the operation with retry\n            const result = await this.executeWithRetry(operation, {\n                operationName,\n                onFinalFailure: () => {\n                    failureCount++;\n                    lastFailureTime = now;\n                    \n                    if (failureCount >= failureThreshold) {\n                        isCircuitOpen = true;\n                        console.warn(`⚡ Circuit breaker for ${operationName} is now OPEN after ${failureCount} failures`);\n                    }\n                },\n                onSuccess: () => {\n                    // Reset failure count on success\n                    if (failureCount > 0) {\n                        console.log(`✅ Circuit breaker for ${operationName} reset after successful operation`);\n                        failureCount = 0;\n                    }\n                }\n            });\n\n            return result;\n        };\n    }\n\n    // Utility methods for batch operations with retry\n    async retryBatch<T, R>(\n        items: T[],\n        operation: (item: T, index: number) => Promise<R> | R,\n        options: {\n            maxConcurrency?: number;\n            stopOnFirstFailure?: boolean;\n            operationName?: string;\n        } & RetryOptions = {}\n    ): Promise<{ results: (R | Error)[], totalAttempts: number, successCount: number }> {\n        const { maxConcurrency = 5, stopOnFirstFailure = false } = options;\n        const results: (R | Error)[] = [];\n        let totalAttempts = 0;\n        let successCount = 0;\n\n        // Process in chunks if max concurrency is set\n        for (let i = 0; i < items.length; i += maxConcurrency) {\n            const chunk = items.slice(i, i + maxConcurrency);\n            \n            const chunkPromises = chunk.map(async (item, chunkIndex) => {\n                const index = i + chunkIndex;\n                const result = await this.executeWithRetry(\n                    () => operation(item, index),\n                    {\n                        ...options,\n                        operationName: `${options.operationName || 'batch operation'} [${index}]`\n                    }\n                );\n\n                totalAttempts += result.attempts;\n\n                if (result.success && result.result !== undefined) {\n                    successCount++;\n                    return result.result;\n                } else {\n                    const error = result.error || new Error('Unknown error');\n                    if (stopOnFirstFailure) {\n                        throw error;\n                    }\n                    return error;\n                }\n            });\n\n            try {\n                const chunkResults = await Promise.all(chunkPromises);\n                results.push(...chunkResults);\n            } catch (error) {\n                if (stopOnFirstFailure) {\n                    results.push(error as Error);\n                    break;\n                }\n            }\n        }\n\n        return { results, totalAttempts, successCount };\n    }\n\n    // Health check with retry\n    async healthCheck(\n        checks: Array<{ name: string; check: () => Promise<boolean> | boolean }>,\n        options: RetryOptions = {}\n    ): Promise<{ healthy: boolean; results: Array<{ name: string; healthy: boolean; error?: Error }> }> {\n        const results: Array<{ name: string; healthy: boolean; error?: Error }> = [];\n        let overallHealthy = true;\n\n        for (const { name, check } of checks) {\n            const result = await this.executeWithRetry(\n                async () => {\n                    const isHealthy = await Promise.resolve(check());\n                    if (!isHealthy) {\n                        throw new Error(`Health check failed: ${name}`);\n                    }\n                    return true;\n                },\n                {\n                    ...options,\n                    operationName: `health check: ${name}`,\n                    maxAttempts: 2 // Quick health checks\n                }\n            );\n\n            if (result.success) {\n                results.push({ name, healthy: true });\n            } else {\n                results.push({ name, healthy: false, error: result.error });\n                overallHealthy = false;\n            }\n        }\n\n        return { healthy: overallHealthy, results };\n    }\n\n    // Private helper methods\n    private shouldRetry(error: Error, attempt: number): boolean {\n        if (this.config.retryCondition) {\n            return this.config.retryCondition(error, attempt);\n        }\n        return true; // Default to retry\n    }\n\n    private calculateDelay(attempt: number): number {\n        let delay = this.config.baseDelay;\n\n        if (this.config.exponentialBackoff) {\n            delay = Math.min(\n                this.config.baseDelay * Math.pow(2, attempt - 1),\n                this.config.maxDelay\n            );\n        }\n\n        if (this.config.jitter) {\n            // Add random jitter (±25%)\n            const jitterAmount = delay * 0.25;\n            delay += (Math.random() - 0.5) * jitterAmount * 2;\n        }\n\n        return Math.max(0, Math.floor(delay));\n    }\n\n    private async delay(ms: number): Promise<void> {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    private async withTimeout<T>(operation: () => Promise<T> | T, timeoutMs: number): Promise<T> {\n        return new Promise<T>(async (resolve, reject) => {\n            const timeoutId = setTimeout(() => {\n                reject(new Error(`Operation timed out after ${timeoutMs}ms`));\n            }, timeoutMs);\n\n            try {\n                const result = await Promise.resolve(operation());\n                clearTimeout(timeoutId);\n                resolve(result);\n            } catch (error) {\n                clearTimeout(timeoutId);\n                reject(error);\n            }\n        });\n    }\n\n    // Configuration management\n    updateConfig(updates: Partial<RetryConfig>): void {\n        this.config = { ...this.config, ...updates };\n    }\n\n    getConfig(): Readonly<RetryConfig> {\n        return { ...this.config };\n    }\n\n    // Static utility methods\n    static async withRetry<T>(\n        operation: () => Promise<T> | T,\n        config?: Partial<RetryConfig>,\n        options?: RetryOptions\n    ): Promise<RetryResult<T>> {\n        const manager = new RetryManager(config ? { ...RetryManager.DEFAULT_CONFIG, ...config } : RetryManager.DEFAULT_CONFIG);\n        return manager.executeWithRetry(operation, options);\n    }\n\n    static createStorageRetryManager(): RetryManager {\n        return new RetryManager({\n            maxAttempts: 3,\n            baseDelay: 500,\n            maxDelay: 5000,\n            exponentialBackoff: true,\n            jitter: true,\n            retryCondition: (error: Error) => {\n                return error.name === 'QuotaExceededError' ||\n                       error.name === 'SecurityError' ||\n                       error.message.includes('localStorage');\n            }\n        });\n    }\n\n    static createNetworkRetryManager(): RetryManager {\n        return new RetryManager({\n            maxAttempts: 5,\n            baseDelay: 1000,\n            maxDelay: 30000,\n            exponentialBackoff: true,\n            jitter: true,\n            retryCondition: (error: Error) => {\n                return error.name === 'NetworkError' ||\n                       error.name === 'TimeoutError' ||\n                       error.message.includes('fetch');\n            }\n        });\n    }\n}","import { Schedule, UserScheduleState, SchedulePreferences, SelectedCourse } from '../types/schedule'\nimport { Course, Section, Department } from '../types/types'\nimport { DataValidator, ValidationResult } from './DataValidator'\nimport { TransactionalStorageManager, TransactionResult } from './TransactionalStorageManager'\nimport { RetryManager } from './RetryManager'\n\nexport interface MigrationResult {\n    success: boolean;\n    fromVersion: string;\n    toVersion: string;\n    migratedData?: any;\n    backupCreated: boolean;\n    errors: string[];\n    warnings: string[];\n    itemsChanged: number;\n}\n\nexport interface MigrationStep {\n    fromVersion: string;\n    toVersion: string;\n    description: string;\n    migrate: (data: any) => Promise<any> | any;\n    validate?: (data: any) => ValidationResult;\n    rollback?: (originalData: any, migratedData: any) => any;\n}\n\nexport interface BackupInfo {\n    version: string;\n    timestamp: string;\n    dataChecksum: string;\n    migrationId: string;\n}\n\nexport class ProfileMigrationService {\n    private static readonly CURRENT_VERSION = '2.0';\n    private static readonly BACKUP_KEY_PREFIX = 'wpi-planner-backup';\n    private static readonly MIGRATION_LOG_KEY = 'wpi-planner-migration-log';\n    \n    private migrationSteps: MigrationStep[] = [];\n    private dataValidator: DataValidator;\n    private storageManager: TransactionalStorageManager;\n    private retryManager: RetryManager;\n\n    constructor(\n        dataValidator?: DataValidator,\n        storageManager?: TransactionalStorageManager,\n        retryManager?: RetryManager\n    ) {\n        this.dataValidator = dataValidator || new DataValidator();\n        this.storageManager = storageManager || new TransactionalStorageManager();\n        this.retryManager = retryManager || RetryManager.createStorageRetryManager();\n        \n        this.initializeMigrationSteps();\n    }\n\n    async migrateToLatest(data: any): Promise<MigrationResult> {\n        const currentVersion = this.detectDataVersion(data);\n        \n        if (currentVersion === ProfileMigrationService.CURRENT_VERSION) {\n            return {\n                success: true,\n                fromVersion: currentVersion,\n                toVersion: ProfileMigrationService.CURRENT_VERSION,\n                backupCreated: false,\n                errors: [],\n                warnings: ['Data is already at the latest version'],\n                itemsChanged: 0\n            };\n        }\n\n        return this.migrateFromTo(data, currentVersion, ProfileMigrationService.CURRENT_VERSION);\n    }\n\n    async migrateFromTo(data: any, fromVersion: string, toVersion: string): Promise<MigrationResult> {\n        const migrationId = this.generateMigrationId();\n        const result: MigrationResult = {\n            success: false,\n            fromVersion,\n            toVersion,\n            backupCreated: false,\n            errors: [],\n            warnings: [],\n            itemsChanged: 0\n        };\n\n        try {\n            // Create backup before migration\n            const backupResult = await this.createBackup(data, fromVersion, migrationId);\n            result.backupCreated = backupResult;\n\n            if (!backupResult) {\n                result.errors.push('Failed to create backup before migration');\n                return result;\n            }\n\n            // Find migration path\n            const migrationPath = this.findMigrationPath(fromVersion, toVersion);\n            if (migrationPath.length === 0) {\n                result.errors.push(`No migration path found from ${fromVersion} to ${toVersion}`);\n                return result;\n            }\n\n            // Execute migration steps\n            let currentData = this.deepClone(data);\n            let totalItemsChanged = 0;\n\n            for (const step of migrationPath) {\n                console.log(`🔄 Executing migration step: ${step.fromVersion} → ${step.toVersion}`);\n                console.log(`   ${step.description}`);\n\n                try {\n                    // Execute migration step with retry\n                    const migrationResult = await this.retryManager.executeWithRetry(\n                        () => step.migrate(currentData),\n                        {\n                            operationName: `migration ${step.fromVersion} → ${step.toVersion}`,\n                            onRetry: (attempt, error) => {\n                                console.warn(`Migration step failed, retrying (attempt ${attempt}):`, error.message);\n                            }\n                        }\n                    );\n\n                    if (!migrationResult.success) {\n                        throw migrationResult.error || new Error('Migration step failed');\n                    }\n\n                    currentData = migrationResult.result;\n\n                    // Validate migrated data if validator provided\n                    if (step.validate) {\n                        const validation = step.validate(currentData);\n                        if (!validation.valid) {\n                            throw new Error(`Migration validation failed: ${validation.errors.map(e => e.message).join(', ')}`);\n                        }\n                        result.warnings.push(...validation.warnings.map(w => w.message));\n                    }\n\n                    totalItemsChanged++;\n\n                } catch (error) {\n                    console.error(`Migration step ${step.fromVersion} → ${step.toVersion} failed:`, error);\n                    \n                    // Attempt rollback if available\n                    if (step.rollback) {\n                        try {\n                            console.log(`🔄 Attempting rollback for step ${step.fromVersion} → ${step.toVersion}`);\n                            currentData = step.rollback(data, currentData);\n                        } catch (rollbackError) {\n                            console.error('Rollback failed:', rollbackError);\n                            result.errors.push(`Migration failed and rollback failed: ${rollbackError}`);\n                        }\n                    }\n\n                    result.errors.push(`Migration step failed: ${error}`);\n                    \n                    // Restore from backup\n                    await this.restoreFromBackup(migrationId);\n                    return result;\n                }\n            }\n\n            // Final validation of migrated data\n            const finalValidation = this.validateMigratedData(currentData, toVersion);\n            if (!finalValidation.valid) {\n                result.errors.push(`Final validation failed: ${finalValidation.errors.map(e => e.message).join(', ')}`);\n                await this.restoreFromBackup(migrationId);\n                return result;\n            }\n\n            result.warnings.push(...finalValidation.warnings.map(w => w.message));\n\n            // Log successful migration\n            await this.logMigration({\n                migrationId,\n                fromVersion,\n                toVersion,\n                timestamp: new Date().toISOString(),\n                success: true,\n                itemsChanged: totalItemsChanged\n            });\n\n            result.success = true;\n            result.migratedData = currentData;\n            result.itemsChanged = totalItemsChanged;\n\n            console.log(`✅ Migration completed successfully from ${fromVersion} to ${toVersion}`);\n            return result;\n\n        } catch (error) {\n            console.error('Migration process failed:', error);\n            result.errors.push(`Migration process failed: ${error}`);\n            \n            if (result.backupCreated) {\n                await this.restoreFromBackup(migrationId);\n            }\n            \n            return result;\n        }\n    }\n\n    private initializeMigrationSteps(): void {\n        // Migration from 1.0 to 2.0: Add selectedSectionNumber field and improve structure\n        this.migrationSteps.push({\n            fromVersion: '1.0',\n            toVersion: '2.0',\n            description: 'Add selectedSectionNumber field and improve data structure consistency',\n            migrate: (data: any) => {\n                return this.migrate1_0To2_0(data);\n            },\n            validate: (data: any) => {\n                return this.dataValidator.validateUserScheduleState(data);\n            },\n            rollback: (originalData: any) => {\n                // Simple rollback - just return original data\n                return originalData;\n            }\n        });\n\n        // Future migration example: 2.0 to 2.1\n        this.migrationSteps.push({\n            fromVersion: '2.0',\n            toVersion: '2.1',\n            description: 'Add new preference fields and optimize storage format',\n            migrate: (data: any) => {\n                return this.migrate2_0To2_1(data);\n            },\n            validate: (data: any) => {\n                return this.dataValidator.validateUserScheduleState(data);\n            }\n        });\n    }\n\n    private migrate1_0To2_0(data: any): any {\n        console.log('🔄 Migrating from 1.0 to 2.0...');\n        let itemsChanged = 0;\n\n        const migratedData = this.deepClone(data);\n\n        // Add version field\n        migratedData.version = '2.0';\n\n        // Migrate selected courses to have both selectedSection and selectedSectionNumber\n        if (migratedData.selectedCourses && Array.isArray(migratedData.selectedCourses)) {\n            migratedData.selectedCourses.forEach((selectedCourse: any) => {\n                // Ensure isRequired field exists\n                if (selectedCourse.isRequired === undefined) {\n                    selectedCourse.isRequired = false;\n                    itemsChanged++;\n                }\n\n                // Handle selectedSection migration\n                if (selectedCourse.selectedSection) {\n                    if (typeof selectedCourse.selectedSection === 'string') {\n                        // Old format: selectedSection was just a string\n                        selectedCourse.selectedSectionNumber = selectedCourse.selectedSection;\n                        selectedCourse.selectedSection = null; // Will be reconstructed later\n                        itemsChanged++;\n                    } else if (selectedCourse.selectedSection.number) {\n                        // New format: selectedSection is an object\n                        selectedCourse.selectedSectionNumber = selectedCourse.selectedSection.number;\n                        // Keep the section object but it will be reconstructed from fresh data\n                        itemsChanged++;\n                    }\n                } else {\n                    // Ensure both fields exist\n                    selectedCourse.selectedSection = null;\n                    selectedCourse.selectedSectionNumber = null;\n                }\n            });\n        }\n\n        // Migrate schedules\n        if (migratedData.schedules && Array.isArray(migratedData.schedules)) {\n            migratedData.schedules.forEach((schedule: any) => {\n                if (schedule.selectedCourses && Array.isArray(schedule.selectedCourses)) {\n                    schedule.selectedCourses.forEach((selectedCourse: any) => {\n                        // Same migration as above for schedule courses\n                        if (selectedCourse.isRequired === undefined) {\n                            selectedCourse.isRequired = false;\n                            itemsChanged++;\n                        }\n\n                        if (selectedCourse.selectedSection) {\n                            if (typeof selectedCourse.selectedSection === 'string') {\n                                selectedCourse.selectedSectionNumber = selectedCourse.selectedSection;\n                                selectedCourse.selectedSection = null;\n                                itemsChanged++;\n                            } else if (selectedCourse.selectedSection.number) {\n                                selectedCourse.selectedSectionNumber = selectedCourse.selectedSection.number;\n                                itemsChanged++;\n                            }\n                        } else {\n                            selectedCourse.selectedSection = null;\n                            selectedCourse.selectedSectionNumber = null;\n                        }\n                    });\n                }\n            });\n        }\n\n        // Ensure preferences have default theme if missing\n        if (migratedData.preferences && !migratedData.preferences.theme) {\n            migratedData.preferences.theme = 'wpi-classic';\n            itemsChanged++;\n        }\n\n        // Ensure preferredDays is a Set\n        if (migratedData.preferences && migratedData.preferences.preferredDays) {\n            if (Array.isArray(migratedData.preferences.preferredDays)) {\n                migratedData.preferences.preferredDays = new Set(migratedData.preferences.preferredDays);\n                itemsChanged++;\n            }\n        }\n\n        console.log(`✅ Migration 1.0 → 2.0 completed, ${itemsChanged} items changed`);\n        return migratedData;\n    }\n\n    private migrate2_0To2_1(data: any): any {\n        console.log('🔄 Migrating from 2.0 to 2.1...');\n        let itemsChanged = 0;\n\n        const migratedData = this.deepClone(data);\n        migratedData.version = '2.1';\n\n        // Example future migration: add new preference fields\n        if (migratedData.preferences) {\n            if (!migratedData.preferences.preferredBuildings) {\n                migratedData.preferences.preferredBuildings = [];\n                itemsChanged++;\n            }\n            if (!migratedData.preferences.maxWalkingTime) {\n                migratedData.preferences.maxWalkingTime = 10; // minutes\n                itemsChanged++;\n            }\n        }\n\n        // Example: add metadata to schedules\n        if (migratedData.schedules && Array.isArray(migratedData.schedules)) {\n            migratedData.schedules.forEach((schedule: any) => {\n                if (!schedule.metadata) {\n                    schedule.metadata = {\n                        createdAt: new Date().toISOString(),\n                        modifiedAt: new Date().toISOString(),\n                        version: '2.1'\n                    };\n                    itemsChanged++;\n                }\n            });\n        }\n\n        console.log(`✅ Migration 2.0 → 2.1 completed, ${itemsChanged} items changed`);\n        return migratedData;\n    }\n\n    private detectDataVersion(data: any): string {\n        return this.dataValidator.detectSchemaVersion(data);\n    }\n\n    private findMigrationPath(fromVersion: string, toVersion: string): MigrationStep[] {\n        if (fromVersion === toVersion) {\n            return [];\n        }\n\n        // Simple linear path for now - can be enhanced to support complex paths\n        const path: MigrationStep[] = [];\n        let currentVersion = fromVersion;\n\n        while (currentVersion !== toVersion) {\n            const step = this.migrationSteps.find(s => s.fromVersion === currentVersion);\n            if (!step) {\n                console.error(`No migration step found from version ${currentVersion}`);\n                return [];\n            }\n            \n            path.push(step);\n            currentVersion = step.toVersion;\n\n            // Prevent infinite loops\n            if (path.length > 10) {\n                console.error('Migration path too long, possible circular dependency');\n                return [];\n            }\n        }\n\n        return path;\n    }\n\n    private validateMigratedData(data: any, expectedVersion: string): ValidationResult {\n        // Version-specific validation\n        switch (expectedVersion) {\n            case '2.0':\n            case '2.1':\n                return this.dataValidator.validateUserScheduleState(data, { repairInPlace: false });\n            default:\n                return { valid: true, errors: [], warnings: [] };\n        }\n    }\n\n    private async createBackup(data: any, version: string, migrationId: string): Promise<boolean> {\n        try {\n            const backup = {\n                version,\n                timestamp: new Date().toISOString(),\n                migrationId,\n                data: this.deepClone(data),\n                checksum: this.generateChecksum(JSON.stringify(data))\n            };\n\n            const backupKey = `${ProfileMigrationService.BACKUP_KEY_PREFIX}-${migrationId}`;\n            \n            const result = await this.retryManager.retryStorageOperation(\n                () => {\n                    localStorage.setItem(backupKey, JSON.stringify(backup));\n                },\n                { operationName: 'create migration backup' }\n            );\n\n            return result.success;\n        } catch (error) {\n            console.error('Failed to create backup:', error);\n            return false;\n        }\n    }\n\n    private async restoreFromBackup(migrationId: string): Promise<boolean> {\n        try {\n            const backupKey = `${ProfileMigrationService.BACKUP_KEY_PREFIX}-${migrationId}`;\n            const backupData = localStorage.getItem(backupKey);\n            \n            if (!backupData) {\n                console.error(`No backup found for migration ${migrationId}`);\n                return false;\n            }\n\n            const backup = JSON.parse(backupData);\n            \n            // Verify backup integrity\n            const expectedChecksum = this.generateChecksum(JSON.stringify(backup.data));\n            if (backup.checksum !== expectedChecksum) {\n                console.error('Backup data integrity check failed');\n                return false;\n            }\n\n            // Restore data to storage\n            const exportData = {\n                version: backup.version,\n                timestamp: backup.timestamp,\n                ...backup.data\n            };\n\n            const result = this.storageManager.importData(JSON.stringify(exportData));\n            if (!result.success) {\n                console.error('Failed to restore backup:', result.error);\n                return false;\n            }\n\n            console.log(`✅ Successfully restored from backup ${migrationId}`);\n            return true;\n\n        } catch (error) {\n            console.error('Failed to restore from backup:', error);\n            return false;\n        }\n    }\n\n    private async logMigration(logEntry: {\n        migrationId: string;\n        fromVersion: string;\n        toVersion: string;\n        timestamp: string;\n        success: boolean;\n        itemsChanged: number;\n        error?: string;\n    }): Promise<void> {\n        try {\n            const existingLog = localStorage.getItem(ProfileMigrationService.MIGRATION_LOG_KEY);\n            const log = existingLog ? JSON.parse(existingLog) : [];\n            \n            log.push(logEntry);\n\n            // Keep only last 50 entries\n            if (log.length > 50) {\n                log.splice(0, log.length - 50);\n            }\n\n            localStorage.setItem(ProfileMigrationService.MIGRATION_LOG_KEY, JSON.stringify(log));\n        } catch (error) {\n            console.warn('Failed to log migration:', error);\n        }\n    }\n\n    // Utility methods\n    async getMigrationHistory(): Promise<any[]> {\n        try {\n            const logData = localStorage.getItem(ProfileMigrationService.MIGRATION_LOG_KEY);\n            return logData ? JSON.parse(logData) : [];\n        } catch (error) {\n            console.warn('Failed to load migration history:', error);\n            return [];\n        }\n    }\n\n    async cleanupOldBackups(maxAge: number = 30 * 24 * 60 * 60 * 1000): Promise<number> {\n        let cleanedCount = 0;\n        const cutoffTime = Date.now() - maxAge;\n\n        try {\n            const keys = Object.keys(localStorage);\n            const backupKeys = keys.filter(key => key.startsWith(ProfileMigrationService.BACKUP_KEY_PREFIX));\n\n            for (const key of backupKeys) {\n                try {\n                    const backupData = localStorage.getItem(key);\n                    if (backupData) {\n                        const backup = JSON.parse(backupData);\n                        const backupTime = new Date(backup.timestamp).getTime();\n                        \n                        if (backupTime < cutoffTime) {\n                            localStorage.removeItem(key);\n                            cleanedCount++;\n                        }\n                    }\n                } catch (error) {\n                    // If we can't parse the backup, remove it\n                    localStorage.removeItem(key);\n                    cleanedCount++;\n                }\n            }\n\n            console.log(`🧹 Cleaned up ${cleanedCount} old migration backups`);\n        } catch (error) {\n            console.warn('Failed to cleanup old backups:', error);\n        }\n\n        return cleanedCount;\n    }\n\n    isVersionSupported(version: string): boolean {\n        const supportedVersions = ['1.0', '2.0', '2.1'];\n        return supportedVersions.includes(version);\n    }\n\n    getCurrentVersion(): string {\n        return ProfileMigrationService.CURRENT_VERSION;\n    }\n\n    // Private utility methods\n    private deepClone(obj: any): any {\n        if (obj === null || typeof obj !== 'object') return obj;\n        if (obj instanceof Date) return new Date(obj.getTime());\n        if (obj instanceof Set) return new Set([...obj]);\n        if (obj instanceof Map) return new Map([...obj]);\n        if (Array.isArray(obj)) return obj.map(item => this.deepClone(item));\n        \n        const cloned: any = {};\n        for (const key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                cloned[key] = this.deepClone(obj[key]);\n            }\n        }\n        return cloned;\n    }\n\n    private generateChecksum(data: string): string {\n        let hash = 0;\n        if (data.length === 0) return hash.toString();\n        \n        for (let i = 0; i < data.length; i++) {\n            const char = data.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash;\n        }\n        \n        return hash.toString();\n    }\n\n    private generateMigrationId(): string {\n        return `migration_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n}","import { Course, Section, Period, Department } from '../types/types'\nimport { Schedule, SelectedCourse, SchedulePreferences } from '../types/schedule'\n\nexport class Validators {\n    static isValidCourse(course: any): course is Course {\n        return course &&\n            typeof course.id === 'string' &&\n            typeof course.number === 'string' &&\n            typeof course.name === 'string' &&\n            typeof course.description === 'string' &&\n            this.isValidDepartment(course.department) &&\n            Array.isArray(course.sections) &&\n            course.sections.every((s: any) => this.isValidSection(s)) &&\n            typeof course.minCredits === 'number' &&\n            typeof course.maxCredits === 'number';\n    }\n\n    static isValidDepartment(department: any): department is Department {\n        return department &&\n            typeof department.abbreviation === 'string' &&\n            typeof department.name === 'string' &&\n            // Make courses array optional - it may not be present in serialized data\n            (department.courses === undefined || Array.isArray(department.courses));\n    }\n\n    static isValidSection(section: any): section is Section {\n        return section &&\n            typeof section.crn === 'number' &&\n            typeof section.number === 'string' &&\n            typeof section.seats === 'number' &&\n            typeof section.seatsAvailable === 'number' &&\n            typeof section.actualWaitlist === 'number' &&\n            typeof section.maxWaitlist === 'number' &&\n            typeof section.description === 'string' &&\n            typeof section.term === 'string' &&\n            Array.isArray(section.periods) &&\n            section.periods.every((p: any) => this.isValidPeriod(p));\n    }\n\n    static isValidPeriod(period: any): period is Period {\n        return period &&\n            typeof period.type === 'string' &&\n            typeof period.professor === 'string' &&\n            this.isValidTime(period.startTime) &&\n            this.isValidTime(period.endTime) &&\n            typeof period.location === 'string' &&\n            typeof period.building === 'string' &&\n            typeof period.room === 'string' &&\n            typeof period.seats === 'number' &&\n            typeof period.seatsAvailable === 'number' &&\n            typeof period.actualWaitlist === 'number' &&\n            typeof period.maxWaitlist === 'number' &&\n            period.days instanceof Set;\n    }\n\n    static isValidTime(time: any): boolean {\n        return time &&\n            typeof time.hours === 'number' &&\n            typeof time.minutes === 'number' &&\n            typeof time.displayTime === 'string' &&\n            time.hours >= 0 && time.hours <= 23 &&\n            time.minutes >= 0 && time.minutes <= 59;\n    }\n\n    static isValidSchedulePreferences(preferences: any): preferences is SchedulePreferences {\n        return preferences &&\n            this.isValidTimeRange(preferences.preferredTimeRange) &&\n            preferences.preferredDays instanceof Set &&\n            typeof preferences.avoidBackToBackClasses === 'boolean';\n    }\n\n    static isValidTimeRange(timeRange: any): boolean {\n        return timeRange &&\n            this.isValidTime(timeRange.startTime) &&\n            this.isValidTime(timeRange.endTime);\n    }\n\n    static isValidSelectedCourse(selectedCourse: any): selectedCourse is SelectedCourse {\n        return selectedCourse &&\n            this.isValidCourse(selectedCourse.course) &&\n            typeof selectedCourse.isRequired === 'boolean';\n    }\n\n    static isValidSchedule(schedule: any): schedule is Schedule {\n        return schedule &&\n            typeof schedule.id === 'string' &&\n            typeof schedule.name === 'string' &&\n            Array.isArray(schedule.selectedCourses) &&\n            schedule.selectedCourses.every((sc: any) => this.isValidSelectedCourse(sc)) &&\n            Array.isArray(schedule.generatedSchedules) &&\n            this.isValidSchedulePreferences(schedule.preferences);\n    }\n\n    static sanitizeString(input: string): string {\n        return input.replace(/<[^>]*>/g, '').trim();\n    }\n\n    static sanitizeCourseData(course: any): Course | null {\n        try {\n            if (!this.isValidCourse(course)) return null;\n\n            return {\n                ...course,\n                name: this.sanitizeString(course.name),\n                description: this.sanitizeString(course.description),\n                sections: course.sections.map((section: Section) => ({\n                    ...section,\n                    description: this.sanitizeString(section.description),\n                    periods: section.periods.map((period: Period) => ({\n                        ...period,\n                        professor: this.sanitizeString(period.professor),\n                        location: this.sanitizeString(period.location),\n                        building: this.sanitizeString(period.building),\n                        room: this.sanitizeString(period.room)\n                    }))\n                }))\n            };\n        } catch (error) {\n            console.warn('Error sanitizing course data:', error);\n            return null;\n        }\n    }\n\n    static validateCourseId(courseId: string): boolean {\n        // Format: DEPT-NUMBER (e.g., CS-1101, AB-1531, RBE-1001) \n        // Allow 2-4 letter department codes and 3-4 digit course numbers\n        return /^[A-Z]{2,4}-\\d{3,4}$/.test(courseId);\n    }\n\n    static validateSectionNumber(sectionNumber: string): boolean {\n        // Very permissive section number validation - allow most printable characters\n        // WPI has diverse section formats: A01, Lab1, \"Interest List-A Term\", \"AL02/AD02/AX01\", etc.\n        // Just ensure it's a non-empty string with reasonable characters\n        return typeof sectionNumber === 'string' && \n               sectionNumber.trim().length > 0 && \n               /^[\\w\\s\\-/]+$/.test(sectionNumber);\n    }\n\n    static validateEmail(email: string): boolean {\n        return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n    }\n}","import { Course, Department, Section } from '../types/types'\nimport { SelectedCourse } from '../types/schedule'\nimport { ProfileStateManager, StateChangeEvent, StateChangeListener } from '../core/ProfileStateManager'\nimport { DataValidator, ValidationResult } from '../core/DataValidator'\nimport { RetryManager } from '../core/RetryManager'\nimport { ProfileMigrationService } from '../core/ProfileMigrationService'\nimport { Validators } from '../utils/validators'\n\nexport interface CourseSelectionOptions {\n    isRequired?: boolean;\n    autoSave?: boolean;\n    validateBeforeAdd?: boolean;\n}\n\nexport interface CourseSelectionResult {\n    success: boolean;\n    course?: SelectedCourse;\n    error?: string;\n    warnings?: string[];\n}\n\nexport interface SelectionChangeEvent {\n    type: 'course_added' | 'course_removed' | 'section_changed' | 'selection_cleared' | 'data_loaded';\n    course?: Course;\n    section?: string | null;\n    selectedCourses: SelectedCourse[];\n    timestamp: number;\n}\n\nexport type SelectionChangeListener = (event: SelectionChangeEvent) => void;\n\nexport class CourseSelectionService {\n    private profileStateManager: ProfileStateManager;\n    private dataValidator: DataValidator;\n    private retryManager: RetryManager;\n    private migrationService: ProfileMigrationService;\n    private selectionListeners = new Set<SelectionChangeListener>();\n    private isInitialized = false;\n    private initializationPromise: Promise<boolean> | null = null;\n\n    constructor(\n        profileStateManager?: ProfileStateManager,\n        dataValidator?: DataValidator,\n        retryManager?: RetryManager,\n        migrationService?: ProfileMigrationService\n    ) {\n        this.profileStateManager = profileStateManager || new ProfileStateManager();\n        this.dataValidator = dataValidator || new DataValidator();\n        this.retryManager = retryManager || RetryManager.createStorageRetryManager();\n        this.migrationService = migrationService || new ProfileMigrationService(\n            this.dataValidator,\n            this.profileStateManager['storageManager'],\n            this.retryManager\n        );\n\n        this.setupStateManagerListeners();\n    }\n\n    // Initialization\n    async initialize(): Promise<boolean> {\n        if (this.isInitialized) return true;\n        if (this.initializationPromise) return this.initializationPromise;\n\n        this.initializationPromise = this.performInitialization();\n        return this.initializationPromise;\n    }\n\n    private async performInitialization(): Promise<boolean> {\n        try {\n            console.log('🚀 Initializing CourseSelectionService...');\n\n            // Check and perform migrations if needed\n            const migrationResult = await this.checkAndPerformMigrations();\n            if (!migrationResult) {\n                console.warn('⚠️ Migration check failed, proceeding with existing data');\n            }\n\n            // Load data from storage\n            await this.profileStateManager.loadFromStorage();\n\n            // Validate loaded data\n            const healthCheck = await this.performHealthCheck();\n            if (!healthCheck.healthy) {\n                console.warn('⚠️ Health check found issues:', healthCheck.issues);\n                // Attempt repairs\n                await this.attemptDataRepair();\n            }\n\n            this.isInitialized = true;\n            console.log('✅ CourseSelectionService initialized successfully');\n            return true;\n\n        } catch (error) {\n            console.error('❌ Failed to initialize CourseSelectionService:', error);\n            this.isInitialized = false;\n            return false;\n        } finally {\n            this.initializationPromise = null;\n        }\n    }\n\n    // Core course selection methods\n    async selectCourse(course: Course, options: CourseSelectionOptions = {}): Promise<CourseSelectionResult> {\n        await this.ensureInitialized();\n\n        const {\n            isRequired = false,\n            autoSave = true,\n            validateBeforeAdd = true\n        } = options;\n\n        try {\n            // Validate course if requested\n            if (validateBeforeAdd) {\n                const validation = this.dataValidator.validateCourse(course);\n                if (!validation.valid) {\n                    return {\n                        success: false,\n                        error: `Invalid course: ${validation.errors.map(e => e.message).join(', ')}`,\n                        warnings: validation.warnings.map(w => w.message)\n                    };\n                }\n            }\n\n            // Execute with retry\n            const result = await this.retryManager.executeWithRetry(\n                () => {\n                    this.profileStateManager.selectCourse(course, isRequired, 'api');\n                    return this.profileStateManager.getSelectedCourse(course);\n                },\n                {\n                    operationName: `select course ${course.department.abbreviation}${course.number}`,\n                    onRetry: (attempt, error) => {\n                        console.warn(`Course selection failed, retrying (attempt ${attempt}):`, error.message);\n                    }\n                }\n            );\n\n            if (!result.success) {\n                return {\n                    success: false,\n                    error: `Failed to select course: ${result.error?.message || 'Unknown error'}`\n                };\n            }\n\n            const selectedCourse = result.result;\n            if (!selectedCourse) {\n                return {\n                    success: false,\n                    error: 'Course selection succeeded but course not found in state'\n                };\n            }\n\n            // Notify listeners\n            this.notifySelectionListeners({\n                type: 'course_added',\n                course,\n                selectedCourses: this.profileStateManager.getSelectedCourses(),\n                timestamp: Date.now()\n            });\n\n            // Auto-save if requested\n            if (autoSave) {\n                const saveResult = await this.profileStateManager.save();\n                if (!saveResult.success) {\n                    console.warn('❌ Failed to auto-save after course selection:', saveResult.error);\n                } else {\n                    console.log('✅ Auto-save successful after course selection');\n                }\n            }\n\n            return {\n                success: true,\n                course: selectedCourse\n            };\n\n        } catch (error) {\n            console.error('Error selecting course:', error);\n            return {\n                success: false,\n                error: `Error selecting course: ${error}`\n            };\n        }\n    }\n\n    async unselectCourse(course: Course, options: { autoSave?: boolean } = {}): Promise<CourseSelectionResult> {\n        await this.ensureInitialized();\n        const { autoSave = true } = options;\n\n        try {\n            if (!this.isCourseSelected(course)) {\n                return {\n                    success: false,\n                    error: 'Course is not currently selected'\n                };\n            }\n\n            const result = await this.retryManager.executeWithRetry(\n                () => {\n                    this.profileStateManager.unselectCourse(course, 'api');\n                },\n                {\n                    operationName: `unselect course ${course.department.abbreviation}${course.number}`,\n                }\n            );\n\n            if (!result.success) {\n                return {\n                    success: false,\n                    error: `Failed to unselect course: ${result.error?.message || 'Unknown error'}`\n                };\n            }\n\n            // Notify listeners\n            this.notifySelectionListeners({\n                type: 'course_removed',\n                course,\n                selectedCourses: this.profileStateManager.getSelectedCourses(),\n                timestamp: Date.now()\n            });\n\n            // Auto-save if requested\n            if (autoSave) {\n                console.log('💾 CourseSelectionService: Auto-saving after course removal...');\n                const saveResult = await this.profileStateManager.save();\n                if (!saveResult.success) {\n                    console.warn('❌ Failed to auto-save after course removal:', saveResult.error);\n                } else {\n                    console.log('✅ Auto-save successful after course removal');\n                }\n            }\n\n            return { success: true };\n\n        } catch (error) {\n            console.error('Error unselecting course:', error);\n            return {\n                success: false,\n                error: `Error unselecting course: ${error}`\n            };\n        }\n    }\n\n    async toggleCourseSelection(course: Course, options: CourseSelectionOptions = {}): Promise<CourseSelectionResult> {\n        const isSelected = this.isCourseSelected(course);\n        \n        if (isSelected) {\n            return this.unselectCourse(course, { autoSave: options.autoSave });\n        } else {\n            return this.selectCourse(course, options);\n        }\n    }\n\n    async setSelectedSection(course: Course, sectionNumber: string | null, options: { autoSave?: boolean } = {}): Promise<CourseSelectionResult> {\n        await this.ensureInitialized();\n        const { autoSave = true } = options;\n\n        try {\n            if (!this.isCourseSelected(course)) {\n                return {\n                    success: false,\n                    error: 'Course must be selected before setting a section'\n                };\n            }\n\n            // Validate section number if provided\n            if (sectionNumber !== null && !Validators.validateSectionNumber(sectionNumber)) {\n                return {\n                    success: false,\n                    error: 'Invalid section number format'\n                };\n            }\n\n            // Check if section exists in course\n            if (sectionNumber !== null) {\n                const sectionExists = course.sections.some(s => s.number === sectionNumber);\n                if (!sectionExists) {\n                    return {\n                        success: false,\n                        error: `Section ${sectionNumber} not found in course ${course.department.abbreviation}${course.number}`\n                    };\n                }\n            }\n\n            const result = await this.retryManager.executeWithRetry(\n                () => {\n                    this.profileStateManager.setSelectedSection(course, sectionNumber, 'api');\n                },\n                {\n                    operationName: `set section for ${course.department.abbreviation}${course.number}`,\n                }\n            );\n\n            if (!result.success) {\n                return {\n                    success: false,\n                    error: `Failed to set section: ${result.error?.message || 'Unknown error'}`\n                };\n            }\n\n            // Notify listeners\n            this.notifySelectionListeners({\n                type: 'section_changed',\n                course,\n                section: sectionNumber,\n                selectedCourses: this.profileStateManager.getSelectedCourses(),\n                timestamp: Date.now()\n            });\n\n            // Auto-save if requested\n            if (autoSave) {\n                console.log('💾 CourseSelectionService: Auto-saving after section selection...');\n                const saveResult = await this.profileStateManager.save();\n                if (!saveResult.success) {\n                    console.warn('❌ Failed to auto-save after section selection:', saveResult.error);\n                } else {\n                    console.log('✅ Auto-save successful after section selection');\n                }\n            }\n\n            const updatedCourse = this.profileStateManager.getSelectedCourse(course);\n            return {\n                success: true,\n                course: updatedCourse\n            };\n\n        } catch (error) {\n            console.error('Error setting selected section:', error);\n            return {\n                success: false,\n                error: `Error setting selected section: ${error}`\n            };\n        }\n    }\n\n    async clearAllSelections(options: { autoSave?: boolean } = {}): Promise<{ success: boolean; error?: string }> {\n        await this.ensureInitialized();\n        const { autoSave = true } = options;\n\n        try {\n            const result = await this.retryManager.executeWithRetry(\n                () => {\n                    this.profileStateManager.clearAllSelections('api');\n                },\n                {\n                    operationName: 'clear all course selections',\n                }\n            );\n\n            if (!result.success) {\n                return {\n                    success: false,\n                    error: `Failed to clear selections: ${result.error?.message || 'Unknown error'}`\n                };\n            }\n\n            // Notify listeners\n            this.notifySelectionListeners({\n                type: 'selection_cleared',\n                selectedCourses: [],\n                timestamp: Date.now()\n            });\n\n            // Auto-save if requested\n            if (autoSave) {\n                const saveResult = await this.profileStateManager.save();\n                if (!saveResult.success) {\n                    console.warn('Failed to auto-save after clearing selections:', saveResult.error);\n                }\n            }\n\n            return { success: true };\n\n        } catch (error) {\n            console.error('Error clearing selections:', error);\n            return {\n                success: false,\n                error: `Error clearing selections: ${error}`\n            };\n        }\n    }\n\n    // Query methods\n    isCourseSelected(course: Course): boolean {\n        if (!this.isInitialized) return false;\n        return this.profileStateManager.getSelectedCourse(course) !== undefined;\n    }\n\n    getSelectedCourse(course: Course): SelectedCourse | undefined {\n        if (!this.isInitialized) return undefined;\n        return this.profileStateManager.getSelectedCourse(course);\n    }\n\n    getSelectedCourses(): SelectedCourse[] {\n        if (!this.isInitialized) return [];\n        return this.profileStateManager.getSelectedCourses();\n    }\n\n    getSelectedSection(course: Course): string | null {\n        const selectedCourse = this.getSelectedCourse(course);\n        return selectedCourse?.selectedSectionNumber || null;\n    }\n\n    getSelectedSectionObject(course: Course): Section | null {\n        const selectedCourse = this.getSelectedCourse(course);\n        return selectedCourse?.selectedSection || null;\n    }\n\n    getSelectedCoursesCount(): number {\n        return this.getSelectedCourses().length;\n    }\n\n    getSelectedCourseIds(): string[] {\n        return this.getSelectedCourses().map(sc => sc.course.id);\n    }\n\n    // Event handling\n    addSelectionListener(listener: SelectionChangeListener): void {\n        this.selectionListeners.add(listener);\n    }\n\n    removeSelectionListener(listener: SelectionChangeListener): void {\n        this.selectionListeners.delete(listener);\n    }\n\n    removeAllSelectionListeners(): void {\n        this.selectionListeners.clear();\n    }\n\n    // Convenience method for backward compatibility\n    onSelectionChange(callback: (selectedCourses: SelectedCourse[]) => void): void {\n        const listener: SelectionChangeListener = (event) => {\n            callback(event.selectedCourses);\n        };\n        this.addSelectionListener(listener);\n    }\n\n    // Department and section management\n    setAllDepartments(departments: Department[]): void {\n        // This would typically be handled by a separate service\n        // For now, we'll store it in the profile state manager if needed\n        console.log(`📚 Loaded ${departments.length} departments`);\n    }\n\n    getAllSections(): Section[] {\n        // This would be retrieved from the course data service\n        return [];\n    }\n\n    getAllSectionsForCourse(course: Course): Section[] {\n        return course.sections || [];\n    }\n\n    // Data management\n    async exportSelections(): Promise<{ success: boolean; data?: string; error?: string }> {\n        try {\n            await this.ensureInitialized();\n            const exportData = this.profileStateManager.exportData();\n            \n            if (exportData === null) {\n                return {\n                    success: false,\n                    error: 'Failed to export data'\n                };\n            }\n\n            return {\n                success: true,\n                data: exportData\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: `Export failed: ${error}`\n            };\n        }\n    }\n\n    async importSelections(jsonData: string): Promise<{ success: boolean; error?: string }> {\n        try {\n            await this.ensureInitialized();\n            \n            const result = await this.profileStateManager.importData(jsonData);\n            \n            if (result.success) {\n                // Notify listeners about the data change\n                this.notifySelectionListeners({\n                    type: 'data_loaded',\n                    selectedCourses: this.profileStateManager.getSelectedCourses(),\n                    timestamp: Date.now()\n                });\n            }\n\n            return {\n                success: result.success,\n                error: result.error?.message\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: `Import failed: ${error}`\n            };\n        }\n    }\n\n    // Health and diagnostics\n    async performHealthCheck(): Promise<{ healthy: boolean; issues: string[] }> {\n        const issues: string[] = [];\n\n        try {\n            // Check if initialized\n            if (!this.isInitialized) {\n                issues.push('Service not initialized');\n            }\n\n            // Check profile state manager health\n            const stateHealth = this.profileStateManager.isHealthy();\n            if (!stateHealth.healthy) {\n                issues.push(...stateHealth.issues.map(issue => `State: ${issue}`));\n            }\n\n            // Validate current data\n            const selectedCourses = this.getSelectedCourses();\n            const validation = this.dataValidator.validateBatch(\n                selectedCourses,\n                (course) => this.dataValidator.validateSelectedCourse(course)\n            );\n\n            if (!validation.valid) {\n                issues.push(`Data validation: ${validation.errors.length} errors found`);\n            }\n\n        } catch (error) {\n            issues.push(`Health check error: ${error}`);\n        }\n\n        return {\n            healthy: issues.length === 0,\n            issues\n        };\n    }\n\n    async save(): Promise<{ success: boolean; error?: string }> {\n        try {\n            await this.ensureInitialized();\n            const result = await this.profileStateManager.save();\n            return {\n                success: result.success,\n                error: result.error?.message\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: `Save failed: ${error}`\n            };\n        }\n    }\n\n    hasUnsavedChanges(): boolean {\n        if (!this.isInitialized) return false;\n        return this.profileStateManager.hasUnsavedChanges();\n    }\n\n    // Backward compatibility methods\n    findCourseById(courseId: string): Course | undefined {\n        // This would need to be implemented with access to course data\n        console.warn('findCourseById: Course data access not implemented in this service');\n        return undefined;\n    }\n\n    // Legacy methods for compatibility\n    unselectCourseById(courseId: string): void {\n        console.warn('unselectCourseById: Use unselectCourse with course object instead');\n    }\n\n    isCourseSelectedById(courseId: string): boolean {\n        console.warn('isCourseSelectedById: Use isCourseSelected with course object instead');\n        return false;\n    }\n\n    reconstructSectionObjects(): void {\n        try {\n            let reconstructedCount = 0;\n            const selectedCourses = this.getSelectedCourses();\n            \n            selectedCourses.forEach(selectedCourse => {\n                if (selectedCourse.selectedSectionNumber && !selectedCourse.selectedSection) {\n                    const sectionObject = selectedCourse.course.sections.find(s => \n                        s.number === selectedCourse.selectedSectionNumber\n                    ) || null;\n                    \n                    if (sectionObject) {\n                        selectedCourse.selectedSection = sectionObject;\n                        reconstructedCount++;\n                    }\n                }\n            });\n            \n            if (reconstructedCount > 0) {\n                console.log(`🔗 Reconstructed ${reconstructedCount} section objects`);\n                // Save changes and notify listeners\n                this.profileStateManager.save();\n            }\n        } catch (error) {\n            console.error('Failed to reconstruct section objects:', error);\n        }\n    }\n\n    // Private helper methods\n    private async ensureInitialized(): Promise<void> {\n        if (!this.isInitialized) {\n            await this.initialize();\n        }\n    }\n\n    private setupStateManagerListeners(): void {\n        const stateListener: StateChangeListener = (event: StateChangeEvent) => {\n            // Convert state manager events to selection events\n            switch (event.type) {\n                case 'courses_changed':\n                    // Already handled in our methods where we emit events\n                    break;\n                case 'active_schedule_changed':\n                    this.notifySelectionListeners({\n                        type: 'data_loaded',\n                        selectedCourses: this.profileStateManager.getSelectedCourses(),\n                        timestamp: event.timestamp\n                    });\n                    break;\n            }\n        };\n\n        this.profileStateManager.addListener(stateListener);\n    }\n\n    private notifySelectionListeners(event: SelectionChangeEvent): void {\n        this.selectionListeners.forEach(listener => {\n            try {\n                listener(event);\n            } catch (error) {\n                console.error('Error in selection change listener:', error);\n            }\n        });\n    }\n\n    private async checkAndPerformMigrations(): Promise<boolean> {\n        try {\n            // Export current data\n            const currentData = this.profileStateManager.exportData();\n            if (!currentData) {\n                return true; // No data to migrate\n            }\n\n            const parsedData = JSON.parse(currentData);\n            \n            // Check if migration is needed\n            const migrationResult = await this.migrationService.migrateToLatest(parsedData);\n            \n            if (migrationResult.success && migrationResult.itemsChanged > 0) {\n                console.log(`✅ Migration completed: ${migrationResult.itemsChanged} items updated from ${migrationResult.fromVersion} to ${migrationResult.toVersion}`);\n                \n                // Import migrated data\n                if (migrationResult.migratedData) {\n                    await this.profileStateManager.importData(JSON.stringify(migrationResult.migratedData));\n                }\n            }\n\n            return migrationResult.success;\n        } catch (error) {\n            console.error('Migration check failed:', error);\n            return false;\n        }\n    }\n\n    private async attemptDataRepair(): Promise<boolean> {\n        try {\n            const selectedCourses = this.getSelectedCourses();\n            let repairedCount = 0;\n\n            selectedCourses.forEach(selectedCourse => {\n                // Repair each selected course\n                this.dataValidator.repairSelectedCourse(selectedCourse);\n                repairedCount++;\n            });\n\n            if (repairedCount > 0) {\n                console.log(`🔧 Repaired ${repairedCount} selected courses`);\n                await this.profileStateManager.save();\n            }\n\n            return true;\n        } catch (error) {\n            console.error('Data repair failed:', error);\n            return false;\n        }\n    }\n\n    // Debug methods\n    debugState(): void {\n        console.log('=== COURSE SELECTION SERVICE DEBUG ===');\n        console.log('Initialized:', this.isInitialized);\n        console.log('Selected Courses:', this.getSelectedCoursesCount());\n        console.log('Listeners:', this.selectionListeners.size);\n        console.log('Has Unsaved Changes:', this.hasUnsavedChanges());\n        \n        this.profileStateManager.debugState();\n        \n        console.log('Health Check:', this.performHealthCheck());\n        console.log('=============================================');\n    }\n}","import { Course, Section } from './types'\n\nexport interface SelectedCourse {\n    course: Course;\n    selectedSection: Section | null;  // Store the full Section object for direct access\n    selectedSectionNumber: string | null;  // Keep for backward compatibility and serialization\n    isRequired: boolean;\n}\n\nexport interface Schedule {\n    id: string;\n    name: string;\n    selectedCourses: SelectedCourse[];\n    generatedSchedules: ScheduleCombination[];\n}\n\nexport interface ScheduleCombination {\n    id: string;\n    sections: Section[];\n    conflicts: TimeConflict[];\n    isValid: boolean;\n}\n\nexport interface TimeConflict {\n    section1: Section;\n    section2: Section;\n    conflictType: ConflictType;\n    description: string;\n}\n\nexport interface SchedulePreferences {\n    preferredTimeRange: {\n        startTime: { hours: number; minutes: number };\n        endTime: { hours: number; minutes: number };\n    };\n    preferredDays: Set<string>;\n    avoidBackToBackClasses: boolean;\n    theme?: string;\n}\n\nexport enum ConflictType {\n    TIME_OVERLAP = 'time_overlap'\n}\n\nexport interface UserScheduleState {\n    activeSchedule: Schedule | null;\n    savedSchedules: Schedule[];\n    preferences: SchedulePreferences;\n}","import { Section, Period, DayOfWeek } from '../types/types'\nimport { TimeConflict, ConflictType } from '../types/schedule'\n\nexport class ConflictDetector {\n    private conflictCache = new Map<string, TimeConflict[]>();\n    detectConflicts(sections: Section[]): TimeConflict[] {\n        const conflicts: TimeConflict[] = [];\n        \n        for (let i = 0; i < sections.length; i++) {\n            for (let j = i + 1; j < sections.length; j++) {\n                const cacheKey = this.getCacheKey(sections[i], sections[j]);\n                let sectionConflicts = this.conflictCache.get(cacheKey);\n                \n                if (!sectionConflicts) {\n                    sectionConflicts = this.checkSectionConflicts(sections[i], sections[j]);\n                    this.conflictCache.set(cacheKey, sectionConflicts);\n                }\n                \n                conflicts.push(...sectionConflicts);\n            }\n        }\n        \n        return conflicts;\n    }\n\n    private checkSectionConflicts(section1: Section, section2: Section): TimeConflict[] {\n        const conflicts: TimeConflict[] = [];\n        \n        for (const period1 of section1.periods) {\n            for (const period2 of section2.periods) {\n                const conflict = this.checkPeriodConflict(period1, period2, section1, section2);\n                if (conflict) {\n                    conflicts.push(conflict);\n                }\n            }\n        }\n        \n        return conflicts;\n    }\n\n    private checkPeriodConflict(period1: Period, period2: Period, section1: Section, section2: Section): TimeConflict | null {\n        const sharedDays = this.getSharedDays(period1.days, period2.days);\n        if (sharedDays.length === 0) return null;\n\n        if (this.hasTimeOverlap(period1, period2)) {\n            return {\n                section1,\n                section2,\n                conflictType: ConflictType.TIME_OVERLAP,\n                description: `Time overlap on ${sharedDays.join(', ')}: ${period1.startTime.displayTime}-${period1.endTime.displayTime} conflicts with ${period2.startTime.displayTime}-${period2.endTime.displayTime}`\n            };\n        }\n\n        return null;\n    }\n\n    private getSharedDays(days1: Set<DayOfWeek>, days2: Set<DayOfWeek>): string[] {\n        return Array.from(new Set([...days1].filter(day => days2.has(day))));\n    }\n\n    private hasTimeOverlap(period1: Period, period2: Period): boolean {\n        const start1 = this.timeToMinutes(period1.startTime);\n        const end1 = this.timeToMinutes(period1.endTime);\n        const start2 = this.timeToMinutes(period2.startTime);\n        const end2 = this.timeToMinutes(period2.endTime);\n\n        return start1 < end2 && start2 < end1;\n    }\n\n    private timeToMinutes(time: { hours: number; minutes: number }): number {\n        return time.hours * 60 + time.minutes;\n    }\n\n    isValidSchedule(sections: Section[]): boolean {\n        const conflicts = this.detectConflicts(sections);\n        return conflicts.length === 0;\n    }\n\n    clearCache(): void {\n        this.conflictCache.clear();\n    }\n\n    private getCacheKey(section1: Section, section2: Section): string {\n        const key1 = `${section1.crn}-${section2.crn}`;\n        const key2 = `${section2.crn}-${section1.crn}`;\n        return key1 < key2 ? key1 : key2;\n    }\n}","export class ModalService {\n    private modals: Map<string, HTMLElement> = new Map();\n    private currentZIndex: number = 1000;\n\n    showModal(id: string, modalElement: HTMLElement): void {\n        // Remove existing modal with same ID if it exists\n        this.hideModal(id);\n\n        // Set z-index\n        modalElement.style.zIndex = this.currentZIndex.toString();\n        this.currentZIndex += 10;\n\n        // Store modal reference\n        this.modals.set(id, modalElement);\n\n        // Inject into DOM\n        document.body.appendChild(modalElement);\n\n        // Trigger show animation\n        requestAnimationFrame(() => {\n            modalElement.classList.add('show');\n        });\n    }\n\n    hideModal(id: string): void {\n        const modalElement = this.modals.get(id);\n        if (modalElement) {\n            modalElement.classList.add('hide');\n            \n            setTimeout(() => {\n                if (modalElement.parentNode) {\n                    modalElement.parentNode.removeChild(modalElement);\n                }\n                this.modals.delete(id);\n            }, 200);\n        }\n    }\n\n    hideAllModals(): void {\n        const modalIds = Array.from(this.modals.keys());\n        modalIds.forEach(id => this.hideModal(id));\n    }\n\n    isModalOpen(id: string): boolean {\n        return this.modals.has(id);\n    }\n\n    getOpenModals(): string[] {\n        return Array.from(this.modals.keys());\n    }\n\n    generateId(): string {\n        return `modal-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    // Utility method for backdrop and escape key handling\n    setupModalBehavior(modalElement: HTMLElement, id: string, options: {\n        closeOnBackdrop?: boolean;\n        closeOnEscape?: boolean;\n    } = {}): void {\n        const { closeOnBackdrop = true, closeOnEscape = true } = options;\n\n        // Backdrop click handling\n        if (closeOnBackdrop) {\n            modalElement.addEventListener('click', (event) => {\n                if (event.target === modalElement) {\n                    this.hideModal(id);\n                }\n            });\n        }\n\n        // Escape key handling\n        if (closeOnEscape) {\n            const escapeHandler = (event: KeyboardEvent) => {\n                if (event.key === 'Escape') {\n                    this.hideModal(id);\n                    document.removeEventListener('keydown', escapeHandler);\n                }\n            };\n            document.addEventListener('keydown', escapeHandler);\n        }\n    }\n}","import { Department } from '../types/types';\n\nexport const DEPARTMENT_CATEGORIES: { [key: string]: string } = {\n    // Science\n    'BB': 'Science',\n    'BCB': 'Science', \n    'CH': 'Science',\n    'CS': 'Science',\n    'DS': 'Science',\n    'GE': 'Science',\n    'IMGD': 'Science',\n    'MA': 'Science',\n    'MTE': 'Science',\n    'PTE': 'Science',\n    'NE': 'Science',\n    'PH': 'Science',\n    \n    // Engineering\n    'AE': 'Engineering',\n    'AR': 'Engineering',\n    'ARE': 'Engineering',\n    'BME': 'Engineering',\n    'CE': 'Engineering',\n    'CHE': 'Engineering',\n    'ECE': 'Engineering',\n    'ES': 'Engineering',\n    'FP': 'Engineering',\n    'ME': 'Engineering',\n    'MFE': 'Engineering',\n    'MSE': 'Engineering',\n    'NUE': 'Engineering',\n    'RBE': 'Engineering',\n    'SYE': 'Engineering',\n    \n    // Business & Management\n    'BUS': 'Business & Management',\n    'ECON': 'Business & Management',\n    'MIS': 'Business & Management',\n    'OIE': 'Business & Management',\n    \n    // Humanities & Arts\n    'EN': 'Humanities & Arts',\n    'HI': 'Humanities & Arts',\n    'HU': 'Humanities & Arts',\n    'MU': 'Humanities & Arts',\n    'RE': 'Humanities & Arts',\n    'SP': 'Humanities & Arts',\n    'TH': 'Humanities & Arts',\n    'WR': 'Humanities & Arts',\n    \n    // Social Sciences\n    'GOV': 'Social Sciences',\n    'PSY': 'Social Sciences',\n    'SOC': 'Social Sciences',\n    'SS': 'Social Sciences'\n};\n\nexport const CATEGORY_ORDER = [\n    'Science',\n    'Engineering',\n    'Business & Management',\n    'Humanities & Arts',\n    'Social Sciences',\n    'Other'\n];\n\nexport function getDepartmentCategory(departmentAbbreviation: string): string {\n    return DEPARTMENT_CATEGORIES[departmentAbbreviation] || 'Other';\n}\n\nexport function groupDepartmentsByCategory(departments: Department[]): { [key: string]: Department[] } {\n    const categories: { [key: string]: Department[] } = {};\n    \n    // Initialize all categories\n    CATEGORY_ORDER.forEach(category => {\n        categories[category] = [];\n    });\n\n    departments.forEach(dept => {\n        const category = getDepartmentCategory(dept.abbreviation);\n        categories[category].push(dept);\n    });\n\n    // Sort departments within each category\n    Object.keys(categories).forEach(category => {\n        categories[category].sort((a, b) => a.name.localeCompare(b.name));\n    });\n\n    return categories;\n}\n\nexport function getAllDepartmentAbbreviations(): string[] {\n    return Object.keys(DEPARTMENT_CATEGORIES);\n}\n\nexport function getCategoryList(): string[] {\n    return [...CATEGORY_ORDER];\n}","import { Department } from '../../types/types'\nimport { DepartmentSyncService } from '../../services/DepartmentSyncService'\nimport { groupDepartmentsByCategory } from '../../utils/departmentUtils'\n\nexport class DepartmentController {\n    private allDepartments: Department[] = [];\n    private selectedDepartment: Department | null = null;\n    private departmentSyncService: DepartmentSyncService | null = null;\n\n\n    constructor() {}\n\n    setDepartmentSyncService(departmentSyncService: DepartmentSyncService): void {\n        this.departmentSyncService = departmentSyncService;\n    }\n\n    setAllDepartments(departments: Department[]): void {\n        this.allDepartments = departments;\n    }\n\n    getSelectedDepartment(): Department | null {\n        return this.selectedDepartment;\n    }\n\n    getDepartmentById(deptId: string): Department | null {\n        return this.allDepartments.find(d => d.abbreviation === deptId) || null;\n    }\n\n    selectDepartment(deptId: string): Department | null {\n        const department = this.allDepartments.find(d => d.abbreviation === deptId);\n        if (!department) return null;\n\n        this.selectedDepartment = department;\n        \n        // Update content header\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            contentHeader.textContent = `${department.name} Courses`;\n        }\n\n        return department;\n    }\n\n    displayDepartments(): void {\n        const departmentList = document.getElementById('department-list');\n        if (!departmentList) return;\n\n        // Calculate total course count across all departments\n        const totalCourseCount = this.allDepartments.reduce((total, dept) => total + dept.courses.length, 0);\n\n        // Start with \"All Departments\" option\n        let html = `\n            <div class=\"department-category\">\n                <div class=\"department-list\">\n                    <div class=\"department-item all-departments active\" data-dept-id=\"all\">\n                        All Departments (${totalCourseCount})\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Group departments by category\n        const categories = this.groupDepartmentsByCategory();\n        \n        Object.entries(categories).forEach(([categoryName, departments]) => {\n            if (departments.length === 0) return;\n            \n            html += `\n                <div class=\"department-category\">\n                    <div class=\"category-header\">${categoryName}</div>\n                    <div class=\"department-list\">\n            `;\n            \n            departments.forEach(dept => {\n                const courseCount = dept.courses.length;\n                html += `\n                    <div class=\"department-item\" data-dept-id=\"${dept.abbreviation}\">\n                        ${dept.name} (${courseCount})\n                    </div>\n                `;\n            });\n            \n            html += `\n                    </div>\n                </div>\n            `;\n        });\n\n        departmentList.innerHTML = html;\n    }\n\n    private groupDepartmentsByCategory(): { [key: string]: Department[] } {\n        return groupDepartmentsByCategory(this.allDepartments);\n    }\n\n    handleDepartmentClick(deptId: string, multiSelect: boolean = false): Department | null {\n        // Handle \"All Departments\" special case\n        if (deptId === 'all') {\n            if (this.departmentSyncService) {\n                this.departmentSyncService.clearAllDepartmentSelections();\n            } else {\n                // Fallback to old behavior\n                this.clearDepartmentSelection();\n            }\n            \n            // Update visual state to show \"All Departments\" as selected\n            document.querySelectorAll('.department-item').forEach(item => {\n                item.classList.remove('active');\n            });\n            \n            const allDepartmentsElement = document.querySelector(`[data-dept-id=\"all\"]`);\n            if (allDepartmentsElement) {\n                allDepartmentsElement.classList.add('active');\n            }\n            \n            // Update header to show \"All Departments\"\n            const contentHeader = document.querySelector('.content-header h2');\n            if (contentHeader) {\n                contentHeader.textContent = 'All Departments';\n            }\n            \n            return null; // Return null to indicate \"all departments\" selection\n        }\n\n        const department = this.allDepartments.find(d => d.abbreviation === deptId);\n        if (!department) return null;\n\n        // Use sync service if available, otherwise fall back to old behavior\n        if (this.departmentSyncService) {\n            this.departmentSyncService.syncSidebarToFilter(deptId, multiSelect);\n        } else {\n            // Fallback to old behavior for backward compatibility\n            const selectedDept = this.selectDepartment(deptId);\n            \n            // Update active state manually if no sync service\n            document.querySelectorAll('.department-item').forEach(item => {\n                item.classList.remove('active');\n            });\n            \n            const clickedElement = document.querySelector(`[data-dept-id=\"${deptId}\"]`);\n            if (clickedElement) {\n                clickedElement.classList.add('active');\n            }\n        }\n\n        return department;\n    }\n\n    clearDepartmentSelection(): void {\n        this.selectedDepartment = null;\n        \n        // Clear active department visual state and set \"All Departments\" as active\n        document.querySelectorAll('.department-item').forEach(item => {\n            item.classList.remove('active');\n        });\n        \n        const allDepartmentsElement = document.querySelector(`[data-dept-id=\"all\"]`);\n        if (allDepartmentsElement) {\n            allDepartmentsElement.classList.add('active');\n        }\n        \n        // Reset sidebar header\n        const sidebarHeader = document.querySelector('.sidebar-header h2');\n        if (sidebarHeader) {\n            sidebarHeader.textContent = 'Departments';\n        }\n        \n        // Remove multi-select indicator\n        const departmentList = document.getElementById('department-list');\n        if (departmentList) {\n            departmentList.classList.remove('multi-select-active');\n        }\n        \n        // Update main content header to show \"All Departments\"\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            contentHeader.textContent = 'All Departments';\n        }\n    }\n}","export class CancellationToken {\n    private _cancelled: boolean = false;\n    private _reason?: string;\n    \n    get isCancelled(): boolean {\n        return this._cancelled;\n    }\n    \n    get reason(): string | undefined {\n        return this._reason;\n    }\n    \n    cancel(reason?: string): void {\n        this._cancelled = true;\n        this._reason = reason;\n    }\n    \n    throwIfCancelled(): void {\n        if (this._cancelled) {\n            throw new CancellationError(this._reason || 'Operation was cancelled');\n        }\n    }\n}\n\nexport class CancellationError extends Error {\n    constructor(message: string = 'Operation was cancelled') {\n        super(message);\n        this.name = 'CancellationError';\n    }\n}\n\nexport class CancellationTokenSource {\n    private _token: CancellationToken;\n    \n    constructor() {\n        this._token = new CancellationToken();\n    }\n    \n    get token(): CancellationToken {\n        return this._token;\n    }\n    \n    cancel(reason?: string): void {\n        this._token.cancel(reason);\n    }\n}\n\n// Utility class for managing cancellable operations\nexport class OperationManager {\n    private activeOperations = new Map<string, CancellationTokenSource>();\n    \n    // Cancel existing operation and create a new cancellation token\n    startOperation(operationId: string, reason?: string): CancellationToken {\n        this.cancelOperation(operationId, reason);\n        \n        const tokenSource = new CancellationTokenSource();\n        this.activeOperations.set(operationId, tokenSource);\n        \n        return tokenSource.token;\n    }\n    \n    // Cancel a specific operation\n    cancelOperation(operationId: string, reason?: string): void {\n        const existingOperation = this.activeOperations.get(operationId);\n        if (existingOperation) {\n            existingOperation.cancel(reason || 'New operation started');\n            this.activeOperations.delete(operationId);\n        }\n    }\n    \n    // Cancel all active operations\n    cancelAllOperations(reason?: string): void {\n        for (const [id, tokenSource] of this.activeOperations) {\n            tokenSource.cancel(reason || 'All operations cancelled');\n        }\n        this.activeOperations.clear();\n    }\n    \n    // Check if an operation is active\n    isOperationActive(operationId: string): boolean {\n        return this.activeOperations.has(operationId);\n    }\n    \n    // Get active operation count\n    getActiveOperationCount(): number {\n        return this.activeOperations.size;\n    }\n    \n    // Complete an operation (remove from active list)\n    completeOperation(operationId: string): void {\n        this.activeOperations.delete(operationId);\n    }\n}\n\n// Debounced operation helper\nexport class DebouncedOperation {\n    private timeoutId: number | null = null;\n    private operationManager: OperationManager;\n    private operationId: string;\n    \n    constructor(operationManager: OperationManager, operationId: string, private delay: number = 300) {\n        this.operationManager = operationManager;\n        this.operationId = operationId;\n    }\n    \n    execute<T>(operation: (cancellationToken: CancellationToken) => Promise<T>): Promise<T> {\n        return new Promise((resolve, reject) => {\n            // Clear existing timeout\n            if (this.timeoutId !== null) {\n                clearTimeout(this.timeoutId);\n            }\n            \n            // Set new timeout\n            this.timeoutId = window.setTimeout(async () => {\n                try {\n                    const token = this.operationManager.startOperation(this.operationId, 'Debounced operation');\n                    const result = await operation(token);\n                    this.operationManager.completeOperation(this.operationId);\n                    resolve(result);\n                } catch (error) {\n                    if (error instanceof CancellationError) {\n                        // Don't reject on cancellation, just ignore\n                        return;\n                    }\n                    reject(error);\n                }\n            }, this.delay);\n        });\n    }\n    \n    cancel(): void {\n        if (this.timeoutId !== null) {\n            clearTimeout(this.timeoutId);\n            this.timeoutId = null;\n        }\n        this.operationManager.cancelOperation(this.operationId, 'Debounced operation cancelled');\n    }\n    \n    setDelay(delay: number): void {\n        this.delay = Math.max(0, Math.min(5000, delay)); // Clamp between 0-5000ms\n    }\n}\n\n// Utility functions for promise-based cancellation\nexport function createCancellablePromise<T>(\n    executor: (resolve: (value: T) => void, reject: (reason?: any) => void, cancellationToken: CancellationToken) => void,\n    cancellationToken: CancellationToken\n): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n        if (cancellationToken.isCancelled) {\n            reject(new CancellationError(cancellationToken.reason));\n            return;\n        }\n        \n        try {\n            executor(resolve, reject, cancellationToken);\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\nexport function delay(ms: number, cancellationToken?: CancellationToken): Promise<void> {\n    return createCancellablePromise<void>((resolve, reject, token) => {\n        const timeoutId = setTimeout(() => {\n            if (token.isCancelled) {\n                reject(new CancellationError(token.reason));\n            } else {\n                resolve();\n            }\n        }, ms);\n        \n        // If cancelled before timeout, clear it\n        if (token.isCancelled) {\n            clearTimeout(timeoutId);\n            reject(new CancellationError(token.reason));\n        }\n    }, cancellationToken || new CancellationToken());\n}","import { Course } from '../../types/types';\nimport { CancellationToken, CancellationError } from '../../utils/RequestCancellation';\nimport { PerformanceMetrics } from '../../utils/PerformanceMetrics';\n\nexport interface RenderBatchCallback {\n    (batchIndex: number, batchCount: number, totalCount: number): void;\n}\n\nexport interface RenderCompleteCallback {\n    (totalRendered: number, totalTime: number): void;\n}\n\nexport interface ProgressiveRenderOptions {\n    batchSize?: number;\n    batchDelay?: number;\n    onBatch?: RenderBatchCallback;\n    onComplete?: RenderCompleteCallback;\n    enableVirtualization?: boolean;\n    performanceMetrics?: PerformanceMetrics;\n}\n\nexport class ProgressiveRenderer {\n    private batchSize: number = 10;\n    private batchDelay: number = 16; // 60 FPS\n    private currentRenderToken: number | null = null;\n    private isRendering: boolean = false;\n    private renderStartTime: number = 0;\n    private performanceMetrics?: PerformanceMetrics;\n\n    constructor(private options: ProgressiveRenderOptions = {}) {\n        this.batchSize = options.batchSize || 10;\n        this.batchDelay = options.batchDelay || 16;\n        this.performanceMetrics = options.performanceMetrics;\n    }\n\n    async renderCoursesBatched(\n        courses: Course[], \n        renderFunction: (courses: Course[], isFirstBatch: boolean, isComplete: boolean) => void,\n        container: HTMLElement,\n        cancellationToken?: CancellationToken\n    ): Promise<void> {\n        // Cancel any existing render operation\n        this.cancelCurrentRender();\n        \n        if (courses.length === 0) {\n            renderFunction([], true, true);\n            return;\n        }\n\n        this.isRendering = true;\n        this.renderStartTime = performance.now();\n        const renderToken = Date.now() + Math.random(); // Unique token for this render\n        this.currentRenderToken = renderToken;\n\n        const totalBatches = Math.ceil(courses.length / this.batchSize);\n        \n        // Start performance tracking\n        const operationId = this.performanceMetrics?.startOperation('batch-render', {\n            itemCount: courses.length,\n            batchSize: this.batchSize,\n            batchCount: totalBatches\n        });\n\n        try {\n            // Check for cancellation before starting\n            cancellationToken?.throwIfCancelled();\n            \n            // Render first batch immediately for instant feedback\n            const firstBatch = courses.slice(0, this.batchSize);\n            renderFunction(firstBatch, true, courses.length <= this.batchSize);\n            \n            // Call batch callback\n            this.options.onBatch?.(1, totalBatches, courses.length);\n\n            if (courses.length <= this.batchSize) {\n                // Single batch, we're done\n                this.completeRender(courses.length);\n                return;\n            }\n\n            // Render remaining batches progressively\n            for (let i = 1; i < totalBatches; i++) {\n                // Check if this render was cancelled (internal token)\n                if (this.currentRenderToken !== renderToken) {\n                    return; // Render was cancelled\n                }\n                \n                // Check external cancellation token\n                cancellationToken?.throwIfCancelled();\n\n                await this.wait(this.batchDelay, cancellationToken);\n\n                // Check again after delay\n                if (this.currentRenderToken !== renderToken) {\n                    return; // Render was cancelled\n                }\n                \n                cancellationToken?.throwIfCancelled();\n\n                const start = i * this.batchSize;\n                const end = Math.min((i + 1) * this.batchSize, courses.length);\n                const batch = courses.slice(start, end);\n                \n                renderFunction(batch, false, i === totalBatches - 1);\n                \n                // Call batch callback\n                this.options.onBatch?.(i + 1, totalBatches, courses.length);\n            }\n\n            this.completeRender(courses.length);\n            \n            // End performance tracking\n            if (operationId) {\n                this.performanceMetrics?.endOperation(operationId, {\n                    completed: true,\n                    cancelled: false\n                });\n            }\n            \n        } catch (error) {\n            if (error instanceof CancellationError) {\n                // Clean cancellation, not an error\n                this.isRendering = false;\n                this.currentRenderToken = null;\n                \n                // Track cancellation\n                if (operationId) {\n                    this.performanceMetrics?.endOperation(operationId, {\n                        completed: false,\n                        cancelled: true\n                    });\n                }\n                return;\n            }\n            console.error('Progressive rendering error:', error);\n            this.isRendering = false;\n            this.currentRenderToken = null;\n            \n            // Track error\n            if (operationId) {\n                this.performanceMetrics?.endOperation(operationId, {\n                    completed: false,\n                    cancelled: false,\n                    error: error instanceof Error ? error.message : String(error)\n                });\n            }\n        }\n    }\n\n    // Specialized method for course list rendering\n    async renderCourseList(\n        courses: Course[], \n        courseSelectionService: any, \n        container: HTMLElement,\n        elementToCourseMap: WeakMap<HTMLElement, Course>,\n        cancellationToken?: CancellationToken,\n        isLoadMore: boolean = false\n    ): Promise<void> {\n        let allHtml = '';\n        let renderedCourses: Course[] = [];\n\n        const renderFunction = (batchCourses: Course[], isFirstBatch: boolean, isComplete: boolean) => {\n            if (isFirstBatch && !isLoadMore) {\n                // Clear container and start fresh (only for initial load)\n                container.innerHTML = '<div class=\"course-list\"></div>';\n                allHtml = '';\n                renderedCourses = [];\n            } else if (isFirstBatch && isLoadMore) {\n                // Find existing course list for append\n                allHtml = '';\n                renderedCourses = [];\n                // Clean up any existing loading indicators from previous renders\n                const existingIndicators = container.querySelectorAll('.loading-indicator');\n                existingIndicators.forEach(indicator => indicator.remove());\n            }\n\n            // Build HTML for this batch\n            const batchHtml = batchCourses.map(course => {\n                const isSelected = courseSelectionService.isCourseSelected(course);\n                const hasWarning = this.courseHasWarning(course);\n                \n                return `\n                    <div class=\"course-item ${isSelected ? 'selected' : ''}\" data-course-id=\"${course.id}\">\n                        <div class=\"course-header\">\n                            <button class=\"course-select-btn ${isSelected ? 'selected' : ''}\" title=\"${isSelected ? 'Remove from selection' : 'Add to selection'}\">\n                                ${isSelected ? '✓' : '+'}\n                            </button>\n                            <div class=\"course-code\">${course.department.abbreviation}${course.number}</div>\n                            <div class=\"course-details\">\n                                <div class=\"course-name\">\n                                    ${course.name}\n                                    ${hasWarning ? '<span class=\"warning-icon\">⚠</span>' : ''}\n                                </div>\n                                <div class=\"course-sections\">\n                                    ${course.sections.map(section => {\n                                        const isFull = section.seatsAvailable <= 0;\n                                        return `<span class=\"section-badge ${isFull ? 'full' : ''}\" data-section=\"${section.number}\">${section.number}</span>`;\n                                    }).join('')}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                `;\n            }).join('');\n\n            allHtml += batchHtml;\n            renderedCourses.push(...batchCourses);\n\n            // Update DOM\n            const courseListContainer = container.querySelector('.course-list');\n            if (courseListContainer) {\n                if (isLoadMore) {\n                    // Remove load more button before appending\n                    const loadMoreContainer = container.querySelector('.load-more-container');\n                    if (loadMoreContainer) {\n                        loadMoreContainer.remove();\n                    }\n                    courseListContainer.insertAdjacentHTML('beforeend', batchHtml);\n                    \n                    // Map only the newly added elements\n                    const allElements = courseListContainer.querySelectorAll('.course-item');\n                    const startIndex = allElements.length - batchCourses.length;\n                    for (let i = 0; i < batchCourses.length; i++) {\n                        const element = allElements[startIndex + i];\n                        if (element) {\n                            elementToCourseMap.set(element as HTMLElement, batchCourses[i]);\n                        }\n                    }\n                } else {\n                    // Replace content completely\n                    courseListContainer.innerHTML = allHtml;\n                    \n                    // Update course mapping for all rendered elements\n                    const courseElements = courseListContainer.querySelectorAll('.course-item');\n                    courseElements.forEach((element, index) => {\n                        if (index < renderedCourses.length) {\n                            elementToCourseMap.set(element as HTMLElement, renderedCourses[index]);\n                        }\n                    });\n                }\n            }\n\n            // Handle loading indicator\n            if (isComplete && courseListContainer) {\n                // Remove any existing loading indicators when rendering is complete\n                const existingIndicators = courseListContainer.querySelectorAll('.loading-indicator');\n                existingIndicators.forEach(indicator => indicator.remove());\n            } else if (!isComplete && courseListContainer) {\n                // Remove any existing loading indicators before adding new one\n                const existingIndicators = courseListContainer.querySelectorAll('.loading-indicator');\n                existingIndicators.forEach(indicator => indicator.remove());\n                \n                // Add new loading indicator\n                const loadingIndicator = document.createElement('div');\n                loadingIndicator.className = 'loading-indicator';\n                loadingIndicator.innerHTML = `\n                    <div class=\"loading-spinner\"></div>\n                    <span>Loading more courses... (${renderedCourses.length} of ${courses.length})</span>\n                `;\n                courseListContainer.appendChild(loadingIndicator);\n            }\n        };\n\n        await this.renderCoursesBatched(courses, renderFunction, container, cancellationToken);\n    }\n\n    // Specialized method for course grid rendering\n    async renderCourseGrid(\n        courses: Course[], \n        courseSelectionService: any, \n        container: HTMLElement,\n        elementToCourseMap: WeakMap<HTMLElement, Course>,\n        cancellationToken?: CancellationToken,\n        isLoadMore: boolean = false\n    ): Promise<void> {\n        let allHtml = '';\n        let renderedCourses: Course[] = [];\n\n        const renderFunction = (batchCourses: Course[], isFirstBatch: boolean, isComplete: boolean) => {\n            if (isFirstBatch && !isLoadMore) {\n                // Clear container and start fresh (only for initial load)\n                container.innerHTML = '<div class=\"course-grid\"></div>';\n                allHtml = '';\n                renderedCourses = [];\n            } else if (isFirstBatch && isLoadMore) {\n                // Find existing course grid for append\n                allHtml = '';\n                renderedCourses = [];\n                // Clean up any existing loading indicators from previous renders\n                const existingIndicators = container.querySelectorAll('.loading-indicator, .grid-loading');\n                existingIndicators.forEach(indicator => indicator.remove());\n            }\n\n            const batchHtml = batchCourses.map(course => {\n                const isSelected = courseSelectionService.isCourseSelected(course);\n                const hasWarning = this.courseHasWarning(course);\n                const credits = course.minCredits === course.maxCredits ? course.minCredits : `${course.minCredits}-${course.maxCredits}`;\n                \n                return `\n                    <div class=\"course-card ${isSelected ? 'selected' : ''}\" data-course-id=\"${course.id}\">\n                        <div class=\"course-card-header\">\n                            <div class=\"course-code\">${course.department.abbreviation}${course.number}</div>\n                            <button class=\"course-select-btn ${isSelected ? 'selected' : ''}\" title=\"${isSelected ? 'Remove from selection' : 'Add to selection'}\">\n                                ${isSelected ? '✓' : '+'}\n                            </button>\n                        </div>\n                        <div class=\"course-title\">\n                            ${course.name}\n                            ${hasWarning ? '<span class=\"warning-icon\">⚠</span>' : ''}\n                        </div>\n                        <div class=\"course-info\">\n                            <span class=\"course-credits\">${credits} credits</span>\n                            <span class=\"course-sections-count\">${course.sections.length} section${course.sections.length !== 1 ? 's' : ''}</span>\n                        </div>\n                    </div>\n                `;\n            }).join('');\n\n            allHtml += batchHtml;\n            renderedCourses.push(...batchCourses);\n\n            const courseGridContainer = container.querySelector('.course-grid');\n            if (courseGridContainer) {\n                if (isLoadMore) {\n                    // Remove load more button before appending\n                    const loadMoreContainer = container.querySelector('.load-more-container');\n                    if (loadMoreContainer) {\n                        loadMoreContainer.remove();\n                    }\n                    courseGridContainer.insertAdjacentHTML('beforeend', batchHtml);\n                    \n                    // Map only the newly added elements\n                    const allElements = courseGridContainer.querySelectorAll('.course-card');\n                    const startIndex = allElements.length - batchCourses.length;\n                    for (let i = 0; i < batchCourses.length; i++) {\n                        const element = allElements[startIndex + i];\n                        if (element) {\n                            elementToCourseMap.set(element as HTMLElement, batchCourses[i]);\n                        }\n                    }\n                } else {\n                    // Replace content completely\n                    courseGridContainer.innerHTML = allHtml;\n                    \n                    // Update course mapping for all elements\n                    const courseElements = courseGridContainer.querySelectorAll('.course-card');\n                    courseElements.forEach((element, index) => {\n                        if (index < renderedCourses.length) {\n                            elementToCourseMap.set(element as HTMLElement, renderedCourses[index]);\n                        }\n                    });\n                }\n            }\n\n            // Handle loading indicator\n            if (isComplete && courseGridContainer) {\n                // Remove any existing loading indicators when rendering is complete\n                const existingIndicators = courseGridContainer.querySelectorAll('.loading-indicator, .grid-loading');\n                existingIndicators.forEach(indicator => indicator.remove());\n            } else if (!isComplete && courseGridContainer) {\n                // Remove any existing loading indicators before adding new one\n                const existingIndicators = courseGridContainer.querySelectorAll('.loading-indicator, .grid-loading');\n                existingIndicators.forEach(indicator => indicator.remove());\n                \n                // Add new loading indicator\n                const loadingIndicator = document.createElement('div');\n                loadingIndicator.className = 'loading-indicator grid-loading';\n                loadingIndicator.innerHTML = `\n                    <div class=\"loading-spinner\"></div>\n                    <span>Loading more courses... (${renderedCourses.length} of ${courses.length})</span>\n                `;\n                courseGridContainer.appendChild(loadingIndicator);\n            }\n        };\n\n        await this.renderCoursesBatched(courses, renderFunction, container, cancellationToken);\n    }\n\n    cancelCurrentRender(): void {\n        if (this.currentRenderToken !== null) {\n            this.currentRenderToken = null;\n            this.isRendering = false;\n            \n            // Clean up any loading indicators from cancelled renders\n            const loadingIndicators = document.querySelectorAll('.loading-indicator, .grid-loading');\n            loadingIndicators.forEach(indicator => indicator.remove());\n        }\n    }\n\n    isCurrentlyRendering(): boolean {\n        return this.isRendering;\n    }\n\n    setBatchSize(size: number): void {\n        this.batchSize = Math.max(1, Math.min(100, size)); // Clamp between 1-100\n    }\n    \n    getBatchSize(): number {\n        return this.batchSize;\n    }\n\n    setBatchDelay(delay: number): void {\n        this.batchDelay = Math.max(0, Math.min(100, delay)); // Clamp between 0-100ms\n    }\n\n    private wait(ms: number, cancellationToken?: CancellationToken): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (cancellationToken?.isCancelled) {\n                reject(new CancellationError(cancellationToken.reason));\n                return;\n            }\n            \n            const timeoutId = setTimeout(() => {\n                if (cancellationToken?.isCancelled) {\n                    reject(new CancellationError(cancellationToken.reason));\n                } else {\n                    resolve();\n                }\n            }, ms);\n            \n            // Clean up timeout if cancelled\n            if (cancellationToken?.isCancelled) {\n                clearTimeout(timeoutId);\n                reject(new CancellationError(cancellationToken.reason));\n            }\n        });\n    }\n\n    private courseHasWarning(course: Course): boolean {\n        return course.sections.every(section => section.seatsAvailable <= 0);\n    }\n\n    private completeRender(totalRendered: number): void {\n        const totalTime = performance.now() - this.renderStartTime;\n        this.isRendering = false;\n        this.currentRenderToken = null;\n        this.options.onComplete?.(totalRendered, totalTime);\n    }\n}","export interface PerformanceMetric {\n    operation: string;\n    startTime: number;\n    endTime: number;\n    duration: number;\n    metadata?: Record<string, any>;\n}\n\nexport interface PerformanceReport {\n    totalOperations: number;\n    averageDuration: number;\n    minDuration: number;\n    maxDuration: number;\n    operations: PerformanceMetric[];\n}\n\nexport interface FilterPerformanceMetrics {\n    operation: 'filter' | 'search' | 'render' | 'batch-render';\n    itemCount: number;\n    duration: number;\n    batchSize?: number;\n    batchCount?: number;\n    cancelled?: boolean;\n}\n\nexport class PerformanceMetrics {\n    private metrics: PerformanceMetric[] = [];\n    private maxMetrics: number = 100; // Keep last 100 metrics\n    private activeOperations = new Map<string, number>();\n\n    // Start timing an operation\n    startOperation(operation: string, metadata?: Record<string, any>): string {\n        const operationId = `${operation}_${Date.now()}_${Math.random()}`;\n        this.activeOperations.set(operationId, performance.now());\n        return operationId;\n    }\n\n    // End timing an operation\n    endOperation(operationId: string, metadata?: Record<string, any>): PerformanceMetric | null {\n        const startTime = this.activeOperations.get(operationId);\n        if (!startTime) {\n            console.warn(`No start time found for operation: ${operationId}`);\n            return null;\n        }\n\n        const endTime = performance.now();\n        const duration = endTime - startTime;\n        \n        const metric: PerformanceMetric = {\n            operation: operationId.split('_')[0],\n            startTime,\n            endTime,\n            duration,\n            metadata\n        };\n\n        this.addMetric(metric);\n        this.activeOperations.delete(operationId);\n        \n        return metric;\n    }\n\n    // Track a completed operation\n    trackOperation(operation: string, duration: number, metadata?: Record<string, any>): void {\n        const endTime = performance.now();\n        const metric: PerformanceMetric = {\n            operation,\n            startTime: endTime - duration,\n            endTime,\n            duration,\n            metadata\n        };\n        \n        this.addMetric(metric);\n    }\n\n    // Track filter-specific performance\n    trackFilterOperation(metrics: FilterPerformanceMetrics): void {\n        this.trackOperation(metrics.operation, metrics.duration, {\n            itemCount: metrics.itemCount,\n            batchSize: metrics.batchSize,\n            batchCount: metrics.batchCount,\n            cancelled: metrics.cancelled\n        });\n    }\n\n    // Track rendering performance\n    trackRenderOperation(itemCount: number, duration: number, batchSize?: number, batchCount?: number): void {\n        this.trackFilterOperation({\n            operation: 'render',\n            itemCount,\n            duration,\n            batchSize,\n            batchCount\n        });\n    }\n\n    // Track search performance\n    trackSearchOperation(query: string, resultCount: number, duration: number): void {\n        this.trackOperation('search', duration, {\n            query: query.substring(0, 50), // Truncate long queries\n            queryLength: query.length,\n            resultCount\n        });\n    }\n\n    // Add a metric to the collection\n    private addMetric(metric: PerformanceMetric): void {\n        this.metrics.push(metric);\n        \n        // Keep only the most recent metrics\n        if (this.metrics.length > this.maxMetrics) {\n            this.metrics = this.metrics.slice(-this.maxMetrics);\n        }\n    }\n\n    // Generate performance report\n    generateReport(operationType?: string): PerformanceReport {\n        let filteredMetrics = this.metrics;\n        \n        if (operationType) {\n            filteredMetrics = this.metrics.filter(m => m.operation === operationType);\n        }\n\n        if (filteredMetrics.length === 0) {\n            return {\n                totalOperations: 0,\n                averageDuration: 0,\n                minDuration: 0,\n                maxDuration: 0,\n                operations: []\n            };\n        }\n\n        const durations = filteredMetrics.map(m => m.duration);\n        \n        return {\n            totalOperations: filteredMetrics.length,\n            averageDuration: durations.reduce((a, b) => a + b, 0) / durations.length,\n            minDuration: Math.min(...durations),\n            maxDuration: Math.max(...durations),\n            operations: filteredMetrics\n        };\n    }\n\n    // Get recent metrics\n    getRecentMetrics(count: number = 10): PerformanceMetric[] {\n        return this.metrics.slice(-count);\n    }\n\n    // Clear all metrics\n    clearMetrics(): void {\n        this.metrics = [];\n        this.activeOperations.clear();\n    }\n\n    // Get metrics summary for console logging\n    getMetricsSummary(): string {\n        const report = this.generateReport();\n        if (report.totalOperations === 0) {\n            return 'No performance metrics collected';\n        }\n\n        return `Performance Summary:\n- Total Operations: ${report.totalOperations}\n- Average Duration: ${report.averageDuration.toFixed(2)}ms\n- Min Duration: ${report.minDuration.toFixed(2)}ms\n- Max Duration: ${report.maxDuration.toFixed(2)}ms`;\n    }\n\n    // Log performance summary to console\n    logSummary(): void {\n        console.log(this.getMetricsSummary());\n    }\n\n    // Check if performance is degraded\n    isPerformanceDegraded(operationType: string, thresholdMs: number = 1000): boolean {\n        const report = this.generateReport(operationType);\n        return report.averageDuration > thresholdMs || report.maxDuration > thresholdMs * 2;\n    }\n\n    // Get performance insights\n    getInsights(): string[] {\n        const insights: string[] = [];\n        const report = this.generateReport();\n        \n        if (report.totalOperations === 0) {\n            return ['No performance data available'];\n        }\n\n        if (report.averageDuration > 500) {\n            insights.push(`Average operation time (${report.averageDuration.toFixed(2)}ms) is high - consider optimization`);\n        }\n\n        if (report.maxDuration > 2000) {\n            insights.push(`Slowest operation (${report.maxDuration.toFixed(2)}ms) is very slow - investigate bottlenecks`);\n        }\n\n        const renderReport = this.generateReport('render');\n        if (renderReport.totalOperations > 0 && renderReport.averageDuration > 300) {\n            insights.push(`Rendering performance could be improved (avg: ${renderReport.averageDuration.toFixed(2)}ms)`);\n        }\n\n        const searchReport = this.generateReport('search');\n        if (searchReport.totalOperations > 0 && searchReport.averageDuration > 200) {\n            insights.push(`Search performance could be improved (avg: ${searchReport.averageDuration.toFixed(2)}ms)`);\n        }\n\n        if (insights.length === 0) {\n            insights.push('Performance looks good!');\n        }\n\n        return insights;\n    }\n\n    // Auto-adjust batch size based on performance\n    getOptimalBatchSize(currentBatchSize: number = 10): number {\n        const renderReport = this.generateReport('render');\n        \n        if (renderReport.totalOperations < 3) {\n            return currentBatchSize; // Not enough data\n        }\n\n        const avgDuration = renderReport.averageDuration;\n        \n        // If rendering is fast, we can increase batch size\n        if (avgDuration < 50) {\n            return Math.min(currentBatchSize + 5, 50);\n        }\n        \n        // If rendering is slow, decrease batch size\n        if (avgDuration > 200) {\n            return Math.max(currentBatchSize - 2, 5);\n        }\n        \n        return currentBatchSize;\n    }\n}","import { Course, Department } from '../../types/types'\nimport { CourseSelectionService } from '../../services/CourseSelectionService'\nimport { FilterService } from '../../services/FilterService'\nimport { ProgressiveRenderer, ProgressiveRenderOptions } from '../utils/ProgressiveRenderer'\nimport { CancellationToken } from '../../utils/RequestCancellation'\nimport { PerformanceMetrics } from '../../utils/PerformanceMetrics'\n\nexport class CourseController {\n    private allDepartments: Department[] = [];\n    private selectedCourse: Course | null = null;\n    private courseSelectionService: CourseSelectionService;\n    private filterService: FilterService | null = null;\n    private elementToCourseMap = new WeakMap<HTMLElement, Course>();\n    private progressiveRenderer: ProgressiveRenderer;\n    private performanceMetrics: PerformanceMetrics;\n    \n    // Pagination state\n    private allCoursesToDisplay: Course[] = [];\n    private displayedCourses: Course[] = [];\n    private readonly INITIAL_PAGE_SIZE = 100;\n    private currentPageSize: number = this.INITIAL_PAGE_SIZE;\n    private hasMore: boolean = false;\n\n    constructor(courseSelectionService: CourseSelectionService) {\n        this.courseSelectionService = courseSelectionService;\n        \n        // Initialize performance metrics\n        this.performanceMetrics = new PerformanceMetrics();\n        \n        // Initialize progressive renderer with performance callbacks\n        const renderOptions: ProgressiveRenderOptions = {\n            batchSize: 10,\n            batchDelay: 16, // 60 FPS\n            performanceMetrics: this.performanceMetrics,\n            onBatch: (batchIndex, totalBatches, totalCount) => {\n                // Update any progress indicators if needed\n                console.log(`Rendered batch ${batchIndex}/${totalBatches} (${totalCount} total courses)`);\n            },\n            onComplete: (totalRendered, totalTime) => {\n                console.log(`Progressive rendering complete: ${totalRendered} courses in ${totalTime.toFixed(2)}ms`);\n                \n                // Log performance insights periodically\n                if (Math.random() < 0.1) { // 10% chance to log insights\n                    const insights = this.performanceMetrics.getInsights();\n                    console.log('Performance insights:', insights.join(', '));\n                    \n                    // Auto-adjust batch size based on performance\n                    const optimalBatchSize = this.performanceMetrics.getOptimalBatchSize(this.progressiveRenderer.getBatchSize());\n                    if (optimalBatchSize !== this.progressiveRenderer.getBatchSize()) {\n                        console.log(`Adjusting batch size from ${this.progressiveRenderer.getBatchSize()} to ${optimalBatchSize}`);\n                        this.progressiveRenderer.setBatchSize(optimalBatchSize);\n                    }\n                }\n            }\n        };\n        \n        this.progressiveRenderer = new ProgressiveRenderer(renderOptions);\n    }\n\n    setFilterService(filterService: FilterService): void {\n        this.filterService = filterService;\n    }\n\n    setAllDepartments(departments: Department[]): void {\n        this.allDepartments = departments;\n    }\n\n    // Pagination management methods\n    private resetPagination(): void {\n        this.displayedCourses = [];\n        this.currentPageSize = this.INITIAL_PAGE_SIZE;\n        this.hasMore = false;\n    }\n\n    private setInitialCourses(courses: Course[]): void {\n        this.allCoursesToDisplay = courses;\n        this.displayedCourses = courses.slice(0, this.INITIAL_PAGE_SIZE);\n        this.hasMore = courses.length > this.INITIAL_PAGE_SIZE;\n        this.currentPageSize = Math.min(this.INITIAL_PAGE_SIZE, courses.length);\n    }\n\n    loadMoreCourses(): void {\n        if (!this.hasMore) return;\n\n        const nextBatchStart = this.displayedCourses.length;\n        const nextBatchEnd = Math.min(nextBatchStart + this.INITIAL_PAGE_SIZE, this.allCoursesToDisplay.length);\n        const nextBatch = this.allCoursesToDisplay.slice(nextBatchStart, nextBatchEnd);\n        \n        this.displayedCourses.push(...nextBatch);\n        this.hasMore = this.displayedCourses.length < this.allCoursesToDisplay.length;\n    }\n\n    getRemainingCoursesCount(): number {\n        return this.allCoursesToDisplay.length - this.displayedCourses.length;\n    }\n\n    hasMoreCourses(): boolean {\n        return this.hasMore;\n    }\n\n    getSelectedCourse(): Course | null {\n        return this.selectedCourse;\n    }\n\n    async displayCourses(courses: Course[], currentView: 'list' | 'grid'): Promise<void> {\n        return this.displayCoursesWithCancellation(courses, currentView);\n    }\n    \n    async displayCoursesWithCancellation(courses: Course[], currentView: 'list' | 'grid', cancellationToken?: CancellationToken, isLoadMore: boolean = false): Promise<void> {\n        // Cancel any existing render operations\n        this.progressiveRenderer.cancelCurrentRender();\n        \n        // Handle pagination setup for initial load\n        if (!isLoadMore) {\n            this.resetPagination();\n            this.setInitialCourses(courses);\n        }\n        \n        // Use displayed courses (paginated) instead of all courses\n        const coursesToRender = isLoadMore ? \n            this.allCoursesToDisplay.slice(this.displayedCourses.length - this.INITIAL_PAGE_SIZE) : \n            this.displayedCourses;\n        \n        if (currentView === 'grid') {\n            await this.displayCoursesGrid(coursesToRender, cancellationToken, isLoadMore);\n        } else {\n            await this.displayCoursesList(coursesToRender, cancellationToken, isLoadMore);\n        }\n    }\n\n    async displayMoreCourses(currentView: 'list' | 'grid', cancellationToken?: CancellationToken): Promise<void> {\n        if (!this.hasMore) return;\n        \n        const previousCount = this.displayedCourses.length;\n        this.loadMoreCourses();\n        \n        // Get the newly loaded courses\n        const newCourses = this.displayedCourses.slice(previousCount);\n        \n        if (currentView === 'grid') {\n            await this.displayCoursesGrid(newCourses, cancellationToken, true);\n        } else {\n            await this.displayCoursesList(newCourses, cancellationToken, true);\n        }\n        \n        // Update the Load More button\n        this.updateLoadMoreButton();\n    }\n\n    private async displayCoursesList(courses: Course[], cancellationToken?: CancellationToken, isLoadMore: boolean = false): Promise<void> {\n        const courseContainer = document.getElementById('course-container');\n        if (!courseContainer) return;\n\n        if (courses.length === 0 && !isLoadMore) {\n            courseContainer.innerHTML = '<div class=\"empty-state\">No courses found in this department.</div>';\n            return;\n        }\n\n        // Sort courses by course number\n        const sortedCourses = courses.sort((a, b) => a.number.localeCompare(b.number));\n\n        // Use progressive rendering for better performance\n        await this.progressiveRenderer.renderCourseList(\n            sortedCourses, \n            this.courseSelectionService, \n            courseContainer,\n            this.elementToCourseMap,\n            cancellationToken,\n            isLoadMore\n        );\n        \n        // Always add Load More button if there are more courses\n        this.addLoadMoreButton();\n    }\n\n    private async displayCoursesGrid(courses: Course[], cancellationToken?: CancellationToken, isLoadMore: boolean = false): Promise<void> {\n        const courseContainer = document.getElementById('course-container');\n        if (!courseContainer) return;\n\n        if (courses.length === 0 && !isLoadMore) {\n            courseContainer.innerHTML = '<div class=\"empty-state\">No courses found in this department.</div>';\n            return;\n        }\n\n        // Sort courses by course number\n        const sortedCourses = courses.sort((a, b) => a.number.localeCompare(b.number));\n\n        // Use progressive rendering for better performance\n        await this.progressiveRenderer.renderCourseGrid(\n            sortedCourses, \n            this.courseSelectionService, \n            courseContainer,\n            this.elementToCourseMap,\n            cancellationToken,\n            isLoadMore\n        );\n        \n        // Always add Load More button if there are more courses\n        this.addLoadMoreButton();\n    }\n\n    private courseHasWarning(course: Course): boolean {\n        // Check if ALL sections are fully enrolled (no available options)\n        return course.sections.every(section => section.seatsAvailable <= 0);\n    }\n\n    handleSearch(query: string, selectedDepartment: Department | null): Course[] {\n        const baseCourses = selectedDepartment ? selectedDepartment.courses : this.getAllCourses();\n        \n        // If we have a FilterService, use it for search and filtering\n        if (this.filterService) {\n            const results = this.filterService.searchAndFilter(query, baseCourses);\n            this.updateSearchHeader(query, results.length, selectedDepartment);\n            return results;\n        }\n        \n        // Fallback to simple search if no FilterService\n        if (!query.trim()) {\n            return baseCourses;\n        }\n\n        const filteredCourses = baseCourses.filter(course => \n            course.name.toLowerCase().includes(query.toLowerCase()) ||\n            course.number.toLowerCase().includes(query.toLowerCase()) ||\n            course.id.toLowerCase().includes(query.toLowerCase())\n        );\n\n        this.updateSearchHeader(query, filteredCourses.length, selectedDepartment);\n        return filteredCourses;\n    }\n\n    // New method to handle courses with filters (no search query)\n    handleFilter(selectedDepartment: Department | null): Course[] {\n        const baseCourses = selectedDepartment ? selectedDepartment.courses : this.getAllCourses();\n        \n        if (this.filterService && !this.filterService.isEmpty()) {\n            const results = this.filterService.filterCourses(baseCourses);\n            this.updateFilterHeader(results.length, selectedDepartment);\n            return results;\n        }\n        \n        return baseCourses;\n    }\n\n    private getAllCourses(): Course[] {\n        const allCourses: Course[] = [];\n        this.allDepartments.forEach(dept => {\n            allCourses.push(...dept.courses);\n        });\n        return allCourses;\n    }\n\n    private updateSearchHeader(query: string, resultCount: number, selectedDepartment: Department | null): void {\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            if (query.trim()) {\n                contentHeader.textContent = `Search Results (${resultCount})`;\n            } else if (selectedDepartment) {\n                contentHeader.textContent = `${selectedDepartment.name} (${resultCount})`;\n            } else {\n                contentHeader.textContent = `All Courses (${resultCount})`;\n            }\n        }\n    }\n\n    private updateFilterHeader(resultCount: number, selectedDepartment: Department | null): void {\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            let title = selectedDepartment ? selectedDepartment.name : 'All Courses';\n            \n            if (this.filterService && !this.filterService.isEmpty()) {\n                const filterSummary = this.filterService.getFilterSummary();\n                title += ` (${resultCount}) - ${filterSummary}`;\n            } else {\n                title += ` (${resultCount})`;\n            }\n            \n            contentHeader.textContent = title;\n        }\n    }\n\n    selectCourse(element: HTMLElement): Course | null {\n        const course = this.elementToCourseMap.get(element);\n        if (!course) return null;\n\n        this.selectedCourse = course;\n        this.displayCourseDescription(course);\n        \n        // Update active state for course items\n        document.querySelectorAll('.course-item, .course-card').forEach(item => {\n            item.classList.remove('active');\n        });\n        \n        element.classList.add('active');\n        return course;\n    }\n\n    // Legacy method for backward compatibility\n    selectCourseById(courseId: string): Course | null {\n        const course = this.courseSelectionService.findCourseById(courseId);\n        if (!course) return null;\n\n        // Find the associated element and call selectCourse\n        const allElements = document.querySelectorAll('.course-item, .course-card');\n        for (const element of allElements) {\n            const elementCourse = this.elementToCourseMap.get(element as HTMLElement);\n            if (elementCourse?.id === courseId) {\n                return this.selectCourse(element as HTMLElement);\n            }\n        }\n        return null;\n    }\n\n    async toggleCourseSelection(element: HTMLElement): Promise<boolean> {\n        const course = this.elementToCourseMap.get(element);\n        if (!course) return false;\n\n        try {\n            const result = await this.courseSelectionService.toggleCourseSelection(course);\n            const wasSelected = result.success && result.course !== undefined;\n            this.updateCourseSelectionUI(element, wasSelected);\n            return wasSelected;\n        } catch (error) {\n            console.error('Error toggling course selection:', error);\n            return false;\n        }\n    }\n\n    // Legacy method for backward compatibility\n    async toggleCourseSelectionById(courseId: string): Promise<boolean> {\n        const course = this.courseSelectionService.findCourseById(courseId);\n        if (!course) return false;\n\n        // Find the associated element and call toggleCourseSelection\n        const allElements = document.querySelectorAll('.course-item, .course-card');\n        for (const element of allElements) {\n            const elementCourse = this.elementToCourseMap.get(element as HTMLElement);\n            if (elementCourse?.id === courseId) {\n                return await this.toggleCourseSelection(element as HTMLElement);\n            }\n        }\n        return false;\n    }\n\n    private updateCourseSelectionUI(element: HTMLElement, isSelected: boolean): void {\n        const selectBtn = element.querySelector('.course-select-btn');\n        \n        if (selectBtn) {\n            if (isSelected) {\n                element.classList.add('selected');\n                selectBtn.textContent = '✓';\n                selectBtn.classList.add('selected');\n            } else {\n                element.classList.remove('selected');\n                selectBtn.textContent = '+';\n                selectBtn.classList.remove('selected');\n            }\n        }\n    }\n\n    refreshCourseSelectionUI(): void {\n        // Update all course items to reflect current selection state\n        document.querySelectorAll('.course-item, .course-card').forEach(item => {\n            const course = this.elementToCourseMap.get(item as HTMLElement);\n            if (course) {\n                const isSelected = this.courseSelectionService.isCourseSelected(course);\n                this.updateCourseSelectionUI(item as HTMLElement, isSelected);\n            }\n        });\n    }\n\n    private displayCourseDescription(course: Course): void {\n        const descriptionContainer = document.getElementById('course-description');\n        if (!descriptionContainer) return;\n\n        const html = `\n            <div class=\"course-info\">\n                <div class=\"course-title\">${course.name}</div>\n                <div class=\"course-code\">${course.department.abbreviation}${course.number} (${course.minCredits === course.maxCredits ? course.minCredits : `${course.minCredits}-${course.maxCredits}`} credits)</div>\n            </div>\n            <div class=\"course-description-text\">${course.description}</div>\n        `;\n\n        descriptionContainer.innerHTML = html;\n    }\n\n    clearCourseDescription(): void {\n        const descriptionContainer = document.getElementById('course-description');\n        if (descriptionContainer) {\n            descriptionContainer.innerHTML = '<div class=\"empty-state\">Select a course to view description</div>';\n        }\n    }\n\n    clearCourseSelection(): void {\n        this.selectedCourse = null;\n        this.clearCourseDescription();\n    }\n\n    displaySelectedCourses(): void {\n        const selectedCoursesContainer = document.getElementById('selected-courses-list');\n        const countElement = document.getElementById('selected-count');\n        \n        if (!selectedCoursesContainer || !countElement) return;\n\n        const selectedCourses = this.courseSelectionService.getSelectedCourses();\n        \n        // Update count\n        countElement.textContent = `(${selectedCourses.length})`;\n\n        if (selectedCourses.length === 0) {\n            selectedCoursesContainer.innerHTML = '<div class=\"empty-state\">No courses selected yet</div>';\n            return;\n        }\n\n        // Sort selected courses by department and number\n        const sortedCourses = selectedCourses.sort((a, b) => {\n            const deptCompare = a.course.department.abbreviation.localeCompare(b.course.department.abbreviation);\n            if (deptCompare !== 0) return deptCompare;\n            return a.course.number.localeCompare(b.course.number);\n        });\n\n        let html = '';\n        sortedCourses.forEach(selectedCourse => {\n            const course = selectedCourse.course;\n            const credits = course.minCredits === course.maxCredits \n                ? `${course.minCredits} credits` \n                : `${course.minCredits}-${course.maxCredits} credits`;\n\n            html += `\n                <div class=\"selected-course-item\">\n                    <div class=\"selected-course-info\">\n                        <div class=\"selected-course-code\">${course.department.abbreviation}${course.number}</div>\n                        <div class=\"selected-course-name\">${course.name}</div>\n                        <div class=\"selected-course-credits\">${credits}</div>\n                    </div>\n                    <button class=\"course-remove-btn\" title=\"Remove from selection\">\n                        ×\n                    </button>\n                </div>\n            `;\n        });\n\n        selectedCoursesContainer.innerHTML = html;\n\n        // Associate remove buttons with Course objects  \n        const removeButtons = selectedCoursesContainer.querySelectorAll('.course-remove-btn');\n        removeButtons.forEach((button, index) => {\n            this.elementToCourseMap.set(button as HTMLElement, sortedCourses[index].course);\n        });\n    }\n\n    getCourseFromElement(element: HTMLElement): Course | undefined {\n        return this.elementToCourseMap.get(element);\n    }\n\n    // Load More button management\n    private addLoadMoreButton(): void {\n        const courseContainer = document.getElementById('course-container');\n        if (!courseContainer || !this.hasMore) return;\n\n        // Remove existing load more button\n        const existingButton = courseContainer.querySelector('.load-more-container');\n        if (existingButton) {\n            existingButton.remove();\n        }\n\n        if (this.hasMore) {\n            const remainingCount = this.getRemainingCoursesCount();\n            const nextBatchSize = Math.min(this.INITIAL_PAGE_SIZE, remainingCount);\n            const buttonText = nextBatchSize < this.INITIAL_PAGE_SIZE \n                ? `Load ${remainingCount} more courses` \n                : `Load next ${this.INITIAL_PAGE_SIZE} courses`;\n            \n            const loadMoreButton = document.createElement('div');\n            loadMoreButton.className = 'load-more-container';\n            loadMoreButton.innerHTML = `\n                <button class=\"load-more-button btn btn-secondary\">\n                    ${buttonText}\n                </button>\n            `;\n            \n            courseContainer.appendChild(loadMoreButton);\n        }\n    }\n\n    private updateLoadMoreButton(): void {\n        const loadMoreContainer = document.querySelector('.load-more-container');\n        \n        if (this.hasMore) {\n            const remainingCount = this.getRemainingCoursesCount();\n            const nextBatchSize = Math.min(this.INITIAL_PAGE_SIZE, remainingCount);\n            const buttonText = nextBatchSize < this.INITIAL_PAGE_SIZE \n                ? `Load ${remainingCount} more courses` \n                : `Load next ${this.INITIAL_PAGE_SIZE} courses`;\n\n            if (loadMoreContainer) {\n                // Update existing button\n                const button = loadMoreContainer.querySelector('.load-more-button');\n                if (button) {\n                    button.textContent = buttonText;\n                }\n            } else {\n                // Button doesn't exist, add it\n                this.addLoadMoreButton();\n            }\n        } else {\n            // No more courses, remove button if it exists\n            if (loadMoreContainer) {\n                loadMoreContainer.remove();\n            }\n        }\n    }\n}","import { Time, DayOfWeek } from '../../types/types';\n\nexport class TimeUtils {\n    // Schedule grid constants - 7 AM to 7 PM (12 hours)\n    static readonly START_HOUR = 7;  // 7 AM\n    static readonly END_HOUR = 19;   // 7 PM\n    static readonly TOTAL_HOURS = 12;\n    static readonly SLOTS_PER_HOUR = 2; // 30-minute intervals\n    static readonly TOTAL_TIME_SLOTS = TimeUtils.TOTAL_HOURS * TimeUtils.SLOTS_PER_HOUR;\n\n    // Days of the week in order\n    static readonly DAYS_ORDER = [\n        DayOfWeek.MONDAY,\n        DayOfWeek.TUESDAY, \n        DayOfWeek.WEDNESDAY,\n        DayOfWeek.THURSDAY,\n        DayOfWeek.FRIDAY,\n        DayOfWeek.SATURDAY,\n        DayOfWeek.SUNDAY\n    ];\n\n\n    /**\n     * Convert start time to grid row position (rounds DOWN)\n     * Used for class start times - finds the slot the class starts in\n     */\n    static timeToGridRowStart(time: Time): number {\n        const totalMinutes = time.hours * 60 + time.minutes;\n        const startMinutes = TimeUtils.START_HOUR * 60;\n        const relativeMinutes = totalMinutes - startMinutes;\n        \n        // Convert to 30-minute slots, round DOWN for start times\n        const slot = Math.floor(relativeMinutes / 30);\n        const boundedSlot = Math.max(0, Math.min(slot, TimeUtils.TOTAL_TIME_SLOTS - 1));\n        \n        return boundedSlot;\n    }\n\n    /**\n     * Convert end time to grid row position (rounds UP)\n     * Used for class end times - ensures full duration is visually represented\n     */\n    static timeToGridRowEnd(time: Time): number {\n        const totalMinutes = time.hours * 60 + time.minutes;\n        const startMinutes = TimeUtils.START_HOUR * 60;\n        const relativeMinutes = totalMinutes - startMinutes;\n        \n        // Convert to 30-minute slots, round UP for end times\n        const slot = Math.ceil(relativeMinutes / 30);\n        const boundedSlot = Math.max(0, Math.min(slot, TimeUtils.TOTAL_TIME_SLOTS - 1));\n        \n        \n        return boundedSlot;\n    }\n\n    /**\n     * Convert day of week to grid column position (0-based)\n     * Monday = 0, Tuesday = 1, etc.\n     */\n    static dayToGridColumn(day: DayOfWeek): number {\n        return TimeUtils.DAYS_ORDER.indexOf(day);\n    }\n\n    /**\n     * Calculate how many grid rows a time period spans\n     */\n    static calculateDuration(startTime: Time, endTime: Time): number {\n        const startRow = TimeUtils.timeToGridRowStart(startTime);\n        const endRow = TimeUtils.timeToGridRowEnd(endTime);\n        return Math.max(1, endRow - startRow);\n    }\n\n    /**\n     * Check if a time is within the schedule grid bounds (7 AM - 7 PM)\n     */\n    static isTimeInBounds(time: Time): boolean {\n        return time.hours >= TimeUtils.START_HOUR && time.hours < TimeUtils.END_HOUR;\n    }\n\n    /**\n     * Format time for display (e.g., \"9:00 AM\", \"2:30 PM\")\n     */\n    static formatTime(time: Time): string {\n        if (time.displayTime) {\n            return time.displayTime;\n        }\n        \n        const hours12 = time.hours === 0 ? 12 : time.hours > 12 ? time.hours - 12 : time.hours;\n        const ampm = time.hours >= 12 ? 'PM' : 'AM';\n        const minutes = time.minutes.toString().padStart(2, '0');\n        \n        return `${hours12}:${minutes} ${ampm}`;\n    }\n\n    /**\n     * Format time range for display (e.g., \"9:00-9:50 AM\")\n     */\n    static formatTimeRange(startTime: Time, endTime: Time): string {\n        const startFormatted = TimeUtils.formatTime(startTime);\n        const endFormatted = TimeUtils.formatTime(endTime);\n        \n        // If same AM/PM, only show it once\n        if (startTime.hours < 12 && endTime.hours < 12) {\n            return `${startFormatted.replace(' AM', '')}-${endFormatted}`;\n        } else if (startTime.hours >= 12 && endTime.hours >= 12) {\n            return `${startFormatted.replace(' PM', '')}-${endFormatted}`;\n        } else {\n            return `${startFormatted}-${endFormatted}`;\n        }\n    }\n\n    /**\n     * Format days for display (e.g., \"MWF\", \"TR\")\n     */\n    static formatDays(days: Set<DayOfWeek>): string {\n        const dayAbbreviations: { [key in DayOfWeek]: string } = {\n            [DayOfWeek.MONDAY]: 'M',\n            [DayOfWeek.TUESDAY]: 'T',\n            [DayOfWeek.WEDNESDAY]: 'W',\n            [DayOfWeek.THURSDAY]: 'R',\n            [DayOfWeek.FRIDAY]: 'F',\n            [DayOfWeek.SATURDAY]: 'S',\n            [DayOfWeek.SUNDAY]: 'U'\n        };\n\n        return TimeUtils.DAYS_ORDER\n            .filter(day => days.has(day))\n            .map(day => dayAbbreviations[day])\n            .join('');\n    }\n\n    /**\n     * Generate time labels for the grid (only hourly: 7:00 AM, 8:00 AM, etc.)\n     */\n    static generateTimeLabels(): string[] {\n        const labels: string[] = [];\n        \n        for (let slot = 0; slot < TimeUtils.TOTAL_TIME_SLOTS; slot++) {\n            const hour = Math.floor(slot / TimeUtils.SLOTS_PER_HOUR) + TimeUtils.START_HOUR;\n            const minutes = (slot % TimeUtils.SLOTS_PER_HOUR) * 30;\n            \n            // Show labels for both :00 and :30 times\n            labels.push(TimeUtils.formatTime({ hours: hour, minutes: minutes, displayTime: '' }));\n        }\n        \n        return labels;\n    }\n\n    /**\n     * Get day name for display\n     */\n    static getDayName(day: DayOfWeek): string {\n        const dayNames: { [key in DayOfWeek]: string } = {\n            [DayOfWeek.MONDAY]: 'Monday',\n            [DayOfWeek.TUESDAY]: 'Tuesday',\n            [DayOfWeek.WEDNESDAY]: 'Wednesday',\n            [DayOfWeek.THURSDAY]: 'Thursday',\n            [DayOfWeek.FRIDAY]: 'Friday',\n            [DayOfWeek.SATURDAY]: 'Saturday',\n            [DayOfWeek.SUNDAY]: 'Sunday'\n        };\n\n        return dayNames[day];\n    }\n\n    /**\n     * Get abbreviated day name for display\n     */\n    static getDayAbbr(day: DayOfWeek): string {\n        const dayAbbrs: { [key in DayOfWeek]: string } = {\n            [DayOfWeek.MONDAY]: 'Mon',\n            [DayOfWeek.TUESDAY]: 'Tue',\n            [DayOfWeek.WEDNESDAY]: 'Wed',\n            [DayOfWeek.THURSDAY]: 'Thu',\n            [DayOfWeek.FRIDAY]: 'Fri',\n            [DayOfWeek.SATURDAY]: 'Sat',\n            [DayOfWeek.SUNDAY]: 'Sun'\n        };\n\n        return dayAbbrs[day];\n    }\n}","import { SelectedCourse } from '../types/schedule';\nimport { Section } from '../types/types';\n\n/**\n * Type guards and validation utilities for runtime data integrity checks\n */\n\n/**\n * Validates that a Section object has all required properties\n */\nexport function isValidSection(section: any): section is Section {\n    if (!section || typeof section !== 'object') return false;\n    \n    return (\n        typeof section.crn === 'number' &&\n        typeof section.number === 'string' &&\n        typeof section.seats === 'number' &&\n        typeof section.seatsAvailable === 'number' &&\n        typeof section.actualWaitlist === 'number' &&\n        typeof section.maxWaitlist === 'number' &&\n        typeof section.description === 'string' &&\n        typeof section.term === 'string' &&\n        typeof section.computedTerm === 'string' &&\n        ['A', 'B', 'C', 'D'].includes(section.computedTerm)\n    );\n}\n\n/**\n * Validates that a SelectedCourse object has valid structure and data\n */\nexport function isValidSelectedCourse(sc: any): sc is SelectedCourse {\n    if (!sc || typeof sc !== 'object') return false;\n    \n    // Check course object exists\n    if (!sc.course || typeof sc.course !== 'object') return false;\n    \n    // Check basic SelectedCourse properties\n    if (typeof sc.isRequired !== 'boolean') return false;\n    \n    // Check selectedSectionNumber is either null or string\n    if (sc.selectedSectionNumber !== null && typeof sc.selectedSectionNumber !== 'string') {\n        return false;\n    }\n    \n    // Check selectedSection consistency\n    if (sc.selectedSection !== null) {\n        // If selectedSection exists, it must be a valid Section\n        if (!isValidSection(sc.selectedSection)) return false;\n        \n        // If selectedSection exists, selectedSectionNumber should match\n        if (sc.selectedSectionNumber !== sc.selectedSection.number) return false;\n    } else {\n        // If selectedSection is null, selectedSectionNumber should also be null\n        if (sc.selectedSectionNumber !== null) return false;\n    }\n    \n    return true;\n}\n\n/**\n * Validates an array of SelectedCourse objects\n */\nexport function validateSelectedCourses(selectedCourses: any[]): SelectedCourse[] {\n    if (!Array.isArray(selectedCourses)) {\n        console.warn('validateSelectedCourses: Expected array, got:', typeof selectedCourses);\n        return [];\n    }\n    \n    const validCourses: SelectedCourse[] = [];\n    const invalidCourses: any[] = [];\n    \n    selectedCourses.forEach((sc, index) => {\n        if (isValidSelectedCourse(sc)) {\n            validCourses.push(sc);\n        } else {\n            invalidCourses.push({ index, data: sc });\n        }\n    });\n    \n    if (invalidCourses.length > 0) {\n        console.warn(`validateSelectedCourses: Found ${invalidCourses.length} invalid course(s):`, invalidCourses);\n    }\n    \n    return validCourses;\n}\n\n/**\n * Attempts to repair a SelectedCourse object by fixing common issues\n */\nexport function repairSelectedCourse(sc: any): SelectedCourse | null {\n    if (!sc || typeof sc !== 'object' || !sc.course) return null;\n    \n    // Create a repaired version\n    const repaired: SelectedCourse = {\n        course: sc.course,\n        selectedSection: null,\n        selectedSectionNumber: null,\n        isRequired: Boolean(sc.isRequired)\n    };\n    \n    // Try to repair section selection\n    if (sc.selectedSectionNumber && typeof sc.selectedSectionNumber === 'string') {\n        // Look for the section in the course\n        const section = sc.course.sections?.find((s: any) => s.number === sc.selectedSectionNumber);\n        \n        if (section && isValidSection(section)) {\n            repaired.selectedSection = section;\n            repaired.selectedSectionNumber = sc.selectedSectionNumber;\n        } else {\n            console.warn(`repairSelectedCourse: Section ${sc.selectedSectionNumber} not found or invalid for course ${sc.course.department?.abbreviation}${sc.course.number}`);\n        }\n    }\n    \n    return repaired;\n}\n\n/**\n * Safe getter for selected course section with validation\n */\nexport function getValidSelectedSection(sc: SelectedCourse): Section | null {\n    if (!sc.selectedSection) return null;\n    \n    if (!isValidSection(sc.selectedSection)) {\n        console.warn('getValidSelectedSection: Invalid section detected:', sc.selectedSection);\n        return null;\n    }\n    \n    return sc.selectedSection;\n}\n\n/**\n * Safe getter for computed term from selected course\n */\nexport function getComputedTerm(sc: SelectedCourse): string | null {\n    const section = getValidSelectedSection(sc);\n    return section?.computedTerm || null;\n}\n\n/**\n * Validates that a computed term is valid\n */\nexport function isValidComputedTerm(term: any): term is string {\n    return typeof term === 'string' && ['A', 'B', 'C', 'D'].includes(term);\n}","import { DayOfWeek, Course, Section } from '../../types/types'\nimport { CourseSelectionService } from '../../services/CourseSelectionService'\nimport { ScheduleFilterService } from '../../services/ScheduleFilterService'\nimport { ScheduleManagementService } from '../../services/ScheduleManagementService'\nimport { SectionInfoModalController } from './SectionInfoModalController'\nimport { ScheduleFilterModalController } from './ScheduleFilterModalController'\nimport { TimeUtils } from '../utils/timeUtils'\nimport { ConflictDetector } from '../../core/ConflictDetector'\nimport { getComputedTerm, validateSelectedCourses } from '../../utils/typeGuards'\n\nexport class ScheduleController {\n    private courseSelectionService: CourseSelectionService;\n    private scheduleFilterService: ScheduleFilterService | null = null;\n    private scheduleManagementService: ScheduleManagementService | null = null;\n    private scheduleFilterModalController: ScheduleFilterModalController | null = null;\n    private sectionInfoModalController: SectionInfoModalController | null = null;\n    private conflictDetector: ConflictDetector | null = null;\n    private elementToCourseMap = new WeakMap<HTMLElement, Course>();\n    private containerEventListeners = new Map<HTMLElement, EventListener>();\n    private statePreserver?: { \n        preserve: () => Map<string, boolean>, \n        restore: (states: Map<string, boolean>) => void \n    };\n\n    constructor(courseSelectionService: CourseSelectionService) {\n        this.courseSelectionService = courseSelectionService;\n    }\n\n    setSectionInfoModalController(sectionInfoModalController: SectionInfoModalController): void {\n        this.sectionInfoModalController = sectionInfoModalController;\n    }\n\n    setConflictDetector(conflictDetector: ConflictDetector): void {\n        this.conflictDetector = conflictDetector;\n        \n        // If we already have ScheduleFilterService, update it with ConflictDetector\n        if (this.scheduleFilterService) {\n            this.scheduleFilterService.setConflictDetector(conflictDetector);\n        }\n    }\n\n    setScheduleFilterService(scheduleFilterService: ScheduleFilterService): void {\n        this.scheduleFilterService = scheduleFilterService;\n        \n        // If we already have ConflictDetector, pass it to the service\n        if (this.conflictDetector) {\n            this.scheduleFilterService.setConflictDetector(this.conflictDetector);\n        }\n        \n        // Set up filter change listener to refresh display\n        this.scheduleFilterService.addEventListener(() => {\n            this.applyFiltersAndRefresh();\n        });\n    }\n\n    setScheduleFilterModalController(scheduleFilterModalController: ScheduleFilterModalController): void {\n        this.scheduleFilterModalController = scheduleFilterModalController;\n    }\n\n    setScheduleManagementService(scheduleManagementService: ScheduleManagementService): void {\n        this.scheduleManagementService = scheduleManagementService;\n    }\n\n    setStatePreserver(statePreserver: { \n        preserve: () => Map<string, boolean>, \n        restore: (states: Map<string, boolean>) => void \n    }): void {\n        this.statePreserver = statePreserver;\n    }\n\n    displayScheduleSelectedCourses(): void {\n        \n        const selectedCoursesContainer = document.getElementById('schedule-selected-courses');\n        const countElement = document.getElementById('schedule-selected-count');\n        \n        if (!selectedCoursesContainer || !countElement) {\n            console.log('❌ Missing DOM elements - selectedCoursesContainer or countElement not found');\n            return;\n        }\n\n        // Preserve dropdown states before refresh\n        const dropdownStates = this.statePreserver?.preserve();\n\n        let selectedCourses = this.courseSelectionService.getSelectedCourses();\n        \n        // Get filtered sections if filter service is available\n        let filteredSections: Array<{course: any, section: any}> = [];\n        let hasActiveFilters = false;\n        \n        if (this.scheduleFilterService && !this.scheduleFilterService.isEmpty()) {\n            filteredSections = this.scheduleFilterService.filterSections(selectedCourses);\n            hasActiveFilters = true;\n            console.log(`🔎 Filters active: ${filteredSections.length} sections match filters`);\n        }\n        \n        if (selectedCourses.length === 0) {\n            console.log('⚠️ Early return: 0 selected courses - displaying empty state');\n            countElement.textContent = '(0)';\n            selectedCoursesContainer.innerHTML = '<div class=\"empty-state\">No courses selected yet</div>';\n            return;\n        }\n\n        if (hasActiveFilters && filteredSections.length === 0) {\n            console.log('⚠️ Early return: 0 sections match active filters - displaying empty state');\n            countElement.textContent = '(0 sections match filters)';\n            selectedCoursesContainer.innerHTML = '<div class=\"empty-state\">No sections match the current filters</div>';\n            return;\n        }\n\n        let html = '';\n        \n        if (hasActiveFilters) {\n            // Display filtered sections\n            html = this.buildFilteredSectionsHTML(filteredSections, selectedCourses, dropdownStates);\n            \n            // Update count to show section matches\n            const uniqueCourses = new Set(filteredSections.map(fs => fs.course.course.id)).size;\n            countElement.textContent = `(${filteredSections.length} sections in ${uniqueCourses} courses)`;\n        } else {\n            // Display all courses normally when no filters are active\n            const sortedCourses = selectedCourses.sort((a, b) => {\n                const deptCompare = a.course.department.abbreviation.localeCompare(b.course.department.abbreviation);\n                if (deptCompare !== 0) return deptCompare;\n                return a.course.number.localeCompare(b.course.number);\n            });\n            \n            html = this.buildAllCoursesHTML(sortedCourses);\n            countElement.textContent = `(${selectedCourses.length})`;\n        }\n\n        selectedCoursesContainer.innerHTML = html;\n\n        // Set up DOM element mapping for course association\n        if (!hasActiveFilters) {\n            const sortedCourses = selectedCourses.sort((a, b) => {\n                const deptCompare = a.course.department.abbreviation.localeCompare(b.course.department.abbreviation);\n                if (deptCompare !== 0) return deptCompare;\n                return a.course.number.localeCompare(b.course.number);\n            });\n            this.setupDOMElementMapping(selectedCoursesContainer, sortedCourses);\n        } else {\n            // For filtered view, we need to set up mapping differently\n            this.setupFilteredDOMElementMapping(selectedCoursesContainer, filteredSections);\n        }\n\n        // Restore dropdown states after refresh\n        if (dropdownStates) {\n            this.statePreserver?.restore(dropdownStates);\n        }\n\n        // Log how many schedule-course-items were created\n        const courseItemCount = selectedCoursesContainer.querySelectorAll('.schedule-course-item').length;\n    }\n    \n    private buildFilteredSectionsHTML(filteredSections: Array<{course: any, section: any}>, selectedCourses: any[], dropdownStates?: Map<string, boolean>): string {\n        // Group filtered sections by course\n        const sectionsByCourse = new Map();\n        \n        filteredSections.forEach(fs => {\n            const courseId = fs.course.course.id;\n            if (!sectionsByCourse.has(courseId)) {\n                sectionsByCourse.set(courseId, {\n                    selectedCourse: fs.course,\n                    sections: []\n                });\n            }\n            sectionsByCourse.get(courseId).sections.push(fs.section);\n        });\n        \n        let html = '';\n        \n        // Sort courses by department and number\n        const sortedEntries = Array.from(sectionsByCourse.entries()).sort((a, b) => {\n            const courseA = a[1].selectedCourse.course;\n            const courseB = b[1].selectedCourse.course;\n            const deptCompare = courseA.department.abbreviation.localeCompare(courseB.department.abbreviation);\n            if (deptCompare !== 0) return deptCompare;\n            return courseA.number.localeCompare(courseB.number);\n        });\n        \n        sortedEntries.forEach(([courseId, data]) => {\n            const selectedCourse = data.selectedCourse;\n            const matchingSections = data.sections;\n            const course = selectedCourse.course;\n            \n            // Determine if this course should be expanded\n            // Default to expanded when filtering (so users can see the results)\n            // But preserve any explicit state from previous interactions\n            const isExpanded = dropdownStates?.has(course.id) ? dropdownStates.get(course.id)! : true;\n            \n            html += this.buildCourseHeaderHTML(course, selectedCourse, isExpanded);\n            \n            html += '<div class=\"schedule-sections-container\">';\n            \n            // Group sections by term\n            const sectionsByTerm: any = {};\n            matchingSections.forEach((section: any) => {\n                if (!sectionsByTerm[section.computedTerm]) {\n                    sectionsByTerm[section.computedTerm] = [];\n                }\n                sectionsByTerm[section.computedTerm].push({\n                    section: section,\n                    filteredPeriods: section.periods // Show all periods in the section\n                });\n            });\n            \n            const terms = Object.keys(sectionsByTerm).sort();\n            terms.forEach((term: string) => {\n                html += `<div class=\"term-sections\" data-term=\"${term}\">`;\n                html += `<div class=\"term-label\">${term} Term</div>`;\n                \n                sectionsByTerm[term].forEach((sectionData: any) => {\n                    const section = sectionData.section;\n                    const filteredPeriods = sectionData.filteredPeriods;\n                    const isSelected = selectedCourse.selectedSectionNumber === section.number;\n                    const selectedClass = isSelected ? 'selected' : '';\n                    \n                    html += `\n                        <div class=\"section-option ${selectedClass} filtered-section\" data-section=\"${section.number}\">\n                            <div class=\"section-info\">\n                                <div class=\"section-number\">${section.number}</div>\n                                <div class=\"section-periods\">`;\n                    \n                    // Sort filtered periods by type priority\n                    const sortedPeriods = [...filteredPeriods].sort((a: any, b: any) => {\n                        const typePriority = (type: string) => {\n                            const lower = type.toLowerCase();\n                            if (lower.includes('lec') || lower.includes('lecture')) return 1;\n                            if (lower.includes('lab')) return 2;\n                            if (lower.includes('dis') || lower.includes('discussion') || lower.includes('rec')) return 3;\n                            return 4;\n                        };\n                        return typePriority(a.type) - typePriority(b.type);\n                    });\n                    \n                    // Display only the filtered periods (highlighted)\n                    sortedPeriods.forEach((period: any) => {\n                        const timeRange = TimeUtils.formatTimeRange(period.startTime, period.endTime);\n                        const days = TimeUtils.formatDays(period.days);\n                        const periodTypeLabel = this.getPeriodTypeLabel(period.type);\n                        \n                        html += `\n                            <div class=\"period-info highlighted-period\" data-period-type=\"${period.type.toLowerCase()}\">\n                                <div class=\"period-header\">\n                                    <span class=\"period-type-label\">${periodTypeLabel}</span>\n                                    <span class=\"period-schedule\">${days} ${timeRange}</span>\n                                </div>\n                            </div>\n                        `;\n                    });\n                    \n                    html += `\n                                </div>\n                            </div>\n                            <button class=\"section-select-btn ${selectedClass}\" data-section=\"${section.number}\">\n                                ${isSelected ? '✓' : '+'}\n                            </button>\n                        </div>\n                    `;\n                });\n                \n                html += '</div>';\n            });\n            \n            html += '</div></div>';\n        });\n        \n        return html;\n    }\n    \n    private buildCourseHeaderHTML(course: any, selectedCourse: any, isExpanded: boolean = false): string {\n        const credits = course.minCredits === course.maxCredits \n            ? `${course.minCredits} credits` \n            : `${course.minCredits}-${course.maxCredits} credits`;\n        \n        const expansionClass = isExpanded ? 'expanded' : 'collapsed';\n            \n        return `\n            <div class=\"schedule-course-item ${expansionClass}\">\n                <div class=\"schedule-course-header dropdown-trigger\">\n                    <div class=\"schedule-course-info\">\n                        <div class=\"schedule-course-code\">${course.department.abbreviation}${course.number}</div>\n                        <div class=\"schedule-course-name\">${course.name}</div>\n                        <div class=\"schedule-course-credits\">${credits}</div>\n                    </div>\n                    <div class=\"header-controls\">\n                        <span class=\"dropdown-arrow\">▼</span>\n                        <button class=\"course-remove-btn\" title=\"Remove from selection\">\n                            ×\n                        </button>\n                    </div>\n                </div>\n        `;\n    }\n    \n    private buildAllCoursesHTML(sortedCourses: any[]): string {\n        let html = '';\n        \n        sortedCourses.forEach(selectedCourse => {\n            const course = selectedCourse.course;\n            \n            html += this.buildCourseHeaderHTML(course, selectedCourse);\n            \n            // Group sections by term\n            const sectionsByTerm: { [term: string]: typeof course.sections } = {};\n            course.sections.forEach((section: Section) => {\n                if (!sectionsByTerm[section.computedTerm]) {\n                    sectionsByTerm[section.computedTerm] = [];\n                }\n                sectionsByTerm[section.computedTerm].push(section);\n            });\n\n            html += '<div class=\"schedule-sections-container\">';\n\n            // Display sections grouped by term\n            const terms = Object.keys(sectionsByTerm).sort();\n            terms.forEach(term => {\n                html += `<div class=\"term-sections\" data-term=\"${term}\">`;\n                html += `<div class=\"term-label\">${term} Term</div>`;\n                \n                sectionsByTerm[term].forEach((section: Section) => {\n                    const isSelected = selectedCourse.selectedSectionNumber === section.number;\n                    const selectedClass = isSelected ? 'selected' : '';\n                    \n                    // Sort periods by type priority (lecture first, then lab, then discussion)\n                    const sortedPeriods = [...section.periods].sort((a, b) => {\n                        const typePriority = (type: string) => {\n                            const lower = type.toLowerCase();\n                            if (lower.includes('lec') || lower.includes('lecture')) return 1;\n                            if (lower.includes('lab')) return 2;\n                            if (lower.includes('dis') || lower.includes('discussion') || lower.includes('rec')) return 3;\n                            return 4;\n                        };\n                        return typePriority(a.type) - typePriority(b.type);\n                    });\n                    \n                    html += `\n                        <div class=\"section-option ${selectedClass}\"  data-section=\"${section.number}\">\n                            <div class=\"section-info\">\n                                <div class=\"section-number\">${section.number}</div>\n                                <div class=\"section-periods\">`;\n                    \n                    // Display all periods for this section\n                    sortedPeriods.forEach((period, index) => {\n                        const timeRange = TimeUtils.formatTimeRange(period.startTime, period.endTime);\n                        const days = TimeUtils.formatDays(period.days);\n                        const periodTypeLabel = this.getPeriodTypeLabel(period.type);\n                        \n                        html += `\n                            <div class=\"period-info\" data-period-type=\"${period.type.toLowerCase()}\">\n                                <div class=\"period-header\">\n                                    <span class=\"period-type-label\">${periodTypeLabel}</span>\n                                    <span class=\"period-schedule\">${days} ${timeRange}</span>\n                                </div>\n                            </div>\n                        `;\n                    });\n                    \n                    html += `\n                                </div>\n                            </div>\n                            <button class=\"section-select-btn ${selectedClass}\" data-section=\"${section.number}\">\n                                ${isSelected ? '✓' : '+'}\n                            </button>\n                        </div>\n                    `;\n                });\n                \n                html += '</div>';\n            });\n\n            html += '</div></div>';\n        });\n        \n        return html;\n    }\n    \n    private setupDOMElementMapping(selectedCoursesContainer: HTMLElement, sortedCourses: any[]): void {\n        // Associate DOM elements with Course objects\n        const courseElements = selectedCoursesContainer.querySelectorAll('.schedule-course-item');\n        const removeButtons = selectedCoursesContainer.querySelectorAll('.course-remove-btn');\n        \n        courseElements.forEach((element, index) => {\n            const course = sortedCourses[index]?.course;\n            this.elementToCourseMap.set(element as HTMLElement, course);\n        });\n        \n        removeButtons.forEach((button, index) => {\n            const course = sortedCourses[index]?.course;\n            this.elementToCourseMap.set(button as HTMLElement, course);\n        });\n\n        // IMPORTANT: Associate section buttons with their Course objects\n        const sectionButtons = selectedCoursesContainer.querySelectorAll('.section-select-btn');\n        sectionButtons.forEach(button => {\n            const courseItem = button.closest('.schedule-course-item') as HTMLElement;\n            if (courseItem) {\n                const courseIndex = Array.from(courseElements).indexOf(courseItem);\n                if (courseIndex >= 0 && courseIndex < sortedCourses.length) {\n                    const course = sortedCourses[courseIndex].course;\n                    this.elementToCourseMap.set(button as HTMLElement, course);\n                }\n            }\n        });\n    }\n    \n    private setupFilteredDOMElementMapping(selectedCoursesContainer: HTMLElement, filteredSections: Array<{course: any, section: any}>): void {\n        // For filtered view, we need to map elements to courses differently\n        const courseElements = selectedCoursesContainer.querySelectorAll('.schedule-course-item');\n        const removeButtons = selectedCoursesContainer.querySelectorAll('.course-remove-btn');\n        \n        // Get unique courses from filtered sections in the same order as displayed\n        const uniqueCourses: any[] = [];\n        const seenCourseIds = new Set();\n        \n        filteredSections.forEach(fs => {\n            const courseId = fs.course.course.id;\n            if (!seenCourseIds.has(courseId)) {\n                seenCourseIds.add(courseId);\n                uniqueCourses.push(fs.course);\n            }\n        });\n        \n        // Sort by department and number (same as display order)\n        uniqueCourses.sort((a, b) => {\n            const deptCompare = a.course.department.abbreviation.localeCompare(b.course.department.abbreviation);\n            if (deptCompare !== 0) return deptCompare;\n            return a.course.number.localeCompare(b.course.number);\n        });\n        \n        courseElements.forEach((element, index) => {\n            const course = uniqueCourses[index]?.course;\n            this.elementToCourseMap.set(element as HTMLElement, course);\n        });\n        \n        removeButtons.forEach((button, index) => {\n            const course = uniqueCourses[index]?.course;\n            this.elementToCourseMap.set(button as HTMLElement, course);\n        });\n\n        // Associate section buttons with their Course objects\n        const sectionButtons = selectedCoursesContainer.querySelectorAll('.section-select-btn');\n        sectionButtons.forEach(button => {\n            const courseItem = button.closest('.schedule-course-item') as HTMLElement;\n            if (courseItem) {\n                const courseIndex = Array.from(courseElements).indexOf(courseItem);\n                if (courseIndex >= 0 && courseIndex < uniqueCourses.length) {\n                    const course = uniqueCourses[courseIndex].course;\n                    this.elementToCourseMap.set(button as HTMLElement, course);\n                }\n            }\n        });\n    }\n\n    async handleSectionSelection(course: Course, sectionNumber: string): Promise<void> {\n        const currentSelectedSection = this.courseSelectionService.getSelectedSection(course);\n        \n        try {\n            if (currentSelectedSection === sectionNumber) {\n                // Deselect current section\n                await this.courseSelectionService.setSelectedSection(course, null);\n            } else {\n                // Select new section (automatically deselects any previous section)\n                await this.courseSelectionService.setSelectedSection(course, sectionNumber);\n            }\n        } catch (error) {\n            console.error('Failed to update section selection:', error);\n            // TODO: Show error message to user\n        }\n        \n        // Note: UI refresh is handled automatically by the selection change listener\n        // No need to call displayScheduleSelectedCourses() here as it would cause duplicate refreshes\n    }\n\n    updateSectionButtonStates(course: Course, selectedSection: string | null): void {\n        // Find the schedule course item by matching the associated Course object\n        let courseItem: HTMLElement | null = null;\n        \n        document.querySelectorAll('.schedule-course-item').forEach(item => {\n            const itemCourse = this.elementToCourseMap.get(item as HTMLElement);\n            if (itemCourse && itemCourse.id === course.id) {\n                courseItem = item as HTMLElement;\n            }\n        });\n        \n        if (!courseItem) return;\n\n        // TypeScript assertion to ensure courseItem is HTMLElement\n        const validCourseItem = courseItem as HTMLElement;\n        const sectionButtons = validCourseItem.querySelectorAll('.section-select-btn');\n        const sectionOptions = validCourseItem.querySelectorAll('.section-option');\n\n        sectionButtons.forEach(button => {\n            const buttonSection = (button as HTMLElement).dataset.section;\n            const isSelected = buttonSection === selectedSection;\n            \n            // Update button appearance\n            if (isSelected) {\n                button.classList.add('selected');\n                button.textContent = '✓';\n            } else {\n                button.classList.remove('selected');\n                button.textContent = '+';\n            }\n        });\n\n        sectionOptions.forEach(option => {\n            const optionSection = (option as HTMLElement).dataset.section;\n            const isSelected = optionSection === selectedSection;\n            \n            // Update option appearance\n            if (isSelected) {\n                option.classList.add('selected');\n            } else {\n                option.classList.remove('selected');\n            }\n        });\n    }\n\n    renderScheduleGrids(): void {\n        const rawSelectedCourses = this.courseSelectionService.getSelectedCourses();\n        const selectedCourses = validateSelectedCourses(rawSelectedCourses);\n        const grids = ['A', 'B', 'C', 'D'];\n        \n        \n        grids.forEach(term => {\n            const gridContainer = document.getElementById(`schedule-grid-${term}`);\n            if (!gridContainer) return;\n            \n            // Filter courses for this term - use direct Section object access\n            const termCourses = selectedCourses.filter(sc => {\n                const computedTerm = getComputedTerm(sc);\n                \n                if (!computedTerm) {\n                    if (sc.selectedSection) {\n                        console.warn(`Course ${sc.course.department.abbreviation}${sc.course.number} has invalid section data:`, sc.selectedSection);\n                    }\n                    return false;\n                }\n                \n                return computedTerm === term;\n            });\n            \n            if (termCourses.length === 0) {\n                // Check if there are selected courses without sections for better messaging\n                const coursesWithoutSections = selectedCourses.filter(sc => !sc.selectedSection);\n                this.renderEmptyGrid(gridContainer, term, coursesWithoutSections.length > 0);\n                return;\n            }\n            \n            this.renderPopulatedGrid(gridContainer, termCourses, term);\n        });\n        \n    }\n\n    private renderEmptyGrid(container: HTMLElement, term: string, hasCoursesWithoutSections: boolean = false): void {\n        const message = hasCoursesWithoutSections \n            ? `No sections selected for ${term} term<br><small>Select specific sections in the left panel to see schedule</small>`\n            : `No classes scheduled for ${term} term`;\n            \n        container.innerHTML = `\n            <div class=\"empty-schedule\">\n                <div class=\"empty-message\">${message}</div>\n            </div>\n        `;\n        container.classList.add('empty');\n    }\n\n    private renderPopulatedGrid(container: HTMLElement, courses: any[], term: string): void {\n        container.classList.remove('empty');\n        \n        // Clean up existing event listeners before replacing DOM content\n        const existingListener = this.containerEventListeners.get(container);\n        if (existingListener) {\n            container.removeEventListener('click', existingListener);\n            this.containerEventListeners.delete(container);\n        }\n        \n        // Create 5-day (Mon-Fri) × 24 time slot grid (7 AM - 7 PM, 30-min intervals)\n        const weekdays = [DayOfWeek.MONDAY, DayOfWeek.TUESDAY, DayOfWeek.WEDNESDAY, DayOfWeek.THURSDAY, DayOfWeek.FRIDAY];\n        const timeSlots = TimeUtils.TOTAL_TIME_SLOTS;\n        \n        let html = '';\n        \n        // First row: empty time cell + day headers\n        html += '<div class=\"time-label\"></div>'; // Empty corner cell\n        weekdays.forEach(day => {\n            html += `<div class=\"day-header\">${TimeUtils.getDayAbbr(day)}</div>`;\n        });\n        \n        // Time rows: time label + 5 schedule cells\n        for (let slot = 0; slot < timeSlots; slot++) {\n            const hour = Math.floor(slot / TimeUtils.SLOTS_PER_HOUR) + TimeUtils.START_HOUR;\n            const minutes = (slot % TimeUtils.SLOTS_PER_HOUR) * 30;\n            const timeLabel = TimeUtils.formatTime({ hours: hour, minutes: minutes, displayTime: '' });\n            \n            // Time label cell\n            html += `<div class=\"time-label\">${timeLabel}</div>`;\n            \n            // Schedule cells for each day\n            weekdays.forEach(day => {\n                const cell = this.getCellContent(courses, day, slot);\n                html += `<div class=\"schedule-cell ${cell.classes}\" data-day=\"${day}\" data-slot=\"${slot}\" style=\"position: relative;\">${cell.content}</div>`;\n            });\n        }\n        \n        container.innerHTML = html;\n        \n        // Add click event listeners for section blocks\n        this.addSectionBlockEventListeners(container);\n    }\n\n    private getCellContent(courses: any[], day: DayOfWeek, timeSlot: number): { content: string, classes: string } {\n        // Find all sections that occupy this cell\n        const occupyingSections: any[] = [];\n        \n        \n        for (const selectedCourse of courses) {\n            if (!selectedCourse.selectedSection) {\n                continue;\n            }\n            \n            const section = selectedCourse.selectedSection;\n            \n            // Check if this section has any period that occupies this time slot on this day\n            const periodsOnThisDay = section.periods.filter((period: any) => period.days.has(day));\n            \n            \n            let sectionOccupiesSlot = false;\n            let sectionStartSlot = Infinity;\n            let sectionEndSlot = -1;\n            let isFirstSlot = false;\n            \n            for (const period of periodsOnThisDay) {\n                const startSlot = TimeUtils.timeToGridRowStart(period.startTime);\n                const endSlot = TimeUtils.timeToGridRowEnd(period.endTime);\n                \n                \n                if (timeSlot >= startSlot && timeSlot < endSlot) {\n                    sectionOccupiesSlot = true;\n                    sectionStartSlot = Math.min(sectionStartSlot, startSlot);\n                    sectionEndSlot = Math.max(sectionEndSlot, endSlot);\n                    \n                }\n            }\n            \n            if (sectionOccupiesSlot) {\n                // Check if this is the first slot for this section on this day\n                isFirstSlot = timeSlot === sectionStartSlot;\n                \n                \n                occupyingSections.push({\n                    course: selectedCourse,\n                    section,\n                    periodsOnThisDay,\n                    startSlot: sectionStartSlot,\n                    endSlot: sectionEndSlot,\n                    isFirstSlot\n                });\n            }\n        }\n        \n        if (occupyingSections.length === 0) {\n            return { content: '', classes: '' };\n        }\n        \n        // Check for conflicts\n        const hasConflict = occupyingSections.length > 1;\n        const primarySection = occupyingSections[0];\n        const courseColor = this.getCourseColor(primarySection.course.course.id);\n        \n        // Calculate how many rows this section should span\n        const rowSpan = primarySection.endSlot - primarySection.startSlot;\n        const heightInPixels = rowSpan * 30; // 30px per row\n        \n        \n        // Build content for the first section in the slot - simplified to show only course name\n        const content = primarySection.isFirstSlot ? `\n            <div class=\"section-block ${hasConflict ? 'conflict' : ''}\" \n                 data-course-id=\"${primarySection.course.course.id}\"\n                 data-section-number=\"${primarySection.course.selectedSectionNumber || ''}\"\n                 data-selected-course-index=\"${primarySection.courseIndex || 0}\"\n                 style=\"\n                background-color: ${courseColor}; \n                height: ${heightInPixels}px;\n                width: 100%;\n                position: absolute;\n                top: 0;\n                left: 0;\n                z-index: 10;\n                border: 1px solid rgba(0,0,0,0.2);\n                border-radius: 3px;\n                box-sizing: border-box;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                text-align: center;\n                font-weight: bold;\n                font-size: 0.8rem;\n                color: white;\n                text-shadow: 1px 1px 1px rgba(0,0,0,0.3);\n                cursor: pointer;\n            \">\n                ${primarySection.course.course.department.abbreviation}${primarySection.course.course.number}\n            </div>\n        ` : ``; // Empty for continuation slots - the spanning block covers them\n        \n        // Only add classes for the first slot (where content actually appears)\n        const classes = primarySection.isFirstSlot ? \n            `occupied section-start ${hasConflict ? 'has-conflict' : ''}` :\n            ''; // No classes for continuation slots - they should be invisible\n        \n        return { content, classes };\n    }\n\n    private formatSectionPeriods(periods: any[]): string {\n        if (periods.length === 0) return '';\n        \n        // Group periods by type and format them\n        const periodsByType: { [type: string]: any[] } = {};\n        \n        for (const period of periods) {\n            const periodType = this.getPeriodTypeLabel(period.type);\n            if (!periodsByType[periodType]) {\n                periodsByType[periodType] = [];\n            }\n            periodsByType[periodType].push(period);\n        }\n        \n        // Create formatted list of periods\n        const periodStrings: string[] = [];\n        \n        // Sort by priority: Lecture, Lab, Discussion, etc.\n        const typeOrder = ['LEC', 'LAB', 'DIS', 'REC', 'SEM', 'STU', 'CONF'];\n        const sortedTypes = Object.keys(periodsByType).sort((a, b) => {\n            const indexA = typeOrder.indexOf(a);\n            const indexB = typeOrder.indexOf(b);\n            const priorityA = indexA === -1 ? 999 : indexA;\n            const priorityB = indexB === -1 ? 999 : indexB;\n            return priorityA - priorityB;\n        });\n        \n        for (const type of sortedTypes) {\n            const periodsOfType = periodsByType[type];\n            const timeRanges = periodsOfType.map(p => \n                TimeUtils.formatTimeRange(p.startTime, p.endTime)\n            ).join(', ');\n            \n            periodStrings.push(`<div class=\"period-type-info\">\n                <span class=\"period-type\">${type}</span>\n                <span class=\"period-times\">${timeRanges}</span>\n            </div>`);\n        }\n        \n        return periodStrings.join('');\n    }\n\n    private getCourseColor(courseId: string): string {\n        // Generate consistent colors for courses\n        const colors = [\n            '#4CAF50', '#2196F3', '#FF9800', '#9C27B0', '#F44336',\n            '#00BCD4', '#795548', '#607D8B', '#3F51B5', '#E91E63'\n        ];\n        \n        let hash = 0;\n        for (let i = 0; i < courseId.length; i++) {\n            hash = courseId.charCodeAt(i) + ((hash << 5) - hash);\n        }\n        \n        return colors[Math.abs(hash) % colors.length];\n    }\n\n    private getPeriodTypeLabel(type: string): string {\n        const lower = type.toLowerCase();\n        \n        if (lower.includes('lec') || lower.includes('lecture')) return 'LEC';\n        if (lower.includes('lab')) return 'LAB';\n        if (lower.includes('dis') || lower.includes('discussion')) return 'DIS';\n        if (lower.includes('rec') || lower.includes('recitation')) return 'REC';\n        if (lower.includes('sem') || lower.includes('seminar')) return 'SEM';\n        if (lower.includes('studio')) return 'STU';\n        if (lower.includes('conference') || lower.includes('conf')) return 'CONF';\n        \n        // Return abbreviated version for unknown types (first 3-4 chars)\n        return type.substring(0, Math.min(4, type.length)).toUpperCase();\n    }\n\n    private getPeriodTypeClass(type: string): string {\n        const lower = type.toLowerCase();\n        \n        if (lower.includes('lec') || lower.includes('lecture')) return 'period-lecture';\n        if (lower.includes('lab')) return 'period-lab';\n        if (lower.includes('dis') || lower.includes('discussion')) return 'period-discussion';\n        if (lower.includes('rec') || lower.includes('recitation')) return 'period-recitation';\n        if (lower.includes('sem') || lower.includes('seminar')) return 'period-seminar';\n        if (lower.includes('studio')) return 'period-studio';\n        if (lower.includes('conference') || lower.includes('conf')) return 'period-conference';\n        \n        return 'period-other';\n    }\n\n    getCourseFromElement(element: HTMLElement): Course | undefined {\n        return this.elementToCourseMap.get(element);\n    }\n\n    applyFiltersAndRefresh(): void {\n        // Refresh the selected courses display with current filters\n        this.displayScheduleSelectedCourses();\n        \n        // Update filter button state\n        this.updateScheduleFilterButtonState();\n    }\n\n    private updateScheduleFilterButtonState(): void {\n        const scheduleFilterButton = document.getElementById('schedule-filter-btn');\n        if (scheduleFilterButton && this.scheduleFilterService) {\n            const hasActiveFilters = !this.scheduleFilterService.isEmpty();\n            const filterCount = this.scheduleFilterService.getFilterCount();\n            \n            if (hasActiveFilters) {\n                scheduleFilterButton.classList.add('active');\n                scheduleFilterButton.title = `${filterCount} filter${filterCount === 1 ? '' : 's'} active - Click to modify`;\n            } else {\n                scheduleFilterButton.classList.remove('active');\n                scheduleFilterButton.title = 'Filter selected courses';\n            }\n        }\n    }\n\n    private addSectionBlockEventListeners(container: HTMLElement): void {\n        // Remove existing listener for this container if it exists\n        const existingListener = this.containerEventListeners.get(container);\n        if (existingListener) {\n            container.removeEventListener('click', existingListener);\n        }\n        \n        // Create new listener\n        const clickListener = (event: Event) => {\n            const target = event.target as HTMLElement;\n            \n            // Find the section block element (might be the target or a parent)\n            const sectionBlock = target.closest('.section-block');\n            if (!sectionBlock) return;\n            \n            // Get section information from data attributes\n            const courseId = (sectionBlock as HTMLElement).dataset.courseId;\n            const sectionNumber = (sectionBlock as HTMLElement).dataset.sectionNumber;\n            \n            if (courseId && sectionNumber) {\n                event.stopPropagation(); // Prevent event bubbling\n                this.showSectionInfoModal(courseId, sectionNumber);\n            }\n        };\n        \n        // Add new listener and track it\n        container.addEventListener('click', clickListener);\n        this.containerEventListeners.set(container, clickListener);\n    }\n\n    showSectionInfoModal(courseId: string, sectionNumber: string): void {\n        if (!this.sectionInfoModalController) {\n            console.warn('Section info modal controller not available');\n            return;\n        }\n\n        // Find the selected course and section\n        const selectedCourses = this.courseSelectionService.getSelectedCourses();\n        const selectedCourse = selectedCourses.find(sc => sc.course.id === courseId);\n        \n        if (!selectedCourse || !selectedCourse.selectedSection) {\n            console.warn('Course or section not found:', courseId, sectionNumber);\n            return;\n        }\n\n        const course = selectedCourse.course;\n        const section = selectedCourse.selectedSection;\n\n        // Create section data for modal controller\n        const sectionData = {\n            courseCode: `${course.department.abbreviation}${course.number}`,\n            courseName: course.name,\n            section: section,\n            course: course\n        };\n\n        // Show modal using the dedicated controller\n        this.sectionInfoModalController.show(sectionData);\n    }\n\n}","import { ModalService } from '../../services/ModalService';\n\nexport interface SectionData {\n    courseCode: string;\n    courseName: string;\n    section: {\n        number: string;\n        crn: number;\n        term: string;\n        seatsAvailable: number;\n        actualWaitlist: number;\n        maxWaitlist: number;\n        note?: string;\n        periods: Array<{\n            type: string;\n            professor: string;\n            startTime: { displayTime: string };\n            endTime: { displayTime: string };\n            days: Set<string>;\n            building: string;\n            room: string;\n            location: string;\n        }>;\n    };\n    course: {\n        minCredits: number;\n        maxCredits: number;\n    };\n}\n\nexport class SectionInfoModalController {\n    private modalService: ModalService;\n\n    constructor(modalService: ModalService) {\n        this.modalService = modalService;\n    }\n\n    show(data: SectionData): string {\n        const id = this.modalService.generateId();\n        const modalElement = this.createModalElement(id, data);\n        \n        this.modalService.showModal(id, modalElement);\n        this.modalService.setupModalBehavior(modalElement, id);\n\n        return id;\n    }\n\n    private createModalElement(id: string, data: SectionData): HTMLElement {\n        // Create modal backdrop\n        const backdrop = document.createElement('div');\n        backdrop.className = 'modal-backdrop';\n        backdrop.id = id;\n\n        // Add embedded CSS\n        const style = document.createElement('style');\n        style.textContent = this.getModalCSS();\n        backdrop.appendChild(style);\n\n        // Create modal content\n        backdrop.innerHTML += `\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h3 class=\"modal-title\">${data.courseCode} - ${data.courseName}</h3>\n                        <button class=\"modal-close\" onclick=\"document.getElementById('${id}').click()\">×</button>\n                    </div>\n                    <div class=\"modal-body\">\n                        ${this.generateModalBody(data)}\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button class=\"modal-btn btn-primary\" onclick=\"document.getElementById('${id}').click()\">Close</button>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Prevent clicks on modal dialog from closing modal\n        const dialog = backdrop.querySelector('.modal-dialog') as HTMLElement;\n        if (dialog) {\n            dialog.addEventListener('click', (event) => {\n                event.stopPropagation();\n            });\n        }\n\n        return backdrop;\n    }\n\n    private generateModalBody(data: SectionData): string {\n        const enrollmentStatus = data.section.seatsAvailable > 0 \n            ? `${data.section.seatsAvailable} seats available` \n            : 'Full';\n        \n        const waitlistInfo = data.section.maxWaitlist > 0 \n            ? `Waitlist: ${data.section.actualWaitlist}/${data.section.maxWaitlist}` \n            : '';\n\n        const meetingTimes = data.section.periods.map(period => {\n            const daysArray = Array.from(period.days).sort();\n            const daysStr = daysArray.join(', ').toUpperCase();\n            const timeStr = `${period.startTime.displayTime} - ${period.endTime.displayTime}`;\n            const location = period.building && period.room \n                ? `${period.building} ${period.room}` \n                : period.location || 'TBA';\n            \n            return `\n                <div class=\"period-info\">\n                    <div class=\"period-type\">${this.getPeriodTypeLabel(period.type)}</div>\n                    <div class=\"period-schedule\">\n                        <div>${daysStr} ${timeStr}</div>\n                        <div class=\"period-location\">${location}</div>\n                    </div>\n                </div>\n            `;\n        }).join('');\n\n        return `\n            <div class=\"section-modal-content\">\n                <div class=\"section-basic-info\">\n                    <div class=\"section-detail\"><strong>Section:</strong> ${data.section.number}</div>\n                    <div class=\"section-detail\"><strong>CRN:</strong> ${data.section.crn}</div>\n                    <div class=\"section-detail\"><strong>Term:</strong> ${data.section.term}</div>\n                    <div class=\"section-detail\"><strong>Credits:</strong> ${data.course.minCredits === data.course.maxCredits ? data.course.minCredits : `${data.course.minCredits}-${data.course.maxCredits}`}</div>\n                </div>\n                \n                <div class=\"section-enrollment ${data.section.seatsAvailable > 0 ? '' : 'full'}\">\n                    <div class=\"enrollment-status ${data.section.seatsAvailable > 0 ? 'available' : 'full'}\">\n                        ${enrollmentStatus}\n                    </div>\n                    ${waitlistInfo ? `<div class=\"waitlist-info\">${waitlistInfo}</div>` : ''}\n                </div>\n                \n                <div class=\"section-meetings\">\n                    <h4>Meeting Times</h4>\n                    ${meetingTimes}\n                </div>\n                \n                ${data.section.note ? `\n                    <div class=\"section-notes\">\n                        <h4>Notes</h4>\n                        <p>${data.section.note}</p>\n                    </div>\n                ` : ''}\n            </div>\n        `;\n    }\n\n    private getPeriodTypeLabel(type: string): string {\n        const lower = type.toLowerCase();\n        \n        if (lower.includes('lec') || lower.includes('lecture')) return 'LEC';\n        if (lower.includes('lab')) return 'LAB';\n        if (lower.includes('dis') || lower.includes('discussion')) return 'DIS';\n        if (lower.includes('rec') || lower.includes('recitation')) return 'REC';\n        if (lower.includes('sem') || lower.includes('seminar')) return 'SEM';\n        if (lower.includes('studio')) return 'STU';\n        if (lower.includes('conference') || lower.includes('conf')) return 'CONF';\n        \n        return type.substring(0, Math.min(4, type.length)).toUpperCase();\n    }\n\n    private getModalCSS(): string {\n        return `\n            .modal-backdrop {\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background-color: rgba(0, 0, 0, 0.5);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                padding: 1rem;\n                opacity: 0;\n                transition: var(--effect-transition);\n                cursor: pointer;\n            }\n\n            .modal-backdrop.show {\n                opacity: 1;\n            }\n\n            .modal-backdrop.hide {\n                opacity: 0;\n            }\n\n            .modal-dialog {\n                background: var(--color-surface);\n                border-radius: var(--effect-border-radius-large);\n                box-shadow: var(--effect-shadow-hover);\n                max-width: 600px;\n                width: 100%;\n                max-height: 90vh;\n                overflow: hidden;\n                transform: scale(0.9);\n                transition: var(--effect-transition);\n                cursor: default;\n            }\n\n            .modal-backdrop.show .modal-dialog {\n                transform: scale(1);\n            }\n\n            .modal-backdrop.hide .modal-dialog {\n                transform: scale(0.9);\n            }\n\n            .modal-content {\n                display: flex;\n                flex-direction: column;\n                max-height: 90vh;\n            }\n\n            .modal-header {\n                padding: 1.5rem 1.5rem 1rem 1.5rem;\n                display: flex;\n                align-items: center;\n                justify-content: space-between;\n                border-bottom: 1px solid var(--color-border);\n                background: linear-gradient(135deg, var(--color-primary), var(--color-primary-light));\n                color: var(--color-text-inverse);\n            }\n\n            .modal-title {\n                margin: 0;\n                font-size: 1.4rem;\n                font-weight: 600;\n                color: var(--color-text-inverse);\n                font-family: var(--font-family);\n            }\n\n            .modal-close {\n                background: none;\n                border: none;\n                font-size: 1.5rem;\n                color: rgba(255, 255, 255, 0.8);\n                cursor: pointer;\n                padding: 0;\n                width: 32px;\n                height: 32px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                border-radius: var(--effect-border-radius);\n                transition: var(--effect-transition);\n            }\n\n            .modal-close:hover {\n                background: rgba(255, 255, 255, 0.1);\n                color: var(--color-text-inverse);\n            }\n\n            .modal-body {\n                padding: 1.5rem;\n                flex: 1;\n                overflow-y: auto;\n                background: var(--color-surface);\n            }\n\n            .section-modal-content {\n                display: flex;\n                flex-direction: column;\n                gap: 1.25rem;\n                max-width: 100%;\n                margin: 0 auto;\n                align-items: center;\n            }\n\n            .section-basic-info {\n                display: grid;\n                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n                gap: 0.75rem;\n                padding: 1rem;\n                background: rgba(172, 43, 55, 0.08);\n                border: 1px solid var(--color-border);\n                border-radius: var(--effect-border-radius);\n                border-left: 4px solid var(--color-primary);\n                box-shadow: var(--effect-shadow);\n                width: 100%;\n            }\n\n            .section-detail {\n                font-size: 0.9rem;\n                color: var(--color-text);\n                font-family: var(--font-family);\n            }\n\n            .section-detail strong {\n                color: var(--color-primary);\n                font-weight: 600;\n            }\n\n            .section-enrollment {\n                padding: 1rem;\n                background: rgba(172, 43, 55, 0.08);\n                border: 1px solid var(--color-border);\n                border-radius: var(--effect-border-radius);\n                border-left: 4px solid var(--color-success);\n                box-shadow: var(--effect-shadow);\n                width: 100%;\n            }\n\n            .section-enrollment.full {\n                background: rgba(172, 43, 55, 0.08);\n                border-left-color: var(--color-error);\n            }\n\n            .enrollment-status {\n                font-weight: 600;\n                margin-bottom: 0.5rem;\n                font-size: 1rem;\n                font-family: var(--font-family);\n            }\n\n            .enrollment-status.available {\n                color: var(--color-success);\n            }\n\n            .enrollment-status.full {\n                color: var(--color-error);\n            }\n\n            .waitlist-info {\n                font-size: 0.875rem;\n                color: var(--color-text-secondary);\n                margin-top: 0.25rem;\n                font-family: var(--font-family);\n            }\n\n            .section-meetings {\n                width: 100%;\n            }\n\n            .section-meetings h4 {\n                margin: 0 0 1rem 0;\n                font-size: 1.1rem;\n                color: var(--color-text);\n                padding-bottom: 0.5rem;\n                border-bottom: 2px solid var(--color-border);\n                font-family: var(--font-family);\n            }\n\n            .period-info {\n                display: flex;\n                gap: 1rem;\n                padding: 1rem;\n                background: var(--color-surface);\n                border: 1px solid var(--color-border);\n                border-radius: var(--effect-border-radius);\n                margin-bottom: 0.75rem;\n                box-shadow: var(--effect-shadow);\n            }\n\n            .period-type {\n                background: linear-gradient(135deg, var(--color-primary), var(--color-primary-light));\n                color: var(--color-text-inverse);\n                padding: 0.4rem 0.8rem;\n                border-radius: var(--effect-border-radius);\n                font-size: 0.8rem;\n                font-weight: 700;\n                height: fit-content;\n                min-width: 50px;\n                text-align: center;\n                box-shadow: var(--effect-shadow);\n                font-family: var(--font-family);\n            }\n\n            .period-schedule {\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                gap: 0.3rem;\n                font-size: 0.875rem;\n                font-family: var(--font-family);\n                align-items: flex-start;\n            }\n\n            .period-schedule div {\n                color: var(--color-text);\n                font-weight: 500;\n            }\n\n            .period-location {\n                color: var(--color-text-secondary);\n                font-size: 0.8rem;\n                font-weight: normal;\n            }\n\n            .section-notes {\n                background: var(--color-background-alt);\n                border: 1px solid var(--color-warning);\n                border-radius: var(--effect-border-radius);\n                padding: 1rem;\n                width: 100%;\n            }\n\n            .section-notes h4 {\n                margin: 0 0 0.5rem 0;\n                font-size: 1rem;\n                color: var(--color-warning);\n                border: none;\n                padding: 0;\n                font-family: var(--font-family);\n            }\n\n            .section-notes p {\n                margin: 0;\n                font-size: 0.875rem;\n                color: var(--color-text-secondary);\n                line-height: 1.5;\n                font-family: var(--font-family);\n            }\n\n            .modal-footer {\n                padding: 1rem 1.5rem 1.5rem 1.5rem;\n                display: flex;\n                gap: 0.75rem;\n                justify-content: flex-end;\n                border-top: 1px solid var(--color-border);\n                background: var(--color-background);\n            }\n\n            .modal-btn {\n                padding: 0.6rem 1.25rem;\n                border-radius: var(--effect-border-radius);\n                font-weight: 600;\n                font-size: 0.875rem;\n                cursor: pointer;\n                transition: var(--effect-transition);\n                border: 1px solid;\n                min-width: 100px;\n                font-family: var(--font-family);\n            }\n\n            .btn-primary {\n                background: linear-gradient(135deg, var(--color-primary), var(--color-primary-light));\n                color: var(--color-text-inverse);\n                border-color: var(--color-primary);\n            }\n\n            .btn-primary:hover {\n                background: linear-gradient(135deg, var(--color-primary-hover), var(--color-primary));\n                border-color: var(--color-primary-hover);\n                transform: translateY(-1px);\n                box-shadow: var(--effect-shadow-hover);\n            }\n\n            @media (max-width: 768px) {\n                .modal-backdrop {\n                    padding: 0.5rem;\n                }\n                \n                .modal-dialog {\n                    max-width: 100%;\n                    margin: 0;\n                }\n                \n                .modal-body {\n                    padding: 1rem;\n                }\n                \n                .section-basic-info {\n                    grid-template-columns: 1fr;\n                    padding: 0.75rem;\n                }\n                \n                .period-info {\n                    flex-direction: column;\n                    gap: 0.75rem;\n                }\n                \n                .period-type {\n                    align-self: flex-start;\n                    width: fit-content;\n                }\n                \n\n                .modal-footer {\n                    padding: 0.75rem 1rem 1rem 1rem;\n                }\n                \n                .modal-btn {\n                    width: 100%;\n                }\n            }\n        `;\n    }\n}","import { ModalService } from '../../services/ModalService';\n\nexport type InfoModalType = 'info' | 'warning' | 'error' | 'success';\n\nexport class InfoModalController {\n    private modalService: ModalService;\n\n    constructor(modalService: ModalService) {\n        this.modalService = modalService;\n    }\n\n    show(title: string, message: string, type: InfoModalType = 'info'): string {\n        const id = this.modalService.generateId();\n        const modalElement = this.createModalElement(id, title, message, type);\n        \n        this.modalService.showModal(id, modalElement);\n        this.modalService.setupModalBehavior(modalElement, id);\n\n        return id;\n    }\n\n    showInfo(title: string, message: string): string {\n        return this.show(title, message, 'info');\n    }\n\n    showWarning(title: string, message: string): string {\n        return this.show(title, message, 'warning');\n    }\n\n    showError(title: string, message: string): string {\n        return this.show(title, message, 'error');\n    }\n\n    showSuccess(title: string, message: string): string {\n        return this.show(title, message, 'success');\n    }\n\n    private createModalElement(id: string, title: string, message: string, type: InfoModalType): HTMLElement {\n        // Create modal backdrop\n        const backdrop = document.createElement('div');\n        backdrop.className = 'modal-backdrop';\n        backdrop.id = id;\n\n        // Add embedded CSS\n        const style = document.createElement('style');\n        style.textContent = this.getModalCSS();\n        backdrop.appendChild(style);\n\n        // Create modal content\n        backdrop.innerHTML += `\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header ${type}\">\n                        <h3 class=\"modal-title\">${title}</h3>\n                        <button class=\"modal-close\" onclick=\"document.getElementById('${id}').click()\">×</button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <div class=\"modal-icon ${type}\">\n                            ${this.getIconForType(type)}\n                        </div>\n                        <div class=\"modal-text\">\n                            ${message}\n                        </div>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button class=\"modal-btn btn-${this.getButtonStyleForType(type)}\" onclick=\"document.getElementById('${id}').click()\">OK</button>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Prevent clicks on modal dialog from closing modal\n        const dialog = backdrop.querySelector('.modal-dialog') as HTMLElement;\n        if (dialog) {\n            dialog.addEventListener('click', (event) => {\n                event.stopPropagation();\n            });\n        }\n\n        return backdrop;\n    }\n\n    private getIconForType(type: InfoModalType): string {\n        switch (type) {\n            case 'info': return 'ℹ';\n            case 'warning': return '⚠';\n            case 'error': return '✖';\n            case 'success': return '✓';\n            default: return 'ℹ';\n        }\n    }\n\n    private getButtonStyleForType(type: InfoModalType): string {\n        switch (type) {\n            case 'error': return 'danger';\n            case 'warning': return 'warning';\n            case 'success': return 'success';\n            case 'info':\n            default: return 'primary';\n        }\n    }\n\n    private getModalCSS(): string {\n        return `\n            .modal-backdrop {\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background-color: rgba(0, 0, 0, 0.5);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                padding: 1rem;\n                opacity: 0;\n                transition: var(--effect-transition);\n                cursor: pointer;\n            }\n\n            .modal-backdrop.show {\n                opacity: 1;\n            }\n\n            .modal-backdrop.hide {\n                opacity: 0;\n            }\n\n            .modal-dialog {\n                background: var(--color-surface);\n                border-radius: var(--effect-border-radius-large);\n                box-shadow: var(--effect-shadow-hover);\n                max-width: 500px;\n                width: 100%;\n                max-height: 90vh;\n                overflow: hidden;\n                transform: scale(0.9);\n                transition: var(--effect-transition);\n                cursor: default;\n            }\n\n            .modal-backdrop.show .modal-dialog {\n                transform: scale(1);\n            }\n\n            .modal-backdrop.hide .modal-dialog {\n                transform: scale(0.9);\n            }\n\n            .modal-content {\n                display: flex;\n                flex-direction: column;\n                max-height: 90vh;\n            }\n\n            .modal-header {\n                padding: 1.5rem 1.5rem 1rem 1.5rem;\n                display: flex;\n                align-items: center;\n                justify-content: space-between;\n                border-bottom: 1px solid var(--color-border);\n                color: var(--color-text-inverse);\n            }\n\n            .modal-header.info {\n                background: linear-gradient(135deg, var(--color-info), var(--color-primary));\n            }\n\n            .modal-header.warning {\n                background: linear-gradient(135deg, var(--color-warning), var(--color-warning));\n            }\n\n            .modal-header.error {\n                background: linear-gradient(135deg, var(--color-error), var(--color-error));\n            }\n\n            .modal-header.success {\n                background: linear-gradient(135deg, var(--color-success), var(--color-success));\n            }\n\n            .modal-title {\n                margin: 0;\n                font-size: 1.25rem;\n                font-weight: 600;\n                color: var(--color-text-inverse);\n                font-family: var(--font-family);\n            }\n\n            .modal-close {\n                background: none;\n                border: none;\n                font-size: 1.5rem;\n                color: rgba(255, 255, 255, 0.8);\n                cursor: pointer;\n                padding: 0;\n                width: 32px;\n                height: 32px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                border-radius: var(--effect-border-radius);\n                transition: var(--effect-transition);\n            }\n\n            .modal-close:hover {\n                background: rgba(255, 255, 255, 0.1);\n                color: var(--color-text-inverse);\n            }\n\n            .modal-body {\n                padding: 1rem 1.5rem;\n                flex: 1;\n                overflow-y: auto;\n                display: flex;\n                align-items: flex-start;\n                gap: 1rem;\n                background: var(--color-surface);\n            }\n\n            .modal-icon {\n                flex-shrink: 0;\n                width: 48px;\n                height: 48px;\n                border-radius: 50%;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                font-size: 1.5rem;\n                font-weight: bold;\n            }\n\n            .modal-icon.info {\n                background: rgba(0, 123, 255, 0.1);\n                color: var(--color-info);\n            }\n\n            .modal-icon.warning {\n                background: rgba(255, 193, 7, 0.1);\n                color: var(--color-warning);\n            }\n\n            .modal-icon.error {\n                background: rgba(220, 53, 69, 0.1);\n                color: var(--color-error);\n            }\n\n            .modal-icon.success {\n                background: rgba(40, 167, 69, 0.1);\n                color: var(--color-success);\n            }\n\n            .modal-text {\n                flex: 1;\n                color: var(--color-text);\n                line-height: 1.5;\n                font-family: var(--font-family);\n            }\n\n            .modal-footer {\n                padding: 1rem 1.5rem 1.5rem 1.5rem;\n                display: flex;\n                gap: 0.75rem;\n                justify-content: flex-end;\n                border-top: 1px solid var(--color-border);\n                background: var(--color-background);\n            }\n\n            .modal-btn {\n                padding: 0.5rem 1rem;\n                border-radius: var(--effect-border-radius);\n                font-weight: 500;\n                font-size: 0.875rem;\n                cursor: pointer;\n                transition: var(--effect-transition);\n                border: 1px solid;\n                min-width: 80px;\n                font-family: var(--font-family);\n            }\n\n            .btn-primary {\n                background: var(--color-primary);\n                color: var(--color-text-inverse);\n                border-color: var(--color-primary);\n            }\n\n            .btn-primary:hover {\n                background: var(--color-primary-hover);\n                border-color: var(--color-primary-hover);\n                transform: translateY(-1px);\n            }\n\n            .btn-warning {\n                background: var(--color-warning);\n                color: var(--color-text);\n                border-color: var(--color-warning);\n            }\n\n            .btn-warning:hover {\n                background: var(--color-warning);\n                border-color: var(--color-warning);\n                transform: translateY(-1px);\n                opacity: 0.9;\n            }\n\n            .btn-danger {\n                background: var(--color-error);\n                color: var(--color-text-inverse);\n                border-color: var(--color-error);\n            }\n\n            .btn-danger:hover {\n                background: var(--color-error);\n                border-color: var(--color-error);\n                transform: translateY(-1px);\n                opacity: 0.9;\n            }\n\n            .btn-success {\n                background: var(--color-success);\n                color: var(--color-text-inverse);\n                border-color: var(--color-success);\n            }\n\n            .btn-success:hover {\n                background: var(--color-success);\n                border-color: var(--color-success);\n                transform: translateY(-1px);\n                opacity: 0.9;\n            }\n\n            @media (max-width: 768px) {\n                .modal-backdrop {\n                    padding: 0.5rem;\n                }\n                \n                .modal-dialog {\n                    max-width: 100%;\n                    margin: 0;\n                }\n                \n                .modal-header {\n                    padding: 1rem 1rem 0.75rem 1rem;\n                }\n                \n                .modal-body {\n                    padding: 0.75rem 1rem;\n                }\n                \n                .modal-footer {\n                    padding: 0.75rem 1rem 1rem 1rem;\n                }\n                \n                .modal-btn {\n                    width: 100%;\n                    margin: 0;\n                }\n                \n                .modal-icon {\n                    width: 40px;\n                    height: 40px;\n                    font-size: 1.25rem;\n                }\n            }\n        `;\n    }\n}","import { ModalService } from '../../services/ModalService';\nimport { FilterService } from '../../services/FilterService';\nimport { Course, Department } from '../../types/types';\nimport { getDepartmentCategory, CATEGORY_ORDER } from '../../utils/departmentUtils';\n\nexport class FilterModalController {\n    private modalService: ModalService;\n    private filterService: FilterService | null = null;\n    private allCourses: Course[] = [];\n    private allDepartments: Department[] = [];\n    private currentModalId: string | null = null;\n    private isCategoryMode: boolean = false;\n    private isUpdatingFilter: boolean = false;\n\n    constructor(modalService: ModalService) {\n        this.modalService = modalService;\n    }\n\n    setFilterService(filterService: FilterService): void {\n        this.filterService = filterService;\n    }\n\n    setCourseData(departments: Department[]): void {\n        this.allDepartments = departments;\n        this.allCourses = [];\n        departments.forEach(dept => {\n            this.allCourses.push(...dept.courses);\n        });\n    }\n\n    // Method to sync search input from main controller\n    syncSearchInputFromMain(query: string): void {\n        if (this.currentModalId) {\n            const modalElement = document.getElementById(this.currentModalId);\n            if (modalElement) {\n                const searchInput = modalElement.querySelector('.search-text-input') as HTMLInputElement;\n                if (searchInput && searchInput.value !== query) {\n                    searchInput.value = query;\n                    this.updateClearSearchButton(modalElement, query);\n                }\n            }\n        }\n    }\n\n    // Method to refresh department selection from external changes\n    refreshDepartmentSelection(): void {\n        if (this.isUpdatingFilter) {\n            return;\n        }\n        \n        if (this.currentModalId) {\n            const modalElement = document.getElementById(this.currentModalId);\n            if (modalElement) {\n                this.updateDepartmentCheckboxes(modalElement);\n            }\n        }\n    }\n\n    private updateDepartmentCheckboxes(modalElement: HTMLElement): void {\n        if (!this.filterService) return;\n        \n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'department');\n        const activeDepartments = activeFilter?.criteria?.departments || [];\n        \n        // Update all department checkboxes\n        const checkboxes = modalElement.querySelectorAll('input[data-filter=\"department\"]') as NodeListOf<HTMLInputElement>;\n        checkboxes.forEach(checkbox => {\n            if (this.isCategoryMode && checkbox.dataset.category === 'true') {\n                // For category checkboxes, check if ANY department in that category is selected\n                const categoryName = checkbox.value;\n                const allAvailableDepartments = this.filterService!.getFilterOptions('department', this.allCourses) as string[];\n                const categoryDepartments = allAvailableDepartments.filter(dept => \n                    getDepartmentCategory(dept) === categoryName\n                );\n                \n                const selectedInCategory = categoryDepartments.filter(dept => \n                    activeDepartments.includes(dept)\n                );\n                \n                checkbox.checked = selectedInCategory.length > 0;\n                \n                // Handle indeterminate state\n                const allSelected = selectedInCategory.length === categoryDepartments.length;\n                const someSelected = selectedInCategory.length > 0;\n                checkbox.indeterminate = someSelected && !allSelected;\n                \n            } else {\n                // For individual department checkboxes\n                checkbox.checked = activeDepartments.includes(checkbox.value);\n            }\n        });\n        \n        // Update preview\n        this.updatePreview(modalElement);\n    }\n\n    show(): string {\n        if (!this.filterService) {\n            console.error('FilterService not set on FilterModalController');\n            return '';\n        }\n\n        const id = this.modalService.generateId();\n        this.currentModalId = id;\n        const modalElement = this.createModalElement(id);\n        \n        this.modalService.showModal(id, modalElement);\n        this.modalService.setupModalBehavior(modalElement, id, { closeOnBackdrop: true, closeOnEscape: true });\n\n        // Set up filter UI after modal is shown\n        setTimeout(() => this.initializeFilterUI(modalElement), 50);\n\n        return id;\n    }\n\n    private createModalElement(id: string): HTMLElement {\n        const backdrop = document.createElement('div');\n        backdrop.className = 'modal-backdrop filter-modal';\n        backdrop.id = id;\n\n        const activeFiltersCount = this.filterService?.getFilterCount() || 0;\n        const courseCount = this.filterService ? this.filterService.filterCourses(this.allCourses).length : this.allCourses.length;\n\n        backdrop.innerHTML = `\n            <div class=\"modal-dialog filter-modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h3 class=\"modal-title\">\n                            Filter Courses \n                            <span id=\"filter-count\" class=\"filter-count\">${activeFiltersCount > 0 ? `(${activeFiltersCount})` : ''}</span>\n                        </h3>\n                        <button class=\"modal-close\" onclick=\"document.getElementById('${id}').click()\">×</button>\n                    </div>\n                    <div class=\"modal-body filter-modal-body\">\n                        ${this.createFilterSections()}\n                    </div>\n                    <div class=\"modal-footer\">\n                        <div class=\"filter-preview\">\n                            <span id=\"course-count-preview\">${courseCount} courses match current filters</span>\n                        </div>\n                        <div class=\"filter-actions\">\n                            <button class=\"modal-btn btn-secondary\" id=\"clear-all-filters\">Clear All</button>\n                            <button class=\"modal-btn btn-primary\" onclick=\"document.getElementById('${id}').click()\">Apply</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        const dialog = backdrop.querySelector('.modal-dialog') as HTMLElement;\n        if (dialog) {\n            dialog.addEventListener('click', (event) => {\n                event.stopPropagation();\n            });\n        }\n\n        return backdrop;\n    }\n\n    private createFilterSections(): string {\n        return `\n            <div class=\"filter-sections\">\n                ${this.createSearchTextFilter()}\n                ${this.createDepartmentFilter()}\n                ${this.createAvailabilityFilter()}\n                ${this.createCreditRangeFilter()}\n                ${this.createProfessorFilter()}\n                ${this.createTermFilter()}\n                ${this.createLocationFilter()}\n            </div>\n        `;\n    }\n\n    private createSearchTextFilter(): string {\n        if (!this.filterService) return '';\n        \n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'searchText');\n        const currentQuery = activeFilter?.criteria?.query || '';\n\n        return `\n            <div class=\"filter-section search-text-section\">\n                <div class=\"filter-section-header\">\n                    <h4 class=\"filter-section-title\">Search Text</h4>\n                    <button class=\"filter-clear-search\" ${currentQuery ? '' : 'style=\"display: none;\"'}>Clear</button>\n                </div>\n                <div class=\"filter-section-content\">\n                    <div class=\"filter-search-container\">\n                        <input type=\"text\" class=\"filter-search search-text-input\" \n                               placeholder=\"Search courses...\" \n                               value=\"${this.escapeHtml(currentQuery)}\"\n                               data-filter=\"searchText\">\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private createDepartmentFilter(): string {\n        if (!this.filterService) return '';\n        \n        const checkboxesHtml = this.isCategoryMode ? \n            this.createCategoryCheckboxes() : \n            this.createIndividualDepartmentCheckboxes();\n        \n        const searchPlaceholder = this.isCategoryMode ? \n            'Search categories...' : \n            'Search departments...';\n\n        return `\n            <div class=\"filter-section\">\n                <div class=\"filter-section-header\">\n                    <h4 class=\"filter-section-title\">Departments</h4>\n                    <div class=\"filter-section-actions\">\n                        <button class=\"filter-select-all\" data-filter=\"department\">All</button>\n                        <button class=\"filter-select-none\" data-filter=\"department\">None</button>\n                    </div>\n                </div>\n                <div class=\"filter-section-content\">\n                    <div class=\"filter-toggle-container\">\n                        <label class=\"filter-toggle-label\">\n                            <input type=\"checkbox\" class=\"filter-toggle\" ${this.isCategoryMode ? 'checked' : ''} \n                                   id=\"category-mode-toggle\">\n                            <span class=\"filter-toggle-slider\"></span>\n                            <span class=\"filter-toggle-text\">Search by Credit Requirements</span>\n                        </label>\n                    </div>\n                    <div class=\"filter-search-container\">\n                        <input type=\"text\" class=\"filter-search\" placeholder=\"${searchPlaceholder}\" data-filter=\"department\">\n                    </div>\n                    <div class=\"filter-checkbox-grid\" id=\"department-checkboxes\">\n                        ${checkboxesHtml}\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private createIndividualDepartmentCheckboxes(): string {\n        if (!this.filterService) return '';\n        \n        const departments = this.filterService.getFilterOptions('department', this.allCourses) as string[];\n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'department');\n        const activeDepartments = activeFilter?.criteria?.departments || [];\n\n        return departments.map(dept => `\n            <label class=\"filter-checkbox-label\">\n                <input type=\"checkbox\" value=\"${dept}\" ${activeDepartments.includes(dept) ? 'checked' : ''} \n                       data-filter=\"department\">\n                <span class=\"filter-checkbox-text\">${dept}</span>\n            </label>\n        `).join('');\n    }\n\n    private createAvailabilityFilter(): string {\n        if (!this.filterService) return '';\n        \n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'availability');\n        const isChecked = activeFilter?.criteria?.availableOnly || false;\n\n        return `\n            <div class=\"filter-section\">\n                <div class=\"filter-section-header\">\n                    <h4 class=\"filter-section-title\">Availability</h4>\n                </div>\n                <div class=\"filter-section-content\">\n                    <label class=\"filter-toggle-label\">\n                        <input type=\"checkbox\" class=\"filter-toggle\" data-filter=\"availability\" ${isChecked ? 'checked' : ''}>\n                        <span class=\"filter-toggle-slider\"></span>\n                        <span class=\"filter-toggle-text\">Show only courses with available seats</span>\n                    </label>\n                </div>\n            </div>\n        `;\n    }\n\n    private createCreditRangeFilter(): string {\n        if (!this.filterService) return '';\n        \n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'creditRange');\n        const minCredits = activeFilter?.criteria?.min || 1;\n        const maxCredits = activeFilter?.criteria?.max || 4;\n\n        return `\n            <div class=\"filter-section\">\n                <div class=\"filter-section-header\">\n                    <h4 class=\"filter-section-title\">Credit Hours</h4>\n                </div>\n                <div class=\"filter-section-content\">\n                    <div class=\"filter-range-container\">\n                        <div class=\"filter-range-inputs\">\n                            <div class=\"filter-range-input\">\n                                <label>Min Credits</label>\n                                <input type=\"number\" min=\"1\" max=\"4\" value=\"${minCredits}\" \n                                       id=\"credit-min\" data-filter=\"creditRange\">\n                            </div>\n                            <div class=\"filter-range-input\">\n                                <label>Max Credits</label>\n                                <input type=\"number\" min=\"1\" max=\"4\" value=\"${maxCredits}\" \n                                       id=\"credit-max\" data-filter=\"creditRange\">\n                            </div>\n                        </div>\n                        <div class=\"filter-quick-select\">\n                            <button class=\"filter-quick-btn\" data-credits=\"1\">1</button>\n                            <button class=\"filter-quick-btn\" data-credits=\"2\">2</button>\n                            <button class=\"filter-quick-btn\" data-credits=\"3\">3</button>\n                            <button class=\"filter-quick-btn\" data-credits=\"4\">4</button>\n                            <button class=\"filter-quick-btn\" data-credits=\"3-4\">3-4</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private createProfessorFilter(): string {\n        if (!this.filterService) return '';\n        \n        const professors = this.filterService.getFilterOptions('professor', this.allCourses) as string[];\n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'professor');\n        const activeProfessors = activeFilter?.criteria?.professors || [];\n\n        const selectedProfessorsChips = activeProfessors.map((prof: any) => `\n            <span class=\"filter-chip\">\n                ${this.escapeHtml(prof)}\n                <button class=\"filter-chip-remove\" data-professor=\"${this.escapeHtml(prof)}\">×</button>\n            </span>\n        `).join('');\n\n        return `\n            <div class=\"filter-section\">\n                <div class=\"filter-section-header\">\n                    <h4 class=\"filter-section-title\">Professors</h4>\n                </div>\n                <div class=\"filter-section-content\">\n                    <div class=\"filter-search-container\">\n                        <input type=\"text\" class=\"filter-search professor-search\" \n                               placeholder=\"Search professors...\" data-filter=\"professor\">\n                        <div class=\"professor-dropdown\" id=\"professor-dropdown\" style=\"display: none;\"></div>\n                    </div>\n                    <div class=\"filter-selected-chips\">\n                        ${selectedProfessorsChips}\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private createTermFilter(): string {\n        if (!this.filterService) return '';\n        \n        const terms = this.filterService.getFilterOptions('term', this.allCourses) as string[];\n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'term');\n        const activeTerms = activeFilter?.criteria?.terms || [];\n\n        const termCheckboxes = terms.map(term => `\n            <label class=\"filter-checkbox-label term-checkbox\">\n                <input type=\"checkbox\" value=\"${term}\" ${activeTerms.includes(term) ? 'checked' : ''} \n                       data-filter=\"term\">\n                <span class=\"filter-checkbox-text\">${term} Term</span>\n            </label>\n        `).join('');\n\n        return `\n            <div class=\"filter-section\">\n                <div class=\"filter-section-header\">\n                    <h4 class=\"filter-section-title\">Terms</h4>\n                    <button class=\"filter-select-all\" data-filter=\"term\">All Terms</button>\n                </div>\n                <div class=\"filter-section-content\">\n                    <div class=\"filter-checkbox-row\">\n                        ${termCheckboxes}\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private createLocationFilter(): string {\n        if (!this.filterService) return '';\n        \n        const locationOptions = this.filterService.getFilterOptions('location', this.allCourses) as { buildings: string[] };\n        const buildings = locationOptions.buildings || [];\n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'location');\n        const activeBuildings = activeFilter?.criteria?.buildings || [];\n\n        const buildingCheckboxes = buildings.map(building => `\n            <label class=\"filter-checkbox-label\">\n                <input type=\"checkbox\" value=\"${building}\" ${activeBuildings.includes(building) ? 'checked' : ''} \n                       data-filter=\"location\">\n                <span class=\"filter-checkbox-text\">${building}</span>\n            </label>\n        `).join('');\n\n        return `\n            <div class=\"filter-section\">\n                <div class=\"filter-section-header\">\n                    <h4 class=\"filter-section-title\">Buildings</h4>\n                    <div class=\"filter-section-actions\">\n                        <button class=\"filter-select-all\" data-filter=\"location\">All</button>\n                        <button class=\"filter-select-none\" data-filter=\"location\">None</button>\n                    </div>\n                </div>\n                <div class=\"filter-section-content\">\n                    <div class=\"filter-search-container\">\n                        <input type=\"text\" class=\"filter-search\" placeholder=\"Search buildings...\" data-filter=\"location\">\n                    </div>\n                    <div class=\"filter-checkbox-grid\" id=\"location-checkboxes\">\n                        ${buildingCheckboxes}\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private initializeFilterUI(modalElement: HTMLElement): void {\n        if (!this.filterService) return;\n\n        this.setupSearchTextFilter(modalElement);\n        this.setupDepartmentFilter(modalElement);\n        this.setupAvailabilityFilter(modalElement);\n        this.setupCreditRangeFilter(modalElement);\n        this.setupProfessorFilter(modalElement);\n        this.setupTermFilter(modalElement);\n        this.setupLocationFilter(modalElement);\n        this.setupClearAllButton(modalElement);\n        this.setupFilterSearch(modalElement);\n    }\n\n    private setupSearchTextFilter(modalElement: HTMLElement): void {\n        const searchInput = modalElement.querySelector('.search-text-input') as HTMLInputElement;\n        const clearButton = modalElement.querySelector('.filter-clear-search');\n        \n        if (searchInput) {\n            searchInput.addEventListener('input', () => {\n                const query = searchInput.value.trim();\n                this.updateSearchTextFilter(query, modalElement);\n                this.syncMainSearchInput(query);\n            });\n        }\n\n        if (clearButton) {\n            clearButton.addEventListener('click', () => {\n                if (searchInput) {\n                    searchInput.value = '';\n                }\n                this.updateSearchTextFilter('', modalElement);\n                this.syncMainSearchInput('');\n            });\n        }\n    }\n\n    private setupDepartmentFilter(modalElement: HTMLElement): void {\n        // Setup toggle for category mode\n        const categoryToggle = modalElement.querySelector('#category-mode-toggle') as HTMLInputElement;\n        if (categoryToggle) {\n            categoryToggle.addEventListener('change', () => {\n                this.toggleDepartmentMode(modalElement);\n            });\n        }\n\n        const checkboxes = modalElement.querySelectorAll('input[data-filter=\"department\"]');\n        \n        // Set up indeterminate states for category mode checkboxes\n        if (this.isCategoryMode) {\n            checkboxes.forEach((checkbox) => {\n                const cb = checkbox as HTMLInputElement;\n                if (cb.dataset.indeterminate === 'true') {\n                    cb.indeterminate = true;\n                }\n            });\n        }\n        \n        checkboxes.forEach((checkbox) => {\n            checkbox.addEventListener('change', () => {\n                this.updateDepartmentFilter(modalElement);\n            });\n        });\n\n        const selectAll = modalElement.querySelector('.filter-select-all[data-filter=\"department\"]');\n        const selectNone = modalElement.querySelector('.filter-select-none[data-filter=\"department\"]');\n\n        selectAll?.addEventListener('click', () => {\n            checkboxes.forEach((cb: any) => cb.checked = true);\n            this.updateDepartmentFilter(modalElement);\n        });\n\n        selectNone?.addEventListener('click', () => {\n            checkboxes.forEach((cb: any) => cb.checked = false);\n            this.updateDepartmentFilter(modalElement);\n        });\n    }\n\n    private setupAvailabilityFilter(modalElement: HTMLElement): void {\n        const toggle = modalElement.querySelector('input[data-filter=\"availability\"]') as HTMLInputElement;\n        toggle?.addEventListener('change', () => this.updateAvailabilityFilter(modalElement));\n    }\n\n    private setupCreditRangeFilter(modalElement: HTMLElement): void {\n        const minInput = modalElement.querySelector('#credit-min') as HTMLInputElement;\n        const maxInput = modalElement.querySelector('#credit-max') as HTMLInputElement;\n        const quickBtns = modalElement.querySelectorAll('.filter-quick-btn');\n\n        minInput?.addEventListener('change', () => this.updateCreditRangeFilter(modalElement));\n        maxInput?.addEventListener('change', () => this.updateCreditRangeFilter(modalElement));\n\n        quickBtns.forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const credits = (e.target as HTMLElement).dataset.credits;\n                if (credits?.includes('-')) {\n                    const [min, max] = credits.split('-');\n                    if (minInput) minInput.value = min;\n                    if (maxInput) maxInput.value = max;\n                } else {\n                    if (minInput) minInput.value = credits!;\n                    if (maxInput) maxInput.value = credits!;\n                }\n                this.updateCreditRangeFilter(modalElement);\n            });\n        });\n    }\n\n    private setupProfessorFilter(modalElement: HTMLElement): void {\n        const searchInput = modalElement.querySelector('.professor-search') as HTMLInputElement;\n        const dropdown = modalElement.querySelector('#professor-dropdown') as HTMLElement;\n        \n        if (searchInput && this.filterService) {\n            const professors = this.filterService.getFilterOptions('professor', this.allCourses) as string[];\n            \n            searchInput.addEventListener('input', () => {\n                const query = searchInput.value.toLowerCase();\n                if (query.length > 0) {\n                    const matches = professors.filter(prof => \n                        prof.toLowerCase().includes(query) && prof !== 'TBA'\n                    ).slice(0, 10);\n                    \n                    dropdown.innerHTML = matches.map(prof => \n                        `<div class=\"professor-option\" data-professor=\"${prof}\">${prof}</div>`\n                    ).join('');\n                    dropdown.style.display = matches.length > 0 ? 'block' : 'none';\n                } else {\n                    dropdown.style.display = 'none';\n                }\n            });\n\n            // Close dropdown when clicking outside\n            document.addEventListener('click', (e) => {\n                if (!searchInput.contains(e.target as Node) && !dropdown.contains(e.target as Node)) {\n                    dropdown.style.display = 'none';\n                }\n            });\n\n            dropdown.addEventListener('click', (e) => {\n                const target = e.target as HTMLElement;\n                if (target.classList.contains('professor-option')) {\n                    const professor = target.dataset.professor!;\n                    this.addProfessorFilter(professor, modalElement);\n                    searchInput.value = '';\n                    dropdown.style.display = 'none';\n                }\n            });\n        }\n\n        // Handle chip removal - use more specific delegation\n        const chipsContainer = modalElement.querySelector('.filter-selected-chips');\n        if (chipsContainer) {\n            chipsContainer.addEventListener('click', (e) => {\n                const target = e.target as HTMLElement;\n                if (target.classList.contains('filter-chip-remove')) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    const professor = this.unescapeHtml(target.dataset.professor!);\n                    this.removeProfessorFilter(professor, modalElement);\n                }\n            });\n        }\n    }\n\n    private setupTermFilter(modalElement: HTMLElement): void {\n        const checkboxes = modalElement.querySelectorAll('input[data-filter=\"term\"]');\n        checkboxes.forEach(checkbox => {\n            checkbox.addEventListener('change', () => this.updateTermFilter(modalElement));\n        });\n\n        const selectAll = modalElement.querySelector('.filter-select-all[data-filter=\"term\"]');\n        selectAll?.addEventListener('click', () => {\n            checkboxes.forEach((cb: any) => cb.checked = true);\n            this.updateTermFilter(modalElement);\n        });\n    }\n\n    private setupLocationFilter(modalElement: HTMLElement): void {\n        const checkboxes = modalElement.querySelectorAll('input[data-filter=\"location\"]');\n        checkboxes.forEach(checkbox => {\n            checkbox.addEventListener('change', () => this.updateLocationFilter(modalElement));\n        });\n\n        const selectAll = modalElement.querySelector('.filter-select-all[data-filter=\"location\"]');\n        const selectNone = modalElement.querySelector('.filter-select-none[data-filter=\"location\"]');\n\n        selectAll?.addEventListener('click', () => {\n            checkboxes.forEach((cb: any) => cb.checked = true);\n            this.updateLocationFilter(modalElement);\n        });\n\n        selectNone?.addEventListener('click', () => {\n            checkboxes.forEach((cb: any) => cb.checked = false);\n            this.updateLocationFilter(modalElement);\n        });\n    }\n\n    private setupClearAllButton(modalElement: HTMLElement): void {\n        const clearButton = modalElement.querySelector('#clear-all-filters');\n        clearButton?.addEventListener('click', () => {\n            if (this.filterService) {\n                this.filterService.clearFilters();\n                this.updatePreview(modalElement);\n                // Sync main search input to clear it\n                this.syncMainSearchInput('');\n                // Refresh the modal content\n                const modalBody = modalElement.querySelector('.filter-modal-body');\n                if (modalBody) {\n                    modalBody.innerHTML = this.createFilterSections();\n                    this.initializeFilterUI(modalElement);\n                }\n            }\n        });\n    }\n\n    private setupFilterSearch(modalElement: HTMLElement): void {\n        const searchInputs = modalElement.querySelectorAll('.filter-search');\n        searchInputs.forEach(input => {\n            input.addEventListener('input', (e) => {\n                const searchInput = e.target as HTMLInputElement;\n                const filterType = searchInput.dataset.filter;\n                const query = searchInput.value.toLowerCase();\n                \n                if (filterType === 'department') {\n                    const checkboxes = modalElement.querySelector('#department-checkboxes');\n                    if (checkboxes) {\n                        const labels = checkboxes.querySelectorAll('.filter-checkbox-label');\n                        labels.forEach((label: any) => {\n                            const checkbox = label.querySelector('input[type=\"checkbox\"]') as HTMLInputElement;\n                            const value = checkbox ? checkbox.value : '';\n                            let matches = false;\n                            \n                            if (this.isCategoryMode) {\n                                // In category mode, search category names directly\n                                matches = value.toLowerCase().includes(query);\n                            } else {\n                                // In individual mode, use the enhanced search (dept + category)\n                                matches = this.departmentMatchesSearch(value, query);\n                            }\n                            \n                            label.style.display = matches ? 'flex' : 'none';\n                        });\n                    }\n                }\n            });\n        });\n    }\n\n    // Filter update methods\n    private updateSearchTextFilter(query: string, modalElement: HTMLElement): void {\n        if (query.length > 0) {\n            this.filterService?.addFilter('searchText', { query });\n        } else {\n            this.filterService?.removeFilter('searchText');\n        }\n        this.updatePreview(modalElement);\n        this.updateClearSearchButton(modalElement, query);\n    }\n\n    private syncMainSearchInput(query: string): void {\n        const mainSearchInput = document.getElementById('search-input') as HTMLInputElement;\n        if (mainSearchInput) {\n            mainSearchInput.value = query;\n        }\n    }\n\n    private updateClearSearchButton(modalElement: HTMLElement, query: string): void {\n        const clearButton = modalElement.querySelector('.filter-clear-search') as HTMLElement;\n        if (clearButton) {\n            clearButton.style.display = query.length > 0 ? 'inline-block' : 'none';\n        }\n    }\n\n    private departmentMatchesSearch(departmentAbbreviation: string, query: string): boolean {\n        if (!query) return true;\n        \n        const lowerQuery = query.toLowerCase();\n        const lowerDept = departmentAbbreviation.toLowerCase();\n        \n        // Check if query matches the department abbreviation\n        if (lowerDept.includes(lowerQuery)) {\n            return true;\n        }\n        \n        // Check if query matches the department category\n        const category = getDepartmentCategory(departmentAbbreviation);\n        const lowerCategory = category.toLowerCase();\n        if (lowerCategory.includes(lowerQuery)) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    private toggleDepartmentMode(modalElement: HTMLElement): void {\n        this.isCategoryMode = !this.isCategoryMode;\n        \n        // Refresh the department filter section\n        const allFilterSections = modalElement.querySelectorAll('.filter-section');\n        let departmentSection: Element | null = null;\n        \n        allFilterSections.forEach((section) => {\n            const titleElement = section.querySelector('.filter-section-title');\n            if (titleElement?.textContent === 'Departments') {\n                departmentSection = section;\n            }\n        });\n        \n        if (departmentSection) {\n            const newDepartmentFilter = this.createDepartmentFilter();\n            departmentSection.outerHTML = newDepartmentFilter;\n            \n            // Re-query the modal element to ensure we have fresh DOM references\n            const freshModalElement = document.getElementById(this.currentModalId || '') as HTMLElement;\n            if (freshModalElement) {\n                this.setupDepartmentFilter(freshModalElement);\n                this.setupFilterSearch(freshModalElement);\n            }\n        }\n    }\n\n    private createCategoryCheckboxes(): string {\n        if (!this.filterService) return '';\n        \n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'department');\n        const activeDepartments = activeFilter?.criteria?.departments || [];\n        \n        // Get all available departments to determine which categories should be checked\n        const allAvailableDepartments = this.filterService.getFilterOptions('department', this.allCourses) as string[];\n        \n        const categoriesToShow = CATEGORY_ORDER.filter(category => category !== 'Other');\n        \n        const categoryCheckboxes = categoriesToShow.map(category => {\n            // Get all departments in this category\n            const categoryDepartments = allAvailableDepartments.filter(dept => \n                getDepartmentCategory(dept) === category\n            );\n            \n            // Calculate selection states\n            const selectedDepartmentsInCategory = categoryDepartments.filter(dept => \n                activeDepartments.includes(dept)\n            );\n            \n            const allSelected = categoryDepartments.length > 0 && \n                selectedDepartmentsInCategory.length === categoryDepartments.length;\n            const someSelected = selectedDepartmentsInCategory.length > 0;\n            const isIndeterminate = someSelected && !allSelected;\n            \n            const isChecked = allSelected || someSelected;\n            \n            return `\n                <label class=\"filter-checkbox-label\">\n                    <input type=\"checkbox\" value=\"${category}\" ${isChecked ? 'checked' : ''} \n                           ${isIndeterminate ? 'data-indeterminate=\"true\"' : ''}\n                           data-filter=\"department\" data-category=\"true\">\n                    <span class=\"filter-checkbox-text\">${category}</span>\n                </label>\n            `;\n        }).join('');\n\n        return categoryCheckboxes;\n    }\n\n    private updateDepartmentFilter(modalElement: HTMLElement): void {\n        if (this.isUpdatingFilter) {\n            return;\n        }\n        \n        this.isUpdatingFilter = true;\n        \n        try {\n            const checkboxes = modalElement.querySelectorAll('input[data-filter=\"department\"]:checked') as NodeListOf<HTMLInputElement>;\n            let departments: string[] = [];\n            \n            if (this.isCategoryMode) {\n                // Handle category selections - convert categories to individual departments\n                const selectedCategories = Array.from(checkboxes).map(cb => cb.value);\n                const allAvailableDepartments = this.filterService?.getFilterOptions('department', this.allCourses) as string[] || [];\n                \n                selectedCategories.forEach(category => {\n                    const categoryDepartments = allAvailableDepartments.filter(dept => \n                        getDepartmentCategory(dept) === category\n                    );\n                    departments.push(...categoryDepartments);\n                });\n            } else {\n                // Handle individual department selections\n                departments = Array.from(checkboxes).map(cb => cb.value);\n            }\n            \n            if (departments.length > 0) {\n                this.filterService?.addFilter('department', { departments });\n            } else {\n                this.filterService?.removeFilter('department');\n            }\n            \n            this.updatePreview(modalElement);\n            \n        } finally {\n            // Small delay before releasing the lock to prevent immediate re-entry\n            setTimeout(() => {\n                this.isUpdatingFilter = false;\n            }, 100);\n        }\n    }\n\n    private updateAvailabilityFilter(modalElement: HTMLElement): void {\n        const toggle = modalElement.querySelector('input[data-filter=\"availability\"]') as HTMLInputElement;\n        \n        if (toggle.checked) {\n            this.filterService?.addFilter('availability', { availableOnly: true });\n        } else {\n            this.filterService?.removeFilter('availability');\n        }\n        this.updatePreview(modalElement);\n    }\n\n    private updateCreditRangeFilter(modalElement: HTMLElement): void {\n        const minInput = modalElement.querySelector('#credit-min') as HTMLInputElement;\n        const maxInput = modalElement.querySelector('#credit-max') as HTMLInputElement;\n        \n        const min = parseInt(minInput.value);\n        const max = parseInt(maxInput.value);\n        \n        if (min && max && (min !== 1 || max !== 4)) {\n            this.filterService?.addFilter('creditRange', { min, max });\n        } else {\n            this.filterService?.removeFilter('creditRange');\n        }\n        this.updatePreview(modalElement);\n    }\n\n    private addProfessorFilter(professor: string, modalElement: HTMLElement): void {\n        if (!this.filterService) return;\n        \n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'professor');\n        const currentProfessors = activeFilter?.criteria?.professors || [];\n        \n        if (!currentProfessors.includes(professor)) {\n            const updatedProfessors = [...currentProfessors, professor];\n            this.filterService.addFilter('professor', { professors: updatedProfessors });\n            this.refreshProfessorChips(modalElement);\n            this.updatePreview(modalElement);\n        }\n    }\n\n    private removeProfessorFilter(professor: string, modalElement: HTMLElement): void {\n        if (!this.filterService) return;\n        \n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'professor');\n        const currentProfessors = activeFilter?.criteria?.professors || [];\n        const updatedProfessors = currentProfessors.filter((p: string) => p !== professor);\n        \n        if (updatedProfessors.length > 0) {\n            this.filterService.addFilter('professor', { professors: updatedProfessors });\n        } else {\n            this.filterService.removeFilter('professor');\n        }\n        \n        this.refreshProfessorChips(modalElement);\n        this.updatePreview(modalElement);\n    }\n\n    private refreshProfessorChips(modalElement: HTMLElement): void {\n        if (!this.filterService) return;\n        \n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'professor');\n        const professors = activeFilter?.criteria?.professors || [];\n        \n        const chipsContainer = modalElement.querySelector('.filter-selected-chips');\n        if (chipsContainer) {\n            chipsContainer.innerHTML = professors.map((prof: any) => `\n                <span class=\"filter-chip\">\n                    ${this.escapeHtml(prof)}\n                    <button class=\"filter-chip-remove\" data-professor=\"${this.escapeHtml(prof)}\">×</button>\n                </span>\n            `).join('');\n        }\n    }\n\n    private updateTermFilter(modalElement: HTMLElement): void {\n        const checkboxes = modalElement.querySelectorAll('input[data-filter=\"term\"]:checked') as NodeListOf<HTMLInputElement>;\n        const terms = Array.from(checkboxes).map(cb => cb.value);\n        \n        if (terms.length > 0) {\n            this.filterService?.addFilter('term', { terms });\n        } else {\n            this.filterService?.removeFilter('term');\n        }\n        this.updatePreview(modalElement);\n    }\n\n    private updateLocationFilter(modalElement: HTMLElement): void {\n        const checkboxes = modalElement.querySelectorAll('input[data-filter=\"location\"]:checked') as NodeListOf<HTMLInputElement>;\n        const buildings = Array.from(checkboxes).map(cb => cb.value);\n        \n        if (buildings.length > 0) {\n            this.filterService?.addFilter('location', { buildings });\n        } else {\n            this.filterService?.removeFilter('location');\n        }\n        this.updatePreview(modalElement);\n    }\n\n    private updatePreview(modalElement: HTMLElement): void {\n        if (!this.filterService) return;\n        \n        const filteredCourses = this.filterService.filterCourses(this.allCourses);\n        const courseCount = filteredCourses.length;\n        const filterCount = this.filterService.getFilterCount();\n        \n        const countElement = modalElement.querySelector('#course-count-preview');\n        const filterCountElement = modalElement.querySelector('#filter-count');\n        \n        if (countElement) {\n            countElement.textContent = `${courseCount} courses match current filters`;\n        }\n        \n        if (filterCountElement) {\n            filterCountElement.textContent = filterCount > 0 ? `(${filterCount})` : '';\n        }\n    }\n\n    private escapeHtml(text: string): string {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n\n    private unescapeHtml(text: string): string {\n        const div = document.createElement('div');\n        div.innerHTML = text;\n        return div.textContent || div.innerText || '';\n    }\n}","import { ModalService } from '../../services/ModalService';\nimport { ScheduleFilterService } from '../../services/ScheduleFilterService';\nimport { SelectedCourse } from '../../types/schedule';\n\nexport class ScheduleFilterModalController {\n    private modalService: ModalService;\n    private scheduleFilterService: ScheduleFilterService | null = null;\n    private selectedCourses: SelectedCourse[] = [];\n    private currentModalId: string | null = null;\n\n    constructor(modalService: ModalService) {\n        this.modalService = modalService;\n    }\n\n    setScheduleFilterService(scheduleFilterService: ScheduleFilterService): void {\n        this.scheduleFilterService = scheduleFilterService;\n    }\n\n    setSelectedCourses(selectedCourses: SelectedCourse[]): void {\n        this.selectedCourses = selectedCourses;\n    }\n\n    show(): string {\n        if (!this.scheduleFilterService) {\n            console.error('ScheduleFilterService not set on ScheduleFilterModalController');\n            return '';\n        }\n\n        const id = this.modalService.generateId();\n        this.currentModalId = id;\n        const modalElement = this.createModalElement(id);\n        \n        this.modalService.showModal(id, modalElement);\n        this.modalService.setupModalBehavior(modalElement, id, { closeOnBackdrop: true, closeOnEscape: true });\n\n        // Set up event listeners after modal is shown\n        setTimeout(() => {\n            this.setupFilterModalEventListeners();\n            this.initializeFormState();\n        }, 50);\n\n        return id;\n    }\n\n    hide(): void {\n        if (this.currentModalId) {\n            this.modalService.hideModal(this.currentModalId);\n            this.currentModalId = null;\n        }\n    }\n\n    private createModalElement(id: string): HTMLElement {\n        const backdrop = document.createElement('div');\n        backdrop.className = 'modal-backdrop schedule-filter-modal';\n        backdrop.id = id;\n\n        backdrop.innerHTML = `\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h3 class=\"modal-title\">Filter Selected Courses</h3>\n                        <button class=\"modal-close\" type=\"button\">×</button>\n                    </div>\n                    <div class=\"modal-body\">\n                        ${this.createFilterModalContent()}\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Add close button event listener\n        const closeBtn = backdrop.querySelector('.modal-close');\n        if (closeBtn) {\n            closeBtn.addEventListener('click', () => this.hide());\n        }\n\n        return backdrop;\n    }\n\n    private createFilterModalContent(): string {\n        const activeFilters = this.scheduleFilterService.getActiveFilters();\n\n        return `\n            <div class=\"filter-modal-content\">\n                <div class=\"active-filters-section\">\n                    <h3>Active Filters</h3>\n                    <div id=\"active-filters-list\" class=\"active-filters-list\">\n                        ${this.renderActiveFilters(activeFilters)}\n                    </div>\n                </div>\n\n                <div class=\"available-filters-section\">\n                    <h3>Period Search Filters</h3>\n                    \n                    <div class=\"filter-group\">\n                        <h4>Search Periods</h4>\n                        <div class=\"filter-option\">\n                            <input type=\"text\" id=\"modal-search-input\" placeholder=\"Search professors, buildings, courses...\" \n                                   value=\"${this.getSearchValue()}\" class=\"search-input\">\n                        </div>\n                    </div>\n\n                    <div class=\"filter-group\">\n                        <h4>Select Courses to Search</h4>\n                        <div class=\"filter-option\">\n                            ${this.renderCourseSelectionCheckboxes()}\n                        </div>\n                    </div>\n\n\n                    <div class=\"filter-group\">\n                        <h4>Exclude Days</h4>\n                        <div class=\"filter-option\">\n                            <div class=\"filter-help-text\">Hide sections with classes on selected days</div>\n                            ${this.renderDaysCheckboxes()}\n                        </div>\n                    </div>\n\n                    <div class=\"filter-group\">\n                        <h4>Professor</h4>\n                        <div class=\"filter-option\">\n                            ${this.renderProfessorCheckboxes()}\n                        </div>\n                    </div>\n\n                    <div class=\"filter-group\">\n                        <h4>Exclude Period Types</h4>\n                        <div class=\"filter-option\">\n                            <div class=\"filter-help-text\">Hide sections with selected period types</div>\n                            ${this.renderPeriodTypeCheckboxes()}\n                        </div>\n                    </div>\n\n                    <div class=\"filter-group\">\n                        <h4>Academic Terms</h4>\n                        <div class=\"filter-option\">\n                            <div class=\"filter-help-text\">Show sections from selected academic terms</div>\n                            ${this.renderTermCheckboxes()}\n                        </div>\n                    </div>\n\n                    <div class=\"filter-group\">\n                        <h4>Availability</h4>\n                        <div class=\"filter-option\">\n                            <label class=\"checkbox-label\">\n                                <input type=\"checkbox\" id=\"available-only-filter\">\n                                <span class=\"checkbox-text\">Available Seats Only</span>\n                            </label>\n                            <div class=\"min-seats-input\" style=\"margin-top: 0.5rem;\">\n                                <label>Minimum Available Seats:</label>\n                                <input type=\"number\" id=\"min-seats-filter\" min=\"0\" max=\"999\" placeholder=\"Any\">\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"filter-group\">\n                        <h4>Schedule Conflicts</h4>\n                        <div class=\"filter-option\">\n                            <label class=\"checkbox-label\">\n                                <input type=\"checkbox\" id=\"avoid-conflicts-filter\">\n                                <span class=\"checkbox-text\">Hide periods that conflict with selected sections</span>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"filter-modal-actions\">\n                    <button id=\"clear-all-filters\" class=\"btn btn-secondary\">Clear All</button>\n                    <button id=\"apply-filters\" class=\"btn btn-primary\">Apply Filters</button>\n                </div>\n            </div>\n        `;\n    }\n\n    private renderActiveFilters(activeFilters: any[]): string {\n        if (activeFilters.length === 0) {\n            return '<div class=\"no-filters\">No active filters</div>';\n        }\n\n        return activeFilters.map(filter => `\n            <div class=\"active-filter-tag\" data-filter-id=\"${filter.id}\">\n                <span class=\"filter-name\">${filter.name}:</span>\n                <span class=\"filter-value\">${filter.displayValue}</span>\n                <button class=\"remove-filter-btn\" data-filter-id=\"${filter.id}\">×</button>\n            </div>\n        `).join('');\n    }\n\n    private renderCourseSelectionCheckboxes(): string {\n        const courseOptions = this.scheduleFilterService!.getFilterOptions('courseSelection', this.selectedCourses) || [];\n        const activeCourses = this.getActiveCourseSelection();\n\n        if (courseOptions.length === 0) {\n            return '<div class=\"no-options\">No courses available</div>';\n        }\n\n        return courseOptions.map((option: any) => `\n            <label class=\"checkbox-label\">\n                <input type=\"checkbox\" name=\"courseSelection\" value=\"${option.value}\" \n                       ${activeCourses.includes(option.value) ? 'checked' : ''}>\n                <span class=\"checkbox-text\">${option.label}</span>\n            </label>\n        `).join('');\n    }\n\n\n    private renderDaysCheckboxes(): string {\n        const dayOptions = this.scheduleFilterService!.getFilterOptions('periodDays', this.selectedCourses) || [];\n        const activeDays = this.getActiveDays();\n\n        return dayOptions.map((option: any) => `\n            <label class=\"checkbox-label\">\n                <input type=\"checkbox\" name=\"periodDays\" value=\"${option.value}\" \n                       ${activeDays.includes(option.value) ? 'checked' : ''}>\n                <span class=\"checkbox-text\">${option.label}</span>\n            </label>\n        `).join('');\n    }\n\n    private renderProfessorCheckboxes(): string {\n        const professorOptions = this.scheduleFilterService!.getFilterOptions('periodProfessor', this.selectedCourses) || [];\n        const activeProfessors = this.getActiveProfessors();\n        \n        if (professorOptions.length === 0) {\n            return '<div class=\"no-options\">No professors available</div>';\n        }\n\n        const selectedProfessorsChips = activeProfessors.map(prof => `\n            <div class=\"filter-chip\" data-professor=\"${prof}\">\n                <span>${prof}</span>\n                <button type=\"button\" class=\"chip-remove\" data-professor=\"${prof}\">×</button>\n            </div>\n        `).join('');\n\n        return `\n            <div class=\"filter-search-container\">\n                <input type=\"text\" class=\"filter-search professor-search\" \n                       placeholder=\"Search professors...\" data-filter=\"professor\">\n                <div class=\"professor-dropdown\" id=\"professor-dropdown\" style=\"display: none;\"></div>\n            </div>\n            <div class=\"filter-selected-chips\">\n                ${selectedProfessorsChips}\n            </div>\n        `;\n    }\n\n    private renderPeriodTypeCheckboxes(): string {\n        const typeOptions = this.scheduleFilterService!.getFilterOptions('periodType', this.selectedCourses) || [];\n        const activeTypes = this.getActivePeriodTypes();\n\n        if (typeOptions.length === 0) {\n            return '<div class=\"no-options\">No period types available</div>';\n        }\n\n        return typeOptions.map((option: any) => `\n            <label class=\"checkbox-label\">\n                <input type=\"checkbox\" name=\"periodType\" value=\"${option.value}\" \n                       ${activeTypes.includes(option.value) ? 'checked' : ''}>\n                <span class=\"checkbox-text\">${option.label}</span>\n            </label>\n        `).join('');\n    }\n\n    private renderTermCheckboxes(): string {\n        const termOptions = this.scheduleFilterService!.getFilterOptions('periodTerm', this.selectedCourses) || [];\n        const activeTerms = this.getActiveTerms();\n\n        if (termOptions.length === 0) {\n            return '<div class=\"no-options\">No academic terms available</div>';\n        }\n\n        return termOptions.map((option: any) => `\n            <label class=\"checkbox-label\">\n                <input type=\"checkbox\" name=\"periodTerm\" value=\"${option.value}\" \n                       ${activeTerms.includes(option.value) ? 'checked' : ''}>\n                <span class=\"checkbox-text\">${option.label}</span>\n            </label>\n        `).join('');\n    }\n\n    private getSearchValue(): string {\n        const searchFilter = this.scheduleFilterService.getActiveFilters().find(f => f.id === 'searchText');\n        return searchFilter?.criteria?.query || '';\n    }\n\n    private getActiveCourseSelection(): string[] {\n        const filter = this.scheduleFilterService!.getActiveFilters().find(f => f.id === 'courseSelection');\n        return filter?.criteria?.selectedCourseIds || [];\n    }\n\n    private getActiveDays(): string[] {\n        const filter = this.scheduleFilterService!.getActiveFilters().find(f => f.id === 'periodDays');\n        return filter?.criteria?.days || [];\n    }\n\n    private getActiveProfessors(): string[] {\n        const filter = this.scheduleFilterService!.getActiveFilters().find(f => f.id === 'periodProfessor');\n        return filter?.criteria?.professors || [];\n    }\n\n    private getActivePeriodTypes(): string[] {\n        const filter = this.scheduleFilterService!.getActiveFilters().find(f => f.id === 'periodType');\n        return filter?.criteria?.types || [];\n    }\n\n    private getActiveTerms(): string[] {\n        const filter = this.scheduleFilterService!.getActiveFilters().find(f => f.id === 'periodTerm');\n        return filter?.criteria?.terms || [];\n    }\n\n    private getActiveTimeRange(): { startTime?: { hours: number; minutes: number }; endTime?: { hours: number; minutes: number } } {\n        const filter = this.scheduleFilterService!.getActiveFilters().find(f => f.id === 'periodTime');\n        return filter?.criteria || {};\n    }\n\n    private getActiveAvailability(): { availableOnly: boolean; minAvailable?: number } {\n        const filter = this.scheduleFilterService!.getActiveFilters().find(f => f.id === 'periodAvailability');\n        return filter?.criteria || { availableOnly: false };\n    }\n\n    private getActiveConflictDetection(): { avoidConflicts: boolean } {\n        const filter = this.scheduleFilterService!.getActiveFilters().find(f => f.id === 'periodConflict');\n        return filter?.criteria || { avoidConflicts: false };\n    }\n\n    private setupFilterModalEventListeners(): void {\n        if (!this.currentModalId) return;\n        \n        const modalElement = document.getElementById(this.currentModalId);\n        if (!modalElement) return;\n        \n        // Remove filter buttons\n        modalElement.querySelectorAll('.remove-filter-btn').forEach(button => {\n            button.addEventListener('click', (e) => {\n                const filterId = (e.target as HTMLElement).dataset.filterId;\n                if (filterId) {\n                    this.scheduleFilterService.removeFilter(filterId);\n                    this.refreshActiveFilters();\n                }\n            });\n        });\n\n        // Clear all filters\n        modalElement.querySelector('#clear-all-filters')?.addEventListener('click', () => {\n            this.scheduleFilterService!.clearFilters();\n            this.refreshActiveFilters();\n            this.resetFilterInputs();\n        });\n\n        // Apply filters button\n        modalElement.querySelector('#apply-filters')?.addEventListener('click', () => {\n            this.applyFilters();\n            this.hide();\n        });\n\n        // Real-time search input\n        const searchInput = modalElement.querySelector('#modal-search-input') as HTMLInputElement;\n        if (searchInput) {\n            searchInput.addEventListener('input', () => {\n                const query = searchInput.value.trim();\n                if (query) {\n                    this.scheduleFilterService!.addFilter('searchText', { query });\n                } else {\n                    this.scheduleFilterService!.removeFilter('searchText');\n                }\n                this.refreshActiveFilters();\n            });\n        }\n\n\n        // Course selection checkboxes\n        modalElement.querySelectorAll('input[name=\"courseSelection\"]').forEach(checkbox => {\n            checkbox.addEventListener('change', () => {\n                this.updateCourseSelectionFilter();\n                this.refreshActiveFilters();\n            });\n        });\n\n        // Days checkboxes\n        modalElement.querySelectorAll('input[name=\"periodDays\"]').forEach(checkbox => {\n            checkbox.addEventListener('change', () => {\n                this.updateDaysFilter();\n                this.refreshActiveFilters();\n            });\n        });\n\n\n        // Period type checkboxes\n        modalElement.querySelectorAll('input[name=\"periodType\"]').forEach(checkbox => {\n            checkbox.addEventListener('change', () => {\n                this.updatePeriodTypeFilter();\n                this.refreshActiveFilters();\n            });\n        });\n\n        // Term checkboxes\n        modalElement.querySelectorAll('input[name=\"periodTerm\"]').forEach(checkbox => {\n            checkbox.addEventListener('change', () => {\n                this.updateTermFilter();\n                this.refreshActiveFilters();\n            });\n        });\n\n        // Availability filters\n        const availableOnlyCheckbox = modalElement.querySelector('#available-only-filter') as HTMLInputElement;\n        const minSeatsInput = modalElement.querySelector('#min-seats-filter') as HTMLInputElement;\n\n        if (availableOnlyCheckbox) {\n            availableOnlyCheckbox.addEventListener('change', () => {\n                this.updateAvailabilityFilter();\n                this.refreshActiveFilters();\n            });\n        }\n\n        if (minSeatsInput) {\n            minSeatsInput.addEventListener('input', () => {\n                this.updateAvailabilityFilter();\n                this.refreshActiveFilters();\n            });\n        }\n\n        // Conflict detection filter\n        const avoidConflictsCheckbox = modalElement.querySelector('#avoid-conflicts-filter') as HTMLInputElement;\n        if (avoidConflictsCheckbox) {\n            avoidConflictsCheckbox.addEventListener('change', () => {\n                this.updateConflictFilter();\n                this.refreshActiveFilters();\n            });\n        }\n\n        // Setup professor filter\n        this.setupProfessorFilter(modalElement);\n    }\n\n\n    private updateCourseSelectionFilter(): void {\n        if (!this.currentModalId) return;\n        \n        const modalElement = document.getElementById(this.currentModalId);\n        if (modalElement) {\n            const checkedCourses = Array.from(modalElement.querySelectorAll('input[name=\"courseSelection\"]:checked'))\n                .map(cb => (cb as HTMLInputElement).value);\n\n            if (checkedCourses.length > 0) {\n                this.scheduleFilterService!.addFilter('courseSelection', { selectedCourseIds: checkedCourses });\n            } else {\n                this.scheduleFilterService!.removeFilter('courseSelection');\n            }\n        }\n    }\n\n    private updateDaysFilter(): void {\n        if (!this.currentModalId) return;\n        \n        const modalElement = document.getElementById(this.currentModalId);\n        if (modalElement) {\n            const checkedDays = Array.from(modalElement.querySelectorAll('input[name=\"periodDays\"]:checked'))\n                .map(cb => (cb as HTMLInputElement).value);\n\n            if (checkedDays.length > 0) {\n                this.scheduleFilterService!.addFilter('periodDays', { days: checkedDays });\n            } else {\n                this.scheduleFilterService!.removeFilter('periodDays');\n            }\n        }\n    }\n\n\n    private updatePeriodTypeFilter(): void {\n        if (!this.currentModalId) return;\n        \n        const modalElement = document.getElementById(this.currentModalId);\n        if (modalElement) {\n            const checkedTypes = Array.from(modalElement.querySelectorAll('input[name=\"periodType\"]:checked'))\n                .map(cb => (cb as HTMLInputElement).value);\n\n            if (checkedTypes.length > 0) {\n                this.scheduleFilterService!.addFilter('periodType', { types: checkedTypes });\n            } else {\n                this.scheduleFilterService!.removeFilter('periodType');\n            }\n        }\n    }\n\n    private updateTermFilter(): void {\n        if (!this.currentModalId) return;\n        \n        const modalElement = document.getElementById(this.currentModalId);\n        if (modalElement) {\n            const checkedTerms = Array.from(modalElement.querySelectorAll('input[name=\"periodTerm\"]:checked'))\n                .map(cb => (cb as HTMLInputElement).value);\n\n            if (checkedTerms.length > 0) {\n                this.scheduleFilterService!.addFilter('periodTerm', { terms: checkedTerms });\n            } else {\n                this.scheduleFilterService!.removeFilter('periodTerm');\n            }\n        }\n    }\n\n    private updateAvailabilityFilter(): void {\n        if (!this.currentModalId) return;\n        \n        const modalElement = document.getElementById(this.currentModalId);\n        if (modalElement) {\n            const availableOnly = (modalElement.querySelector('#available-only-filter') as HTMLInputElement)?.checked || false;\n            const minSeatsValue = (modalElement.querySelector('#min-seats-filter') as HTMLInputElement)?.value;\n            const minAvailable = minSeatsValue ? parseInt(minSeatsValue) : undefined;\n\n            if (availableOnly || (minAvailable && minAvailable > 0)) {\n                const criteria: any = { availableOnly };\n                if (minAvailable && minAvailable > 0) {\n                    criteria.minAvailable = minAvailable;\n                }\n                this.scheduleFilterService!.addFilter('periodAvailability', criteria);\n            } else {\n                this.scheduleFilterService!.removeFilter('periodAvailability');\n            }\n        }\n    }\n\n    private updateConflictFilter(): void {\n        if (!this.currentModalId) return;\n        \n        const modalElement = document.getElementById(this.currentModalId);\n        if (modalElement) {\n            const avoidConflicts = (modalElement.querySelector('#avoid-conflicts-filter') as HTMLInputElement)?.checked || false;\n\n            if (avoidConflicts) {\n                this.scheduleFilterService!.addFilter('periodConflict', { avoidConflicts: true });\n            } else {\n                this.scheduleFilterService!.removeFilter('periodConflict');\n            }\n        }\n    }\n\n    private initializeFormState(): void {\n        if (!this.currentModalId) return;\n        \n        const modalElement = document.getElementById(this.currentModalId);\n        if (!modalElement) return;\n\n        // Initialize availability filter states\n        const activeAvailability = this.getActiveAvailability();\n        const availableOnlyCheckbox = modalElement.querySelector('#available-only-filter') as HTMLInputElement;\n        const minSeatsInput = modalElement.querySelector('#min-seats-filter') as HTMLInputElement;\n        \n        if (availableOnlyCheckbox) {\n            availableOnlyCheckbox.checked = activeAvailability.availableOnly;\n        }\n        if (minSeatsInput && activeAvailability.minAvailable) {\n            minSeatsInput.value = activeAvailability.minAvailable.toString();\n        }\n\n        // Initialize conflict detection filter state\n        const activeConflictDetection = this.getActiveConflictDetection();\n        const avoidConflictsCheckbox = modalElement.querySelector('#avoid-conflicts-filter') as HTMLInputElement;\n        \n        if (avoidConflictsCheckbox) {\n            avoidConflictsCheckbox.checked = activeConflictDetection.avoidConflicts;\n        }\n    }\n\n    private applyFilters(): void {\n        // Save filter state\n        this.scheduleFilterService.saveFiltersToStorage();\n    }\n\n    private refreshActiveFilters(): void {\n        if (!this.currentModalId) return;\n        \n        const modalElement = document.getElementById(this.currentModalId);\n        if (modalElement) {\n            const activeFiltersList = modalElement.querySelector('#active-filters-list');\n            if (activeFiltersList) {\n                const activeFilters = this.scheduleFilterService!.getActiveFilters();\n                activeFiltersList.innerHTML = this.renderActiveFilters(activeFilters);\n                \n                // Re-bind remove button event listeners\n                activeFiltersList.querySelectorAll('.remove-filter-btn').forEach(button => {\n                    button.addEventListener('click', (e) => {\n                        const filterId = (e.target as HTMLElement).dataset.filterId;\n                        if (filterId) {\n                            this.scheduleFilterService!.removeFilter(filterId);\n                            this.refreshActiveFilters();\n                        }\n                    });\n                });\n            }\n        }\n    }\n\n    private resetFilterInputs(): void {\n        if (!this.currentModalId) return;\n        \n        const modalElement = document.getElementById(this.currentModalId);\n        if (modalElement) {\n            // Clear search input\n            const searchInput = modalElement.querySelector('#modal-search-input') as HTMLInputElement;\n            if (searchInput) {\n                searchInput.value = '';\n            }\n\n            // Reset selects\n            const sectionStatusSelect = modalElement.querySelector('#section-status-filter') as HTMLSelectElement;\n            if (sectionStatusSelect) {\n                sectionStatusSelect.value = '';\n            }\n\n            const requiredStatusSelect = modalElement.querySelector('#required-status-filter') as HTMLSelectElement;\n            if (requiredStatusSelect) {\n                requiredStatusSelect.value = '';\n            }\n\n            // Uncheck all checkboxes\n            modalElement.querySelectorAll('input[type=\"checkbox\"]').forEach(cb => {\n                (cb as HTMLInputElement).checked = false;\n            });\n        }\n    }\n\n    private setupProfessorFilter(modalElement: HTMLElement): void {\n        const searchInput = modalElement.querySelector('.professor-search') as HTMLInputElement;\n        const dropdown = modalElement.querySelector('#professor-dropdown') as HTMLElement;\n        \n        if (searchInput && this.scheduleFilterService) {\n            const professorOptions = this.scheduleFilterService.getFilterOptions('periodProfessor', this.selectedCourses) || [];\n            const professors = professorOptions.map((option: any) => option.value).filter((prof: string) => prof && prof.trim() !== 'TBA');\n            \n            searchInput.addEventListener('input', () => {\n                const query = searchInput.value.toLowerCase();\n                if (query.length > 0) {\n                    const matches = professors.filter((prof: string) => \n                        prof.toLowerCase().includes(query)\n                    ).slice(0, 10);\n                    \n                    dropdown.innerHTML = matches.map((prof: string) => \n                        `<div class=\"professor-option\" data-professor=\"${prof}\">${prof}</div>`\n                    ).join('');\n                    dropdown.style.display = matches.length > 0 ? 'block' : 'none';\n                } else {\n                    dropdown.style.display = 'none';\n                }\n            });\n\n            dropdown.addEventListener('click', (e) => {\n                const target = e.target as HTMLElement;\n                if (target.classList.contains('professor-option')) {\n                    const professor = target.dataset.professor;\n                    if (professor) {\n                        this.addProfessorToSelection(professor);\n                        searchInput.value = '';\n                        dropdown.style.display = 'none';\n                    }\n                }\n            });\n\n            document.addEventListener('click', (e) => {\n                if (!searchInput.contains(e.target as Node) && !dropdown.contains(e.target as Node)) {\n                    dropdown.style.display = 'none';\n                }\n            });\n        }\n\n        modalElement.querySelectorAll('.chip-remove').forEach(button => {\n            button.addEventListener('click', (e) => {\n                const professor = (e.target as HTMLElement).dataset.professor;\n                if (professor) {\n                    this.removeProfessorFromSelection(professor);\n                }\n            });\n        });\n    }\n\n    private addProfessorToSelection(professor: string): void {\n        const activeProfessors = this.getActiveProfessors();\n        if (!activeProfessors.includes(professor)) {\n            activeProfessors.push(professor);\n            this.scheduleFilterService!.addFilter('periodProfessor', { professors: activeProfessors });\n            this.refreshActiveFilters();\n            this.refreshProfessorChips();\n        }\n    }\n\n    private removeProfessorFromSelection(professor: string): void {\n        const activeProfessors = this.getActiveProfessors();\n        const updatedProfessors = activeProfessors.filter(prof => prof !== professor);\n        \n        if (updatedProfessors.length > 0) {\n            this.scheduleFilterService!.addFilter('periodProfessor', { professors: updatedProfessors });\n        } else {\n            this.scheduleFilterService!.removeFilter('periodProfessor');\n        }\n        this.refreshActiveFilters();\n        this.refreshProfessorChips();\n    }\n\n    private refreshProfessorChips(): void {\n        if (!this.currentModalId) return;\n        \n        const modalElement = document.getElementById(this.currentModalId);\n        if (modalElement) {\n            const chipsContainer = modalElement.querySelector('.filter-selected-chips');\n            if (chipsContainer) {\n                const activeProfessors = this.getActiveProfessors();\n                const selectedProfessorsChips = activeProfessors.map(prof => `\n                    <div class=\"filter-chip\" data-professor=\"${prof}\">\n                        <span>${prof}</span>\n                        <button type=\"button\" class=\"chip-remove\" data-professor=\"${prof}\">×</button>\n                    </div>\n                `).join('');\n                chipsContainer.innerHTML = selectedProfessorsChips;\n\n                // Re-bind chip remove event listeners\n                chipsContainer.querySelectorAll('.chip-remove').forEach(button => {\n                    button.addEventListener('click', (e) => {\n                        const professor = (e.target as HTMLElement).dataset.professor;\n                        if (professor) {\n                            this.removeProfessorFromSelection(professor);\n                        }\n                    });\n                });\n            }\n        }\n    }\n\n    syncSearchInputFromMain(query: string): void {\n        if (this.currentModalId) {\n            const modalElement = document.getElementById(this.currentModalId);\n            if (modalElement) {\n                const searchInput = modalElement.querySelector('#modal-search-input') as HTMLInputElement;\n                if (searchInput && searchInput.value !== query) {\n                    searchInput.value = query;\n                }\n            }\n        }\n    }\n}","import { ActiveFilter, FilterChangeEvent, FilterEventListener, FilterCriteria } from '../types/filters';\n\nexport class FilterState {\n    private activeFilters: Map<string, ActiveFilter> = new Map();\n    private listeners: FilterEventListener[] = [];\n    \n    addFilter(id: string, name: string, criteria: any, displayValue: string): void {\n        const filter: ActiveFilter = {\n            id,\n            name,\n            criteria,\n            displayValue\n        };\n        \n        this.activeFilters.set(id, filter);\n        this.notifyListeners({\n            type: 'add',\n            filterId: id,\n            criteria,\n            activeFilters: this.getActiveFilters()\n        });\n    }\n    \n    removeFilter(id: string): boolean {\n        const removed = this.activeFilters.delete(id);\n        if (removed) {\n            this.notifyListeners({\n                type: 'remove',\n                filterId: id,\n                activeFilters: this.getActiveFilters()\n            });\n        }\n        return removed;\n    }\n    \n    updateFilter(id: string, criteria: any, displayValue: string): boolean {\n        const existing = this.activeFilters.get(id);\n        if (existing) {\n            existing.criteria = criteria;\n            existing.displayValue = displayValue;\n            this.notifyListeners({\n                type: 'update',\n                filterId: id,\n                criteria,\n                activeFilters: this.getActiveFilters()\n            });\n            return true;\n        }\n        return false;\n    }\n    \n    clearFilters(): void {\n        this.activeFilters.clear();\n        this.notifyListeners({\n            type: 'clear',\n            activeFilters: []\n        });\n    }\n    \n    hasFilter(id: string): boolean {\n        return this.activeFilters.has(id);\n    }\n    \n    getFilter(id: string): ActiveFilter | undefined {\n        return this.activeFilters.get(id);\n    }\n    \n    getActiveFilters(): ActiveFilter[] {\n        return Array.from(this.activeFilters.values());\n    }\n    \n    getFilterCriteria(): FilterCriteria {\n        const criteria: FilterCriteria = {};\n        for (const [id, filter] of this.activeFilters) {\n            criteria[id] = filter.criteria;\n        }\n        return criteria;\n    }\n    \n    getActiveFilterIds(): string[] {\n        return Array.from(this.activeFilters.keys());\n    }\n    \n    getFilterCount(): number {\n        return this.activeFilters.size;\n    }\n    \n    isEmpty(): boolean {\n        return this.activeFilters.size === 0;\n    }\n    \n    addEventListener(listener: FilterEventListener): void {\n        this.listeners.push(listener);\n    }\n    \n    removeEventListener(listener: FilterEventListener): void {\n        const index = this.listeners.indexOf(listener);\n        if (index > -1) {\n            this.listeners.splice(index, 1);\n        }\n    }\n    \n    private notifyListeners(event: FilterChangeEvent): void {\n        this.listeners.forEach(listener => {\n            try {\n                listener(event);\n            } catch (error) {\n                console.error('Error in filter event listener:', error);\n            }\n        });\n    }\n    \n    // Serialization for persistence\n    serialize(): string {\n        const data = {\n            filters: Array.from(this.activeFilters.entries()).map(([id, filter]) => ({\n                id: filter.id,\n                name: filter.name,\n                criteria: filter.criteria,\n                displayValue: filter.displayValue\n            }))\n        };\n        return JSON.stringify(data);\n    }\n    \n    deserialize(data: string): boolean {\n        try {\n            const parsed = JSON.parse(data);\n            this.activeFilters.clear();\n            \n            if (parsed.filters && Array.isArray(parsed.filters)) {\n                parsed.filters.forEach((filter: ActiveFilter) => {\n                    this.activeFilters.set(filter.id, filter);\n                });\n            }\n            \n            this.notifyListeners({\n                type: 'clear',\n                activeFilters: this.getActiveFilters()\n            });\n            \n            return true;\n        } catch (error) {\n            console.error('Failed to deserialize filter state:', error);\n            return false;\n        }\n    }\n}","import { Course, Department } from '../types/types';\nimport { CourseFilter, FilterEventListener, ActiveFilter } from '../types/filters';\nimport { FilterState } from '../core/FilterState';\nimport { SearchService } from './searchService';\n\nexport class FilterService {\n    private filterState: FilterState;\n    private registeredFilters: Map<string, CourseFilter> = new Map();\n    private searchService: SearchService;\n    \n    constructor(searchService: SearchService) {\n        this.filterState = new FilterState();\n        this.searchService = searchService;\n    }\n    \n    // Filter Registration\n    registerFilter(filter: CourseFilter): void {\n        this.registeredFilters.set(filter.id, filter);\n    }\n    \n    unregisterFilter(filterId: string): boolean {\n        const removed = this.registeredFilters.delete(filterId);\n        if (removed) {\n            this.removeFilter(filterId);\n        }\n        return removed;\n    }\n    \n    getRegisteredFilter(filterId: string): CourseFilter | undefined {\n        return this.registeredFilters.get(filterId);\n    }\n    \n    getAvailableFilters(): CourseFilter[] {\n        return Array.from(this.registeredFilters.values());\n    }\n    \n    // Filter Management\n    addFilter(filterId: string, criteria: any): boolean {\n        const filter = this.registeredFilters.get(filterId);\n        if (!filter) {\n            console.error(`Filter '${filterId}' is not registered`);\n            return false;\n        }\n        \n        if (!filter.isValidCriteria(criteria)) {\n            console.error(`Invalid criteria for filter '${filterId}'`);\n            return false;\n        }\n        \n        const displayValue = filter.getDisplayValue(criteria);\n        this.filterState.addFilter(filterId, filter.name, criteria, displayValue);\n        return true;\n    }\n    \n    updateFilter(filterId: string, criteria: any): boolean {\n        const filter = this.registeredFilters.get(filterId);\n        if (!filter) {\n            return false;\n        }\n        \n        if (!filter.isValidCriteria(criteria)) {\n            return false;\n        }\n        \n        const displayValue = filter.getDisplayValue(criteria);\n        return this.filterState.updateFilter(filterId, criteria, displayValue);\n    }\n    \n    removeFilter(filterId: string): boolean {\n        return this.filterState.removeFilter(filterId);\n    }\n    \n    clearFilters(): void {\n        this.filterState.clearFilters();\n    }\n    \n    toggleFilter(filterId: string, criteria: any): boolean {\n        if (this.hasFilter(filterId)) {\n            return this.removeFilter(filterId);\n        } else {\n            return this.addFilter(filterId, criteria);\n        }\n    }\n    \n    // Filter State Queries\n    hasFilter(filterId: string): boolean {\n        return this.filterState.hasFilter(filterId);\n    }\n    \n    getActiveFilters(): ActiveFilter[] {\n        return this.filterState.getActiveFilters();\n    }\n    \n    getFilterCount(): number {\n        return this.filterState.getFilterCount();\n    }\n    \n    isEmpty(): boolean {\n        return this.filterState.isEmpty();\n    }\n    \n    // Course Filtering\n    filterCourses(courses: Course[]): Course[] {\n        if (this.isEmpty()) {\n            return courses;\n        }\n        \n        let filteredCourses = courses;\n        const activeFilters = this.getActiveFilters();\n        \n        // Apply search text filter first if it exists (for better performance)\n        const searchTextFilter = activeFilters.find(f => f.id === 'searchText');\n        if (searchTextFilter) {\n            const filter = this.registeredFilters.get(searchTextFilter.id);\n            if (filter) {\n                filteredCourses = filter.apply(filteredCourses, searchTextFilter.criteria);\n            }\n        }\n        \n        // Apply remaining filters sequentially\n        for (const activeFilter of activeFilters) {\n            if (activeFilter.id !== 'searchText') { // Skip searchText as it's already applied\n                const filter = this.registeredFilters.get(activeFilter.id);\n                if (filter) {\n                    filteredCourses = filter.apply(filteredCourses, activeFilter.criteria);\n                }\n            }\n        }\n        \n        return filteredCourses;\n    }\n    \n    // Combined Search and Filter\n    searchAndFilter(query: string, courses: Course[]): Course[] {\n        // If there's a query, add/update the search text filter\n        if (query.trim()) {\n            this.addFilter('searchText', { query: query.trim() });\n        } else {\n            this.removeFilter('searchText');\n        }\n        \n        // Apply all filters (including search text if present)\n        return this.filterCourses(courses);\n    }\n    \n    // Event Handling\n    addEventListener(listener: FilterEventListener): void {\n        this.filterState.addEventListener(listener);\n    }\n    \n    removeEventListener(listener: FilterEventListener): void {\n        this.filterState.removeEventListener(listener);\n    }\n    \n    // Persistence\n    saveFiltersToStorage(): void {\n        const serialized = this.filterState.serialize();\n        localStorage.setItem('wpi-course-filters', serialized);\n    }\n    \n    loadFiltersFromStorage(): boolean {\n        const stored = localStorage.getItem('wpi-course-filters');\n        if (stored) {\n            return this.filterState.deserialize(stored);\n        }\n        return false;\n    }\n    \n    // Helper Methods\n    getFilterSummary(): string {\n        const activeFilters = this.getActiveFilters();\n        if (activeFilters.length === 0) {\n            return 'No filters active';\n        }\n        \n        if (activeFilters.length === 1) {\n            return `1 filter: ${activeFilters[0].displayValue}`;\n        }\n        \n        return `${activeFilters.length} filters active`;\n    }\n    \n    // Convert internal filter state to SearchService format\n    private convertToSearchFilter(): any {\n        const criteria = this.filterState.getFilterCriteria();\n        \n        return {\n            departments: criteria.department?.departments || [],\n            timeSlots: criteria.timeSlot?.timeSlots || [],\n            professors: criteria.professor?.professors || [],\n            availabilityOnly: criteria.availability?.availableOnly || false,\n            creditRange: criteria.creditRange ? {\n                min: criteria.creditRange.min,\n                max: criteria.creditRange.max\n            } : undefined\n        };\n    }\n    \n    // Utility for getting filter options\n    getFilterOptions(filterId: string, allCourses: Course[]): any {\n        switch (filterId) {\n            case 'department':\n                return this.getDepartmentOptions(allCourses);\n            case 'professor':\n                return this.getProfessorOptions(allCourses);\n            case 'term':\n                return this.getTermOptions(allCourses);\n            case 'location':\n                return this.getLocationOptions(allCourses);\n            default:\n                return null;\n        }\n    }\n    \n    private getDepartmentOptions(courses: Course[]): string[] {\n        const departments = new Set<string>();\n        courses.forEach(course => departments.add(course.department.abbreviation));\n        return Array.from(departments).sort();\n    }\n    \n    private getProfessorOptions(courses: Course[]): string[] {\n        return this.searchService.getAvailableProfessors();\n    }\n    \n    \n    private getTermOptions(courses: Course[]): string[] {\n        const terms = new Set<string>();\n        courses.forEach(course => {\n            course.sections.forEach(section => {\n                if (section.computedTerm) {\n                    terms.add(section.computedTerm);\n                }\n            });\n        });\n        return Array.from(terms).sort();\n    }\n    \n    private getLocationOptions(courses: Course[]): { buildings: string[] } {\n        const buildings = this.searchService.getAvailableBuildings();\n        return { buildings };\n    }\n}","import { Course } from '../../types/types';\nimport { SelectedCourse } from '../../types/schedule';\nimport { CourseFilter, CourseSelectionFilterCriteria } from '../../types/filters';\n\nexport class CourseSelectionFilter implements CourseFilter {\n    readonly id = 'courseSelection';\n    readonly name = 'Course Selection';\n    readonly description = 'Select which courses to search periods within';\n    \n    apply(courses: Course[], criteria: CourseSelectionFilterCriteria): Course[] {\n        // This filter is handled specially by the ScheduleFilterService\n        return courses;\n    }\n    \n    applyToSelectedCourses(selectedCourses: SelectedCourse[], criteria: CourseSelectionFilterCriteria): SelectedCourse[] {\n        if (!criteria.selectedCourseIds || criteria.selectedCourseIds.length === 0) {\n            return selectedCourses;\n        }\n        \n        const selectedIds = new Set(criteria.selectedCourseIds);\n        return selectedCourses.filter(sc => selectedIds.has(sc.course.id));\n    }\n    \n    isValidCriteria(criteria: any): criteria is CourseSelectionFilterCriteria {\n        return criteria && \n               typeof criteria === 'object' && \n               'selectedCourseIds' in criteria && \n               Array.isArray(criteria.selectedCourseIds) &&\n               criteria.selectedCourseIds.every((id: any) => typeof id === 'string');\n    }\n    \n    getDisplayValue(criteria: CourseSelectionFilterCriteria): string {\n        const count = criteria.selectedCourseIds.length;\n        if (count === 0) return 'All Courses';\n        if (count === 1) return '1 Course Selected';\n        return `${count} Courses Selected`;\n    }\n}","import { Course, Period, DayOfWeek } from '../../types/types';\nimport { CourseFilter, PeriodDaysFilterCriteria } from '../../types/filters';\n\nexport class PeriodDaysFilter implements CourseFilter {\n    readonly id = 'periodDays';\n    readonly name = 'Period Days';\n    readonly description = 'Exclude sections with classes on selected days';\n    \n    apply(courses: Course[], criteria: PeriodDaysFilterCriteria): Course[] {\n        // This filter works on periods, so it's handled by the service layer\n        return courses;\n    }\n    \n    applyToPeriods(periods: Period[], criteria: PeriodDaysFilterCriteria): Period[] {\n        if (!criteria.days || criteria.days.length === 0) {\n            return periods;\n        }\n        \n        const excludedDays = new Set(criteria.days.map(day => day.toLowerCase()));\n        \n        return periods.filter(period => {\n            // Exclude periods that have any of the selected days\n            return !Array.from(period.days).some(day => \n                excludedDays.has(day.toLowerCase())\n            );\n        });\n    }\n    \n    isValidCriteria(criteria: any): criteria is PeriodDaysFilterCriteria {\n        return !!(criteria && \n                 typeof criteria === 'object' && \n                 'days' in criteria && \n                 Array.isArray(criteria.days) &&\n                 criteria.days.every((day: any) => typeof day === 'string'));\n    }\n    \n    getDisplayValue(criteria: PeriodDaysFilterCriteria): string {\n        if (!criteria.days || criteria.days.length === 0) {\n            return 'No exclusions';\n        }\n        \n        if (criteria.days.length === 1) {\n            return `Exclude: ${this.formatDayName(criteria.days[0])}`;\n        }\n        \n        const dayNames = criteria.days.map(day => this.formatDayName(day));\n        return `Exclude: ${dayNames.join(', ')}`;\n    }\n    \n    private formatDayName(day: string): string {\n        const dayMap: { [key: string]: string } = {\n            'mon': 'Monday',\n            'tue': 'Tuesday', \n            'wed': 'Wednesday',\n            'thu': 'Thursday',\n            'fri': 'Friday',\n            'sat': 'Saturday',\n            'sun': 'Sunday'\n        };\n        \n        return dayMap[day.toLowerCase()] || day;\n    }\n}","import { Course, Period } from '../../types/types';\nimport { CourseFilter, PeriodProfessorFilterCriteria } from '../../types/filters';\n\nexport class PeriodProfessorFilter implements CourseFilter {\n    readonly id = 'periodProfessor';\n    readonly name = 'Period Professor';\n    readonly description = 'Filter periods by professor';\n    \n    apply(courses: Course[], criteria: PeriodProfessorFilterCriteria): Course[] {\n        // This filter works on periods, so it's handled by the service layer\n        return courses;\n    }\n    \n    applyToPeriods(periods: Period[], criteria: PeriodProfessorFilterCriteria): Period[] {\n        if (!criteria.professors || criteria.professors.length === 0) {\n            return periods;\n        }\n        \n        const selectedProfessors = new Set(\n            criteria.professors.map(prof => prof.toLowerCase().trim())\n        );\n        \n        return periods.filter(period => {\n            if (!period.professor) return false;\n            \n            const professorName = period.professor.toLowerCase().trim();\n            return selectedProfessors.has(professorName) ||\n                   // Also check partial matches\n                   Array.from(selectedProfessors).some(selected => \n                       professorName.includes(selected) || selected.includes(professorName)\n                   );\n        });\n    }\n    \n    isValidCriteria(criteria: any): criteria is PeriodProfessorFilterCriteria {\n        return criteria && \n               typeof criteria === 'object' && \n               'professors' in criteria && \n               Array.isArray(criteria.professors) &&\n               criteria.professors.every((prof: any) => typeof prof === 'string');\n    }\n    \n    getDisplayValue(criteria: PeriodProfessorFilterCriteria): string {\n        if (!criteria.professors || criteria.professors.length === 0) {\n            return 'Any Professor';\n        }\n        \n        if (criteria.professors.length === 1) {\n            return criteria.professors[0];\n        }\n        \n        return `${criteria.professors.length} Professors`;\n    }\n}","import { Course, Period } from '../../types/types';\nimport { CourseFilter, PeriodTypeFilterCriteria } from '../../types/filters';\n\nexport class PeriodTypeFilter implements CourseFilter {\n    readonly id = 'periodType';\n    readonly name = 'Period Type';\n    readonly description = 'Exclude sections with selected period types';\n    \n    apply(courses: Course[], criteria: PeriodTypeFilterCriteria): Course[] {\n        // This filter works on periods, so it's handled by the service layer\n        return courses;\n    }\n    \n    applyToPeriods(periods: Period[], criteria: PeriodTypeFilterCriteria): Period[] {\n        if (!criteria.types || criteria.types.length === 0) {\n            return periods;\n        }\n        \n        const selectedTypes = new Set(\n            criteria.types.map(type => this.normalizeType(type))\n        );\n        \n        return periods.filter(period => {\n            const normalizedType = this.normalizeType(period.type);\n            return !selectedTypes.has(normalizedType);\n        });\n    }\n    \n    public normalizeType(type: string): string {\n        const lower = type.toLowerCase().trim();\n        \n        // Normalize common type variations\n        if (lower.includes('lec') || lower.includes('lecture')) return 'lecture';\n        if (lower.includes('lab')) return 'lab';\n        if (lower.includes('dis') || lower.includes('discussion')) return 'discussion';\n        if (lower.includes('rec') || lower.includes('recitation')) return 'recitation';\n        if (lower.includes('sem') || lower.includes('seminar')) return 'seminar';\n        if (lower.includes('studio')) return 'studio';\n        if (lower.includes('conference') || lower.includes('conf')) return 'conference';\n        \n        return lower;\n    }\n    \n    isValidCriteria(criteria: any): criteria is PeriodTypeFilterCriteria {\n        return !!(criteria && \n                 typeof criteria === 'object' && \n                 'types' in criteria && \n                 Array.isArray(criteria.types) &&\n                 criteria.types.every((type: any) => typeof type === 'string'));\n    }\n    \n    getDisplayValue(criteria: PeriodTypeFilterCriteria): string {\n        if (!criteria.types || criteria.types.length === 0) {\n            return 'No exclusions';\n        }\n        \n        if (criteria.types.length === 1) {\n            return `Exclude: ${this.formatTypeName(criteria.types[0])}`;\n        }\n        \n        const typeNames = criteria.types.map(type => this.formatTypeName(type));\n        return `Exclude: ${typeNames.join(', ')}`;\n    }\n    \n    private formatTypeName(type: string): string {\n        const normalized = this.normalizeType(type);\n        \n        const typeMap: { [key: string]: string } = {\n            'lecture': 'Lecture',\n            'lab': 'Lab',\n            'discussion': 'Discussion',\n            'recitation': 'Recitation',\n            'seminar': 'Seminar',\n            'studio': 'Studio',\n            'conference': 'Conference'\n        };\n        \n        return typeMap[normalized] || type.charAt(0).toUpperCase() + type.slice(1).toLowerCase();\n    }\n}","import { Course, Period } from '../../types/types';\nimport { CourseFilter, PeriodTermFilterCriteria } from '../../types/filters';\n\nexport class PeriodTermFilter implements CourseFilter {\n    readonly id = 'periodTerm';\n    readonly name = 'Term';\n    readonly description = 'Show sections from selected academic terms';\n    \n    apply(courses: Course[], criteria: PeriodTermFilterCriteria): Course[] {\n        return courses;\n    }\n    \n    applyToSections(sections: any[], criteria: PeriodTermFilterCriteria): any[] {\n        if (!criteria.terms || criteria.terms.length === 0) {\n            return sections;\n        }\n        \n        const selectedTerms = new Set(\n            criteria.terms.map(term => this.normalizeTerm(term))\n        );\n        \n        return sections.filter(item => {\n            const normalizedTerm = this.normalizeTerm(item.section.computedTerm);\n            return selectedTerms.has(normalizedTerm);\n        });\n    }\n    \n    public normalizeTerm(term: string): string {\n        if (!term) return '';\n        return term.toUpperCase().trim();\n    }\n    \n    isValidCriteria(criteria: any): criteria is PeriodTermFilterCriteria {\n        return !!(criteria && \n                 typeof criteria === 'object' && \n                 'terms' in criteria && \n                 Array.isArray(criteria.terms) &&\n                 criteria.terms.every((term: any) => typeof term === 'string'));\n    }\n    \n    getDisplayValue(criteria: PeriodTermFilterCriteria): string {\n        if (!criteria.terms || criteria.terms.length === 0) {\n            return 'All terms';\n        }\n        \n        if (criteria.terms.length === 1) {\n            return `Term: ${this.formatTermName(criteria.terms[0])}`;\n        }\n        \n        const termNames = criteria.terms.map(term => this.formatTermName(term));\n        return `Terms: ${termNames.join(', ')}`;\n    }\n    \n    private formatTermName(term: string): string {\n        const normalized = this.normalizeTerm(term);\n        \n        const termMap: { [key: string]: string } = {\n            'A': 'A Term',\n            'B': 'B Term', \n            'C': 'C Term',\n            'D': 'D Term'\n        };\n        \n        return termMap[normalized] || term.toUpperCase();\n    }\n}","import { Course, Period } from '../../types/types';\nimport { CourseFilter, PeriodAvailabilityFilterCriteria } from '../../types/filters';\n\nexport class PeriodAvailabilityFilter implements CourseFilter {\n    readonly id = 'periodAvailability';\n    readonly name = 'Period Availability';\n    readonly description = 'Filter periods by seat availability';\n    \n    apply(courses: Course[], criteria: PeriodAvailabilityFilterCriteria): Course[] {\n        // This filter works on periods, so it's handled by the service layer\n        return courses;\n    }\n    \n    applyToPeriods(periods: Period[], criteria: PeriodAvailabilityFilterCriteria): Period[] {\n        return periods.filter(period => {\n            // Filter by availability\n            if (criteria.availableOnly && period.seatsAvailable <= 0) {\n                return false;\n            }\n            \n            // Filter by minimum available seats\n            if (criteria.minAvailable && \n                typeof criteria.minAvailable === 'number' && \n                period.seatsAvailable < criteria.minAvailable) {\n                return false;\n            }\n            \n            return true;\n        });\n    }\n    \n    isValidCriteria(criteria: any): criteria is PeriodAvailabilityFilterCriteria {\n        if (!criteria || typeof criteria !== 'object') return false;\n        \n        if ('availableOnly' in criteria && typeof criteria.availableOnly !== 'boolean') {\n            return false;\n        }\n        \n        if (criteria.minAvailable && \n            (typeof criteria.minAvailable !== 'number' || criteria.minAvailable < 0)) {\n            return false;\n        }\n        \n        return true;\n    }\n    \n    getDisplayValue(criteria: PeriodAvailabilityFilterCriteria): string {\n        const parts: string[] = [];\n        \n        if (criteria.availableOnly) {\n            parts.push('Available Only');\n        }\n        \n        if (criteria.minAvailable && criteria.minAvailable > 0) {\n            parts.push(`Min ${criteria.minAvailable} Seats`);\n        }\n        \n        return parts.length > 0 ? parts.join(', ') : 'Any Availability';\n    }\n}","import { Period, Section, Course } from '../../types/types';\nimport { SelectedCourse } from '../../types/schedule';\nimport { ConflictDetector } from '../ConflictDetector';\nimport { CourseFilter, PeriodConflictFilterCriteria } from '../../types/filters';\n\nexport interface PeriodConflictCriteria extends PeriodConflictFilterCriteria {\n    selectedCourses?: SelectedCourse[];\n}\n\nexport class PeriodConflictFilter implements CourseFilter {\n    readonly id = 'periodConflict';\n    readonly name = 'Schedule Conflicts';\n    readonly description = 'Hide periods that conflict with selected sections';\n    private conflictDetector: ConflictDetector;\n\n    constructor(conflictDetector: ConflictDetector) {\n        this.conflictDetector = conflictDetector;\n    }\n\n    applyToPeriods(periods: Period[], criteria: PeriodConflictCriteria): Period[] {\n        if (!criteria.avoidConflicts || !criteria.selectedCourses) {\n            return periods;\n        }\n\n        // Get currently selected sections (where selectedSectionNumber is not null)\n        const selectedSections: Section[] = [];\n        for (const selectedCourse of criteria.selectedCourses) {\n            if (selectedCourse.selectedSectionNumber) {\n                const section = selectedCourse.course.sections.find(s => s.number === selectedCourse.selectedSectionNumber);\n                if (section) {\n                    selectedSections.push(section);\n                }\n            }\n        }\n\n        // If no sections are selected, show all periods (nothing to conflict with)\n        if (selectedSections.length === 0) {\n            return periods;\n        }\n\n        // Filter out periods that would cause conflicts\n        return periods.filter(period => {\n            // Create a temporary section containing just this period\n            const tempSection: Section = {\n                crn: Math.floor(Math.random() * 99999),\n                number: 'TEMP',\n                periods: [period],\n                seats: 999,\n                seatsAvailable: 999,\n                actualWaitlist: 0,\n                maxWaitlist: 0,\n                description: 'Temporary section for conflict detection',\n                term: 'TEMP',\n                computedTerm: 'TEMP'\n            };\n\n            // Test if this temporary section conflicts with any selected sections\n            const testSections = [...selectedSections, tempSection];\n            const conflicts = this.conflictDetector.detectConflicts(testSections);\n            \n            // Return true if no conflicts found (keep this period)\n            return conflicts.length === 0;\n        });\n    }\n\n    // Context-aware period filtering - only checks conflicts against OTHER courses\n    applyToPeriodsWithContext(\n        periodsWithContext: Array<{course: SelectedCourse, period: Period}>, \n        criteria: PeriodConflictCriteria\n    ): Array<{course: SelectedCourse, period: Period}> {\n        if (!criteria.avoidConflicts || !criteria.selectedCourses) {\n            return periodsWithContext;\n        }\n\n        // Build map of selected sections by course ID for quick lookup\n        const selectedSectionsByCourse = new Map<string, Section>();\n        for (const selectedCourse of criteria.selectedCourses) {\n            if (selectedCourse.selectedSectionNumber) {\n                const section = selectedCourse.course.sections.find(s => s.number === selectedCourse.selectedSectionNumber);\n                if (section) {\n                    selectedSectionsByCourse.set(selectedCourse.course.id, section);\n                }\n            }\n        }\n\n        // If no sections are selected, show all periods\n        if (selectedSectionsByCourse.size === 0) {\n            return periodsWithContext;\n        }\n\n        // Filter out periods that conflict with selected sections from OTHER courses only\n        return periodsWithContext.filter(item => {\n            const currentCourse = item.course.course;\n            const currentPeriod = item.period;\n\n            // Get selected sections from OTHER courses (exclude current course)\n            const otherCoursesSelectedSections: Section[] = [];\n            for (const [courseId, selectedSection] of selectedSectionsByCourse.entries()) {\n                if (courseId !== currentCourse.id) {\n                    otherCoursesSelectedSections.push(selectedSection);\n                }\n            }\n\n            // If no other courses have selected sections, no conflicts to check\n            if (otherCoursesSelectedSections.length === 0) {\n                return true;\n            }\n\n            // Create a temporary section containing just this period\n            const tempSection: Section = {\n                crn: Math.floor(Math.random() * 99999),\n                number: 'TEMP',\n                periods: [currentPeriod],\n                seats: 999,\n                seatsAvailable: 999,\n                actualWaitlist: 0,\n                maxWaitlist: 0,\n                description: 'Temporary section for conflict detection',\n                term: 'TEMP',\n                computedTerm: 'TEMP'\n            };\n\n            // Test if this temporary section conflicts with selected sections from OTHER courses only\n            const testSections = [...otherCoursesSelectedSections, tempSection];\n            const conflicts = this.conflictDetector.detectConflicts(testSections);\n            \n            // Return true if no conflicts found (keep this period)\n            return conflicts.length === 0;\n        });\n    }\n\n    // Section-based conflict detection - if ANY period in a section conflicts, filter out the ENTIRE section\n    applyToSectionsWithContext(\n        sectionsWithContext: Array<{course: SelectedCourse, section: Section}>, \n        criteria: PeriodConflictCriteria\n    ): Array<{course: SelectedCourse, section: Section}> {\n        if (!criteria.avoidConflicts || !criteria.selectedCourses) {\n            return sectionsWithContext;\n        }\n\n        // Build map of selected sections by course ID for quick lookup\n        const selectedSectionsByCourse = new Map<string, Section>();\n        for (const selectedCourse of criteria.selectedCourses) {\n            if (selectedCourse.selectedSectionNumber) {\n                const section = selectedCourse.course.sections.find(s => s.number === selectedCourse.selectedSectionNumber);\n                if (section) {\n                    selectedSectionsByCourse.set(selectedCourse.course.id, section);\n                }\n            }\n        }\n\n        // If no sections are selected, show all sections\n        if (selectedSectionsByCourse.size === 0) {\n            return sectionsWithContext;\n        }\n\n        // Filter out sections that have ANY period conflicting with selected sections from OTHER courses\n        return sectionsWithContext.filter(item => {\n            const currentCourse = item.course.course;\n            const currentSection = item.section;\n\n            // Get selected sections from OTHER courses (exclude current course)\n            const otherCoursesSelectedSections: Section[] = [];\n            for (const [courseId, selectedSection] of selectedSectionsByCourse.entries()) {\n                if (courseId !== currentCourse.id) {\n                    otherCoursesSelectedSections.push(selectedSection);\n                }\n            }\n\n            // If no other courses have selected sections, no conflicts to check\n            if (otherCoursesSelectedSections.length === 0) {\n                return true;\n            }\n\n            // Check if ANY period in the current section conflicts with selected sections from other courses\n            for (const currentPeriod of currentSection.periods) {\n                // Create a temporary section containing just this period\n                const tempSection: Section = {\n                    crn: Math.floor(Math.random() * 99999),\n                    number: 'TEMP',\n                    periods: [currentPeriod],\n                    seats: 999,\n                    seatsAvailable: 999,\n                    actualWaitlist: 0,\n                    maxWaitlist: 0,\n                    description: 'Temporary section for conflict detection',\n                    term: 'TEMP',\n                    computedTerm: 'TEMP'\n                };\n\n                // Test if this period conflicts with any selected sections from OTHER courses\n                const testSections = [...otherCoursesSelectedSections, tempSection];\n                const conflicts = this.conflictDetector.detectConflicts(testSections);\n                \n                // If ANY period in this section conflicts, filter out the ENTIRE section\n                if (conflicts.length > 0) {\n                    return false;\n                }\n            }\n\n            // No conflicts found for any period in this section\n            return true;\n        });\n    }\n\n    applyCriteriaToSelectedCourses(selectedCourses: SelectedCourse[], criteria: PeriodConflictCriteria): SelectedCourse[] {\n        // This filter works at the period level, not course level\n        return selectedCourses;\n    }\n\n    // CourseFilter interface implementation\n    apply(courses: Course[], criteria: PeriodConflictFilterCriteria): Course[] {\n        // This filter doesn't work at the course level, it works at the period level\n        // For course-level filtering, we just return all courses since conflict detection\n        // happens at the period level in the ScheduleFilterService\n        return courses;\n    }\n\n    isValidCriteria(criteria: any): boolean {\n        if (!criteria || typeof criteria !== 'object') {\n            return false;\n        }\n        return typeof criteria.avoidConflicts === 'boolean';\n    }\n\n    getDisplayValue(criteria: PeriodConflictFilterCriteria): string {\n        if (criteria.avoidConflicts) {\n            return 'Avoiding conflicts';\n        }\n        return 'Conflicts allowed';\n    }\n}","import { Course } from '../../types/types';\nimport { CourseFilter, SectionCodeFilterCriteria } from '../../types/filters';\n\nexport class SectionCodeFilter implements CourseFilter {\n    readonly id = 'sectionCode';\n    readonly name = 'Section Code';\n    readonly description = 'Filter by section codes (AL01, AX01, A01, etc.)';\n\n    apply(courses: Course[], criteria: SectionCodeFilterCriteria): Course[] {\n        // This filter works at the section level, not course level\n        // For course-level filtering, we just return all courses since section filtering\n        // happens at the section level in the ScheduleFilterService\n        return courses;\n    }\n\n    isValidCriteria(criteria: any): boolean {\n        if (!criteria || typeof criteria !== 'object') {\n            return false;\n        }\n        return Array.isArray(criteria.codes) && \n               criteria.codes.every((code: any) => typeof code === 'string');\n    }\n\n    getDisplayValue(criteria: SectionCodeFilterCriteria): string {\n        if (!criteria.codes || criteria.codes.length === 0) {\n            return 'No section codes';\n        }\n        \n        if (criteria.codes.length === 1) {\n            return `Section: ${criteria.codes[0]}`;\n        }\n        \n        return `Sections: ${criteria.codes.join(', ')}`;\n    }\n}","import { Course } from '../../types/types';\nimport { CourseFilter, DepartmentFilterCriteria } from '../../types/filters';\n\nexport class DepartmentFilter implements CourseFilter {\n    readonly id = 'department';\n    readonly name = 'Department';\n    readonly description = 'Filter courses by department(s)';\n    \n    apply(courses: Course[], criteria: DepartmentFilterCriteria): Course[] {\n        if (!criteria.departments || criteria.departments.length === 0) {\n            return courses;\n        }\n        \n        const departmentSet = new Set(\n            criteria.departments.map(dept => dept.toLowerCase())\n        );\n        \n        return courses.filter(course => \n            departmentSet.has(course.department.abbreviation.toLowerCase())\n        );\n    }\n    \n    isValidCriteria(criteria: any): criteria is DepartmentFilterCriteria {\n        return criteria && \n               Array.isArray(criteria.departments) &&\n               criteria.departments.every((dept: any) => typeof dept === 'string');\n    }\n    \n    getDisplayValue(criteria: DepartmentFilterCriteria): string {\n        if (criteria.departments.length === 1) {\n            return `Department: ${criteria.departments[0]}`;\n        }\n        return `Departments: ${criteria.departments.join(', ')}`;\n    }\n}","import { Course } from '../../types/types';\nimport { CourseFilter, AvailabilityFilterCriteria } from '../../types/filters';\n\nexport class AvailabilityFilter implements CourseFilter {\n    readonly id = 'availability';\n    readonly name = 'Availability';\n    readonly description = 'Show only courses with available seats';\n    \n    apply(courses: Course[], criteria: AvailabilityFilterCriteria): Course[] {\n        if (!criteria.availableOnly) {\n            return courses;\n        }\n        \n        return courses.filter(course => \n            course.sections.some(section => section.seatsAvailable > 0)\n        );\n    }\n    \n    isValidCriteria(criteria: any): criteria is AvailabilityFilterCriteria {\n        return criteria && typeof criteria.availableOnly === 'boolean';\n    }\n    \n    getDisplayValue(criteria: AvailabilityFilterCriteria): string {\n        return criteria.availableOnly ? 'Available seats only' : 'All courses';\n    }\n}","import { Course } from '../../types/types';\nimport { CourseFilter, CreditRangeFilterCriteria } from '../../types/filters';\n\nexport class CreditRangeFilter implements CourseFilter {\n    readonly id = 'creditRange';\n    readonly name = 'Credit Range';\n    readonly description = 'Filter courses by credit hours';\n    \n    apply(courses: Course[], criteria: CreditRangeFilterCriteria): Course[] {\n        return courses.filter(course => {\n            // Course matches if its credit range overlaps with the filter range\n            return course.maxCredits >= criteria.min && course.minCredits <= criteria.max;\n        });\n    }\n    \n    isValidCriteria(criteria: any): criteria is CreditRangeFilterCriteria {\n        return criteria && \n               typeof criteria.min === 'number' &&\n               typeof criteria.max === 'number' &&\n               criteria.min >= 0 &&\n               criteria.max >= criteria.min;\n    }\n    \n    getDisplayValue(criteria: CreditRangeFilterCriteria): string {\n        if (criteria.min === criteria.max) {\n            return `${criteria.min} credit${criteria.min === 1 ? '' : 's'}`;\n        }\n        return `${criteria.min}-${criteria.max} credits`;\n    }\n}","import { Course } from '../../types/types';\nimport { CourseFilter, ProfessorFilterCriteria } from '../../types/filters';\n\nexport class ProfessorFilter implements CourseFilter {\n    readonly id = 'professor';\n    readonly name = 'Professor';\n    readonly description = 'Filter courses by instructor';\n    \n    apply(courses: Course[], criteria: ProfessorFilterCriteria): Course[] {\n        if (!criteria.professors || criteria.professors.length === 0) {\n            return courses;\n        }\n        \n        const professorSet = new Set(\n            criteria.professors.map(prof => prof.toLowerCase())\n        );\n        \n        return courses.filter(course =>\n            course.sections.some(section =>\n                section.periods.some(period =>\n                    professorSet.has(period.professor.toLowerCase())\n                )\n            )\n        );\n    }\n    \n    isValidCriteria(criteria: any): criteria is ProfessorFilterCriteria {\n        return criteria && \n               Array.isArray(criteria.professors) &&\n               criteria.professors.every((prof: any) => typeof prof === 'string');\n    }\n    \n    getDisplayValue(criteria: ProfessorFilterCriteria): string {\n        if (criteria.professors.length === 1) {\n            return `Professor: ${criteria.professors[0]}`;\n        }\n        if (criteria.professors.length <= 3) {\n            return `Professors: ${criteria.professors.join(', ')}`;\n        }\n        return `Professors: ${criteria.professors.slice(0, 2).join(', ')}, +${criteria.professors.length - 2} more`;\n    }\n}","import { Course } from '../../types/types';\nimport { CourseFilter, TermFilterCriteria } from '../../types/filters';\n\nexport class TermFilter implements CourseFilter {\n    readonly id = 'term';\n    readonly name = 'Term';\n    readonly description = 'Filter courses by academic term';\n    \n    apply(courses: Course[], criteria: TermFilterCriteria): Course[] {\n        if (!criteria.terms || criteria.terms.length === 0) {\n            return courses;\n        }\n        \n        const termSet = new Set(\n            criteria.terms.map(term => term.toUpperCase())\n        );\n        \n        return courses.filter(course =>\n            course.sections.some(section => {\n                return termSet.has(section.computedTerm);\n            })\n        );\n    }\n    \n    isValidCriteria(criteria: any): criteria is TermFilterCriteria {\n        return criteria && \n               Array.isArray(criteria.terms) &&\n               criteria.terms.every((term: any) => typeof term === 'string');\n    }\n    \n    getDisplayValue(criteria: TermFilterCriteria): string {\n        if (criteria.terms.length === 1) {\n            return `Term: ${criteria.terms[0]}`;\n        }\n        return `Terms: ${criteria.terms.join(', ')}`;\n    }\n}","import { Course } from '../../types/types';\nimport { CourseFilter, SearchTextFilterCriteria } from '../../types/filters';\n\nexport class SearchTextFilter implements CourseFilter {\n    readonly id = 'searchText';\n    readonly name = 'Search Text';\n    readonly description = 'Filter courses by search text';\n    \n    apply(courses: Course[], criteria: SearchTextFilterCriteria): Course[] {\n        if (!criteria.query || !criteria.query.trim()) {\n            return courses;\n        }\n        \n        const query = criteria.query.trim().toLowerCase();\n        \n        return courses.filter(course => {\n            const courseText = [\n                course.id,\n                course.name,\n                course.description,\n                course.department.abbreviation,\n                course.department.name,\n                course.number\n            ].join(' ').toLowerCase();\n\n            return courseText.includes(query) || this.fuzzyMatch(courseText, query);\n        });\n    }\n    \n    private fuzzyMatch(text: string, query: string): boolean {\n        // Allow for partial matches for better search experience\n        if (query.length <= 3) {\n            return text.includes(query);\n        }\n        \n        const words = query.split(/\\s+/);\n        return words.every(word => {\n            if (word.length <= 2) return text.includes(word);\n            \n            // Allow partial matches for longer words\n            const partial = word.substring(0, Math.floor(word.length * 0.8));\n            return text.includes(partial);\n        });\n    }\n    \n    isValidCriteria(criteria: any): criteria is SearchTextFilterCriteria {\n        return criteria && \n               typeof criteria === 'object' && \n               'query' in criteria && \n               typeof criteria.query === 'string';\n    }\n    \n    getDisplayValue(criteria: SearchTextFilterCriteria): string {\n        return `\"${criteria.query.trim()}\"`;\n    }\n}","export { DepartmentFilter } from './DepartmentFilter';\nexport { AvailabilityFilter } from './AvailabilityFilter';\nexport { CreditRangeFilter } from './CreditRangeFilter';\nexport { ProfessorFilter } from './ProfessorFilter';\nexport { TermFilter } from './TermFilter';\nexport { SearchTextFilter } from './SearchTextFilter';\n\nimport { CourseFilter } from '../../types/filters';\nimport { DepartmentFilter } from './DepartmentFilter';\nimport { AvailabilityFilter } from './AvailabilityFilter';\nimport { CreditRangeFilter } from './CreditRangeFilter';\nimport { ProfessorFilter } from './ProfessorFilter';\nimport { TermFilter } from './TermFilter';\n\n// Default filter instances\nexport const createDefaultFilters = (): CourseFilter[] => [\n    new DepartmentFilter(),\n    new AvailabilityFilter(),\n    new CreditRangeFilter(),\n    new ProfessorFilter(),\n    new TermFilter(),\n];\n\n// Filter registry utility\nexport const createFilterRegistry = (): Map<string, CourseFilter> => {\n    const filters = createDefaultFilters();\n    const registry = new Map<string, CourseFilter>();\n    \n    filters.forEach(filter => {\n        registry.set(filter.id, filter);\n    });\n    \n    return registry;\n};","import { Course, Period, Section } from '../types/types';\nimport { SelectedCourse } from '../types/schedule';\nimport { FilterService } from './FilterService';\nimport { SearchService } from './searchService';\nimport { CourseSelectionFilter } from '../core/filters/CourseSelectionFilter';\nimport { PeriodDaysFilter } from '../core/filters/PeriodDaysFilter';\nimport { PeriodProfessorFilter } from '../core/filters/PeriodProfessorFilter';\nimport { PeriodTypeFilter } from '../core/filters/PeriodTypeFilter';\nimport { PeriodTermFilter } from '../core/filters/PeriodTermFilter';\nimport { PeriodAvailabilityFilter } from '../core/filters/PeriodAvailabilityFilter';\nimport { PeriodConflictFilter } from '../core/filters/PeriodConflictFilter';\nimport { SectionCodeFilter } from '../core/filters/SectionCodeFilter';\nimport { SearchTextFilter } from '../core/filters';\nimport { ConflictDetector } from '../core/ConflictDetector';\n\n/**\n * ═══════════════════════════════════════════════════════════════════════════════\n * ScheduleFilterService - Specialized Schedule-Level Filtering Engine\n * ═══════════════════════════════════════════════════════════════════════════════\n * \n * ARCHITECTURE ROLE:\n * - Schedule-specific filtering engine extending base FilterService capabilities\n * - Period and Section level constraint processing for schedule generation\n * - Time conflict detection and resolution during filtering\n * - Advanced filtering coordinator for complex schedule requirements\n * - Bridge between course-level filtering and schedule generation algorithms\n * \n * DEPENDENCIES:\n * - FilterService → Base filtering infrastructure and filter registration\n * - SearchService → Text-based search coordination across filtered data\n * - ConflictDetector → Time conflict detection between course sections\n * - Period/Section/Course types → Deep data structure access for filtering\n * - SelectedCourse types → User selection state integration\n * - 9 specialized filter classes → Period-level and section-level constraints\n * \n * USED BY:\n * - ScheduleController → Schedule generation UI with advanced filtering\n * - ScheduleFilterModalController → Modal UI for schedule-specific filter controls\n * - MainController → Service initialization and cross-service wiring\n * - Schedule generation algorithms → Pre-filtering courses for valid combinations\n * \n * FILTER SPECIALIZATION (Period-Level Filters):\n * Time-Based:\n * - PeriodDaysFilter → Filter by specific days of week\n * - PeriodAvailabilityFilter → Filter by seat availability\n * - PeriodConflictFilter → Detect and resolve time conflicts\n * \n * Content-Based:\n * - PeriodProfessorFilter → Filter by instructor preferences\n * - PeriodTypeFilter → Filter by class type (Lecture, Lab, Discussion)\n * - PeriodTermFilter → Filter by academic term\n * \n * Section-Based:\n * - SectionCodeFilter → Filter by section codes (A01, B02, etc.)\n * - CourseSelectionFilter → Filter based on user selections\n * - SearchTextFilter → Text search across course content\n * \n * DATA FLOW:\n * Schedule Filtering Process:\n * 1. Receive course list with user selections (SelectedCourse[])\n * 2. Apply course-level filters from base FilterService\n * 3. For each course, dive into Section[] and Period[] arrays\n * 4. Apply period-specific filters (time, professor, type, conflicts)\n * 5. Filter sections based on availability and user constraints\n * 6. Return filtered data suitable for schedule generation\n * 7. Coordinate with ConflictDetector for final validation\n * \n * Filter Coordination:\n * 1. Extends FilterService filter registration system\n * 2. Adds schedule-specific filter implementations\n * 3. Coordinates with SearchService for text-based filtering\n * 4. Integrates ConflictDetector for time-based validation\n * 5. Provides localStorage persistence for filter state\n * \n * KEY FEATURES:\n * - Deep data structure filtering (Course → Section → Period hierarchy)\n * - Time conflict detection integration during filtering process\n * - Schedule-specific constraint processing (availability, time slots, conflicts)\n * - Advanced filter combinations with persistent state\n * - Real-time filter application with performance optimization\n * - Integration with schedule generation algorithms\n * - Modal UI coordination for complex filter controls\n * \n * INTEGRATION POINTS:\n * - Extends FilterService base class functionality\n * - Coordinates with SearchService for unified search experience\n * - Integrates ConflictDetector for schedule validation\n * - Provides data to ScheduleController for UI rendering\n * - Coordinates with ScheduleFilterModalController for user interaction\n * - Supports schedule generation algorithms with pre-filtered data\n * \n * ARCHITECTURAL PATTERNS:\n * - Decorator: Extends FilterService with schedule-specific capabilities\n * - Strategy: Pluggable filter implementations for different constraints\n * - Composite: Combines multiple filter types for complex filtering\n * - Coordinator: Manages interaction between filtering and conflict detection\n * \n * RECENT CHANGES:\n * - Added missing Section type import during storage system cleanup\n * - Fixed TypeScript compilation errors during deprecated class removal\n * - Maintained functionality while removing CourseManager dependencies\n * \n * ═══════════════════════════════════════════════════════════════════════════════\n */\n\nexport class ScheduleFilterService {\n    private filterService: FilterService;\n    private courseSelectionFilter: CourseSelectionFilter;\n    private periodDaysFilter: PeriodDaysFilter;\n    private periodProfessorFilter: PeriodProfessorFilter;\n    private periodTypeFilter: PeriodTypeFilter;\n    private periodTermFilter: PeriodTermFilter;\n    private periodAvailabilityFilter: PeriodAvailabilityFilter;\n    private periodConflictFilter: PeriodConflictFilter | null = null;\n    private sectionCodeFilter: SectionCodeFilter;\n    \n    constructor(searchService: SearchService) {\n        this.filterService = new FilterService(searchService);\n        this.courseSelectionFilter = new CourseSelectionFilter();\n        this.periodDaysFilter = new PeriodDaysFilter();\n        this.periodProfessorFilter = new PeriodProfessorFilter();\n        this.periodTypeFilter = new PeriodTypeFilter();\n        this.periodTermFilter = new PeriodTermFilter();\n        this.periodAvailabilityFilter = new PeriodAvailabilityFilter();\n        this.sectionCodeFilter = new SectionCodeFilter();\n        \n        this.initializeFilters();\n    }\n    \n    setConflictDetector(conflictDetector: ConflictDetector): void {\n        this.periodConflictFilter = new PeriodConflictFilter(conflictDetector);\n        this.filterService.registerFilter(this.periodConflictFilter);\n    }\n    \n    private initializeFilters(): void {\n        // Register SearchTextFilter for course/professor search\n        const searchTextFilter = new SearchTextFilter();\n        this.filterService.registerFilter(searchTextFilter);\n        \n        // Register period-based filters\n        this.filterService.registerFilter(this.courseSelectionFilter);\n        this.filterService.registerFilter(this.periodDaysFilter);\n        this.filterService.registerFilter(this.periodProfessorFilter);\n        this.filterService.registerFilter(this.periodTypeFilter);\n        this.filterService.registerFilter(this.periodTermFilter);\n        this.filterService.registerFilter(this.periodAvailabilityFilter);\n        this.filterService.registerFilter(this.sectionCodeFilter);\n    }\n    \n    // Delegate basic filter management to FilterService\n    addFilter(filterId: string, criteria: any): boolean {\n        return this.filterService.addFilter(filterId, criteria);\n    }\n    \n    updateFilter(filterId: string, criteria: any): boolean {\n        return this.filterService.updateFilter(filterId, criteria);\n    }\n    \n    removeFilter(filterId: string): boolean {\n        return this.filterService.removeFilter(filterId);\n    }\n    \n    clearAllFilters(): void {\n        this.filterService.clearFilters();\n    }\n    \n    clearFilters(): void {\n        this.filterService.clearFilters();\n    }\n    \n    toggleFilter(filterId: string, criteria: any): boolean {\n        return this.filterService.toggleFilter(filterId, criteria);\n    }\n    \n    hasFilter(filterId: string): boolean {\n        return this.filterService.hasFilter(filterId);\n    }\n    \n    getActiveFilters() {\n        return this.filterService.getActiveFilters();\n    }\n    \n    getFilterCount(): number {\n        return this.filterService.getFilterCount();\n    }\n    \n    isEmpty(): boolean {\n        return this.filterService.isEmpty();\n    }\n    \n    addEventListener(listener: any): void {\n        this.filterService.addEventListener(listener);\n    }\n    \n    removeEventListener(listener: any): void {\n        this.filterService.removeEventListener(listener);\n    }\n    \n    saveFiltersToStorage(): void {\n        // Use a different key for schedule filters\n        const serialized = this.filterService['filterState'].serialize();\n        localStorage.setItem('wpi-schedule-filters', serialized);\n    }\n    \n    loadFiltersFromStorage(): boolean {\n        const stored = localStorage.getItem('wpi-schedule-filters');\n        if (stored) {\n            return this.filterService['filterState'].deserialize(stored);\n        }\n        return false;\n    }\n    \n    getFilterSummary(): string {\n        return this.filterService.getFilterSummary();\n    }\n    \n    // Main filtering method - now returns filtered periods with course context\n    filterPeriods(selectedCourses: SelectedCourse[]): Array<{course: SelectedCourse, period: Period}> {\n        if (this.isEmpty()) {\n            return this.getAllPeriodsWithContext(selectedCourses);\n        }\n        \n        const activeFilters = this.getActiveFilters();\n        \n        // First, filter courses by course selection filter\n        let coursesToSearch = selectedCourses;\n        const courseSelectionFilter = activeFilters.find(f => f.id === 'courseSelection');\n        if (courseSelectionFilter) {\n            coursesToSearch = this.courseSelectionFilter.applyToSelectedCourses(\n                selectedCourses, \n                courseSelectionFilter.criteria\n            );\n        }\n        \n        // Get all periods from selected courses  \n        let allPeriods = this.getAllPeriodsWithContext(coursesToSearch);\n        \n        // Apply search text filter to periods (search course name, professor, etc.)\n        const searchTextFilter = activeFilters.find(f => f.id === 'searchText');\n        if (searchTextFilter) {\n            allPeriods = this.applySearchTextToPeriods(allPeriods, searchTextFilter.criteria.query);\n        }\n        \n        // Apply period-based filters\n        for (const activeFilter of activeFilters) {\n            switch (activeFilter.id) {\n                case 'periodDays':\n                    // Exclude periods that are on excluded days\n                    const excludedDaysForPeriods = new Set(activeFilter.criteria.days.map((day: string) => day.toLowerCase()));\n                    allPeriods = allPeriods.filter(item => {\n                        // Exclude period if it's on any of the excluded days\n                        return !Array.from(item.period.days).some(day => \n                            excludedDaysForPeriods.has(day.toLowerCase())\n                        );\n                    });\n                    break;\n                case 'periodProfessor':\n                    allPeriods = allPeriods.filter(item => \n                        this.periodProfessorFilter.applyToPeriods([item.period], activeFilter.criteria).length > 0\n                    );\n                    break;\n                case 'periodType':\n                    // Exclude periods that are of excluded types\n                    const excludedTypesForPeriods = new Set(activeFilter.criteria.types.map((type: string) => this.periodTypeFilter.normalizeType(type)));\n                    allPeriods = allPeriods.filter(item => {\n                        // Exclude period if it's of any of the excluded types\n                        const normalizedPeriodType = this.periodTypeFilter.normalizeType(item.period.type);\n                        return !excludedTypesForPeriods.has(normalizedPeriodType);\n                    });\n                    break;\n                case 'periodAvailability':\n                    allPeriods = allPeriods.filter(item => \n                        this.periodAvailabilityFilter.applyToPeriods([item.period], activeFilter.criteria).length > 0\n                    );\n                    break;\n                case 'periodConflict':\n                    if (this.periodConflictFilter) {\n                        // Convert periods to sections for section-based conflict checking\n                        const sections = this.periodsToSections(allPeriods);\n                        const validSections = this.periodConflictFilter.applyToSectionsWithContext(sections, {\n                            ...activeFilter.criteria,\n                            selectedCourses: selectedCourses\n                        });\n                        // Convert back to periods for consistent return type\n                        allPeriods = this.sectionsToPeriodsWithContext(validSections);\n                    }\n                    break;\n            }\n        }\n        \n        return allPeriods;\n    }\n    \n    // Helper method to extract all sections with their course context\n    private getAllSectionsWithContext(selectedCourses: SelectedCourse[]): Array<{course: SelectedCourse, section: Section}> {\n        const sectionsWithContext: Array<{course: SelectedCourse, section: Section}> = [];\n        \n        for (const selectedCourse of selectedCourses) {\n            // Get all sections for this course\n            for (const section of selectedCourse.course.sections) {\n                sectionsWithContext.push({\n                    course: selectedCourse,\n                    section: section\n                });\n            }\n        }\n        \n        return sectionsWithContext;\n    }\n\n    // Convert sections back to periods with course context\n    private sectionsToPeriodsWithContext(sectionsWithContext: Array<{course: SelectedCourse, section: Section}>): Array<{course: SelectedCourse, period: Period}> {\n        const periodsWithContext: Array<{course: SelectedCourse, period: Period}> = [];\n        \n        for (const item of sectionsWithContext) {\n            for (const period of item.section.periods) {\n                periodsWithContext.push({\n                    course: item.course,\n                    period: period\n                });\n            }\n        }\n        \n        return periodsWithContext;\n    }\n\n    // Convert periods back to sections (used for conflict detection)\n    private periodsToSections(periodsWithContext: Array<{course: SelectedCourse, period: Period}>): Array<{course: SelectedCourse, section: Section}> {\n        const sectionMap = new Map<string, {course: SelectedCourse, section: Section}>();\n        \n        for (const item of periodsWithContext) {\n            // Find the section that contains this period\n            const section = item.course.course.sections.find(s => s.periods.includes(item.period));\n            if (section) {\n                const sectionKey = `${item.course.course.id}-${section.number}`;\n                if (!sectionMap.has(sectionKey)) {\n                    sectionMap.set(sectionKey, {\n                        course: item.course,\n                        section: section\n                    });\n                }\n            }\n        }\n        \n        return Array.from(sectionMap.values());\n    }\n\n    // Helper method to extract all periods with their course context\n    private getAllPeriodsWithContext(selectedCourses: SelectedCourse[]): Array<{course: SelectedCourse, period: Period}> {\n        const periodsWithContext: Array<{course: SelectedCourse, period: Period}> = [];\n        \n        for (const selectedCourse of selectedCourses) {\n            // Get all sections for this course (not just selected one for search purposes)\n            for (const section of selectedCourse.course.sections) {\n                for (const period of section.periods) {\n                    periodsWithContext.push({\n                        course: selectedCourse,\n                        period: period\n                    });\n                }\n            }\n        }\n        \n        return periodsWithContext;\n    }\n    \n    // Apply search text to periods\n    private applySearchTextToPeriods(periodsWithContext: Array<{course: SelectedCourse, period: Period}>, query: string): Array<{course: SelectedCourse, period: Period}> {\n        if (!query || !query.trim()) {\n            return periodsWithContext;\n        }\n        \n        const searchQuery = query.toLowerCase().trim();\n        \n        return periodsWithContext.filter(item => {\n            const course = item.course.course;\n            const period = item.period;\n            \n            // Search in course info\n            if (course.name.toLowerCase().includes(searchQuery) ||\n                course.number.toLowerCase().includes(searchQuery) ||\n                course.department.abbreviation.toLowerCase().includes(searchQuery)) {\n                return true;\n            }\n            \n            // Search in period info  \n            if (period.professor.toLowerCase().includes(searchQuery) ||\n                period.type.toLowerCase().includes(searchQuery) ||\n                period.building.toLowerCase().includes(searchQuery) ||\n                period.room.toLowerCase().includes(searchQuery) ||\n                period.location.toLowerCase().includes(searchQuery)) {\n                return true;\n            }\n            \n            return false;\n        });\n    }\n    \n    // Section-based filtering method - returns filtered sections with course context\n    filterSections(selectedCourses: SelectedCourse[]): Array<{course: SelectedCourse, section: Section}> {\n        if (this.isEmpty()) {\n            return this.getAllSectionsWithContext(selectedCourses);\n        }\n        \n        const activeFilters = this.getActiveFilters();\n        \n        // First, filter courses by course selection filter\n        let coursesToSearch = selectedCourses;\n        const courseSelectionFilter = activeFilters.find(f => f.id === 'courseSelection');\n        if (courseSelectionFilter) {\n            coursesToSearch = this.courseSelectionFilter.applyToSelectedCourses(\n                selectedCourses, \n                courseSelectionFilter.criteria\n            );\n        }\n        \n        // Get all sections from selected courses  \n        let allSections = this.getAllSectionsWithContext(coursesToSearch);\n        \n        // Apply section code filter\n        const sectionCodeFilter = activeFilters.find(f => f.id === 'sectionCode');\n        if (sectionCodeFilter) {\n            allSections = this.applySectionCodeFilter(allSections, sectionCodeFilter.criteria.codes);\n        }\n        \n        // Apply search text filter to sections (search course name, professor, etc.)\n        const searchTextFilter = activeFilters.find(f => f.id === 'searchText');\n        if (searchTextFilter) {\n            allSections = this.applySearchTextToSections(allSections, searchTextFilter.criteria.query);\n        }\n        \n        // Apply section-based filters\n        for (const activeFilter of activeFilters) {\n            switch (activeFilter.id) {\n                case 'periodDays':\n                    // Exclude entire sections if ANY period is on excluded days\n                    const excludedDaysForSections = new Set(activeFilter.criteria.days.map((day: string) => day.toLowerCase()));\n                    allSections = allSections.filter(item => {\n                        // Exclude section if ANY period is on any of the excluded days\n                        return !item.section.periods.some(period => \n                            Array.from(period.days).some(day => \n                                excludedDaysForSections.has(day.toLowerCase())\n                            )\n                        );\n                    });\n                    break;\n                case 'periodProfessor':\n                    allSections = allSections.filter(item => \n                        this.periodProfessorFilter.applyToPeriods(item.section.periods, activeFilter.criteria).length > 0\n                    );\n                    break;\n                case 'periodType':\n                    // Exclude entire sections if ANY period is of excluded types\n                    const excludedTypesForSections = new Set(activeFilter.criteria.types.map((type: string) => this.periodTypeFilter.normalizeType(type)));\n                    allSections = allSections.filter(item => {\n                        // Exclude section if ANY period is of any of the excluded types\n                        return !item.section.periods.some(period => {\n                            const normalizedPeriodType = this.periodTypeFilter.normalizeType(period.type);\n                            return excludedTypesForSections.has(normalizedPeriodType);\n                        });\n                    });\n                    break;\n                case 'periodTerm':\n                    // Include only sections from selected terms\n                    allSections = this.periodTermFilter.applyToSections(allSections, activeFilter.criteria);\n                    break;\n                case 'periodAvailability':\n                    allSections = allSections.filter(item => \n                        this.periodAvailabilityFilter.applyToPeriods(item.section.periods, activeFilter.criteria).length > 0\n                    );\n                    break;\n                case 'periodConflict':\n                    if (this.periodConflictFilter) {\n                        allSections = this.periodConflictFilter.applyToSectionsWithContext(allSections, {\n                            ...activeFilter.criteria,\n                            selectedCourses: selectedCourses\n                        });\n                    }\n                    break;\n            }\n        }\n        \n        return allSections;\n    }\n    \n    // Convert filtered periods back to unique selected courses for display\n    filterSelectedCourses(selectedCourses: SelectedCourse[]): SelectedCourse[] {\n        const filteredPeriods = this.filterPeriods(selectedCourses);\n        \n        // Get unique courses from filtered periods\n        const uniqueCourseIds = new Set(filteredPeriods.map(item => item.course.course.id));\n        return selectedCourses.filter(sc => uniqueCourseIds.has(sc.course.id));\n    }\n    \n    // Get available filter options specific to selected courses\n    getFilterOptions(filterId: string, selectedCourses: SelectedCourse[]): any {\n        switch (filterId) {\n            case 'courseSelection':\n                return selectedCourses.map(sc => ({\n                    value: sc.course.id,\n                    label: `${sc.course.department.abbreviation}${sc.course.number} - ${sc.course.name}`\n                }));\n            case 'periodDays':\n                return [\n                    { value: 'mon', label: 'Monday' },\n                    { value: 'tue', label: 'Tuesday' },\n                    { value: 'wed', label: 'Wednesday' },\n                    { value: 'thu', label: 'Thursday' },\n                    { value: 'fri', label: 'Friday' }\n                ];\n            case 'periodProfessor':\n                return this.getAvailableProfessors(selectedCourses);\n            case 'periodType':\n                return this.getAvailablePeriodTypes(selectedCourses);\n            case 'periodTerm':\n                return this.getAvailableTerms(selectedCourses);\n            case 'sectionCode':\n                return this.getAvailableSectionCodes(selectedCourses);\n            default:\n                return null;\n        }\n    }\n    \n    // Apply section code filtering\n    private applySectionCodeFilter(sectionsWithContext: Array<{course: SelectedCourse, section: Section}>, codes: string[]): Array<{course: SelectedCourse, section: Section}> {\n        if (!codes || codes.length === 0) {\n            return sectionsWithContext;\n        }\n        \n        const searchCodes = codes.map(code => code.toLowerCase().trim()).filter(code => code.length > 0);\n        if (searchCodes.length === 0) {\n            return sectionsWithContext;\n        }\n        \n        return sectionsWithContext.filter(item => {\n            const sectionNumber = item.section.number.toLowerCase();\n            \n            // Check if any of the search codes match this section\n            return searchCodes.some(searchCode => {\n                // Exact match\n                if (sectionNumber === searchCode) {\n                    return true;\n                }\n                \n                // Partial match - section contains the search code\n                if (sectionNumber.includes(searchCode)) {\n                    return true;\n                }\n                \n                // Pattern match for composite sections like \"A01/AL01\"\n                const sectionParts = sectionNumber.split('/');\n                return sectionParts.some(part => \n                    part.trim() === searchCode || part.trim().includes(searchCode)\n                );\n            });\n        });\n    }\n    \n    // Apply search text to sections\n    private applySearchTextToSections(sectionsWithContext: Array<{course: SelectedCourse, section: Section}>, query: string): Array<{course: SelectedCourse, section: Section}> {\n        if (!query || !query.trim()) {\n            return sectionsWithContext;\n        }\n        \n        const searchQuery = query.toLowerCase().trim();\n        \n        return sectionsWithContext.filter(item => {\n            const course = item.course.course;\n            const section = item.section;\n            \n            // Search in course info\n            if (course.name.toLowerCase().includes(searchQuery) ||\n                course.number.toLowerCase().includes(searchQuery) ||\n                course.department.abbreviation.toLowerCase().includes(searchQuery)) {\n                return true;\n            }\n            \n            // Search in section number\n            if (section.number.toLowerCase().includes(searchQuery)) {\n                return true;\n            }\n            \n            // Search in any period info within the section\n            return section.periods.some(period =>\n                period.professor.toLowerCase().includes(searchQuery) ||\n                period.type.toLowerCase().includes(searchQuery) ||\n                period.building.toLowerCase().includes(searchQuery) ||\n                period.room.toLowerCase().includes(searchQuery) ||\n                period.location.toLowerCase().includes(searchQuery)\n            );\n        });\n    }\n    \n    private getAvailableProfessors(selectedCourses: SelectedCourse[]): { value: string; label: string }[] {\n        const professors = new Set<string>();\n        \n        selectedCourses.forEach(sc => {\n            sc.course.sections.forEach(section => {\n                section.periods.forEach(period => {\n                    if (period.professor && period.professor.trim()) {\n                        professors.add(period.professor.trim());\n                    }\n                });\n            });\n        });\n        \n        const profArray = Array.from(professors).sort();\n        return profArray.map(prof => ({\n            value: prof,\n            label: prof\n        }));\n    }\n    \n    private getAvailablePeriodTypes(selectedCourses: SelectedCourse[]): { value: string; label: string }[] {\n        const types = new Set<string>();\n        \n        selectedCourses.forEach(sc => {\n            sc.course.sections.forEach(section => {\n                section.periods.forEach(period => {\n                    if (period.type && period.type.trim()) {\n                        types.add(period.type.trim());\n                    }\n                });\n            });\n        });\n        \n        const typeArray = Array.from(types).sort();\n        return typeArray.map(type => ({\n            value: type,\n            label: this.formatPeriodType(type)\n        }));\n    }\n    \n    \n    private formatPeriodType(type: string): string {\n        const lower = type.toLowerCase();\n        \n        if (lower.includes('lec') || lower.includes('lecture')) return 'Lecture';\n        if (lower.includes('lab')) return 'Lab';\n        if (lower.includes('dis') || lower.includes('discussion')) return 'Discussion';\n        if (lower.includes('rec') || lower.includes('recitation')) return 'Recitation';\n        if (lower.includes('sem') || lower.includes('seminar')) return 'Seminar';\n        if (lower.includes('studio')) return 'Studio';\n        if (lower.includes('conference') || lower.includes('conf')) return 'Conference';\n        \n        return type.charAt(0).toUpperCase() + type.slice(1).toLowerCase();\n    }\n    \n    private getAvailableSectionCodes(selectedCourses: SelectedCourse[]): { value: string; label: string }[] {\n        const sectionCodes = new Set<string>();\n        \n        selectedCourses.forEach(sc => {\n            sc.course.sections.forEach(section => {\n                if (section.number && section.number.trim()) {\n                    sectionCodes.add(section.number.trim());\n                }\n            });\n        });\n        \n        const codeArray = Array.from(sectionCodes).sort();\n        return codeArray.map(code => ({\n            value: code,\n            label: code\n        }));\n    }\n    \n    private getAvailableTerms(selectedCourses: SelectedCourse[]): { value: string; label: string }[] {\n        console.log(`[DEBUG] getAvailableTerms called with ${selectedCourses.length} courses`);\n        const terms = new Set<string>();\n        \n        selectedCourses.forEach(sc => {\n            console.log(`[DEBUG] Processing course ${sc.course.id} with ${sc.course.sections.length} sections`);\n            sc.course.sections.forEach(section => {\n                console.log(`[DEBUG] Section ${section.number}: computedTerm = \"${section.computedTerm}\"`);\n                \n                // Filter out invalid computed terms\n                if (section.computedTerm && \n                    section.computedTerm.trim() && \n                    section.computedTerm !== 'undefined' && \n                    typeof section.computedTerm === 'string') {\n                    terms.add(section.computedTerm.trim());\n                } else {\n                    console.warn(`[WARN] Invalid computedTerm for section ${section.number}: \"${section.computedTerm}\"`);\n                }\n            });\n        });\n        \n        const termArray = Array.from(terms).sort();\n        console.log(`[DEBUG] Available terms found:`, termArray);\n        return termArray.map(term => ({\n            value: term,\n            label: this.formatTermName(term)\n        }));\n    }\n    \n    private formatTermName(term: string): string {\n        const normalized = term.toUpperCase().trim();\n        \n        const termMap: { [key: string]: string } = {\n            'A': 'A Term',\n            'B': 'B Term',\n            'C': 'C Term', \n            'D': 'D Term'\n        };\n        \n        return termMap[normalized] || term.toUpperCase();\n    }\n}","import { Course, Department, Section, Period, DayOfWeek } from '../types/types'\nimport { SearchFilter, TimeSlot } from '../types/ui'\n\nexport class SearchService {\n    private courses: Course[] = [];\n    private departments: Department[] = [];\n    private searchIndex: Map<string, Set<Course>> = new Map();\n    private professorCache: string[] | null = null;\n    private buildingCache: string[] | null = null;\n    private timeSlotMappings: Map<string, Course[]> = new Map();\n\n    setCourseData(departments: Department[]): void {\n        this.departments = departments;\n        this.courses = [];\n        \n        for (const dept of departments) {\n            this.courses.push(...dept.courses);\n        }\n        \n        // Clear caches and rebuild indexes\n        this.clearCaches();\n        this.buildSearchIndex();\n        this.buildTimeSlotMappings();\n    }\n\n    searchCourses(query: string, filters?: SearchFilter): Course[] {\n        let results = this.courses;\n\n        // Apply text search\n        if (query.trim()) {\n            results = this.performTextSearch(results, query.trim());\n        }\n\n        // Apply filters\n        if (filters) {\n            results = this.applyFilters(results, filters);\n        }\n\n        return this.rankResults(results, query);\n    }\n\n    private performTextSearch(courses: Course[], query: string): Course[] {\n        const queryLower = query.toLowerCase();\n        \n        // Try to use search index first for better performance\n        const indexedResults = this.searchFromIndex(queryLower);\n        if (indexedResults.length > 0) {\n            // Filter indexed results against the current course set\n            return courses.filter(course => indexedResults.includes(course));\n        }\n        \n        // Fallback to original linear search with fuzzy matching\n        return courses.filter(course => {\n            const courseText = [\n                course.id,\n                course.name,\n                course.description,\n                course.department.abbreviation,\n                course.department.name,\n                course.number\n            ].join(' ').toLowerCase();\n\n            return this.fuzzyMatch(courseText, queryLower);\n        });\n    }\n\n    private applyFilters(courses: Course[], filters: SearchFilter): Course[] {\n        return courses.filter(course => {\n            // Department filter\n            if (filters.departments.length > 0 && \n                !filters.departments.includes(course.department.abbreviation.toLowerCase())) {\n                return false;\n            }\n\n            // Credit range filter\n            if (filters.creditRange) {\n                const { min, max } = filters.creditRange;\n                if (course.maxCredits < min || course.minCredits > max) {\n                    return false;\n                }\n            }\n\n            // Availability filter\n            if (filters.availabilityOnly) {\n                const hasAvailableSeats = course.sections.some(section => section.seatsAvailable > 0);\n                if (!hasAvailableSeats) {\n                    return false;\n                }\n            }\n\n            // Time slot filter\n            if (filters.timeSlots.length > 0) {\n                const matchesTimeSlot = course.sections.some(section =>\n                    section.periods.some(period =>\n                        filters.timeSlots.some(timeSlot =>\n                            this.periodsOverlap(period, timeSlot)\n                        )\n                    )\n                );\n                if (!matchesTimeSlot) {\n                    return false;\n                }\n            }\n\n            // Professor filter\n            if (filters.professors.length > 0) {\n                const hasProfessor = course.sections.some(section =>\n                    section.periods.some(period =>\n                        filters.professors.some(prof =>\n                            period.professor.toLowerCase().includes(prof.toLowerCase())\n                        )\n                    )\n                );\n                if (!hasProfessor) {\n                    return false;\n                }\n            }\n\n            return true;\n        });\n    }\n\n    private periodsOverlap(period: Period, timeSlot: TimeSlot): boolean {\n        const periodStart = period.startTime.hours * 60 + period.startTime.minutes;\n        const periodEnd = period.endTime.hours * 60 + period.endTime.minutes;\n        const slotStart = timeSlot.startTime.hours * 60 + timeSlot.startTime.minutes;\n        const slotEnd = timeSlot.endTime.hours * 60 + timeSlot.endTime.minutes;\n\n        // Check for time overlap\n        const timeOverlaps = periodStart < slotEnd && slotStart < periodEnd;\n        \n        // Check for day overlap\n        const dayOverlaps = timeSlot.days.some((day: string) => period.days.has(day as DayOfWeek));\n\n        return timeOverlaps && dayOverlaps;\n    }\n\n    private rankResults(courses: Course[], query: string): Course[] {\n        if (!query.trim()) return courses;\n\n        const queryLower = query.toLowerCase();\n        \n        return courses.sort((a, b) => {\n            const scoreA = this.calculateRelevanceScore(a, queryLower);\n            const scoreB = this.calculateRelevanceScore(b, queryLower);\n            return scoreB - scoreA;\n        });\n    }\n\n    private calculateRelevanceScore(course: Course, query: string): number {\n        let score = 0;\n\n        // Exact matches get highest score\n        if (course.id.toLowerCase() === query) score += 100;\n        if (course.name.toLowerCase() === query) score += 90;\n\n        // Prefix matches\n        if (course.id.toLowerCase().startsWith(query)) score += 80;\n        if (course.name.toLowerCase().startsWith(query)) score += 70;\n        if (course.department.abbreviation.toLowerCase().startsWith(query)) score += 60;\n\n        // Contains matches\n        if (course.id.toLowerCase().includes(query)) score += 40;\n        if (course.name.toLowerCase().includes(query)) score += 30;\n        if (course.description.toLowerCase().includes(query)) score += 10;\n\n        // Boost popular/available courses\n        const totalSeats = course.sections.reduce((sum, section) => sum + section.seats, 0);\n        const availableSeats = course.sections.reduce((sum, section) => sum + section.seatsAvailable, 0);\n        \n        if (availableSeats > 0) score += 5;\n        if (totalSeats > 100) score += 2; // Large courses might be more popular\n\n        return score;\n    }\n\n    getDepartments(): Department[] {\n        return this.departments;\n    }\n\n    getCoursesByDepartment(departmentAbbr: string): Course[] {\n        const dept = this.departments.find(d => \n            d.abbreviation.toLowerCase() === departmentAbbr.toLowerCase()\n        );\n        return dept ? dept.courses : [];\n    }\n\n    getAvailableProfessors(): string[] {\n        if (this.professorCache) {\n            return this.professorCache;\n        }\n        \n        const professors = new Set<string>();\n        \n        this.courses.forEach(course => {\n            course.sections.forEach(section => {\n                section.periods.forEach(period => {\n                    if (period.professor && period.professor !== 'TBA') {\n                        professors.add(period.professor);\n                    }\n                });\n            });\n        });\n\n        this.professorCache = Array.from(professors).sort();\n        return this.professorCache;\n    }\n\n    getAvailableBuildings(): string[] {\n        if (this.buildingCache) {\n            return this.buildingCache;\n        }\n        \n        const buildings = new Set<string>();\n        \n        this.courses.forEach(course => {\n            course.sections.forEach(section => {\n                section.periods.forEach(period => {\n                    if (period.building) {\n                        buildings.add(period.building);\n                    }\n                });\n            });\n        });\n\n        this.buildingCache = Array.from(buildings).sort();\n        return this.buildingCache;\n    }\n\n    private clearCaches(): void {\n        this.professorCache = null;\n        this.buildingCache = null;\n        this.searchIndex.clear();\n        this.timeSlotMappings.clear();\n    }\n\n    private buildSearchIndex(): void {\n        this.courses.forEach(course => {\n            const keywords = this.extractKeywords(course);\n            keywords.forEach(keyword => {\n                if (!this.searchIndex.has(keyword)) {\n                    this.searchIndex.set(keyword, new Set());\n                }\n                this.searchIndex.get(keyword)!.add(course);\n            });\n        });\n    }\n\n    private extractKeywords(course: Course): string[] {\n        const keywords = [\n            course.id.toLowerCase(),\n            course.name.toLowerCase(),\n            course.number.toLowerCase(),\n            course.department.abbreviation.toLowerCase(),\n            course.department.name.toLowerCase(),\n            ...course.description.toLowerCase().split(/\\s+/)\n        ];\n        \n        // Add partial keywords for better matching\n        keywords.forEach(keyword => {\n            if (keyword.length > 3) {\n                for (let i = 0; i < keyword.length - 2; i++) {\n                    keywords.push(keyword.substring(i, i + 3));\n                }\n            }\n        });\n        \n        return keywords.filter(k => k.length > 1);\n    }\n\n    private searchFromIndex(query: string): Course[] {\n        const results = new Set<Course>();\n        \n        // Direct keyword match\n        if (this.searchIndex.has(query)) {\n            this.searchIndex.get(query)!.forEach(course => results.add(course));\n        }\n        \n        // Partial matches\n        for (const [keyword, courses] of this.searchIndex.entries()) {\n            if (keyword.includes(query) || query.includes(keyword)) {\n                courses.forEach(course => results.add(course));\n            }\n        }\n        \n        return Array.from(results);\n    }\n\n    private fuzzyMatch(text: string, query: string): boolean {\n        // Simple fuzzy matching - exact match or contains\n        if (text.includes(query)) {\n            return true;\n        }\n        \n        // Allow for one character difference in short queries\n        if (query.length <= 3) {\n            return text.includes(query);\n        }\n        \n        // For longer queries, check if most characters match\n        const words = query.split(/\\s+/);\n        return words.every(word => {\n            if (word.length <= 2) return text.includes(word);\n            \n            // Allow partial matches for longer words\n            const partial = word.substring(0, Math.floor(word.length * 0.8));\n            return text.includes(partial);\n        });\n    }\n\n    private buildTimeSlotMappings(): void {\n        this.courses.forEach(course => {\n            course.sections.forEach(section => {\n                section.periods.forEach(period => {\n                    const timeKey = this.getTimeSlotKey(period);\n                    if (!this.timeSlotMappings.has(timeKey)) {\n                        this.timeSlotMappings.set(timeKey, []);\n                    }\n                    if (!this.timeSlotMappings.get(timeKey)!.includes(course)) {\n                        this.timeSlotMappings.get(timeKey)!.push(course);\n                    }\n                });\n            });\n        });\n    }\n\n    private getTimeSlotKey(period: Period): string {\n        const startMinutes = period.startTime.hours * 60 + period.startTime.minutes;\n        const endMinutes = period.endTime.hours * 60 + period.endTime.minutes;\n        const days = Array.from(period.days).sort().join('');\n        return `${days}-${startMinutes}-${endMinutes}`;\n    }\n\n    getCreditRanges(): Array<{ min: number; max: number; label: string }> {\n        return [\n            { min: 1, max: 1, label: '1 Credit' },\n            { min: 2, max: 2, label: '2 Credits' },\n            { min: 3, max: 3, label: '3 Credits' },\n            { min: 4, max: 4, label: '4 Credits' },\n            { min: 1, max: 2, label: '1-2 Credits' },\n            { min: 3, max: 4, label: '3-4 Credits' },\n            { min: 1, max: 4, label: 'Any Credits' }\n        ];\n    }\n}","export class UIStateManager {\n    public currentView: 'list' | 'grid' = 'list';\n    public currentPage: 'planner' | 'schedule' = 'planner';\n\n    constructor() {}\n\n    setView(view: 'list' | 'grid'): void {\n        this.currentView = view;\n        \n        // Update button states\n        const viewListBtn = document.getElementById('view-list');\n        const viewGridBtn = document.getElementById('view-grid');\n        \n        if (viewListBtn && viewGridBtn) {\n            if (view === 'list') {\n                viewListBtn.classList.add('btn-primary', 'active');\n                viewListBtn.classList.remove('btn-secondary');\n                viewGridBtn.classList.add('btn-secondary');\n                viewGridBtn.classList.remove('btn-primary', 'active');\n            } else {\n                viewGridBtn.classList.add('btn-primary', 'active');\n                viewGridBtn.classList.remove('btn-secondary');\n                viewListBtn.classList.add('btn-secondary');\n                viewListBtn.classList.remove('btn-primary', 'active');\n            }\n        }\n    }\n\n    togglePage(): void {\n        const nextPage = this.currentPage === 'planner' ? 'schedule' : 'planner';\n        this.switchToPage(nextPage);\n    }\n\n    switchToPage(page: 'planner' | 'schedule'): void {\n        if (page === this.currentPage) return;\n\n        this.currentPage = page;\n\n        // Update button text based on current page\n        const scheduleButton = document.getElementById('schedule-btn');\n        if (scheduleButton) {\n            if (page === 'schedule') {\n                scheduleButton.textContent = 'Back to Classes';\n                this.showSchedulePage();\n            } else {\n                scheduleButton.textContent = 'Schedule';\n                this.showPlannerPage();\n            }\n        }\n    }\n\n    private showPlannerPage(): void {\n        const plannerPage = document.getElementById('planner-page');\n        const schedulePage = document.getElementById('schedule-page');\n\n        if (plannerPage) plannerPage.style.display = 'grid';\n        if (schedulePage) schedulePage.style.display = 'none';\n    }\n\n    private showSchedulePage(): void {\n        const plannerPage = document.getElementById('planner-page');\n        const schedulePage = document.getElementById('schedule-page');\n\n        if (plannerPage) plannerPage.style.display = 'none';\n        if (schedulePage) schedulePage.style.display = 'flex';\n        \n    }\n\n\n    showLoadingState(): void {\n        const departmentList = document.getElementById('department-list');\n        if (departmentList) {\n            departmentList.innerHTML = '<div class=\"loading-message\">Loading departments...</div>';\n        }\n    }\n\n    showErrorMessage(message: string): void {\n        const departmentList = document.getElementById('department-list');\n        if (departmentList) {\n            departmentList.innerHTML = `<div class=\"error-message\">${message}</div>`;\n        }\n        \n        const courseContainer = document.getElementById('course-container');\n        if (courseContainer) {\n            courseContainer.innerHTML = `<div class=\"error-message\">${message}</div>`;\n        }\n    }\n\n    syncHeaderHeights(): void {\n        const sidebarHeader = document.querySelector('.sidebar-header') as HTMLElement;\n        const contentHeader = document.querySelector('.content-header') as HTMLElement;\n        const panelHeaders = document.querySelectorAll('.panel-header') as NodeListOf<HTMLElement>;\n\n        if (!sidebarHeader || !contentHeader || !panelHeaders.length) {\n            return;\n        }\n\n        // Reset heights to natural size to get accurate measurements\n        document.documentElement.style.setProperty('--synced-header-height', 'auto');\n        \n        // Allow layout to settle\n        requestAnimationFrame(() => {\n            // Get natural heights of all headers\n            const sidebarHeight = sidebarHeader.offsetHeight;\n            const contentHeight = contentHeader.offsetHeight;\n            const panelHeights = Array.from(panelHeaders).map(header => header.offsetHeight);\n            \n            // Find the maximum height\n            const maxHeight = Math.max(sidebarHeight, contentHeight, ...panelHeights);\n            \n            // Set the synced height to match the tallest header\n            document.documentElement.style.setProperty('--synced-header-height', `${maxHeight}px`);\n        });\n    }\n\n    setupHeaderResizeObserver(): void {\n        if (!window.ResizeObserver) return;\n\n        const headers = [\n            document.querySelector('.sidebar-header'),\n            document.querySelector('.content-header'),\n            ...document.querySelectorAll('.panel-header')\n        ].filter(Boolean) as HTMLElement[];\n\n        if (!headers.length) return;\n\n        const resizeObserver = new ResizeObserver(() => {\n            this.syncHeaderHeights();\n        });\n\n        headers.forEach(header => {\n            resizeObserver.observe(header);\n        });\n    }\n}","export class TimestampManager {\n    constructor() {}\n\n    updateClientTimestamp(): void {\n        const clientTimestampElement = document.getElementById('client-timestamp');\n        if (clientTimestampElement) {\n            const now = new Date();\n            const options: Intl.DateTimeFormatOptions = {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric',\n                hour: 'numeric',\n                minute: '2-digit',\n                second: '2-digit',\n                hour12: true\n            };\n            const formattedTime = now.toLocaleDateString('en-US', options).replace(',', ' at');\n            clientTimestampElement.textContent = `Client loaded: ${formattedTime}`;\n        }\n    }\n\n    async loadServerTimestamp(): Promise<void> {\n        const serverTimestampElement = document.getElementById('server-timestamp');\n        if (!serverTimestampElement) return;\n\n        try {\n            const response = await fetch('./last-updated.json', {\n                cache: 'no-cache'\n            });\n            \n            if (response.ok) {\n                const timestampData = await response.json();\n                const serverDate = new Date(timestampData.timestamp);\n                const options: Intl.DateTimeFormatOptions = {\n                    month: 'short',\n                    day: 'numeric',\n                    year: 'numeric',\n                    hour: 'numeric',\n                    minute: '2-digit',\n                    second: '2-digit',\n                    hour12: true\n                };\n                const formattedTime = serverDate.toLocaleDateString('en-US', options).replace(',', ' at');\n                serverTimestampElement.textContent = `Server updated: ${formattedTime}`;\n            } else {\n                throw new Error(`Failed to fetch server timestamp: ${response.status}`);\n            }\n        } catch (error) {\n            console.warn('Failed to load server timestamp:', error);\n            serverTimestampElement.textContent = 'Server timestamp unavailable';\n        }\n    }\n}","import { FilterService } from './FilterService';\nimport { DepartmentController } from '../ui/controllers/DepartmentController';\nimport { FilterModalController } from '../ui/controllers/FilterModalController';\n\nexport interface DepartmentSyncEventListener {\n    (activeDepartments: string[]): void;\n}\n\nexport class DepartmentSyncService {\n    private filterService: FilterService;\n    private departmentController: DepartmentController;\n    private filterModalController: FilterModalController | null = null;\n    private listeners: DepartmentSyncEventListener[] = [];\n    private isUpdating: boolean = false; // Prevent circular updates\n\n    constructor(filterService: FilterService, departmentController: DepartmentController) {\n        this.filterService = filterService;\n        this.departmentController = departmentController;\n        \n        // Listen to filter service changes to sync back to UI\n        this.filterService.addEventListener(() => {\n            if (!this.isUpdating) {\n                this.syncFilterToSidebar();\n                this.syncFilterToModal();\n                this.notifyListeners();\n            }\n        });\n    }\n\n    setFilterModalController(filterModalController: FilterModalController): void {\n        this.filterModalController = filterModalController;\n    }\n\n    // Add event listener for department sync changes\n    addEventListener(listener: DepartmentSyncEventListener): void {\n        this.listeners.push(listener);\n    }\n\n    removeEventListener(listener: DepartmentSyncEventListener): void {\n        const index = this.listeners.indexOf(listener);\n        if (index > -1) {\n            this.listeners.splice(index, 1);\n        }\n    }\n\n    private notifyListeners(): void {\n        const activeDepartments = this.getActiveDepartments();\n        this.listeners.forEach(listener => listener(activeDepartments));\n    }\n\n    // Sync sidebar selection to filter (called when user clicks sidebar)\n    syncSidebarToFilter(deptId: string, multiSelect: boolean = false): void {\n        this.isUpdating = true;\n        \n        try {\n            // Handle \"All Departments\" special case\n            if (deptId === 'all') {\n                this.clearAllDepartmentSelections();\n                return;\n            }\n\n            const currentDepartments = this.getActiveDepartments();\n            let newDepartments: string[];\n\n            if (multiSelect) {\n                // Add to existing selection\n                if (currentDepartments.includes(deptId)) {\n                    // Department already selected, remove it (toggle behavior)\n                    newDepartments = currentDepartments.filter(id => id !== deptId);\n                } else {\n                    // Add to selection\n                    newDepartments = [...currentDepartments, deptId];\n                }\n            } else {\n                // Single select mode - replace current selection\n                if (currentDepartments.length === 1 && currentDepartments[0] === deptId) {\n                    // Same department clicked, clear selection (show all departments)\n                    newDepartments = [];\n                } else {\n                    // Select only this department\n                    newDepartments = [deptId];\n                }\n            }\n\n            // Update filter service\n            if (newDepartments.length > 0) {\n                this.filterService.addFilter('department', { departments: newDepartments });\n            } else {\n                this.filterService.removeFilter('department');\n            }\n\n            // Clear the old department controller selection since we're using filters now\n            this.departmentController.clearDepartmentSelection();\n\n            // Update UI states\n            this.updateSidebarVisualState(newDepartments);\n            this.syncFilterToModal();\n            \n        } finally {\n            this.isUpdating = false;\n        }\n    }\n\n    // Sync filter modal selection to sidebar (called when filter modal changes)\n    syncFilterToSidebar(): void {\n        if (this.isUpdating) return;\n        \n        const activeDepartments = this.getActiveDepartments();\n        this.updateSidebarVisualState(activeDepartments);\n        \n        // Clear the department controller's internal selection since we use filters now\n        this.departmentController.clearDepartmentSelection();\n    }\n\n    // Sync current filter state to filter modal\n    syncFilterToModal(): void {\n        if (!this.filterModalController || this.isUpdating) return;\n\n        // The FilterModalController will read the current filter state when it opens\n        // We'll add a method to refresh it if it's currently open\n        this.filterModalController.refreshDepartmentSelection();\n        \n        // Also ensure sidebar visual state is correct\n        setTimeout(() => {\n            const activeDepartments = this.getActiveDepartments();\n            this.updateSidebarVisualState(activeDepartments);\n        }, 50); // Small delay to ensure DOM updates have processed\n    }\n\n    // Get currently active departments from filter service\n    getActiveDepartments(): string[] {\n        const activeFilters = this.filterService.getActiveFilters();\n        const deptFilter = activeFilters.find(f => f.id === 'department');\n        return deptFilter?.criteria?.departments || [];\n    }\n\n    // Clear all department selections\n    clearAllDepartmentSelections(): void {\n        this.isUpdating = true;\n        \n        try {\n            this.filterService.removeFilter('department');\n            this.departmentController.clearDepartmentSelection();\n            this.updateSidebarVisualState([]);\n            this.syncFilterToModal();\n        } finally {\n            this.isUpdating = false;\n        }\n    }\n\n    // Check if a specific department is currently selected\n    isDepartmentSelected(deptId: string): boolean {\n        const activeDepartments = this.getActiveDepartments();\n        return activeDepartments.includes(deptId);\n    }\n\n    // Get count of selected departments\n    getSelectedDepartmentCount(): number {\n        return this.getActiveDepartments().length;\n    }\n\n    // Toggle department selection (for multi-select scenarios)\n    toggleDepartment(deptId: string): void {\n        const activeDepartments = this.getActiveDepartments();\n        const isSelected = activeDepartments.includes(deptId);\n        \n        if (isSelected) {\n            this.syncSidebarToFilter(deptId, true); // Will remove it\n        } else {\n            this.syncSidebarToFilter(deptId, true); // Will add it\n        }\n    }\n\n    // Select only specific departments (replace current selection)\n    selectDepartments(deptIds: string[]): void {\n        this.isUpdating = true;\n        \n        try {\n            if (deptIds.length > 0) {\n                this.filterService.addFilter('department', { departments: deptIds });\n            } else {\n                this.filterService.removeFilter('department');\n            }\n            \n            this.updateSidebarVisualState(deptIds);\n            this.syncFilterToModal();\n        } finally {\n            this.isUpdating = false;\n        }\n    }\n\n    // Update visual state of sidebar departments\n    private updateSidebarVisualState(activeDepartments: string[]): void {\n        console.log('🔄 Updating sidebar visual state for departments:', activeDepartments);\n        \n        // Debug: Check how many department items exist in DOM\n        const allDeptItems = document.querySelectorAll('.department-item');\n        console.log(`📊 Found ${allDeptItems.length} department items in DOM`);\n        \n        // Clear all active states first\n        allDeptItems.forEach((item, index) => {\n            const deptId = item.getAttribute('data-dept-id');\n            if (item.classList.contains('active')) {\n                console.log(`🔄 Removing active class from ${deptId || `item-${index}`}`);\n            }\n            item.classList.remove('active');\n        });\n\n        // If no departments are selected, show \"All Departments\" as active\n        if (activeDepartments.length === 0) {\n            const allDepartmentsElement = document.querySelector(`[data-dept-id=\"all\"]`);\n            if (allDepartmentsElement) {\n                allDepartmentsElement.classList.add('active');\n                console.log('✅ Set \"All Departments\" as active (no specific departments selected)');\n            }\n            return;\n        }\n\n        // Set active states for selected departments with enhanced error checking\n        let successCount = 0;\n        activeDepartments.forEach(deptId => {\n            const normalizedId = this.normalizeDepartmentId(deptId);\n            const element = this.findDepartmentElement(normalizedId);\n            \n            if (element) {\n                element.classList.add('active');\n                successCount++;\n                console.log(`✅ Applied active styling to ${deptId} (normalized: ${normalizedId})`);\n            } else {\n                console.warn(`❌ Could not find department element for ${deptId} (normalized: ${normalizedId})`);\n                this.debugDepartmentElementSearch(deptId);\n            }\n        });\n\n        console.log(`📈 Successfully applied active styling to ${successCount}/${activeDepartments.length} departments`);\n\n        // Update any multi-selection indicators\n        this.updateMultiSelectionIndicators(activeDepartments);\n    }\n\n    // Normalize department ID for consistent matching\n    private normalizeDepartmentId(deptId: string): string {\n        return deptId.trim().toUpperCase();\n    }\n\n    // Enhanced department element finding with multiple strategies\n    private findDepartmentElement(deptId: string): Element | null {\n        const normalizedId = this.normalizeDepartmentId(deptId);\n        \n        // Strategy 1: Exact match with original case\n        let element = document.querySelector(`[data-dept-id=\"${deptId}\"]`);\n        if (element) return element;\n\n        // Strategy 2: Uppercase match\n        element = document.querySelector(`[data-dept-id=\"${normalizedId}\"]`);\n        if (element) return element;\n\n        // Strategy 3: Lowercase match\n        element = document.querySelector(`[data-dept-id=\"${normalizedId.toLowerCase()}\"]`);\n        if (element) return element;\n\n        // Strategy 4: Case-insensitive attribute search\n        const allDeptItems = document.querySelectorAll('.department-item');\n        for (const item of allDeptItems) {\n            const itemDeptId = item.getAttribute('data-dept-id');\n            if (itemDeptId && itemDeptId.toUpperCase() === normalizedId) {\n                return item;\n            }\n        }\n\n        return null;\n    }\n\n    // Debug method to help identify why a department element wasn't found\n    private debugDepartmentElementSearch(deptId: string): void {\n        const allDeptItems = document.querySelectorAll('.department-item');\n        console.log(`🔍 Debug search for ${deptId}:`);\n        console.log(`   Available department items:`);\n        \n        allDeptItems.forEach((item, index) => {\n            const itemDeptId = item.getAttribute('data-dept-id');\n            const textContent = item.textContent?.trim() || 'No text';\n            console.log(`   ${index + 1}. data-dept-id=\"${itemDeptId}\" text=\"${textContent}\"`);\n        });\n        \n        // Also check if the department list container exists\n        const departmentList = document.getElementById('department-list');\n        if (!departmentList) {\n            console.error('❌ Department list container (#department-list) not found in DOM!');\n        } else {\n            console.log('✅ Department list container exists');\n        }\n    }\n\n    // Update visual indicators for multi-selection\n    private updateMultiSelectionIndicators(activeDepartments: string[]): void {\n        const sidebarHeader = document.querySelector('.sidebar-header h2');\n        if (sidebarHeader) {\n            if (activeDepartments.length === 0) {\n                sidebarHeader.textContent = 'Departments';\n            } else if (activeDepartments.length === 1) {\n                sidebarHeader.textContent = `Departments (1 selected)`;\n            } else {\n                sidebarHeader.textContent = `Departments (${activeDepartments.length} selected)`;\n            }\n        }\n\n        // Add visual indicator for multi-select state\n        const departmentList = document.getElementById('department-list');\n        if (departmentList) {\n            if (activeDepartments.length > 1) {\n                departmentList.classList.add('multi-select-active');\n            } else {\n                departmentList.classList.remove('multi-select-active');\n            }\n        }\n    }\n\n    // Initialize synchronization (called after all components are set up)\n    initialize(): void {\n        // Sync any existing filter state to sidebar\n        this.syncFilterToSidebar();\n        \n        // Load any persisted department filters\n        const activeDepartments = this.getActiveDepartments();\n        if (activeDepartments.length > 0) {\n            this.updateSidebarVisualState(activeDepartments);\n        }\n    }\n\n    // Get human-readable description of current selection\n    getSelectionDescription(): string {\n        const activeDepartments = this.getActiveDepartments();\n        \n        if (activeDepartments.length === 0) {\n            return 'No departments selected';\n        } else if (activeDepartments.length === 1) {\n            return `${activeDepartments[0]} selected`;\n        } else if (activeDepartments.length <= 3) {\n            return `${activeDepartments.join(', ')} selected`;\n        } else {\n            return `${activeDepartments.length} departments selected`;\n        }\n    }\n\n    // Force a complete visual refresh of department states\n    forceVisualRefresh(): void {\n        console.log('🔄 Forcing complete visual refresh of department states');\n        const activeDepartments = this.getActiveDepartments();\n        this.updateSidebarVisualState(activeDepartments);\n    }\n\n    // Debug method to verify visual state matches filter state\n    debugVisualSync(): void {\n        const activeDepartments = this.getActiveDepartments();\n        const visuallyActiveDepartments: string[] = [];\n        \n        document.querySelectorAll('.department-item.active').forEach(item => {\n            const deptId = item.getAttribute('data-dept-id');\n            if (deptId) {\n                visuallyActiveDepartments.push(deptId);\n            }\n        });\n        \n        console.log('🔍 Department Sync Debug:');\n        console.log('  Filter state departments:', activeDepartments);\n        console.log('  Visually active departments:', visuallyActiveDepartments);\n        \n        const missingVisual = activeDepartments.filter(id => !visuallyActiveDepartments.includes(id));\n        const extraVisual = visuallyActiveDepartments.filter(id => !activeDepartments.includes(id));\n        \n        if (missingVisual.length > 0) {\n            console.warn('  ❌ Departments missing visual active state:', missingVisual);\n        }\n        if (extraVisual.length > 0) {\n            console.warn('  ❌ Departments with incorrect visual active state:', extraVisual);\n        }\n        if (missingVisual.length === 0 && extraVisual.length === 0) {\n            console.log('  ✅ Visual state perfectly synced with filter state');\n        }\n    }\n\n    // Temporary debug method to add visual debugging classes\n    enableDebugMode(): void {\n        console.log('🐛 Enabling department selection debug mode');\n        const activeDepartments = this.getActiveDepartments();\n        \n        // Add debug outline to all selected departments\n        activeDepartments.forEach(deptId => {\n            const element = this.findDepartmentElement(deptId);\n            if (element) {\n                element.classList.add('debug-selected');\n            }\n        });\n        \n        // Auto-disable after 10 seconds\n        setTimeout(() => {\n            this.disableDebugMode();\n        }, 10000);\n    }\n\n    // Remove debug visual classes\n    disableDebugMode(): void {\n        console.log('🐛 Disabling department selection debug mode');\n        document.querySelectorAll('.department-item.debug-selected').forEach(item => {\n            item.classList.remove('debug-selected');\n        });\n    }\n}","import { Schedule, SelectedCourse, SchedulePreferences } from '../types/schedule'\nimport { ProfileStateManager, StateChangeEvent, StateChangeListener } from '../core/ProfileStateManager'\nimport { DataValidator, ValidationResult } from '../core/DataValidator'\nimport { RetryManager } from '../core/RetryManager'\nimport { CourseSelectionService } from './CourseSelectionService'\n\nexport interface ScheduleOperationResult {\n    success: boolean;\n    schedule?: Schedule;\n    error?: string;\n    warnings?: string[];\n}\n\nexport interface ScheduleChangeEvent {\n    type: 'schedule_created' | 'schedule_deleted' | 'schedule_updated' | 'schedule_activated' | 'schedules_loaded';\n    schedule?: Schedule;\n    schedules?: Schedule[];\n    timestamp: number;\n}\n\nexport type ScheduleChangeListener = (event: ScheduleChangeEvent) => void;\n\nexport interface ScheduleCreationOptions {\n    includeCurrentCourses?: boolean;\n    copyFromSchedule?: string;\n    autoActivate?: boolean;\n    autoSave?: boolean;\n}\n\nexport interface ScheduleUpdateOptions {\n    updateName?: string;\n    updateCourses?: boolean;\n    autoSave?: boolean;\n}\n\nexport class ScheduleManagementService {\n    private profileStateManager: ProfileStateManager;\n    private courseSelectionService: CourseSelectionService;\n    private dataValidator: DataValidator;\n    private retryManager: RetryManager;\n    private scheduleListeners = new Set<ScheduleChangeListener>();\n    private isInitialized = false;\n    private initializationPromise: Promise<boolean> | null = null;\n\n    constructor(\n        profileStateManager?: ProfileStateManager,\n        courseSelectionService?: CourseSelectionService,\n        dataValidator?: DataValidator,\n        retryManager?: RetryManager\n    ) {\n        this.profileStateManager = profileStateManager || new ProfileStateManager();\n        this.courseSelectionService = courseSelectionService || new CourseSelectionService(this.profileStateManager);\n        this.dataValidator = dataValidator || new DataValidator();\n        this.retryManager = retryManager || RetryManager.createStorageRetryManager();\n\n        this.setupStateManagerListeners();\n    }\n\n    // Initialization\n    async initialize(): Promise<boolean> {\n        if (this.isInitialized) return true;\n        if (this.initializationPromise) return this.initializationPromise;\n\n        this.initializationPromise = this.performInitialization();\n        return await this.initializationPromise;\n    }\n\n    private async performInitialization(): Promise<boolean> {\n        try {\n            // Initialize dependencies first\n            await this.courseSelectionService.initialize();\n\n            // Ensure profile state is loaded\n            await this.profileStateManager.loadFromStorage();\n\n            // Initialize default schedule if needed\n            await this.initializeDefaultScheduleIfNeeded();\n\n            this.isInitialized = true;\n            return true;\n\n        } catch (error) {\n            console.error('ScheduleManagementService initialization failed:', error);\n            this.isInitialized = false;\n            return false;\n        } finally {\n            this.initializationPromise = null;\n        }\n    }\n\n    // Schedule creation\n    async createNewSchedule(name: string, options: ScheduleCreationOptions = {}): Promise<ScheduleOperationResult> {\n        await this.ensureInitialized();\n\n        const {\n            includeCurrentCourses = false,\n            copyFromSchedule,\n            autoActivate = false,\n            autoSave = true\n        } = options;\n\n        try {\n            // Validate schedule name\n            if (!name || name.trim().length === 0) {\n                return {\n                    success: false,\n                    error: 'Schedule name cannot be empty'\n                };\n            }\n\n            // Auto-generate unique name instead of rejecting duplicates\n            const existingSchedules = this.profileStateManager.getAllSchedules();\n            const uniqueName = this.generateUniqueScheduleName(name);\n            \n            // Use the unique name for creation\n            name = uniqueName;\n\n            let selectedCourses: SelectedCourse[] = [];\n\n            if (copyFromSchedule) {\n                // Copy from existing schedule\n                const sourceSchedule = existingSchedules.find(s => s.id === copyFromSchedule);\n                if (!sourceSchedule) {\n                    return {\n                        success: false,\n                        error: `Source schedule with ID \"${copyFromSchedule}\" not found`\n                    };\n                }\n                selectedCourses = [...sourceSchedule.selectedCourses];\n            } else if (includeCurrentCourses) {\n                // Include current course selections\n                selectedCourses = this.profileStateManager.getSelectedCourses();\n            }\n\n            // Create the schedule with retry using the unique name\n            const result = await this.retryManager.executeWithRetry(\n                () => {\n                    return this.profileStateManager.createSchedule(name, 'api');\n                },\n                {\n                    operationName: `create schedule \"${name}\"`,\n                    onRetry: (attempt, error) => {\n                        console.warn(`Schedule creation retry ${attempt}:`, error.message);\n                    }\n                }\n            );\n\n            if (!result.success || !result.result) {\n                return {\n                    success: false,\n                    error: `Failed to create schedule: ${result.error?.message || 'Unknown error'}`\n                };\n            }\n\n            const schedule = result.result;\n\n            // Update with selected courses if needed\n            if (selectedCourses.length > 0) {\n                const updateResult = await this.updateScheduleCourses(schedule.id, selectedCourses);\n                if (!updateResult.success) {\n                    return {\n                        success: false,\n                        error: `Schedule created but failed to add courses: ${updateResult.error}`\n                    };\n                }\n            }\n\n            // Activate if requested\n            if (autoActivate) {\n                const activateResult = await this.setActiveSchedule(schedule.id);\n                if (!activateResult.success) {\n                    console.warn('Schedule created but failed to activate:', activateResult.error);\n                }\n            }\n\n            // Auto-save if requested\n            if (autoSave) {\n                const saveResult = await this.profileStateManager.save();\n                if (!saveResult.success) {\n                    console.warn('Failed to auto-save after schedule creation:', saveResult.error);\n                }\n            }\n\n            // Notify listeners\n            this.notifyScheduleListeners({\n                type: 'schedule_created',\n                schedule,\n                timestamp: Date.now()\n            });\n\n            return {\n                success: true,\n                schedule\n            };\n\n        } catch (error) {\n            console.error('Error creating schedule:', error);\n            return {\n                success: false,\n                error: `Error creating schedule: ${error}`\n            };\n        }\n    }\n\n    async createScheduleFromCurrent(name: string): Promise<ScheduleOperationResult> {\n        return this.createNewSchedule(name, {\n            includeCurrentCourses: true,\n            autoActivate: false,\n            autoSave: true\n        });\n    }\n\n    async saveCurrentAsSchedule(name: string): Promise<ScheduleOperationResult> {\n        return this.createScheduleFromCurrent(name);\n    }\n\n    // Schedule loading and activation\n    async setActiveSchedule(scheduleId: string): Promise<ScheduleOperationResult> {\n        await this.ensureInitialized();\n\n        try {\n            const schedules = this.profileStateManager.getAllSchedules();\n            const schedule = schedules.find(s => s.id === scheduleId);\n\n            if (!schedule) {\n                return {\n                    success: false,\n                    error: `Schedule with ID \"${scheduleId}\" not found`\n                };\n            }\n\n            // Validate schedule before activation\n            const validation = this.dataValidator.validateSchedule(schedule);\n            if (!validation.valid) {\n                return {\n                    success: false,\n                    error: `Schedule validation failed: ${validation.errors.map(e => e.message).join(', ')}`,\n                    warnings: validation.warnings.map(w => w.message)\n                };\n            }\n\n            // Activate with retry\n            const result = await this.retryManager.executeWithRetry(\n                () => {\n                    return this.profileStateManager.setActiveSchedule(scheduleId, 'api');\n                },\n                {\n                    operationName: `activate schedule \"${schedule.name}\"`,\n                }\n            );\n\n            if (!result.success) {\n                return {\n                    success: false,\n                    error: `Failed to activate schedule: ${result.error?.message || 'Unknown error'}`\n                };\n            }\n\n            // Notify listeners\n            this.notifyScheduleListeners({\n                type: 'schedule_activated',\n                schedule,\n                timestamp: Date.now()\n            });\n\n            return {\n                success: true,\n                schedule\n            };\n\n        } catch (error) {\n            console.error('Error setting active schedule:', error);\n            return {\n                success: false,\n                error: `Error setting active schedule: ${error}`\n            };\n        }\n    }\n\n    // Schedule updates\n    async updateSchedule(scheduleId: string, updates: Partial<Schedule>, options: ScheduleUpdateOptions = {}): Promise<ScheduleOperationResult> {\n        await this.ensureInitialized();\n        const { autoSave = true } = options;\n\n        try {\n            const schedules = this.profileStateManager.getAllSchedules();\n            const existingSchedule = schedules.find(s => s.id === scheduleId);\n\n            if (!existingSchedule) {\n                return {\n                    success: false,\n                    error: `Schedule with ID \"${scheduleId}\" not found`\n                };\n            }\n\n            // Validate updates\n            const updatedSchedule = { ...existingSchedule, ...updates };\n            const validation = this.dataValidator.validateSchedule(updatedSchedule);\n            if (!validation.valid) {\n                return {\n                    success: false,\n                    error: `Schedule update validation failed: ${validation.errors.map(e => e.message).join(', ')}`,\n                    warnings: validation.warnings.map(w => w.message)\n                };\n            }\n\n            // Update with retry\n            const result = await this.retryManager.executeWithRetry(\n                () => {\n                    return this.profileStateManager.updateSchedule(scheduleId, updates, 'api');\n                },\n                {\n                    operationName: `update schedule \"${existingSchedule.name}\"`,\n                }\n            );\n\n            if (!result.success) {\n                return {\n                    success: false,\n                    error: `Failed to update schedule: ${result.error?.message || 'Unknown error'}`\n                };\n            }\n\n            // Auto-save if requested\n            if (autoSave) {\n                const saveResult = await this.profileStateManager.save();\n                if (!saveResult.success) {\n                    console.warn('Failed to auto-save after schedule update:', saveResult.error);\n                }\n            }\n\n            // Get updated schedule\n            const finalSchedule = this.profileStateManager.getAllSchedules().find(s => s.id === scheduleId);\n\n            // Notify listeners\n            this.notifyScheduleListeners({\n                type: 'schedule_updated',\n                schedule: finalSchedule,\n                timestamp: Date.now()\n            });\n\n            return {\n                success: true,\n                schedule: finalSchedule\n            };\n\n        } catch (error) {\n            console.error('Error updating schedule:', error);\n            return {\n                success: false,\n                error: `Error updating schedule: ${error}`\n            };\n        }\n    }\n\n    async renameSchedule(scheduleId: string, newName: string): Promise<ScheduleOperationResult> {\n        if (!newName || newName.trim().length === 0) {\n            return {\n                success: false,\n                error: 'Schedule name cannot be empty'\n            };\n        }\n\n        // Check for duplicate names\n        const existingSchedules = this.profileStateManager.getAllSchedules();\n        if (existingSchedules.some(s => s.name === newName && s.id !== scheduleId)) {\n            return {\n                success: false,\n                error: `A schedule with the name \"${newName}\" already exists`\n            };\n        }\n\n        return this.updateSchedule(scheduleId, { name: newName });\n    }\n\n    async duplicateSchedule(scheduleId: string, newName: string): Promise<ScheduleOperationResult> {\n        await this.ensureInitialized();\n\n        try {\n            if (!newName || newName.trim().length === 0) {\n                return {\n                    success: false,\n                    error: 'Schedule name cannot be empty'\n                };\n            }\n\n            const result = await this.retryManager.executeWithRetry(\n                () => {\n                    return this.profileStateManager.duplicateSchedule(scheduleId, newName, 'api');\n                },\n                {\n                    operationName: `duplicate schedule to \"${newName}\"`,\n                }\n            );\n\n            if (!result.success || !result.result) {\n                return {\n                    success: false,\n                    error: `Failed to duplicate schedule: ${result.error?.message || 'Unknown error'}`\n                };\n            }\n\n            const duplicatedSchedule = result.result;\n\n            // Auto-save\n            const saveResult = await this.profileStateManager.save();\n            if (!saveResult.success) {\n                console.warn('Failed to auto-save after schedule duplication:', saveResult.error);\n            }\n\n            // Notify listeners\n            this.notifyScheduleListeners({\n                type: 'schedule_created',\n                schedule: duplicatedSchedule,\n                timestamp: Date.now()\n            });\n\n            return {\n                success: true,\n                schedule: duplicatedSchedule\n            };\n\n        } catch (error) {\n            console.error('Error duplicating schedule:', error);\n            return {\n                success: false,\n                error: `Error duplicating schedule: ${error}`\n            };\n        }\n    }\n\n    // Schedule deletion\n    async deleteSchedule(scheduleId: string, options: { force?: boolean } = {}): Promise<{ success: boolean; error?: string }> {\n        await this.ensureInitialized();\n        const { force = false } = options;\n\n        try {\n            const schedules = this.profileStateManager.getAllSchedules();\n            const scheduleToDelete = schedules.find(s => s.id === scheduleId);\n\n            if (!scheduleToDelete) {\n                return {\n                    success: false,\n                    error: `Schedule with ID \"${scheduleId}\" not found`\n                };\n            }\n\n            // Prevent deletion of last schedule unless forced\n            if (schedules.length <= 1 && !force) {\n                return {\n                    success: false,\n                    error: 'Cannot delete the last schedule. At least one schedule must exist.'\n                };\n            }\n\n            const result = await this.retryManager.executeWithRetry(\n                () => {\n                    return this.profileStateManager.deleteSchedule(scheduleId, 'api');\n                },\n                {\n                    operationName: `delete schedule \"${scheduleToDelete.name}\"`,\n                }\n            );\n\n            if (!result.success) {\n                return {\n                    success: false,\n                    error: `Failed to delete schedule: ${result.error?.message || 'Unknown error'}`\n                };\n            }\n\n            // Auto-save\n            const saveResult = await this.profileStateManager.save();\n            if (!saveResult.success) {\n                console.warn('Failed to auto-save after schedule deletion:', saveResult.error);\n            }\n\n            // Notify listeners\n            this.notifyScheduleListeners({\n                type: 'schedule_deleted',\n                schedule: scheduleToDelete,\n                timestamp: Date.now()\n            });\n\n            return { success: true };\n\n        } catch (error) {\n            console.error('Error deleting schedule:', error);\n            return {\n                success: false,\n                error: `Error deleting schedule: ${error}`\n            };\n        }\n    }\n\n    // Schedule queries\n    getActiveSchedule(): Schedule | null {\n        if (!this.isInitialized) return null;\n        return this.profileStateManager.getActiveSchedule();\n    }\n\n    getActiveScheduleId(): string | null {\n        const activeSchedule = this.getActiveSchedule();\n        return activeSchedule?.id || null;\n    }\n\n    getAllSchedules(): Schedule[] {\n        if (!this.isInitialized) return [];\n        return this.profileStateManager.getAllSchedules();\n    }\n\n    getScheduleById(scheduleId: string): Schedule | null {\n        const schedules = this.getAllSchedules();\n        return schedules.find(s => s.id === scheduleId) || null;\n    }\n\n    // Legacy compatibility methods\n    loadSchedule(scheduleId: string): Schedule | null {\n        return this.getScheduleById(scheduleId);\n    }\n\n    async manualSaveCurrentProfile(): Promise<{ success: boolean; error?: string }> {\n        return this.save();\n    }\n\n    // Course management within schedules\n    private async updateScheduleCourses(scheduleId: string, selectedCourses: SelectedCourse[]): Promise<{ success: boolean; error?: string }> {\n        try {\n            // Validate all courses first\n            const validation = this.dataValidator.validateBatch(\n                selectedCourses,\n                (course) => this.dataValidator.validateSelectedCourse(course)\n            );\n\n            if (!validation.valid) {\n                return {\n                    success: false,\n                    error: `Course validation failed: ${validation.errors.map(e => e.message).join(', ')}`\n                };\n            }\n\n            const updateResult = await this.updateSchedule(scheduleId, {\n                selectedCourses: [...selectedCourses]\n            });\n\n            return {\n                success: updateResult.success,\n                error: updateResult.error\n            };\n\n        } catch (error) {\n            return {\n                success: false,\n                error: `Failed to update schedule courses: ${error}`\n            };\n        }\n    }\n\n    async syncActiveScheduleWithCurrentSelections(): Promise<{ success: boolean; error?: string }> {\n        await this.ensureInitialized();\n\n        try {\n            const activeScheduleId = this.getActiveScheduleId();\n            if (!activeScheduleId) {\n                return {\n                    success: false,\n                    error: 'No active schedule to sync'\n                };\n            }\n\n            const currentSelections = this.profileStateManager.getSelectedCourses();\n            return this.updateScheduleCourses(activeScheduleId, currentSelections);\n\n        } catch (error) {\n            return {\n                success: false,\n                error: `Failed to sync schedule: ${error}`\n            };\n        }\n    }\n\n    // Save and persistence\n    async save(): Promise<{ success: boolean; error?: string }> {\n        try {\n            await this.ensureInitialized();\n            const result = await this.profileStateManager.save();\n            return {\n                success: result.success,\n                error: result.error?.message\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: `Save failed: ${error}`\n            };\n        }\n    }\n\n    hasUnsavedChanges(): boolean {\n        if (!this.isInitialized) return false;\n        return this.profileStateManager.hasUnsavedChanges();\n    }\n\n    // Export/Import\n    async exportSchedule(scheduleId: string): Promise<{ success: boolean; data?: string; error?: string }> {\n        try {\n            const schedule = this.getScheduleById(scheduleId);\n            if (!schedule) {\n                return {\n                    success: false,\n                    error: `Schedule with ID \"${scheduleId}\" not found`\n                };\n            }\n\n            const exportData = {\n                version: '2.0',\n                timestamp: new Date().toISOString(),\n                schedule: schedule\n            };\n\n            return {\n                success: true,\n                data: JSON.stringify(exportData, null, 2)\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: `Export failed: ${error}`\n            };\n        }\n    }\n\n    async importSchedule(jsonData: string): Promise<ScheduleOperationResult> {\n        try {\n            await this.ensureInitialized();\n\n            const data = JSON.parse(jsonData);\n            if (!data.schedule) {\n                return {\n                    success: false,\n                    error: 'Import data does not contain a valid schedule'\n                };\n            }\n\n            // Validate imported schedule\n            const validation = this.dataValidator.validateSchedule(data.schedule);\n            if (!validation.valid) {\n                return {\n                    success: false,\n                    error: `Imported schedule validation failed: ${validation.errors.map(e => e.message).join(', ')}`,\n                    warnings: validation.warnings.map(w => w.message)\n                };\n            }\n\n            // Resolve name conflicts automatically\n            const uniqueName = this.generateUniqueScheduleName(data.schedule.name);\n\n            // Create new schedule with imported data and unique name\n            const importedSchedule: Schedule = {\n                ...data.schedule,\n                id: this.generateScheduleId(), // Generate new ID to avoid conflicts\n                name: uniqueName\n            };\n\n            const result = await this.retryManager.executeWithRetry(\n                () => {\n                    // Manually add to state\n                    const schedules = this.profileStateManager.getAllSchedules();\n                    schedules.push(importedSchedule);\n                    return importedSchedule;\n                },\n                {\n                    operationName: `import schedule \"${importedSchedule.name}\"`,\n                }\n            );\n\n            if (!result.success) {\n                return {\n                    success: false,\n                    error: `Failed to import schedule: ${result.error?.message || 'Unknown error'}`\n                };\n            }\n\n            // Auto-save\n            const saveResult = await this.profileStateManager.save();\n            if (!saveResult.success) {\n                console.warn('Failed to auto-save after schedule import:', saveResult.error);\n            }\n\n            // Notify listeners\n            this.notifyScheduleListeners({\n                type: 'schedule_created',\n                schedule: importedSchedule,\n                timestamp: Date.now()\n            });\n\n            return {\n                success: true,\n                schedule: importedSchedule\n            };\n\n        } catch (error) {\n            return {\n                success: false,\n                error: `Import failed: ${error}`\n            };\n        }\n    }\n\n    // Event handling\n    addScheduleListener(listener: ScheduleChangeListener): void {\n        this.scheduleListeners.add(listener);\n    }\n\n    removeScheduleListener(listener: ScheduleChangeListener): void {\n        this.scheduleListeners.delete(listener);\n    }\n\n    removeAllScheduleListeners(): void {\n        this.scheduleListeners.clear();\n    }\n\n    // Convenience method for backward compatibility\n    onActiveScheduleChange(callback: (activeSchedule: Schedule | null) => void): void {\n        const listener: ScheduleChangeListener = (event) => {\n            if (event.type === 'schedule_activated') {\n                callback(event.schedule || null);\n            }\n        };\n        this.addScheduleListener(listener);\n    }\n\n    // Convenience method for save state changes\n    onSaveStateChange(callback: (hasUnsavedChanges: boolean) => void): void {\n        const stateListener = (event: StateChangeEvent) => {\n            if (event.type === 'save_state_changed') {\n                callback(event.data.hasUnsavedChanges);\n            }\n        };\n        this.profileStateManager.addListener(stateListener);\n    }\n\n    // Access to course selection service\n    getCourseSelectionService(): CourseSelectionService {\n        return this.courseSelectionService;\n    }\n\n    // Health check\n    async performHealthCheck(): Promise<{ healthy: boolean; issues: string[] }> {\n        const issues: string[] = [];\n\n        try {\n            if (!this.isInitialized) {\n                issues.push('Service not initialized');\n            }\n\n            // Check all schedules\n            const schedules = this.getAllSchedules();\n            const validation = this.dataValidator.validateBatch(\n                schedules,\n                (schedule) => this.dataValidator.validateSchedule(schedule)\n            );\n\n            if (!validation.valid) {\n                issues.push(`Schedule validation: ${validation.errors.length} errors found`);\n            }\n\n            // Check active schedule consistency\n            const activeScheduleId = this.getActiveScheduleId();\n            if (activeScheduleId && !schedules.some(s => s.id === activeScheduleId)) {\n                issues.push('Active schedule ID references non-existent schedule');\n            }\n\n        } catch (error) {\n            issues.push(`Health check error: ${error}`);\n        }\n\n        return {\n            healthy: issues.length === 0,\n            issues\n        };\n    }\n\n    // Private helper methods\n    private async ensureInitialized(): Promise<void> {\n        if (!this.isInitialized) {\n            await this.initialize();\n        }\n    }\n\n    private setupStateManagerListeners(): void {\n        const stateListener: StateChangeListener = (event: StateChangeEvent) => {\n            // Convert state events to schedule events as needed\n            switch (event.type) {\n                case 'schedule_changed':\n                    if (event.data.action === 'created') {\n                        this.notifyScheduleListeners({\n                            type: 'schedule_created',\n                            schedule: event.data.schedule,\n                            timestamp: event.timestamp\n                        });\n                    } else if (event.data.action === 'deleted') {\n                        this.notifyScheduleListeners({\n                            type: 'schedule_deleted',\n                            schedule: event.data.schedule,\n                            timestamp: event.timestamp\n                        });\n                    } else if (event.data.action === 'updated') {\n                        this.notifyScheduleListeners({\n                            type: 'schedule_updated',\n                            schedule: event.data.schedule,\n                            timestamp: event.timestamp\n                        });\n                    }\n                    break;\n                case 'active_schedule_changed':\n                    this.notifyScheduleListeners({\n                        type: 'schedule_activated',\n                        schedule: event.data.schedule,\n                        timestamp: event.timestamp\n                    });\n                    break;\n            }\n        };\n\n        this.profileStateManager.addListener(stateListener);\n    }\n\n    private notifyScheduleListeners(event: ScheduleChangeEvent): void {\n        this.scheduleListeners.forEach(listener => {\n            try {\n                listener(event);\n            } catch (error) {\n                console.error('Error in schedule change listener:', error);\n            }\n        });\n    }\n\n    async initializeDefaultScheduleIfNeeded(): Promise<void> {\n        const existingSchedules = this.profileStateManager.getAllSchedules();\n        \n        if (existingSchedules.length === 0) {\n            // Use ProfileStateManager directly to avoid circular dependency\n            const defaultSchedule = this.profileStateManager.createSchedule('My Schedule', 'system');\n            \n            // Set as active\n            this.profileStateManager.setActiveSchedule(defaultSchedule.id, 'system');\n            \n            // Save the changes\n            try {\n                await this.profileStateManager.save();\n            } catch (error) {\n                console.warn('Failed to save default schedule:', error);\n            }\n        } else if (!this.getActiveScheduleId()) {\n            // Activate first schedule if no active one\n            this.profileStateManager.setActiveSchedule(existingSchedules[0].id, 'system');\n        }\n    }\n\n    private generateScheduleId(): string {\n        return `schedule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    private generateUniqueScheduleName(baseName: string): string {\n        const existingSchedules = this.getAllSchedules();\n        const existingNames = new Set(existingSchedules.map(s => s.name));\n        \n        // If name doesn't conflict, use it as-is\n        if (!existingNames.has(baseName)) {\n            return baseName;\n        }\n        \n        // Try appending numbers until we find a unique name\n        let counter = 1;\n        let candidateName: string;\n        \n        do {\n            candidateName = `${baseName} (${counter})`;\n            counter++;\n        } while (existingNames.has(candidateName));\n        \n        return candidateName;\n    }\n\n    // Debug methods\n    debugState(): void {\n        console.log('=== SCHEDULE MANAGEMENT SERVICE DEBUG ===');\n        console.log('Initialized:', this.isInitialized);\n        console.log('Active Schedule ID:', this.getActiveScheduleId());\n        console.log('Total Schedules:', this.getAllSchedules().length);\n        console.log('Listeners:', this.scheduleListeners.size);\n        console.log('Has Unsaved Changes:', this.hasUnsavedChanges());\n        \n        this.profileStateManager.debugState();\n        \n        console.log('Health Check:', this.performHealthCheck());\n        console.log('===============================================');\n    }\n}","import { Course, Department } from '../../types/types'\nimport { CourseDataService } from '../../services/courseDataService'\nimport { ThemeSelector } from '../components/ThemeSelector'\nimport { ScheduleSelector } from '../components/ScheduleSelector'\nimport { CourseSelectionService } from '../../services/CourseSelectionService'\nimport { ConflictDetector } from '../../core/ConflictDetector'\nimport { ModalService } from '../../services/ModalService'\nimport { DepartmentController } from './DepartmentController'\nimport { CourseController } from './CourseController'\nimport { ScheduleController } from './ScheduleController'\nimport { SectionInfoModalController } from './SectionInfoModalController'\nimport { InfoModalController } from './InfoModalController'\nimport { FilterModalController } from './FilterModalController'\nimport { ScheduleFilterModalController } from './ScheduleFilterModalController'\nimport { FilterService } from '../../services/FilterService'\nimport { ScheduleFilterService } from '../../services/ScheduleFilterService'\nimport { SearchService } from '../../services/searchService'\nimport { createDefaultFilters, SearchTextFilter } from '../../core/filters'\nimport { UIStateManager } from './UIStateManager'\nimport { TimestampManager } from './TimestampManager'\nimport { OperationManager, DebouncedOperation } from '../../utils/RequestCancellation'\nimport { DepartmentSyncService } from '../../services/DepartmentSyncService'\nimport { ScheduleManagementService } from '../../services/ScheduleManagementService'\nimport { ProfileStateManager } from '../../core/ProfileStateManager'\nimport { StorageService } from '../../services/StorageService'\nimport { ThemeManager } from '../../themes/ThemeManager'\n\n/**\n * ═══════════════════════════════════════════════════════════════════════════════\n * MainController - Application Orchestrator & Dependency Injection Container\n * ═══════════════════════════════════════════════════════════════════════════════\n * \n * ARCHITECTURE ROLE:\n * - Central application coordinator and dependency injection container\n * - Service initialization orchestrator with shared instance management\n * - System integration hub connecting all major architectural layers\n * - Event wiring coordinator establishing inter-service communication\n * - Application lifecycle manager (initialization → operation → cleanup)\n * \n * MAJOR DEPENDENCIES (25+ services):\n * Core Systems:\n * - ProfileStateManager → Shared state management (injected to all services)\n * - StorageService → Unified storage interface (wraps ProfileStateManager)\n * - ThemeManager → Theme system coordination via storage injection\n * \n * Data Services:\n * - CourseDataService → WPI course data fetching and caching\n * - CourseSelectionService → Course selection with shared ProfileStateManager\n * - ScheduleManagementService → Schedule operations with shared state\n * \n * UI Controllers:\n * - DepartmentController, CourseController, ScheduleController → Specialized UI management\n * - Modal Controllers (5x) → Popup content management with shared ModalService\n * \n * Filter & Search:\n * - FilterService, ScheduleFilterService → Advanced filtering capabilities\n * - SearchService → Course search across all data\n * - DepartmentSyncService → Department/filter synchronization\n * \n * Utility Services:\n * - UIStateManager, TimestampManager → State and time management\n * - OperationManager → Request debouncing and cancellation\n * - ConflictDetector → Schedule conflict resolution\n * \n * USED BY:\n * - Application Entry Point (main.ts) → Single initialization call\n * - All UI Components → Access shared services via MainController\n * - Event Handlers → Central coordination through MainController methods\n * \n * INITIALIZATION FLOW (Critical Order):\n * 1. Core Storage Setup:\n *    - Create ProfileStateManager instance\n *    - Initialize StorageService with shared ProfileStateManager\n *    - Configure ThemeManager to use StorageService (unified storage)\n * \n * 2. Service Layer Initialization:\n *    - CourseSelectionService with shared ProfileStateManager\n *    - ScheduleManagementService with shared ProfileStateManager + CourseSelectionService\n *    - Filter services with SearchService coordination\n * \n * 3. UI Controller Setup:\n *    - Department, Course, Schedule controllers with service injection\n *    - Modal controllers with shared ModalService\n *    - UI state managers and utility services\n * \n * 4. Service Wiring:\n *    - Cross-service dependencies (FilterService ↔ CourseController)\n *    - Event listener setup (CourseSelection changes → UI updates)\n *    - Synchronization services (DepartmentSync ↔ FilterService)\n * \n * 5. Application Startup:\n *    - StorageService initialization\n *    - CourseSelectionService data loading\n *    - Course data fetching\n *    - UI rendering and event binding\n * \n * DATA FLOW COORDINATION:\n * Storage Unification:\n * ProfileStateManager → StorageService → ThemeManager (via ThemeStorage interface)\n * All services share the same ProfileStateManager instance for consistency\n * \n * UI Update Flow:\n * User Interaction → Controller → Service → ProfileStateManager → Event → UI Update\n * MainController ensures all event handlers are properly wired\n * \n * KEY FEATURES:\n * - Shared instance management (ProfileStateManager across all services)\n * - Unified storage coordination (ThemeManager integration)\n * - Service dependency injection and wiring\n * - Event system coordination (listeners, handlers, cross-service communication)\n * - Application lifecycle management (startup, operation, error handling)\n * - Performance optimization (debounced operations, request cancellation)\n * \n * INTEGRATION POINTS:\n * - Creates and manages all singleton service instances\n * - Establishes ProfileStateManager as single source of truth\n * - Coordinates ThemeManager storage strategy injection\n * - Wires all cross-service dependencies and event handlers\n * - Provides public API for accessing shared services\n * \n * ARCHITECTURAL PATTERNS:\n * - Dependency Injection Container: Manages service lifecycle and injection\n * - Orchestrator: Coordinates initialization and operation of all subsystems\n * - Facade: Provides simplified interface to complex service ecosystem\n * - Event Coordinator: Manages event flow between decoupled components\n * - Service Locator: Centralized access point for shared services\n * \n * ═══════════════════════════════════════════════════════════════════════════════\n */\nexport class MainController {\n    private courseDataService: CourseDataService;\n    private themeSelector: ThemeSelector;\n    private scheduleSelector: ScheduleSelector | null = null;\n    private profileStateManager: ProfileStateManager;\n    private storageService: StorageService;\n    private courseSelectionService: CourseSelectionService;\n    private conflictDetector: ConflictDetector;\n    private modalService: ModalService;\n    private departmentController: DepartmentController;\n    private courseController: CourseController;\n    private scheduleController: ScheduleController;\n    private sectionInfoModalController: SectionInfoModalController;\n    private infoModalController: InfoModalController;\n    private filterModalController: FilterModalController;\n    private scheduleFilterModalController: ScheduleFilterModalController;\n    private searchService: SearchService;\n    private filterService: FilterService;\n    private scheduleFilterService: ScheduleFilterService;\n    private uiStateManager: UIStateManager;\n    private timestampManager: TimestampManager;\n    private operationManager: OperationManager;\n    private debouncedSearch: DebouncedOperation;\n    private departmentSyncService: DepartmentSyncService;\n    private scheduleManagementService: ScheduleManagementService;\n    private allDepartments: Department[] = [];\n\n\n    constructor() {\n        // Initialize core storage and state management first\n        this.profileStateManager = new ProfileStateManager();\n        this.storageService = StorageService.getInstance(this.profileStateManager);\n        \n        // Connect ThemeManager to use our unified storage\n        const themeManager = ThemeManager.getInstance();\n        themeManager.setStorage(this.storageService);\n        \n        // Initialize services with shared ProfileStateManager\n        this.courseDataService = new CourseDataService();\n        this.themeSelector = new ThemeSelector();\n        this.courseSelectionService = new CourseSelectionService(this.profileStateManager);\n        this.conflictDetector = new ConflictDetector();\n        this.modalService = new ModalService();\n        this.departmentController = new DepartmentController();\n        \n        // Initialize search and filter services\n        this.searchService = new SearchService();\n        this.filterService = new FilterService(this.searchService);\n        this.scheduleFilterService = new ScheduleFilterService(this.searchService);\n        \n        // Initialize schedule management service with shared ProfileStateManager and CourseSelectionService\n        this.scheduleManagementService = new ScheduleManagementService(this.profileStateManager, this.courseSelectionService);\n        \n        // Initialize managers (before any event listeners that might use them)\n        this.uiStateManager = new UIStateManager();\n        this.timestampManager = new TimestampManager();\n        this.operationManager = new OperationManager();\n        this.debouncedSearch = new DebouncedOperation(this.operationManager, 'search', 300);\n        \n        // Initialize controllers\n        this.courseController = new CourseController(this.courseSelectionService);\n        this.scheduleController = new ScheduleController(this.courseSelectionService);\n        this.sectionInfoModalController = new SectionInfoModalController(this.modalService);\n        this.infoModalController = new InfoModalController(this.modalService);\n        this.filterModalController = new FilterModalController(this.modalService);\n        this.scheduleFilterModalController = new ScheduleFilterModalController(this.modalService);\n        \n        // Connect filter service to course controller\n        this.courseController.setFilterService(this.filterService);\n        \n        // Connect filter service and course data to filter modal\n        this.filterModalController.setFilterService(this.filterService);\n        \n        // Connect schedule filter service to controllers\n        this.scheduleFilterModalController.setScheduleFilterService(this.scheduleFilterService);\n        this.scheduleController.setConflictDetector(this.conflictDetector);\n        this.scheduleController.setScheduleFilterService(this.scheduleFilterService);\n        this.scheduleController.setScheduleFilterModalController(this.scheduleFilterModalController);\n        this.scheduleController.setScheduleManagementService(this.scheduleManagementService);\n        \n        // Set modal controllers for ScheduleController\n        this.scheduleController.setSectionInfoModalController(this.sectionInfoModalController);\n        \n        // Initialize department synchronization service\n        this.departmentSyncService = new DepartmentSyncService(this.filterService, this.departmentController);\n        this.departmentController.setDepartmentSyncService(this.departmentSyncService);\n        this.departmentSyncService.setFilterModalController(this.filterModalController);\n        \n        // Wire up state preservation for dropdown states\n        this.scheduleController.setStatePreserver({\n            preserve: () => this.preserveDropdownStates(),\n            restore: (states) => this.restoreDropdownStates(states)\n        });\n        \n        // Initialize tracking for course changes\n        const initialSelectedCourses = this.courseSelectionService.getSelectedCourses();\n        this.previousSelectedCoursesCount = initialSelectedCourses.length;\n        this.previousSelectedCoursesMap = new Map();\n        initialSelectedCourses.forEach(sc => {\n            this.previousSelectedCoursesMap.set(sc.course.id, sc.selectedSectionNumber);\n        });\n        \n        // IMPORTANT: Initialize filters LAST (triggers events that use operationManager)\n        this.initializeFilters();\n        \n        this.init();\n    }\n\n    private initializeFilters(): void {\n        const filters = createDefaultFilters();\n        filters.forEach(filter => {\n            this.filterService.registerFilter(filter);\n        });\n\n        // Register SearchTextFilter\n        const searchTextFilter = new SearchTextFilter();\n        this.filterService.registerFilter(searchTextFilter);\n\n        // Set up filter change listener to refresh UI\n        this.filterService.addEventListener((event) => {\n            this.refreshCurrentView();\n        });\n        \n        // Initialize filter button state\n        setTimeout(() => this.updateFilterButtonState(), 100);\n    }\n\n    private async init(): Promise<void> {\n        this.uiStateManager.showLoadingState();\n        \n        try {\n            // Initialize StorageService FIRST\n            console.log('🔄 MainController: Initializing StorageService...');\n            const storageInitResult = await this.storageService.initialize();\n            console.log('📊 StorageService initialized:', storageInitResult);\n\n            // Initialize CourseSelectionService SECOND to load persisted data\n            console.log('🔄 MainController: Initializing CourseSelectionService...');\n            const initResult = await this.courseSelectionService.initialize();\n            console.log('📊 CourseSelectionService initialized:', initResult);\n            \n            // Check what was loaded from storage\n            const loadedCourses = this.courseSelectionService.getSelectedCourses();\n            console.log(`📦 Loaded ${loadedCourses.length} selected courses from storage:`, loadedCourses.map(sc => ({\n                course: `${sc.course.department.abbreviation}${sc.course.number}`,\n                selectedSection: sc.selectedSectionNumber,\n                hasSection: sc.selectedSection !== null\n            })));\n            \n            await this.loadCourseData();\n            this.departmentController.displayDepartments();\n            \n            // Initialize the department sync service AFTER departments are rendered\n            this.departmentSyncService.initialize();\n            \n            // Set \"All Departments\" as the default selection on startup\n            this.initializeDefaultDepartmentView();\n            \n            this.setupEventListeners();\n            this.setupCourseSelectionListener();\n            this.setupSaveStateListener();\n            this.courseController.displaySelectedCourses();\n            \n            // Load saved filters AFTER all services are fully connected and ready\n            this.filterService.loadFiltersFromStorage();\n            \n            this.uiStateManager.syncHeaderHeights();\n            this.uiStateManager.setupHeaderResizeObserver();\n        } catch (error) {\n            console.error('Failed to initialize application:', error);\n            this.uiStateManager.showErrorMessage('Failed to initialize application. Some features may not work properly.');\n        }\n    }\n\n    private async loadCourseData(): Promise<void> {\n        try {\n            const scheduleDB = await this.courseDataService.loadCourseData();\n            this.allDepartments = scheduleDB.departments;\n            this.departmentController.setAllDepartments(this.allDepartments);\n            this.courseController.setAllDepartments(this.allDepartments);\n            this.courseSelectionService.setAllDepartments(this.allDepartments);\n            \n            // Initialize search service with course data\n            this.searchService.setCourseData(this.allDepartments);\n            \n            // Initialize filter modal with course data\n            this.filterModalController.setCourseData(this.allDepartments);\n            \n            // IMPORTANT: Reconstruct Section objects after course data is loaded\n            // This must happen after course data is loaded but service is already initialized\n            this.courseSelectionService.reconstructSectionObjects();\n            \n            // Initialize default schedule if needed (await to ensure it completes)\n            await this.scheduleManagementService.initializeDefaultScheduleIfNeeded();\n            \n            this.timestampManager.updateClientTimestamp();\n            this.timestampManager.loadServerTimestamp();\n            \n            // Expose debug methods globally for testing (development only)\n            if (typeof window !== 'undefined') {\n                (window as any).debugDepartmentSync = {\n                    debug: () => this.departmentSyncService.debugVisualSync(),\n                    refresh: () => this.departmentSyncService.forceVisualRefresh(),\n                    enableDebug: () => this.departmentSyncService.enableDebugMode(),\n                    disableDebug: () => this.departmentSyncService.disableDebugMode(),\n                    getActive: () => this.departmentSyncService.getActiveDepartments(),\n                    getDescription: () => this.departmentSyncService.getSelectionDescription()\n                };\n                \n                (window as any).debugScheduleManagement = {\n                    debug: () => this.scheduleManagementService.debugState(),\n                    getService: () => this.scheduleManagementService,\n                    createSchedule: (name: string) => this.scheduleManagementService.createNewSchedule(name),\n                    switchSchedule: (id: string) => this.scheduleManagementService.setActiveSchedule(id),\n                    getSchedules: () => this.scheduleManagementService.getAllSchedules(),\n                    getCurrentPage: () => this.uiStateManager.currentPage,\n                    createTestSchedules: async () => {\n                        const schedule1 = await this.scheduleManagementService.createNewSchedule('Test Schedule 1');\n                        const schedule2 = await this.scheduleManagementService.createNewSchedule('Test Schedule 2');\n                        console.log('Created test schedules:', schedule1.schedule?.id, schedule2.schedule?.id);\n                        return { schedule1, schedule2 };\n                    },\n                    testCompleteSwitch: (scheduleId?: string) => {\n                        const schedules = this.scheduleManagementService.getAllSchedules();\n                        if (schedules.length < 2 && !scheduleId) {\n                            const { schedule1, schedule2 } = (window as any).debugScheduleManagement.createTestSchedules();\n                            scheduleId = schedule1.id;\n                        }\n                        const targetId = scheduleId || schedules[0].id;\n                        console.log('Testing complete schedule switch to:', targetId);\n                        this.scheduleManagementService.setActiveSchedule(targetId);\n                    }\n                };\n            }\n        } catch (error) {\n            console.error('Failed to load course data:', error);\n            this.uiStateManager.showErrorMessage('Failed to load course data. Please try refreshing the page.');\n        }\n    }\n\n\n    private setupEventListeners(): void {\n        // Department selection\n        document.addEventListener('click', (e) => {\n            const target = e.target as HTMLElement;\n            \n            \n            if (target.classList.contains('department-item')) {\n                const deptId = target.dataset.deptId;\n                if (deptId) {\n                    // Check if this is a multi-select click (Ctrl/Cmd key)\n                    const multiSelect = (e as MouseEvent).ctrlKey || (e as MouseEvent).metaKey;\n                    \n                    // Use the department controller which will now use the sync service\n                    this.departmentController.handleDepartmentClick(deptId, multiSelect);\n                    \n                    // The sync service will trigger refreshCurrentView through filter changes\n                    // No need to manually display courses anymore\n                }\n            }\n            \n            if (target.classList.contains('section-badge')) {\n                target.classList.toggle('selected');\n            }\n            \n            if (target.classList.contains('course-select-btn')) {\n                const courseElement = target.closest('.course-item, .course-card') as HTMLElement;\n                if (courseElement) {\n                    // Make async call and handle potential errors\n                    this.courseController.toggleCourseSelection(courseElement).catch(error => {\n                        console.error('Failed to toggle course selection:', error);\n                        this.uiStateManager.showErrorMessage('Failed to update course selection. Please try again.');\n                    });\n                }\n            }\n\n            if (target.classList.contains('load-more-button')) {\n                // Handle Load More button click\n                this.handleLoadMoreClick().catch(error => {\n                    console.error('Failed to load more courses:', error);\n                    this.uiStateManager.showErrorMessage('Failed to load more courses. Please try again.');\n                });\n                return;\n            }\n\n            if (target.classList.contains('course-remove-btn')) {\n                // Determine which page we're on and use the appropriate controller\n                let course;\n                if (this.uiStateManager.currentPage === 'schedule') {\n                    course = this.scheduleController.getCourseFromElement(target as HTMLElement);\n                } else {\n                    course = this.courseController.getCourseFromElement(target as HTMLElement);\n                }\n                \n                if (course) {\n                    // Directly remove course (remove button means always unselect)\n                    this.courseSelectionService.unselectCourse(course).catch(error => {\n                        console.error('Failed to unselect course:', error);\n                        this.uiStateManager.showErrorMessage('Failed to remove course. Please try again.');\n                    });\n                }\n            }\n\n            // Handle section-related clicks FIRST (before dropdown logic)\n            if (target.classList.contains('section-select-btn')) {\n                e.stopPropagation();\n                const courseElement = target.closest('.schedule-course-item') as HTMLElement;\n                const sectionNumber = target.dataset.section;\n                \n                if (courseElement && sectionNumber) {\n                    const course = this.scheduleController.getCourseFromElement(courseElement);\n                    if (course) {\n                        this.scheduleController.handleSectionSelection(course, sectionNumber).catch(error => {\n                            console.error('Failed to handle section selection:', error);\n                            this.uiStateManager.showErrorMessage('Failed to update section selection. Please try again.');\n                        });\n                    }\n                }\n                return;\n            }\n\n            // Prevent dropdown closing for any other section-related clicks\n            if (target.classList.contains('section-option') || target.closest('.section-option') ||\n                target.classList.contains('section-info') || target.closest('.section-info') ||\n                target.classList.contains('section-number') || \n                target.classList.contains('section-schedule') || \n                target.classList.contains('section-professor')) {\n                e.stopPropagation();\n                e.preventDefault();\n                return;\n            }\n\n            if (target.classList.contains('dropdown-trigger') || target.closest('.dropdown-trigger')) {\n                const triggerElement = target.classList.contains('dropdown-trigger') \n                    ? target \n                    : target.closest('.dropdown-trigger') as HTMLElement;\n                    \n                if (triggerElement) {\n                    // Only trigger dropdown if clicking on course header area (not section-related elements)\n                    const shouldToggle = !target.classList.contains('course-remove-btn') && \n                        !target.classList.contains('section-select-btn') &&\n                        !target.classList.contains('section-number') && \n                        !target.classList.contains('section-schedule') && \n                        !target.classList.contains('section-professor') &&\n                        !target.closest('.section-option') &&\n                        !target.closest('.section-info') &&\n                        !target.closest('.schedule-sections-container');\n                        \n                    if (shouldToggle) {\n                        this.toggleCourseDropdown(triggerElement);\n                    }\n                }\n            }\n\n\n            if (target.closest('.course-item, .course-card') && !target.classList.contains('course-select-btn') && !target.classList.contains('section-badge')) {\n                const courseElement = target.closest('.course-item, .course-card') as HTMLElement;\n                if (courseElement) {\n                    this.courseController.selectCourse(courseElement);\n                }\n            }\n        });\n\n        // Search functionality with debouncing and cancellation\n        const searchInput = document.getElementById('search-input') as HTMLInputElement;\n        if (searchInput) {\n            searchInput.addEventListener('input', () => {\n                const query = searchInput.value.trim();\n                \n                // Use debounced operation for search to prevent excessive filtering\n                this.debouncedSearch.execute(async (cancellationToken) => {\n                    cancellationToken.throwIfCancelled();\n                    \n                    // Update search text filter in FilterService\n                    if (query.length > 0) {\n                        this.filterService.addFilter('searchText', { query });\n                    } else {\n                        this.filterService.removeFilter('searchText');\n                    }\n                    \n                    cancellationToken.throwIfCancelled();\n                    \n                    // Sync modal search input\n                    this.syncModalSearchInput(query);\n                    \n                    return Promise.resolve();\n                }).catch(error => {\n                    // Ignore cancellation errors, log others\n                    if (error.name !== 'CancellationError') {\n                        console.error('Search error:', error);\n                    }\n                });\n            });\n        }\n\n        // Clear selection\n        const clearButton = document.getElementById('clear-selection');\n        if (clearButton) {\n            clearButton.addEventListener('click', () => {\n                this.clearSelection();\n            });\n        }\n\n        // Schedule navigation\n        const scheduleButton = document.getElementById('schedule-btn');\n        if (scheduleButton) {\n            scheduleButton.addEventListener('click', async () => {\n                this.uiStateManager.togglePage();\n                if (this.uiStateManager.currentPage === 'schedule') {\n                    // Initialize schedule selector if not already created\n                    if (!this.scheduleSelector) {\n                        try {\n                            // Ensure the schedule management service is initialized before creating selector\n                            await this.scheduleManagementService.initialize();\n                            \n                            this.scheduleSelector = new ScheduleSelector(this.scheduleManagementService, 'schedule-selector-container');\n                        } catch (error) {\n                            console.error('Failed to initialize schedule selector:', error);\n                        }\n                    }\n                    \n                    // Log selected section data for debugging  \n                    const selectedCourses = this.courseSelectionService.getSelectedCourses();\n                    console.log('=== SCHEDULE PAGE LOADED ===');\n                    console.log(`Found ${selectedCourses.length} selected courses with sections:`);\n                    \n                    selectedCourses.forEach(sc => {\n                        const hasSection = sc.selectedSection !== null;\n                        console.log(`${sc.course.department.abbreviation}${sc.course.number}: section ${sc.selectedSectionNumber} ${hasSection ? '✓' : '✗'}`);\n                        if (hasSection && sc.selectedSection) {\n                            console.log(`  Term: ${sc.selectedSection.term}, Periods: ${sc.selectedSection.periods.length}`);\n                            console.log(`  Full section object:`, sc.selectedSection);\n                            \n                            // Log each period in detail\n                            sc.selectedSection.periods.forEach((period, idx) => {\n                                console.log(`    Period ${idx + 1}:`, {\n                                    type: period.type,\n                                    professor: period.professor,\n                                    startTime: period.startTime,\n                                    endTime: period.endTime,\n                                    days: Array.from(period.days),\n                                    location: period.location,\n                                    building: period.building,\n                                    room: period.room\n                                });\n                                \n                                // Calculate and log time slots for debugging\n                                const startSlot = Math.floor(((period.startTime.hours * 60 + period.startTime.minutes) - (7 * 60)) / 10);\n                                const endSlot = Math.floor(((period.endTime.hours * 60 + period.endTime.minutes) - (7 * 60)) / 10);\n                                const duration = endSlot - startSlot;\n                                console.log(`      Time slots: ${startSlot} to ${endSlot} (span ${duration} rows)`);\n                            });\n                        }\n                    });\n                    console.log('=== END SCHEDULE SECTION DATA ===\\n');\n                    \n                    this.scheduleController.displayScheduleSelectedCourses();\n                    this.scheduleController.renderScheduleGrids();\n                }\n            });\n        }\n\n        // View toggle buttons\n        const viewListBtn = document.getElementById('view-list');\n        const viewGridBtn = document.getElementById('view-grid');\n        \n        if (viewListBtn) {\n            viewListBtn.addEventListener('click', () => {\n                this.uiStateManager.setView('list');\n                this.refreshCurrentView();\n            });\n        }\n        \n        if (viewGridBtn) {\n            viewGridBtn.addEventListener('click', () => {\n                this.uiStateManager.setView('grid');\n                this.refreshCurrentView();\n            });\n        }\n\n        // Filter button\n        const filterButton = document.getElementById('filter-btn');\n        if (filterButton) {\n            filterButton.addEventListener('click', () => {\n                this.filterModalController.show();\n            });\n        }\n\n        // Schedule filter button\n        const scheduleFilterButton = document.getElementById('schedule-filter-btn');\n        if (scheduleFilterButton) {\n            scheduleFilterButton.addEventListener('click', () => {\n                const selectedCourses = this.courseSelectionService.getSelectedCourses();\n                this.scheduleFilterModalController.setSelectedCourses(selectedCourses);\n                this.scheduleFilterModalController.show();\n            });\n        }\n\n        // Schedule search functionality\n        const scheduleSearchInput = document.getElementById('schedule-search-input') as HTMLInputElement;\n        if (scheduleSearchInput) {\n            scheduleSearchInput.addEventListener('input', () => {\n                const query = scheduleSearchInput.value.trim();\n                \n                if (query.length > 0) {\n                    this.scheduleFilterService.addFilter('searchText', { query });\n                } else {\n                    this.scheduleFilterService.removeFilter('searchText');\n                }\n                \n                // Refresh the schedule page display\n                this.scheduleController.applyFiltersAndRefresh();\n            });\n        }\n\n        // Save profile button\n        const saveProfileButton = document.getElementById('save-profile-btn');\n        if (saveProfileButton) {\n            saveProfileButton.addEventListener('click', () => {\n                this.handleSaveProfile();\n            });\n        }\n    }\n\n    private refreshCurrentView(): void {\n        const selectedDepartment = this.departmentController.getSelectedDepartment();\n        const hasFilters = !this.filterService.isEmpty();\n        \n        // Start a new render operation with cancellation support\n        const cancellationToken = this.operationManager.startOperation('render', 'New render requested');\n        \n        let coursesToDisplay: Course[] = [];\n        \n        if (hasFilters) {\n            // Handle all filters (including search text)\n            const baseCourses = selectedDepartment ? selectedDepartment.courses : this.getAllCourses();\n            coursesToDisplay = this.filterService.filterCourses(baseCourses);\n            this.updateFilteredHeader(coursesToDisplay.length, selectedDepartment);\n        } else if (selectedDepartment) {\n            // Show department courses without filters\n            coursesToDisplay = selectedDepartment.courses;\n            this.updateDepartmentHeader(selectedDepartment);\n        } else {\n            // No filters, no department selected - show all courses (\"All Departments\" view)\n            coursesToDisplay = this.getAllCourses();\n            this.updateAllDepartmentsHeader();\n        }\n        \n        // Display courses with cancellation support\n        this.displayCoursesWithCancellation(coursesToDisplay, cancellationToken);\n        \n        // Save current filter state\n        if (hasFilters) {\n            this.filterService.saveFiltersToStorage();\n        }\n        \n        // Update filter button appearance and sync search input\n        this.updateFilterButtonState();\n        this.syncSearchInputFromFilters();\n    }\n    \n    private async displayCoursesWithCancellation(coursesToDisplay: Course[], cancellationToken: any): Promise<void> {\n        try {\n            // Pass cancellation token to the progressive renderer\n            await this.courseController.displayCoursesWithCancellation(\n                coursesToDisplay, \n                this.uiStateManager.currentView,\n                cancellationToken\n            );\n            \n            // Mark operation as complete\n            this.operationManager.completeOperation('render');\n            \n        } catch (error) {\n            if (error.name === 'CancellationError') {\n                // Render was cancelled, not an error\n                return;\n            }\n            console.error('Error displaying courses:', error);\n            this.operationManager.completeOperation('render');\n        }\n    }\n\n    private updateFilterButtonState(): void {\n        const filterButton = document.getElementById('filter-btn');\n        if (filterButton && this.filterService) {\n            const hasActiveFilters = !this.filterService.isEmpty();\n            const filterCount = this.filterService.getFilterCount();\n            \n            if (hasActiveFilters) {\n                filterButton.classList.add('active');\n                filterButton.title = `${filterCount} filter${filterCount === 1 ? '' : 's'} active - Click to modify`;\n            } else {\n                filterButton.classList.remove('active');\n                filterButton.title = 'Filter courses';\n            }\n        }\n    }\n\n    private clearSelection(): void {\n        // Clear selected sections\n        document.querySelectorAll('.section-badge.selected').forEach(badge => {\n            badge.classList.remove('selected');\n        });\n\n        // Clear search and filters\n        const searchInput = document.getElementById('search-input') as HTMLInputElement;\n        if (searchInput) {\n            searchInput.value = '';\n        }\n        this.filterService.removeFilter('searchText');\n\n        // Clear department selection (this will activate \"All Departments\")\n        this.departmentController.clearDepartmentSelection();\n        \n        // Reset to \"All Departments\" state \n        this.refreshCurrentView(); // This will now show all courses since no department/filters are selected\n\n        this.courseController.clearCourseSelection();\n        this.courseController.displaySelectedCourses();\n    }\n\n\n\n\n\n\n    private previousSelectedCoursesCount = 0;\n    private previousSelectedCoursesMap = new Map<string, string | null>();\n\n    private setupCourseSelectionListener(): void {\n        this.courseSelectionService.onSelectionChange((selectedCourses) => {\n            const currentCount = selectedCourses.length;\n            const isCoursesAddedOrRemoved = currentCount !== this.previousSelectedCoursesCount;\n            \n            // Create current state map for comparison\n            const currentCoursesMap = new Map<string, string | null>();\n            selectedCourses.forEach(sc => {\n                currentCoursesMap.set(sc.course.id, sc.selectedSectionNumber);\n            });\n            \n            // Always update main course UI\n            this.courseController.refreshCourseSelectionUI();\n            this.courseController.displaySelectedCourses();\n            \n            if (isCoursesAddedOrRemoved) {\n                // Full refresh needed when courses are added/removed\n                this.scheduleController.displayScheduleSelectedCourses();\n            } else {\n                // Check if only section selections changed\n                let sectionSelectionsChanged = false;\n                for (const [courseId, selectedSection] of currentCoursesMap) {\n                    const previousSection = this.previousSelectedCoursesMap.get(courseId);\n                    if (previousSection !== selectedSection) {\n                        sectionSelectionsChanged = true;\n                        \n                        // Update visual state for this course\n                        const selectedCourse = selectedCourses.find(sc => sc.course.id === courseId);\n                        if (selectedCourse) {\n                            this.scheduleController.updateSectionButtonStates(selectedCourse.course, selectedSection);\n                        }\n                    }\n                }\n                \n                // Update schedule grids if any sections changed\n                if (sectionSelectionsChanged && this.uiStateManager.currentPage === 'schedule') {\n                    this.scheduleController.renderScheduleGrids();\n                }\n            }\n            \n            // Update tracking state\n            this.previousSelectedCoursesCount = currentCount;\n            this.previousSelectedCoursesMap = new Map(currentCoursesMap);\n        });\n    }\n\n\n    // Public methods for easy access to selected courses\n    public getSelectedCourses() {\n        return this.courseSelectionService.getSelectedCourses();\n    }\n\n    public getSelectedCoursesCount(): number {\n        return this.courseSelectionService.getSelectedCoursesCount();\n    }\n\n    public getCourseSelectionService(): CourseSelectionService {\n        return this.courseSelectionService;\n    }\n\n    public getFilterService(): FilterService {\n        return this.filterService;\n    }\n\n    public getModalService(): ModalService {\n        return this.modalService;\n    }\n\n    public getSectionInfoModalController(): SectionInfoModalController {\n        return this.sectionInfoModalController;\n    }\n\n    public getInfoModalController(): InfoModalController {\n        return this.infoModalController;\n    }\n\n    public getScheduleManagementService(): ScheduleManagementService {\n        return this.scheduleManagementService;\n    }\n\n    private toggleCourseDropdown(triggerElement: HTMLElement): void {\n        const courseItem = triggerElement.closest('.schedule-course-item');\n        if (!courseItem) return;\n\n        const isCollapsed = courseItem.classList.contains('collapsed');\n        \n        if (isCollapsed) {\n            // Expand\n            courseItem.classList.remove('collapsed');\n            courseItem.classList.add('expanded');\n        } else {\n            // Collapse\n            courseItem.classList.remove('expanded');\n            courseItem.classList.add('collapsed');\n        }\n    }\n\n    private preserveDropdownStates(): Map<string, boolean> {\n        const states = new Map<string, boolean>();\n        document.querySelectorAll('.schedule-course-item').forEach(item => {\n            const course = this.scheduleController.getCourseFromElement(item as HTMLElement);\n            if (course) {\n                const isExpanded = item.classList.contains('expanded');\n                states.set(course.id, isExpanded);\n            }\n        });\n        return states;\n    }\n\n    private restoreDropdownStates(states: Map<string, boolean>): void {\n        document.querySelectorAll('.schedule-course-item').forEach(item => {\n            const course = this.scheduleController.getCourseFromElement(item as HTMLElement);\n            if (course && states.has(course.id)) {\n                const wasExpanded = states.get(course.id);\n                if (wasExpanded) {\n                    item.classList.remove('collapsed');\n                    item.classList.add('expanded');\n                } else {\n                    item.classList.remove('expanded');\n                    item.classList.add('collapsed');\n                }\n            }\n        });\n    }\n\n    private getAllCourses(): Course[] {\n        const allCourses: Course[] = [];\n        this.allDepartments.forEach(dept => {\n            allCourses.push(...dept.courses);\n        });\n        return allCourses;\n    }\n\n    private syncModalSearchInput(query: string): void {\n        // Sync the modal search input if the modal is currently open\n        this.filterModalController.syncSearchInputFromMain(query);\n    }\n\n    private syncSearchInputFromFilters(): void {\n        const searchInput = document.getElementById('search-input') as HTMLInputElement;\n        if (searchInput) {\n            const searchTextFilter = this.filterService.getActiveFilters().find(f => f.id === 'searchText');\n            const currentQuery = searchTextFilter?.criteria?.query || '';\n            if (searchInput.value !== currentQuery) {\n                searchInput.value = currentQuery;\n            }\n        }\n    }\n\n    private updateFilteredHeader(resultCount: number, selectedDepartment: Department | null): void {\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            const filters = this.filterService.getActiveFilters();\n            const searchTextFilter = filters.find(f => f.id === 'searchText');\n            \n            if (searchTextFilter && filters.length === 1) {\n                // Only search text filter\n                const query = searchTextFilter.criteria.query;\n                contentHeader.textContent = `Search: \"${query}\" (${resultCount} results)`;\n            } else if (searchTextFilter) {\n                // Search text + other filters\n                const query = searchTextFilter.criteria.query;\n                const otherFilters = filters.length - 1;\n                contentHeader.textContent = `Search: \"${query}\" + ${otherFilters} filter${otherFilters === 1 ? '' : 's'} (${resultCount} results)`;\n            } else {\n                // Only other filters\n                const filterCount = filters.length;\n                contentHeader.textContent = `Filtered Results: ${filterCount} filter${filterCount === 1 ? '' : 's'} (${resultCount} courses)`;\n            }\n        }\n    }\n\n    private updateDepartmentHeader(department: Department): void {\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            contentHeader.textContent = `${department.name} (${department.abbreviation})`;\n        }\n    }\n\n    private updateDefaultHeader(): void {\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            contentHeader.textContent = 'Course Listings';\n        }\n    }\n\n    private updateAllDepartmentsHeader(): void {\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            const totalCourses = this.getAllCourses().length;\n            contentHeader.textContent = `All Departments (${totalCourses} courses)`;\n        }\n    }\n\n    private initializeDefaultDepartmentView(): void {\n        // Make sure \"All Departments\" is visually selected (it already has 'active' class from displayDepartments)\n        // and show all courses by triggering a refresh\n        this.refreshCurrentView();\n    }\n\n    private async handleLoadMoreClick(): Promise<void> {\n        // Show loading state on the button\n        const loadMoreButton = document.querySelector('.load-more-button') as HTMLButtonElement;\n        if (!loadMoreButton) return;\n        \n        const originalText = loadMoreButton.textContent;\n        loadMoreButton.textContent = 'Loading...';\n        loadMoreButton.disabled = true;\n        \n        try {\n            // Load more courses using the current view\n            const currentView = this.uiStateManager.currentView;\n            await this.courseController.displayMoreCourses(currentView);\n        } catch (error) {\n            console.error('Error loading more courses:', error);\n            // Restore button state on error\n            loadMoreButton.textContent = originalText;\n            loadMoreButton.disabled = false;\n            throw error; // Re-throw so the caller can handle it\n        }\n    }\n\n    private async handleSaveProfile(): Promise<void> {\n        const saveButton = document.getElementById('save-profile-btn') as HTMLButtonElement;\n        if (!saveButton) return;\n\n        // Visual feedback\n        const originalText = saveButton.innerHTML;\n        saveButton.innerHTML = '⏳ Saving...';\n        saveButton.disabled = true;\n\n        const result = await this.scheduleManagementService.manualSaveCurrentProfile();\n        const success = result.success;\n        \n        setTimeout(() => {\n            if (success) {\n                saveButton.innerHTML = '✅ Saved!';\n                setTimeout(() => {\n                    saveButton.innerHTML = originalText;\n                    saveButton.disabled = false;\n                }, 1500);\n            } else {\n                saveButton.innerHTML = '❌ Error';\n                setTimeout(() => {\n                    saveButton.innerHTML = originalText;\n                    saveButton.disabled = false;\n                }, 2000);\n            }\n        }, 300);\n    }\n\n    private setupSaveStateListener(): void {\n        this.scheduleManagementService.onSaveStateChange((hasUnsavedChanges) => {\n            this.updateSaveButtonState(hasUnsavedChanges);\n        });\n    }\n\n    private updateSaveButtonState(hasUnsavedChanges: boolean): void {\n        const saveButton = document.getElementById('save-profile-btn') as HTMLButtonElement;\n        if (!saveButton) return;\n\n        if (hasUnsavedChanges) {\n            saveButton.classList.add('unsaved-changes');\n            saveButton.title = 'You have unsaved changes - Click to save';\n            if (!saveButton.innerHTML.includes('*')) {\n                saveButton.innerHTML = saveButton.innerHTML.replace('💾 Save', '💾 Save*');\n            }\n        } else {\n            saveButton.classList.remove('unsaved-changes');\n            saveButton.title = 'Save current profile';\n            saveButton.innerHTML = saveButton.innerHTML.replace('💾 Save*', '💾 Save');\n        }\n    }\n\n}","import './style.css'\nimport { MainController } from './ui/controllers/MainController'\n\n// Initialize the application\nnew MainController()"],"names":["DayOfWeek","_CourseDataService","freshData","error","response","jsonData","scheduleDB","departments","deptData","department","courseData","sections","sectionData","rawTerm","sectionNumber","computedTerm","periods","periodData","timeStr","match","hours","minutes","displayHours","ampm","displayTime","days","daySet","day","html","cached","cacheData","parsedData","cacheAge","maxAge","query","allCourses","dept","queryLower","course","CourseDataService","DefaultThemeStorage","themeId","ThemeManager","storage","wpiClassic","wpiDark","wpiLight","highContrast","savedTheme","theme","oldTheme","newTheme","themeDefinition","event","root","key","value","str","preferredTheme","listener","themeJson","_TransactionalStorageManager","operations","transactionId","transaction","keysToBackup","operation","integrityCheck","rollbackSuccess","state","serializedState","schedule","schedules","existingIndex","s","serializedSchedules","scheduleId","schedulesResult","filtered","preferences","serializedPreferences","result","selectedCourses","serializedCourses","saved","exportData","dataString","data","verifyData","defaultValue","dataType","stored","keys","testKey","testValue","retrieved","hash","i","char","issues","stuckTransactions","tx","TransactionalStorageManager","ProfileStateManager","storageManager","sc","isRequired","source","selectedCourse","index","sectionObject","name","updates","scheduleIndex","deletedSchedule","nextSchedule","newName","originalSchedule","duplicatedSchedule","previousUnsavedState","preferencesResult","activeIdResult","loadedCourses","activeSchedule","coursesResult","defaultSchedule","exportResult","updateFn","activeScheduleIndex","type","eventsToProcess","_StorageService","profileStateManager","StorageService","ThemeSelector","availableThemes","currentThemeId","isActive","option","currentTheme","selectedThemeId","selectedOption","ScheduleSelector","scheduleManagementService","containerId","container","trigger","dropdown","newScheduleBtn","importBtn","exportBtn","e","menu","activeScheduleNameEl","scheduleList","activeScheduleId","emptyHTML","newHTML","courseCount","target","action","menuBtn","currentMenu","scheduleItem","btnRect","menuWidth","menuHeight","left","top","viewportWidth","viewportHeight","trimmedName","filename","input","file","reader","importResult","blob","url","a","nameElement","originalName","finishRename","loading","activeScheduleName","_DataValidator","options","courseValidation","hasSelectedSection","hasSelectedSectionNumber","deptValidation","timeRange","validDays","userState","scheduleValidation","preferencesValidation","scheduleIds","duplicateIds","id","allScheduleCourses","orphanedCourses","section","obj","field","expectedType","time","items","validator","item","itemResult","warning","DataValidator","_RetryManager","config","startTime","lastError","attempt","operationName","attemptStartTime","totalTime","callbackError","errorObj","delay","storageConfig","networkConfig","transactionConfig","failureCount","lastFailureTime","isCircuitOpen","failureThreshold","recoveryTimeout","now","maxConcurrency","stopOnFirstFailure","results","totalAttempts","successCount","chunkPromises","chunkIndex","chunkResults","checks","overallHealthy","check","jitterAmount","ms","resolve","timeoutMs","reject","timeoutId","RetryManager","_ProfileMigrationService","dataValidator","retryManager","currentVersion","fromVersion","toVersion","migrationId","backupResult","migrationPath","currentData","totalItemsChanged","step","migrationResult","validation","w","rollbackError","finalValidation","originalData","itemsChanged","migratedData","path","expectedVersion","version","backup","backupKey","backupData","expectedChecksum","logEntry","existingLog","log","logData","cleanedCount","cutoffTime","backupKeys","cloned","ProfileMigrationService","Validators","p","period","courseId","email","CourseSelectionService","migrationService","healthCheck","autoSave","validateBeforeAdd","saveResult","callback","stateHealth","issue","reconstructedCount","stateListener","repairedCount","ConflictType","ConflictDetector","conflicts","j","cacheKey","sectionConflicts","section1","section2","period1","period2","conflict","sharedDays","days1","days2","start1","end1","start2","end2","key1","key2","ModalService","modalElement","closeOnBackdrop","closeOnEscape","escapeHandler","DEPARTMENT_CATEGORIES","CATEGORY_ORDER","getDepartmentCategory","departmentAbbreviation","groupDepartmentsByCategory","categories","category","b","DepartmentController","departmentSyncService","deptId","d","contentHeader","departmentList","total","categoryName","multiSelect","allDepartmentsElement","clickedElement","sidebarHeader","CancellationToken","reason","CancellationError","message","CancellationTokenSource","OperationManager","operationId","tokenSource","existingOperation","DebouncedOperation","operationManager","token","ProgressiveRenderer","courses","renderFunction","cancellationToken","renderToken","totalBatches","firstBatch","start","end","batch","courseSelectionService","elementToCourseMap","isLoadMore","allHtml","renderedCourses","batchCourses","isFirstBatch","isComplete","indicator","batchHtml","isSelected","hasWarning","courseListContainer","loadMoreContainer","allElements","startIndex","element","loadingIndicator","credits","courseGridContainer","size","totalRendered","PerformanceMetrics","metadata","endTime","duration","metric","metrics","itemCount","batchSize","batchCount","resultCount","operationType","filteredMetrics","m","durations","count","report","thresholdMs","insights","renderReport","searchReport","currentBatchSize","avgDuration","CourseController","renderOptions","batchIndex","totalCount","optimalBatchSize","filterService","nextBatchStart","nextBatchEnd","nextBatch","currentView","coursesToRender","previousCount","newCourses","courseContainer","sortedCourses","selectedDepartment","baseCourses","filteredCourses","title","filterSummary","wasSelected","selectBtn","descriptionContainer","selectedCoursesContainer","countElement","deptCompare","button","existingButton","remainingCount","buttonText","loadMoreButton","_TimeUtils","totalMinutes","startMinutes","relativeMinutes","slot","startRow","endRow","hours12","startFormatted","endFormatted","dayAbbreviations","labels","hour","TimeUtils","isValidSection","isValidSelectedCourse","validateSelectedCourses","validCourses","invalidCourses","getValidSelectedSection","getComputedTerm","ScheduleController","sectionInfoModalController","conflictDetector","scheduleFilterService","scheduleFilterModalController","statePreserver","dropdownStates","filteredSections","hasActiveFilters","uniqueCourses","fs","sectionsByCourse","courseA","courseB","matchingSections","isExpanded","sectionsByTerm","term","filteredPeriods","selectedClass","typePriority","lower","periodTypeLabel","sortedPeriods","courseElements","removeButtons","courseItem","courseIndex","seenCourseIds","currentSelectedSection","selectedSection","itemCourse","validCourseItem","sectionButtons","sectionOptions","rawSelectedCourses","gridContainer","termCourses","coursesWithoutSections","hasCoursesWithoutSections","existingListener","weekdays","timeSlots","timeLabel","cell","timeSlot","occupyingSections","periodsOnThisDay","sectionOccupiesSlot","sectionStartSlot","sectionEndSlot","isFirstSlot","startSlot","endSlot","hasConflict","primarySection","courseColor","heightInPixels","content","classes","periodsByType","periodType","periodStrings","typeOrder","sortedTypes","indexA","indexB","timeRanges","colors","scheduleFilterButton","filterCount","clickListener","sectionBlock","SectionInfoModalController","modalService","backdrop","style","dialog","enrollmentStatus","waitlistInfo","meetingTimes","daysStr","location","InfoModalController","FilterModalController","searchInput","activeDepartments","f","checkbox","categoryDepartments","selectedInCategory","allSelected","someSelected","activeFiltersCount","currentQuery","checkboxesHtml","searchPlaceholder","activeFilter","minCredits","maxCredits","prof","terms","activeTerms","buildings","activeBuildings","building","clearButton","categoryToggle","checkboxes","cb","selectAll","selectNone","minInput","maxInput","quickBtns","btn","min","max","professors","matches","professor","chipsContainer","modalBody","filterType","label","mainSearchInput","lowerQuery","allFilterSections","departmentSection","newDepartmentFilter","freshModalElement","allAvailableDepartments","selectedDepartmentsInCategory","selectedCategories","currentProfessors","updatedProfessors","filterCountElement","text","div","ScheduleFilterModalController","closeBtn","activeFilters","filter","courseOptions","activeCourses","dayOptions","activeDays","professorOptions","activeProfessors","typeOptions","activeTypes","termOptions","filterId","availableOnlyCheckbox","minSeatsInput","avoidConflictsCheckbox","checkedCourses","checkedDays","checkedTypes","checkedTerms","availableOnly","minSeatsValue","minAvailable","criteria","activeAvailability","activeConflictDetection","activeFiltersList","sectionStatusSelect","requiredStatusSelect","selectedProfessorsChips","FilterState","displayValue","removed","existing","parsed","FilterService","searchService","searchTextFilter","serialized","CourseSelectionFilter","selectedIds","PeriodDaysFilter","excludedDays","PeriodProfessorFilter","selectedProfessors","professorName","selected","PeriodTypeFilter","selectedTypes","normalizedType","normalized","PeriodTermFilter","selectedTerms","normalizedTerm","PeriodAvailabilityFilter","parts","PeriodConflictFilter","selectedSections","tempSection","testSections","periodsWithContext","selectedSectionsByCourse","currentCourse","currentPeriod","otherCoursesSelectedSections","sectionsWithContext","currentSection","SectionCodeFilter","code","DepartmentFilter","departmentSet","AvailabilityFilter","CreditRangeFilter","ProfessorFilter","professorSet","TermFilter","termSet","SearchTextFilter","courseText","word","partial","createDefaultFilters","ScheduleFilterService","coursesToSearch","courseSelectionFilter","allPeriods","excludedDaysForPeriods","excludedTypesForPeriods","normalizedPeriodType","validSections","sectionMap","sectionKey","searchQuery","allSections","sectionCodeFilter","excludedDaysForSections","excludedTypesForSections","uniqueCourseIds","codes","searchCodes","searchCode","part","types","sectionCodes","termArray","SearchService","filters","indexedResults","periodStart","periodEnd","slotStart","slotEnd","timeOverlaps","dayOverlaps","scoreA","score","totalSeats","sum","departmentAbbr","keyword","keywords","k","timeKey","endMinutes","UIStateManager","view","viewListBtn","viewGridBtn","nextPage","page","scheduleButton","plannerPage","schedulePage","panelHeaders","sidebarHeight","contentHeight","panelHeights","header","maxHeight","headers","resizeObserver","TimestampManager","clientTimestampElement","formattedTime","serverTimestampElement","timestampData","serverDate","DepartmentSyncService","departmentController","filterModalController","currentDepartments","newDepartments","deptIds","allDeptItems","normalizedId","itemDeptId","textContent","visuallyActiveDepartments","missingVisual","extraVisual","ScheduleManagementService","includeCurrentCourses","copyFromSchedule","autoActivate","existingSchedules","sourceSchedule","updateResult","activateResult","existingSchedule","updatedSchedule","finalSchedule","force","scheduleToDelete","currentSelections","uniqueName","importedSchedule","baseName","existingNames","counter","candidateName","MainController","states","initialSelectedCourses","storageInitResult","initResult","schedule1","schedule2","targetId","courseElement","triggerElement","hasSection","idx","filterButton","scheduleSearchInput","saveProfileButton","hasFilters","coursesToDisplay","badge","currentCount","isCoursesAddedOrRemoved","currentCoursesMap","sectionSelectionsChanged","otherFilters","totalCourses","originalText","saveButton","success","hasUnsavedChanges"],"mappings":"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"}