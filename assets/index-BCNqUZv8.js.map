{"version":3,"file":"index-BCNqUZv8.js","sources":["../../src/types/types.ts","../../src/services/courseDataService.ts","../../src/themes/ThemeManager.ts","../../src/core/StorageManager.ts","../../src/ui/components/ThemeSelector.ts","../../src/core/CourseManager.ts","../../src/utils/validators.ts","../../src/services/CourseSelectionService.ts","../../src/types/schedule.ts","../../src/core/ConflictDetector.ts","../../src/services/ModalService.ts","../../src/ui/controllers/DepartmentController.ts","../../src/utils/RequestCancellation.ts","../../src/ui/utils/ProgressiveRenderer.ts","../../src/utils/PerformanceMetrics.ts","../../src/ui/controllers/CourseController.ts","../../src/ui/utils/timeUtils.ts","../../src/ui/controllers/ScheduleController.ts","../../src/ui/controllers/SectionInfoModalController.ts","../../src/ui/controllers/InfoModalController.ts","../../src/ui/controllers/FilterModalController.ts","../../src/core/FilterState.ts","../../src/services/FilterService.ts","../../src/services/searchService.ts","../../src/core/filters/DepartmentFilter.ts","../../src/core/filters/AvailabilityFilter.ts","../../src/core/filters/CreditRangeFilter.ts","../../src/core/filters/ProfessorFilter.ts","../../src/core/filters/TermFilter.ts","../../src/core/filters/LocationFilter.ts","../../src/core/filters/SearchTextFilter.ts","../../src/core/filters/index.ts","../../src/ui/controllers/UIStateManager.ts","../../src/ui/controllers/TimestampManager.ts","../../src/services/DepartmentSyncService.ts","../../src/ui/controllers/MainController.ts","../../src/main.ts"],"sourcesContent":["export interface Course {\n    id: string;\n    number: string;\n    name: string;\n    description: string;\n    department: Department;\n    sections: Section[];\n    minCredits: number;\n    maxCredits: number;\n}\n\nexport interface Department {\n    abbreviation: string;\n    name: string;\n    courses: Course[];\n}\n\nexport interface Section {\n    crn: number;\n    number: string;\n    seats: number;\n    seatsAvailable: number;\n    actualWaitlist: number;\n    maxWaitlist: number;\n    note?: string;\n    description: string;\n    term: string;\n    periods: Period[];\n}\n\nexport interface Period {\n    type: string;\n    professor: string;\n    professorEmail?: string;\n    startTime: Time;\n    endTime: Time;\n    location: string;\n    building: string;\n    room: string;\n    seats: number;\n    seatsAvailable: number;\n    actualWaitlist: number;\n    maxWaitlist: number;\n    days: Set<DayOfWeek>;\n    specificSection?: string;\n}\n\nexport interface Time {\n    hours: number;\n    minutes: number;\n    displayTime: string;\n}\n\nexport enum DayOfWeek {\n    MONDAY = 'mon',\n    TUESDAY = 'tue',\n    WEDNESDAY = 'wed',\n    THURSDAY = 'thu',\n    FRIDAY = 'fri',\n    SATURDAY = 'sat',\n    SUNDAY = 'sun'\n}\n\nexport interface ScheduleDB {\n    departments: Department[];\n    generated: string;\n}\n\nexport interface PlannerState {\n    courses: Course[];\n    selectedYear: number;\n    searchTerm: string;\n    activeFilters: string[];\n    plan: {\n        [year: number]: {\n            fall: Course[];\n            spring: Course[];\n            summer: Course[];\n        };\n    };\n}\n\nexport type Semester = 'fall' | 'spring' | 'summer';","import { ScheduleDB, Department, Course, Section, Period, Time, DayOfWeek } from '../types/types'\n\nexport class CourseDataService {\n    private static readonly WPI_COURSE_DATA_URL = './course-data-constructed.json';\n    private static readonly LOCAL_STORAGE_KEY = 'wpi-course-data';\n    private static readonly CACHE_EXPIRY_HOURS = 1;\n\n    private scheduleDB: ScheduleDB | null = null;\n\n    constructor() {}\n\n    async loadCourseData(): Promise<ScheduleDB> {\n        try {\n            console.log('Loading course data...');\n            const freshData = await this.fetchFreshData();\n            this.scheduleDB = freshData;\n            return freshData;\n        } catch (error) {\n            console.error('Failed to load course data:', error);\n            throw new Error('No course data available');\n        }\n    }\n\n    private async fetchFreshData(): Promise<ScheduleDB> {\n        console.log('Fetching course data from local static file...');\n        \n        const response = await fetch(CourseDataService.WPI_COURSE_DATA_URL, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n            },\n            cache: 'no-cache'\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to fetch course data: ${response.status} ${response.statusText}`);\n        }\n\n        const jsonData = await response.json();\n        return this.parseJSONData(jsonData);\n    }\n\n    private parseJSONData(jsonData: any): ScheduleDB {\n        console.log('Parsing constructed JSON data...');\n        \n        if (!jsonData.departments || !Array.isArray(jsonData.departments)) {\n            console.error('Invalid JSON data structure:', jsonData);\n            throw new Error('Invalid JSON data structure - missing departments array');\n        }\n\n        console.log(`Processing ${jsonData.departments.length} departments...`);\n        \n        const scheduleDB: ScheduleDB = {\n            departments: this.parseConstructedDepartments(jsonData.departments),\n            generated: jsonData.generated || new Date().toISOString()\n        };\n        \n        console.log(`Loaded ${scheduleDB.departments.length} departments with course data`);\n        \n        // Log sections for MA1024 specifically\n        this.logMA1024Sections(scheduleDB);\n        \n        return scheduleDB;\n    }\n\n    private parseConstructedDepartments(departments: any[]): Department[] {\n        return departments.map(deptData => {\n            const department: Department = {\n                abbreviation: deptData.abbreviation,\n                name: deptData.name,\n                courses: []\n            };\n            \n            department.courses = deptData.courses.map((courseData: any) => {\n                const course: Course = {\n                    id: courseData.id,\n                    number: courseData.number,\n                    name: courseData.name,\n                    description: this.stripHtml(courseData.description || ''),\n                    department: department,\n                    sections: this.parseConstructedSections(courseData.sections || []),\n                    minCredits: courseData.min_credits || 0,\n                    maxCredits: courseData.max_credits || 0\n                };\n                return course;\n            });\n            \n            return department;\n        });\n    }\n\n    private parseConstructedSections(sections: any[]): Section[] {\n        return sections.map(sectionData => {\n            const section: Section = {\n                crn: sectionData.crn || 0,\n                number: sectionData.number || '',\n                seats: sectionData.seats || 0,\n                seatsAvailable: sectionData.seats_available || 0,\n                actualWaitlist: sectionData.actual_waitlist || 0,\n                maxWaitlist: sectionData.max_waitlist || 0,\n                note: sectionData.note,\n                description: this.stripHtml(sectionData.description || ''),\n                term: sectionData.term || '',\n                periods: this.parseConstructedPeriods(sectionData.periods || [])\n            };\n            return section;\n        });\n    }\n    \n    private parseConstructedPeriods(periods: any[]): Period[] {\n        return periods.map(periodData => {\n            const period: Period = {\n                type: periodData.type || 'Lecture',\n                professor: periodData.professor || '',\n                professorEmail: undefined,\n                startTime: this.parseConstructedTime(periodData.start_time),\n                endTime: this.parseConstructedTime(periodData.end_time),\n                location: periodData.location || '',\n                building: periodData.building || '',\n                room: periodData.room || '',\n                seats: periodData.seats || 0,\n                seatsAvailable: periodData.seats_available || 0,\n                actualWaitlist: periodData.actual_waitlist || 0,\n                maxWaitlist: periodData.max_waitlist || 0,\n                days: this.parseConstructedDays(periodData.days || []),\n                specificSection: periodData.specific_section\n            };\n            return period;\n        });\n    }\n    \n    private parseConstructedTime(timeStr: string): Time {\n        if (!timeStr || timeStr === 'TBA') {\n            return { hours: 0, minutes: 0, displayTime: 'TBD' };\n        }\n        \n        // Parse \"HH:MM\" format from constructed data\n        const match = timeStr.match(/(\\d{1,2}):(\\d{2})/);\n        if (!match) {\n            return { hours: 0, minutes: 0, displayTime: timeStr };\n        }\n        \n        const hours = parseInt(match[1]);\n        const minutes = parseInt(match[2]);\n        \n        // Convert to display format\n        const displayHours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;\n        const ampm = hours >= 12 ? 'PM' : 'AM';\n        const displayTime = `${displayHours}:${minutes.toString().padStart(2, '0')} ${ampm}`;\n        \n        return { hours, minutes, displayTime };\n    }\n    \n    private parseConstructedDays(days: string[]): Set<DayOfWeek> {\n        const daySet = new Set<DayOfWeek>();\n        \n        for (const day of days) {\n            switch (day.toLowerCase()) {\n                case 'mon': daySet.add(DayOfWeek.MONDAY); break;\n                case 'tue': daySet.add(DayOfWeek.TUESDAY); break;\n                case 'wed': daySet.add(DayOfWeek.WEDNESDAY); break;\n                case 'thu': daySet.add(DayOfWeek.THURSDAY); break;\n                case 'fri': daySet.add(DayOfWeek.FRIDAY); break;\n                case 'sat': daySet.add(DayOfWeek.SATURDAY); break;\n                case 'sun': daySet.add(DayOfWeek.SUNDAY); break;\n            }\n        }\n        \n        return daySet;\n    }\n\n    private logMA1024Sections(scheduleDB: ScheduleDB): void {\n        const maDept = scheduleDB.departments.find(dept => dept.abbreviation === 'MA');\n        if (!maDept) {\n            console.log('MA department not found');\n            return;\n        }\n        \n        const ma1024 = maDept.courses.find(course => course.number === '1024');\n        if (!ma1024) {\n            console.log('MA1024 course not found');\n            return;\n        }\n        \n        console.log(`\\n=== MA1024 SECTIONS (${ma1024.sections.length} total) ===`);\n        ma1024.sections.forEach(section => {\n            console.log(`Section ${section.number}:`);\n            console.log(`  Term: ${section.term}`);\n            console.log(`  Enrollment: ${section.seatsAvailable}/${section.seats} available`);\n            console.log(`  Periods (${section.periods.length}):`);\n            section.periods.forEach((period, idx) => {\n                const days = Array.from(period.days).join(', ');\n                console.log(`    ${idx + 1}. ${period.type} - ${days} ${period.startTime.displayTime}-${period.endTime.displayTime} (${period.professor})`);\n            });\n            console.log('');\n        });\n    }\n\n\n\n    private stripHtml(html: string): string {\n        return html.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, ' ').trim();\n    }\n\n\n\n    private getCachedData(): ScheduleDB | null {\n        try {\n            const cached = localStorage.getItem(CourseDataService.LOCAL_STORAGE_KEY);\n            if (!cached) return null;\n\n            const parsedData = JSON.parse(cached);\n            return parsedData.scheduleDB;\n        } catch (error) {\n            console.warn('Failed to parse cached course data:', error);\n            return null;\n        }\n    }\n\n    private cacheData(scheduleDB: ScheduleDB): void {\n        try {\n            const cacheData = {\n                scheduleDB,\n                timestamp: Date.now()\n            };\n            localStorage.setItem(CourseDataService.LOCAL_STORAGE_KEY, JSON.stringify(cacheData));\n            console.log('Course data cached successfully');\n        } catch (error) {\n            console.warn('Failed to cache course data:', error);\n        }\n    }\n\n    private isCacheExpired(): boolean {\n        try {\n            const cached = localStorage.getItem(CourseDataService.LOCAL_STORAGE_KEY);\n            if (!cached) return true;\n\n            const parsedData = JSON.parse(cached);\n            const cacheAge = Date.now() - parsedData.timestamp;\n            const maxAge = CourseDataService.CACHE_EXPIRY_HOURS * 60 * 60 * 1000;\n            \n            return cacheAge > maxAge;\n        } catch (error) {\n            return true;\n        }\n    }\n\n    getScheduleDB(): ScheduleDB | null {\n        return this.scheduleDB;\n    }\n\n    searchCourses(query: string, departments?: string[]): Course[] {\n        if (!this.scheduleDB) return [];\n\n        const allCourses: Course[] = [];\n        \n        for (const dept of this.scheduleDB.departments) {\n            if (departments && departments.length > 0 && !departments.includes(dept.abbreviation.toLowerCase())) {\n                continue;\n            }\n            allCourses.push(...dept.courses);\n        }\n\n        if (!query.trim()) {\n            return allCourses;\n        }\n\n        const queryLower = query.toLowerCase();\n        return allCourses.filter(course => \n            course.name.toLowerCase().includes(queryLower) ||\n            course.number.toLowerCase().includes(queryLower) ||\n            course.id.toLowerCase().includes(queryLower) ||\n            course.department.abbreviation.toLowerCase().includes(queryLower)\n        );\n    }\n\n    getAllDepartments(): Department[] {\n        return this.scheduleDB?.departments || [];\n    }\n\n}","import { ThemeDefinition, ThemeId, ThemeChangeEvent, ThemeChangeListener } from './types'\n\n// Import theme definitions\nimport wpiClassic from './definitions/wpi-classic.json'\nimport wpiDark from './definitions/wpi-dark.json'\nimport wpiLight from './definitions/wpi-light.json'\nimport highContrast from './definitions/high-contrast.json'\n\nexport class ThemeManager {\n    private static instance: ThemeManager;\n    private currentTheme: ThemeId = 'wpi-classic';\n    private themes: Map<ThemeId, ThemeDefinition> = new Map();\n    private listeners: Set<ThemeChangeListener> = new Set();\n    private readonly storageKey = 'wpi-planner-theme';\n\n    private constructor() {\n        this.initializeThemes();\n        this.loadSavedTheme();\n    }\n\n    static getInstance(): ThemeManager {\n        if (!ThemeManager.instance) {\n            ThemeManager.instance = new ThemeManager();\n        }\n        return ThemeManager.instance;\n    }\n\n    private initializeThemes(): void {\n        // Register built-in themes\n        this.registerTheme(wpiClassic as ThemeDefinition);\n        this.registerTheme(wpiDark as ThemeDefinition);\n        this.registerTheme(wpiLight as ThemeDefinition);\n        this.registerTheme(highContrast as ThemeDefinition);\n    }\n\n    private loadSavedTheme(): void {\n        try {\n            const savedTheme = localStorage.getItem(this.storageKey);\n            if (savedTheme && this.themes.has(savedTheme)) {\n                this.currentTheme = savedTheme;\n            }\n        } catch (error) {\n            console.warn('Failed to load saved theme preference:', error);\n        }\n        \n        // Apply the current theme\n        this.applyTheme(this.currentTheme);\n    }\n\n    registerTheme(theme: ThemeDefinition): void {\n        if (!this.isValidTheme(theme)) {\n            console.error('Invalid theme definition:', theme);\n            return;\n        }\n        \n        this.themes.set(theme.id, theme);\n    }\n\n    private isValidTheme(theme: any): theme is ThemeDefinition {\n        return theme &&\n            typeof theme.name === 'string' &&\n            typeof theme.id === 'string' &&\n            typeof theme.description === 'string' &&\n            theme.colors &&\n            theme.typography &&\n            theme.spacing &&\n            theme.effects;\n    }\n\n    getAvailableThemes(): ThemeDefinition[] {\n        return Array.from(this.themes.values());\n    }\n\n    getCurrentTheme(): ThemeDefinition | null {\n        return this.themes.get(this.currentTheme) || null;\n    }\n\n    getCurrentThemeId(): ThemeId {\n        return this.currentTheme;\n    }\n\n    setTheme(themeId: ThemeId): boolean {\n        if (!this.themes.has(themeId)) {\n            console.error(`Theme '${themeId}' not found`);\n            return false;\n        }\n\n        const oldTheme = this.currentTheme;\n        const newTheme = themeId;\n        const themeDefinition = this.themes.get(themeId)!;\n\n        this.currentTheme = themeId;\n        this.applyTheme(themeId);\n        this.saveThemePreference(themeId);\n\n        // Notify listeners\n        const event: ThemeChangeEvent = {\n            oldTheme,\n            newTheme,\n            themeDefinition\n        };\n        this.notifyListeners(event);\n\n        return true;\n    }\n\n    private applyTheme(themeId: ThemeId): void {\n        const theme = this.themes.get(themeId);\n        if (!theme) return;\n\n        const root = document.documentElement;\n\n        // Apply color variables\n        Object.entries(theme.colors).forEach(([key, value]) => {\n            root.style.setProperty(`--color-${this.kebabCase(key)}`, value);\n        });\n\n        // Apply typography variables\n        Object.entries(theme.typography).forEach(([key, value]) => {\n            root.style.setProperty(`--font-${this.kebabCase(key)}`, value);\n        });\n\n        // Apply spacing variables\n        Object.entries(theme.spacing).forEach(([key, value]) => {\n            root.style.setProperty(`--spacing-${this.kebabCase(key)}`, value);\n        });\n\n        // Apply effect variables\n        Object.entries(theme.effects).forEach(([key, value]) => {\n            root.style.setProperty(`--effect-${this.kebabCase(key)}`, value);\n        });\n\n        // Add theme class to body for theme-specific styling\n        document.body.className = document.body.className\n            .replace(/theme-[\\w-]+/g, '')\n            .trim();\n        document.body.classList.add(`theme-${themeId}`);\n    }\n\n    private kebabCase(str: string): string {\n        return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    }\n\n    private saveThemePreference(themeId: ThemeId): void {\n        try {\n            localStorage.setItem(this.storageKey, themeId);\n        } catch (error) {\n            console.warn('Failed to save theme preference:', error);\n        }\n    }\n\n    // System preference detection\n    detectSystemPreference(): ThemeId {\n        if (typeof window !== 'undefined' && window.matchMedia) {\n            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                return 'wpi-dark';\n            }\n            if (window.matchMedia('(prefers-contrast: high)').matches) {\n                return 'high-contrast';\n            }\n        }\n        return 'wpi-classic';\n    }\n\n    useSystemPreference(): boolean {\n        const preferredTheme = this.detectSystemPreference();\n        return this.setTheme(preferredTheme);\n    }\n\n    // Event listeners\n    onThemeChange(listener: ThemeChangeListener): void {\n        this.listeners.add(listener);\n    }\n\n    offThemeChange(listener: ThemeChangeListener): void {\n        this.listeners.delete(listener);\n    }\n\n    private notifyListeners(event: ThemeChangeEvent): void {\n        this.listeners.forEach(listener => {\n            try {\n                listener(event);\n            } catch (error) {\n                console.error('Error in theme change listener:', error);\n            }\n        });\n    }\n\n    // Theme preview (temporary application without saving)\n    previewTheme(themeId: ThemeId): boolean {\n        if (!this.themes.has(themeId)) return false;\n        this.applyTheme(themeId);\n        return true;\n    }\n\n    // Reset to current theme (cancel preview)\n    resetToCurrentTheme(): void {\n        this.applyTheme(this.currentTheme);\n    }\n\n    // Export/Import functionality\n    exportCurrentTheme(): string {\n        const theme = this.getCurrentTheme();\n        if (!theme) throw new Error('No current theme to export');\n        return JSON.stringify(theme, null, 2);\n    }\n\n    importTheme(themeJson: string): boolean {\n        try {\n            const theme = JSON.parse(themeJson);\n            if (this.isValidTheme(theme)) {\n                this.registerTheme(theme);\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error('Failed to import theme:', error);\n            return false;\n        }\n    }\n\n    // Theme utilities\n    getThemeById(themeId: ThemeId): ThemeDefinition | null {\n        return this.themes.get(themeId) || null;\n    }\n\n    hasTheme(themeId: ThemeId): boolean {\n        return this.themes.has(themeId);\n    }\n\n    removeTheme(themeId: ThemeId): boolean {\n        // Don't allow removal of built-in themes\n        const builtInThemes = ['wpi-classic', 'wpi-dark', 'wpi-light', 'high-contrast'];\n        if (builtInThemes.includes(themeId)) {\n            console.warn(`Cannot remove built-in theme: ${themeId}`);\n            return false;\n        }\n\n        if (this.currentTheme === themeId) {\n            this.setTheme('wpi-classic'); // Fallback to default\n        }\n\n        return this.themes.delete(themeId);\n    }\n}","import { Schedule, UserScheduleState, SchedulePreferences, SelectedCourse } from '../types/schedule'\n\nexport class StorageManager {\n    private static readonly STORAGE_KEYS = {\n        USER_STATE: 'wpi-planner-user-state',\n        PREFERENCES: 'wpi-planner-preferences',\n        SCHEDULES: 'wpi-planner-schedules',\n        SELECTED_COURSES: 'wpi-planner-selected-courses',\n        THEME: 'wpi-planner-theme'\n    };\n\n    saveUserState(state: UserScheduleState): void {\n        this.handleStorageOperation(\n            () => {\n                const serializedState = JSON.stringify(state, this.replacer);\n                localStorage.setItem(StorageManager.STORAGE_KEYS.USER_STATE, serializedState);\n            },\n            'Failed to save user state'\n        );\n    }\n\n    loadUserState(): UserScheduleState | null {\n        return this.handleStorageOperation(\n            () => {\n                const stored = localStorage.getItem(StorageManager.STORAGE_KEYS.USER_STATE);\n                if (!stored) return null;\n                return JSON.parse(stored, this.reviver);\n            },\n            'Failed to load user state',\n            null\n        );\n    }\n\n    saveSchedule(schedule: Schedule): void {\n        this.handleStorageOperation(\n            () => {\n                const schedules = this.loadAllSchedules();\n                const existingIndex = schedules.findIndex(s => s.id === schedule.id);\n                \n                if (existingIndex >= 0) {\n                    schedules[existingIndex] = schedule;\n                } else {\n                    schedules.push(schedule);\n                }\n                \n                const serializedSchedules = JSON.stringify(schedules, this.replacer);\n                localStorage.setItem(StorageManager.STORAGE_KEYS.SCHEDULES, serializedSchedules);\n            },\n            'Failed to save schedule'\n        );\n    }\n\n    loadSchedule(scheduleId: string): Schedule | null {\n        try {\n            const schedules = this.loadAllSchedules();\n            return schedules.find(s => s.id === scheduleId) || null;\n        } catch (error) {\n            console.warn('Failed to load schedule:', error);\n            return null;\n        }\n    }\n\n    loadAllSchedules(): Schedule[] {\n        return this.handleStorageOperation(\n            () => {\n                const stored = localStorage.getItem(StorageManager.STORAGE_KEYS.SCHEDULES);\n                if (!stored) return [];\n                return JSON.parse(stored, this.reviver);\n            },\n            'Failed to load schedules',\n            []\n        );\n    }\n\n    deleteSchedule(scheduleId: string): void {\n        try {\n            const schedules = this.loadAllSchedules();\n            const filtered = schedules.filter(s => s.id !== scheduleId);\n            localStorage.setItem(StorageManager.STORAGE_KEYS.SCHEDULES, JSON.stringify(filtered));\n        } catch (error) {\n            console.warn('Failed to delete schedule:', error);\n        }\n    }\n\n    savePreferences(preferences: SchedulePreferences): void {\n        this.handleStorageOperation(\n            () => {\n                const serializedPreferences = JSON.stringify(preferences, this.replacer);\n                localStorage.setItem(StorageManager.STORAGE_KEYS.PREFERENCES, serializedPreferences);\n            },\n            'Failed to save preferences'\n        );\n    }\n\n    loadPreferences(): SchedulePreferences | null {\n        return this.handleStorageOperation(\n            () => {\n                const stored = localStorage.getItem(StorageManager.STORAGE_KEYS.PREFERENCES);\n                if (!stored) return this.getDefaultPreferences();\n                return JSON.parse(stored, this.reviver);\n            },\n            'Failed to load preferences',\n            this.getDefaultPreferences()\n        );\n    }\n\n    private getDefaultPreferences(): SchedulePreferences {\n        return {\n            preferredTimeRange: {\n                startTime: { hours: 8, minutes: 0 },\n                endTime: { hours: 18, minutes: 0 }\n            },\n            preferredDays: new Set(['mon', 'tue', 'wed', 'thu', 'fri']),\n            avoidBackToBackClasses: false,\n            theme: 'wpi-classic'\n        };\n    }\n\n    clearAllData(): void {\n        try {\n            Object.values(StorageManager.STORAGE_KEYS).forEach(key => {\n                localStorage.removeItem(key);\n            });\n        } catch (error) {\n            console.warn('Failed to clear storage:', error);\n        }\n    }\n\n    exportData(): string {\n        const state = this.loadUserState();\n        const schedules = this.loadAllSchedules();\n        const preferences = this.loadPreferences();\n\n        const exportData = {\n            version: '1.0',\n            timestamp: new Date().toISOString(),\n            state,\n            schedules,\n            preferences\n        };\n\n        return JSON.stringify(exportData, null, 2);\n    }\n\n    importData(jsonData: string): boolean {\n        try {\n            const data = JSON.parse(jsonData);\n            \n            if (data.state) this.saveUserState(data.state);\n            if (data.preferences) this.savePreferences(data.preferences);\n            if (data.schedules) {\n                data.schedules.forEach((schedule: Schedule) => {\n                    this.saveSchedule(schedule);\n                });\n            }\n            \n            return true;\n        } catch (error) {\n            console.error('Failed to import data:', error);\n            return false;\n        }\n    }\n\n    private handleStorageOperation<T>(\n        operation: () => T,\n        errorMessage: string,\n        fallback?: T\n    ): T | undefined {\n        try {\n            return operation();\n        } catch (error) {\n            console.warn(`${errorMessage}:`, error);\n            return fallback;\n        }\n    }\n\n    private readonly replacer = (key: string, value: any): any => {\n        if (value instanceof Set) {\n            return { __type: 'Set', value: [...value] };\n        }\n\n        if (key === 'department' && value && value.courses) {\n            return {\n                abbreviation: value.abbreviation,\n                name: value.name\n                // Exclude courses array to prevent circular reference\n            };\n        }\n\n        // For SelectedCourse serialization, exclude the Section object to prevent circular references\n        // but keep the selectedSectionNumber for reconstruction\n        if (key === 'selectedSection' && value && typeof value === 'object' && value.number) {\n            return undefined; // Don't serialize the full Section object\n        }\n\n        return value;\n    };\n\n    private readonly reviver = (key: string, value: any): any => {\n        if (typeof value === 'object' && value !== null && value.__type === 'Set') {\n            return new Set(value.value);\n        }\n        return value;\n    };\n\n    saveThemePreference(themeId: string): void {\n        try {\n            localStorage.setItem(StorageManager.STORAGE_KEYS.THEME, themeId);\n        } catch (error) {\n            console.warn('Failed to save theme preference:', error);\n        }\n    }\n\n    loadThemePreference(): string {\n        try {\n            const savedTheme = localStorage.getItem(StorageManager.STORAGE_KEYS.THEME);\n            return savedTheme || 'wpi-classic';\n        } catch (error) {\n            console.warn('Failed to load theme preference:', error);\n            return 'wpi-classic';\n        }\n    }\n\n    saveSelectedCourses(selectedCourses: SelectedCourse[]): void {\n        this.handleStorageOperation(\n            () => {\n                const serializedCourses = JSON.stringify(selectedCourses, this.replacer);\n                localStorage.setItem(StorageManager.STORAGE_KEYS.SELECTED_COURSES, serializedCourses);\n            },\n            'Failed to save selected courses'\n        );\n    }\n\n    loadSelectedCourses(): SelectedCourse[] {\n        return this.handleStorageOperation(\n            () => {\n                const stored = localStorage.getItem(StorageManager.STORAGE_KEYS.SELECTED_COURSES);\n                if (!stored) return [];\n                return JSON.parse(stored, this.reviver);\n            },\n            'Failed to load selected courses',\n            []\n        );\n    }\n\n    clearSelectedCourses(): void {\n        try {\n            localStorage.removeItem(StorageManager.STORAGE_KEYS.SELECTED_COURSES);\n        } catch (error) {\n            console.warn('Failed to clear selected courses:', error);\n        }\n    }\n}","import { ThemeManager } from '../../themes/ThemeManager'\nimport { StorageManager } from '../../core/StorageManager'\n\nexport class ThemeSelector {\n    private themeManager: ThemeManager;\n    private storageManager: StorageManager;\n    private dropdownElement: HTMLElement | null = null;\n    private optionsElement: HTMLElement | null = null;\n    private currentThemeNameElement: HTMLElement | null = null;\n    private isOpen: boolean = false;\n\n    constructor() {\n        this.themeManager = ThemeManager.getInstance();\n        this.storageManager = new StorageManager();\n        this.init();\n    }\n\n    private init(): void {\n        this.setupElements();\n        this.loadSavedTheme();\n        this.setupEventListeners();\n        this.renderThemeOptions();\n    }\n\n    private setupElements(): void {\n        this.dropdownElement = document.getElementById('theme-dropdown');\n        this.optionsElement = document.getElementById('theme-options');\n        this.currentThemeNameElement = document.getElementById('current-theme-name');\n    }\n\n    private loadSavedTheme(): void {\n        const savedTheme = this.storageManager.loadThemePreference();\n        this.themeManager.setTheme(savedTheme);\n        this.updateCurrentThemeDisplay();\n    }\n\n    private setupEventListeners(): void {\n        if (!this.dropdownElement || !this.optionsElement) return;\n\n        // Toggle dropdown\n        this.dropdownElement.addEventListener('click', (e) => {\n            e.stopPropagation();\n            this.toggleDropdown();\n        });\n\n        // Close dropdown when clicking outside\n        document.addEventListener('click', () => {\n            this.closeDropdown();\n        });\n\n        // Prevent closing when clicking inside options\n        this.optionsElement.addEventListener('click', (e) => {\n            e.stopPropagation();\n        });\n    }\n\n    private toggleDropdown(): void {\n        if (this.isOpen) {\n            this.closeDropdown();\n        } else {\n            this.openDropdown();\n        }\n    }\n\n    private openDropdown(): void {\n        if (!this.dropdownElement || !this.optionsElement) return;\n        \n        this.isOpen = true;\n        this.dropdownElement.classList.add('open');\n        this.optionsElement.classList.add('show');\n    }\n\n    private closeDropdown(): void {\n        if (!this.dropdownElement || !this.optionsElement) return;\n        \n        this.isOpen = false;\n        this.dropdownElement.classList.remove('open');\n        this.optionsElement.classList.remove('show');\n    }\n\n    private renderThemeOptions(): void {\n        if (!this.optionsElement) return;\n\n        const availableThemes = this.themeManager.getAvailableThemes();\n        const currentThemeId = this.themeManager.getCurrentThemeId();\n\n        let html = '';\n        availableThemes.forEach(theme => {\n            const isActive = theme.id === currentThemeId;\n            html += `\n                <div class=\"theme-option ${isActive ? 'active' : ''}\" data-theme-id=\"${theme.id}\">\n                    <div class=\"theme-option-name\">${theme.name}</div>\n                    <div class=\"theme-option-description\">${theme.description}</div>\n                </div>\n            `;\n        });\n\n        this.optionsElement.innerHTML = html;\n\n        // Add click listeners to theme options\n        this.optionsElement.querySelectorAll('.theme-option').forEach(option => {\n            option.addEventListener('click', () => {\n                const themeId = (option as HTMLElement).dataset.themeId;\n                if (themeId) {\n                    this.selectTheme(themeId);\n                }\n            });\n        });\n    }\n\n    private selectTheme(themeId: string): void {\n        // Apply theme\n        const success = this.themeManager.setTheme(themeId);\n        if (!success) return;\n\n        // Save to storage\n        this.storageManager.saveThemePreference(themeId);\n\n        // Update UI\n        this.updateCurrentThemeDisplay();\n        this.updateActiveOption(themeId);\n        this.closeDropdown();\n    }\n\n    private updateCurrentThemeDisplay(): void {\n        if (!this.currentThemeNameElement) return;\n\n        const currentTheme = this.themeManager.getCurrentTheme();\n        if (currentTheme) {\n            this.currentThemeNameElement.textContent = currentTheme.name;\n        }\n    }\n\n    private updateActiveOption(selectedThemeId: string): void {\n        if (!this.optionsElement) return;\n\n        // Remove active class from all options\n        this.optionsElement.querySelectorAll('.theme-option').forEach(option => {\n            option.classList.remove('active');\n        });\n\n        // Add active class to selected option\n        const selectedOption = this.optionsElement.querySelector(`[data-theme-id=\"${selectedThemeId}\"]`);\n        if (selectedOption) {\n            selectedOption.classList.add('active');\n        }\n    }\n\n    // Public method to refresh theme options (useful if themes are added dynamically)\n    public refresh(): void {\n        this.renderThemeOptions();\n        this.updateCurrentThemeDisplay();\n    }\n\n    // Public method to programmatically select a theme\n    public setTheme(themeId: string): void {\n        this.selectTheme(themeId);\n    }\n}","import { Course, Section, Department } from '../types/types'\nimport { SelectedCourse, Schedule } from '../types/schedule'\n\nexport class CourseManager {\n    private selectedCourses: Map<Course, SelectedCourse> = new Map();\n    private listeners: Set<(courses: SelectedCourse[]) => void> = new Set();\n    private allSections: Set<Section> = new Set();\n    private allDepartments: Department[] = [];\n\n    addCourse(course: Course, isRequired: boolean = false): void {\n        const selectedCourse: SelectedCourse = {\n            course,\n            selectedSection: null,\n            selectedSectionNumber: null,\n            isRequired\n        };\n        \n        this.selectedCourses.set(course, selectedCourse);\n        this.notifyListeners();\n    }\n\n    removeCourse(course: Course): void {\n        this.selectedCourses.delete(course);\n        this.notifyListeners();\n    }\n\n\n    getSelectedCourses(): SelectedCourse[] {\n        return Array.from(this.selectedCourses.values());\n    }\n\n    getSelectedCourse(course: Course): SelectedCourse | undefined {\n        return this.selectedCourses.get(course);\n    }\n\n    isSelected(course: Course): boolean {\n        return this.selectedCourses.has(course);\n    }\n\n    getAvailableSections(course: Course): Section[] {\n        const selectedCourse = this.selectedCourses.get(course);\n        if (!this.validateCourseExists(course, selectedCourse)) return [];\n\n        return selectedCourse!.course.sections;\n    }\n\n    clearAll(): void {\n        this.selectedCourses.clear();\n        this.notifyListeners();\n    }\n\n    onSelectionChange(listener: (courses: SelectedCourse[]) => void): void {\n        this.listeners.add(listener);\n    }\n\n    offSelectionChange(listener: (courses: SelectedCourse[]) => void): void {\n        this.listeners.delete(listener);\n    }\n\n    setSelectedSection(course: Course, sectionNumber: string | null): void {\n        const selectedCourse = this.selectedCourses.get(course);\n        if (!this.validateCourseExists(course, selectedCourse)) return;\n\n        // Find the actual Section object\n        const sectionObject = sectionNumber ? \n            course.sections.find(s => s.number === sectionNumber) || null : \n            null;\n\n        selectedCourse!.selectedSection = sectionObject;\n        selectedCourse!.selectedSectionNumber = sectionNumber;\n        this.notifyListeners();\n    }\n\n    getSelectedSection(course: Course): string | null {\n        const selectedCourse = this.selectedCourses.get(course);\n        return selectedCourse?.selectedSectionNumber || null;\n    }\n\n    getSelectedSectionObject(course: Course): Section | null {\n        const selectedCourse = this.selectedCourses.get(course);\n        return selectedCourse?.selectedSection || null;\n    }\n\n\n    loadSelectedCourses(selectedCourses: SelectedCourse[]): void {\n        this.selectedCourses.clear();\n        selectedCourses.forEach(selectedCourse => {\n            // Handle backward compatibility: if old format only has selectedSection as string\n            if (selectedCourse.selectedSection && typeof selectedCourse.selectedSection === 'string') {\n                const sectionNumber = selectedCourse.selectedSection as any as string;\n                const sectionObject = selectedCourse.course.sections.find(s => s.number === sectionNumber) || null;\n                \n                selectedCourse.selectedSection = sectionObject;\n                selectedCourse.selectedSectionNumber = sectionNumber;\n            }\n            // Ensure selectedSectionNumber is set if we have a Section object but no string\n            else if (selectedCourse.selectedSection && !selectedCourse.selectedSectionNumber) {\n                selectedCourse.selectedSectionNumber = selectedCourse.selectedSection.number;\n            }\n            \n            this.selectedCourses.set(selectedCourse.course, selectedCourse);\n        });\n        this.notifyListeners();\n    }\n\n    private validateCourseExists(course: Course, selectedCourse?: SelectedCourse): selectedCourse is SelectedCourse {\n        if (!selectedCourse) {\n            console.warn(`Course ${course.id} not found in selected courses`);\n            return false;\n        }\n        return true;\n    }\n\n    private notifyListeners(): void {\n        const courses = this.getSelectedCourses();\n        this.listeners.forEach(listener => listener(courses));\n    }\n\n    // Section storage and access methods\n    setAllDepartments(departments: Department[]): void {\n        this.allDepartments = departments;\n        this.populateAllSections();\n    }\n\n    private populateAllSections(): void {\n        this.allSections.clear();\n        \n        for (const department of this.allDepartments) {\n            for (const course of department.courses) {\n                for (const section of course.sections) {\n                    this.allSections.add(section);\n                }\n            }\n        }\n        \n        console.log(`CourseManager: Populated ${this.allSections.size} sections from ${this.allDepartments.length} departments`);\n    }\n\n    getAllSections(): Section[] {\n        return Array.from(this.allSections);\n    }\n\n    getAllSectionsForCourse(course: Course): Section[] {\n        return course.sections;\n    }\n\n    getAllSectionsForDepartment(deptAbbreviation: string): Section[] {\n        const department = this.allDepartments.find(dept => dept.abbreviation === deptAbbreviation);\n        if (!department) return [];\n        \n        const sections: Section[] = [];\n        for (const course of department.courses) {\n            sections.push(...course.sections);\n        }\n        return sections;\n    }\n\n    getAllDepartments(): Department[] {\n        return this.allDepartments;\n    }\n\n    reconstructSectionObjects(): void {\n        console.log('=== RECONSTRUCTING SECTION OBJECTS ===');\n        let reconstructedCount = 0;\n        let failedCount = 0;\n        \n        this.selectedCourses.forEach((selectedCourse, course) => {\n            if (selectedCourse.selectedSectionNumber && !selectedCourse.selectedSection) {\n                console.log(`Reconstructing section for ${course.department.abbreviation}${course.number}:`);\n                console.log(`  Looking for section: ${selectedCourse.selectedSectionNumber}`);\n                console.log(`  Course has ${course.sections.length} sections:`, course.sections.map(s => s.number));\n                \n                const sectionObject = course.sections.find(s => \n                    s.number === selectedCourse.selectedSectionNumber\n                ) || null;\n                \n                if (sectionObject) {\n                    selectedCourse.selectedSection = sectionObject;\n                    reconstructedCount++;\n                    console.log(`  ✓ Successfully reconstructed section ${sectionObject.number}`);\n                } else {\n                    failedCount++;\n                    console.log(`  ✗ Failed to find section ${selectedCourse.selectedSectionNumber}`);\n                }\n            } else if (selectedCourse.selectedSection) {\n                console.log(`Section already exists for ${course.department.abbreviation}${course.number}: ${selectedCourse.selectedSection.number}`);\n            }\n        });\n        \n        console.log(`Reconstruction complete: ${reconstructedCount} succeeded, ${failedCount} failed`);\n        console.log('=== END SECTION RECONSTRUCTION ===\\n');\n        \n        if (reconstructedCount > 0) {\n            this.notifyListeners(); // Trigger UI updates\n        }\n    }\n\n    private findCourseContainingSection(section: Section): Course | undefined {\n        for (const department of this.allDepartments) {\n            for (const course of department.courses) {\n                if (course.sections.includes(section)) {\n                    return course;\n                }\n            }\n        }\n        return undefined;\n    }\n}","import { Course, Section, Period, Department } from '../types/types'\nimport { Schedule, SelectedCourse, SchedulePreferences } from '../types/schedule'\n\nexport class Validators {\n    static isValidCourse(course: any): course is Course {\n        return course &&\n            typeof course.id === 'string' &&\n            typeof course.number === 'string' &&\n            typeof course.name === 'string' &&\n            typeof course.description === 'string' &&\n            this.isValidDepartment(course.department) &&\n            Array.isArray(course.sections) &&\n            course.sections.every((s: any) => this.isValidSection(s)) &&\n            typeof course.minCredits === 'number' &&\n            typeof course.maxCredits === 'number';\n    }\n\n    static isValidDepartment(department: any): department is Department {\n        return department &&\n            typeof department.abbreviation === 'string' &&\n            typeof department.name === 'string' &&\n            // Make courses array optional - it may not be present in serialized data\n            (department.courses === undefined || Array.isArray(department.courses));\n    }\n\n    static isValidSection(section: any): section is Section {\n        return section &&\n            typeof section.crn === 'number' &&\n            typeof section.number === 'string' &&\n            typeof section.seats === 'number' &&\n            typeof section.seatsAvailable === 'number' &&\n            typeof section.actualWaitlist === 'number' &&\n            typeof section.maxWaitlist === 'number' &&\n            typeof section.description === 'string' &&\n            typeof section.term === 'string' &&\n            Array.isArray(section.periods) &&\n            section.periods.every((p: any) => this.isValidPeriod(p));\n    }\n\n    static isValidPeriod(period: any): period is Period {\n        return period &&\n            typeof period.type === 'string' &&\n            typeof period.professor === 'string' &&\n            this.isValidTime(period.startTime) &&\n            this.isValidTime(period.endTime) &&\n            typeof period.location === 'string' &&\n            typeof period.building === 'string' &&\n            typeof period.room === 'string' &&\n            typeof period.seats === 'number' &&\n            typeof period.seatsAvailable === 'number' &&\n            typeof period.actualWaitlist === 'number' &&\n            typeof period.maxWaitlist === 'number' &&\n            period.days instanceof Set;\n    }\n\n    static isValidTime(time: any): boolean {\n        return time &&\n            typeof time.hours === 'number' &&\n            typeof time.minutes === 'number' &&\n            typeof time.displayTime === 'string' &&\n            time.hours >= 0 && time.hours <= 23 &&\n            time.minutes >= 0 && time.minutes <= 59;\n    }\n\n    static isValidSchedulePreferences(preferences: any): preferences is SchedulePreferences {\n        return preferences &&\n            this.isValidTimeRange(preferences.preferredTimeRange) &&\n            preferences.preferredDays instanceof Set &&\n            typeof preferences.avoidBackToBackClasses === 'boolean';\n    }\n\n    static isValidTimeRange(timeRange: any): boolean {\n        return timeRange &&\n            this.isValidTime(timeRange.startTime) &&\n            this.isValidTime(timeRange.endTime);\n    }\n\n    static isValidSelectedCourse(selectedCourse: any): selectedCourse is SelectedCourse {\n        return selectedCourse &&\n            this.isValidCourse(selectedCourse.course) &&\n            typeof selectedCourse.isRequired === 'boolean';\n    }\n\n    static isValidSchedule(schedule: any): schedule is Schedule {\n        return schedule &&\n            typeof schedule.id === 'string' &&\n            typeof schedule.name === 'string' &&\n            Array.isArray(schedule.selectedCourses) &&\n            schedule.selectedCourses.every((sc: any) => this.isValidSelectedCourse(sc)) &&\n            Array.isArray(schedule.generatedSchedules) &&\n            this.isValidSchedulePreferences(schedule.preferences);\n    }\n\n    static sanitizeString(input: string): string {\n        return input.replace(/<[^>]*>/g, '').trim();\n    }\n\n    static sanitizeCourseData(course: any): Course | null {\n        try {\n            if (!this.isValidCourse(course)) return null;\n\n            return {\n                ...course,\n                name: this.sanitizeString(course.name),\n                description: this.sanitizeString(course.description),\n                sections: course.sections.map((section: Section) => ({\n                    ...section,\n                    description: this.sanitizeString(section.description),\n                    periods: section.periods.map((period: Period) => ({\n                        ...period,\n                        professor: this.sanitizeString(period.professor),\n                        location: this.sanitizeString(period.location),\n                        building: this.sanitizeString(period.building),\n                        room: this.sanitizeString(period.room)\n                    }))\n                }))\n            };\n        } catch (error) {\n            console.warn('Error sanitizing course data:', error);\n            return null;\n        }\n    }\n\n    static validateCourseId(courseId: string): boolean {\n        // Format: DEPT-NUMBER (e.g., CS-1101, AB-1531, RBE-1001) \n        // Allow 2-4 letter department codes and 3-4 digit course numbers\n        return /^[A-Z]{2,4}-\\d{3,4}$/.test(courseId);\n    }\n\n    static validateSectionNumber(sectionNumber: string): boolean {\n        // Very permissive section number validation - allow most printable characters\n        // WPI has diverse section formats: A01, Lab1, \"Interest List-A Term\", \"AL02/AD02/AX01\", etc.\n        // Just ensure it's a non-empty string with reasonable characters\n        return typeof sectionNumber === 'string' && \n               sectionNumber.trim().length > 0 && \n               /^[\\w\\s\\-/]+$/.test(sectionNumber);\n    }\n\n    static validateEmail(email: string): boolean {\n        return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n    }\n}","import { Course, Department, Section } from '../types/types'\nimport { SelectedCourse } from '../types/schedule'\nimport { CourseManager } from '../core/CourseManager'\nimport { StorageManager } from '../core/StorageManager'\nimport { Validators } from '../utils/validators'\n\nexport class CourseSelectionService {\n    private courseManager: CourseManager;\n    private storageManager: StorageManager;\n\n    constructor(courseManager?: CourseManager, storageManager?: StorageManager) {\n        this.courseManager = courseManager || new CourseManager();\n        this.storageManager = storageManager || new StorageManager();\n        \n        this.loadPersistedSelections();\n        this.setupPersistenceListener();\n    }\n\n    selectCourse(course: Course, isRequired: boolean = false): void {\n        if (!Validators.isValidCourse(course)) {\n            throw new Error('Invalid course object provided');\n        }\n        this.courseManager.addCourse(course, isRequired);\n    }\n\n    unselectCourse(course: Course): void {\n        if (!Validators.isValidCourse(course)) {\n            throw new Error('Invalid course object provided');\n        }\n        this.courseManager.removeCourse(course);\n    }\n\n    toggleCourseSelection(course: Course, isRequired: boolean = false): boolean {\n        const isSelected = this.isCourseSelected(course);\n        \n        if (isSelected) {\n            this.unselectCourse(course);\n            return false;\n        } else {\n            this.selectCourse(course, isRequired);\n            return true;\n        }\n    }\n\n    setSelectedSection(course: Course, sectionNumber: string | null): void {\n        if (!Validators.isValidCourse(course)) {\n            throw new Error('Invalid course object provided');\n        }\n        if (sectionNumber !== null && !Validators.validateSectionNumber(sectionNumber)) {\n            throw new Error('Invalid sectionNumber provided');\n        }\n        this.courseManager.setSelectedSection(course, sectionNumber);\n    }\n\n    getSelectedSection(course: Course): string | null {\n        if (!Validators.isValidCourse(course)) {\n            throw new Error('Invalid course object provided');\n        }\n        return this.courseManager.getSelectedSection(course);\n    }\n\n    getSelectedSectionObject(course: Course): Section | null {\n        if (!Validators.isValidCourse(course)) {\n            throw new Error('Invalid course object provided');\n        }\n        return this.courseManager.getSelectedSectionObject(course);\n    }\n\n\n    isCourseSelected(course: Course): boolean {\n        if (!Validators.isValidCourse(course)) {\n            return false;\n        }\n        return this.courseManager.isSelected(course);\n    }\n\n    getSelectedCourses(): SelectedCourse[] {\n        return this.courseManager.getSelectedCourses();\n    }\n\n    getSelectedCourse(course: Course): SelectedCourse | undefined {\n        if (!Validators.isValidCourse(course)) {\n            return undefined;\n        }\n        return this.courseManager.getSelectedCourse(course);\n    }\n\n    clearAllSelections(): void {\n        this.courseManager.clearAll();\n        this.storageManager.clearSelectedCourses();\n    }\n\n    getSelectedCoursesCount(): number {\n        return this.getSelectedCourses().length;\n    }\n\n    getSelectedCourseIds(): string[] {\n        return this.getSelectedCourses().map(sc => sc.course.id);\n    }\n\n    onSelectionChange(listener: (courses: SelectedCourse[]) => void): void {\n        this.courseManager.onSelectionChange(listener);\n    }\n\n    offSelectionChange(listener: (courses: SelectedCourse[]) => void): void {\n        this.courseManager.offSelectionChange(listener);\n    }\n\n    private loadPersistedSelections(): void {\n        const persistedCourses = this.storageManager.loadSelectedCourses();\n        if (persistedCourses.length > 0) {\n            this.courseManager.loadSelectedCourses(persistedCourses);\n        }\n    }\n\n    private setupPersistenceListener(): void {\n        this.courseManager.onSelectionChange((courses) => {\n            this.storageManager.saveSelectedCourses(courses);\n        });\n    }\n\n    private persistSelections(): void {\n        const selectedCourses = this.getSelectedCourses();\n        this.storageManager.saveSelectedCourses(selectedCourses);\n    }\n\n    exportSelections(): string {\n        const selectedCourses = this.getSelectedCourses();\n        return JSON.stringify({\n            version: '1.0',\n            timestamp: new Date().toISOString(),\n            selectedCourses\n        }, null, 2);\n    }\n\n    importSelections(jsonData: string): boolean {\n        try {\n            const data = JSON.parse(jsonData);\n            if (data.selectedCourses && Array.isArray(data.selectedCourses)) {\n                this.courseManager.loadSelectedCourses(data.selectedCourses);\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error('Failed to import selections:', error);\n            return false;\n        }\n    }\n\n    // Department and section management\n    setAllDepartments(departments: Department[]): void {\n        this.courseManager.setAllDepartments(departments);\n    }\n\n    getAllSections(): Section[] {\n        return this.courseManager.getAllSections();\n    }\n\n    getAllSectionsForCourse(course: Course): Section[] {\n        return this.courseManager.getAllSectionsForCourse(course);\n    }\n\n    getAllSectionsForDepartment(deptAbbreviation: string): Section[] {\n        return this.courseManager.getAllSectionsForDepartment(deptAbbreviation);\n    }\n\n    // Helper methods for backward compatibility\n    findCourseById(courseId: string): Course | undefined {\n        for (const dept of this.courseManager.getAllDepartments()) {\n            const course = dept.courses.find(c => c.id === courseId);\n            if (course) return course;\n        }\n        return undefined;\n    }\n\n    // Legacy methods using courseId (for backward compatibility)\n    unselectCourseById(courseId: string): void {\n        const course = this.findCourseById(courseId);\n        if (course) {\n            this.unselectCourse(course);\n        }\n    }\n\n    isCourseSelectedById(courseId: string): boolean {\n        const course = this.findCourseById(courseId);\n        return course ? this.isCourseSelected(course) : false;\n    }\n\n    setSelectedSectionById(courseId: string, sectionNumber: string | null): void {\n        const course = this.findCourseById(courseId);\n        if (course) {\n            this.setSelectedSection(course, sectionNumber);\n        }\n    }\n\n    getSelectedSectionById(courseId: string): string | null {\n        const course = this.findCourseById(courseId);\n        return course ? this.getSelectedSection(course) : null;\n    }\n\n    getSelectedCourseById(courseId: string): SelectedCourse | undefined {\n        const course = this.findCourseById(courseId);\n        return course ? this.getSelectedCourse(course) : undefined;\n    }\n\n    // Reconstruct Section objects after course data is loaded\n    reconstructSectionObjects(): void {\n        this.courseManager.reconstructSectionObjects();\n    }\n}","import { Course, Section } from './types'\n\nexport interface SelectedCourse {\n    course: Course;\n    selectedSection: Section | null;  // Store the full Section object for direct access\n    selectedSectionNumber: string | null;  // Keep for backward compatibility and serialization\n    isRequired: boolean;\n}\n\nexport interface Schedule {\n    id: string;\n    name: string;\n    selectedCourses: SelectedCourse[];\n    generatedSchedules: ScheduleCombination[];\n    preferences: SchedulePreferences;\n}\n\nexport interface ScheduleCombination {\n    id: string;\n    sections: Section[];\n    conflicts: TimeConflict[];\n    isValid: boolean;\n}\n\nexport interface TimeConflict {\n    section1: Section;\n    section2: Section;\n    conflictType: ConflictType;\n    description: string;\n}\n\nexport interface SchedulePreferences {\n    preferredTimeRange: {\n        startTime: { hours: number; minutes: number };\n        endTime: { hours: number; minutes: number };\n    };\n    preferredDays: Set<string>;\n    avoidBackToBackClasses: boolean;\n    theme?: string;\n}\n\nexport enum ConflictType {\n    TIME_OVERLAP = 'time_overlap'\n}\n\nexport interface UserScheduleState {\n    activeSchedule: Schedule | null;\n    savedSchedules: Schedule[];\n    preferences: SchedulePreferences;\n}","import { Section, Period, DayOfWeek } from '../types/types'\nimport { TimeConflict, ConflictType } from '../types/schedule'\n\nexport class ConflictDetector {\n    private conflictCache = new Map<string, TimeConflict[]>();\n    detectConflicts(sections: Section[]): TimeConflict[] {\n        const conflicts: TimeConflict[] = [];\n        \n        for (let i = 0; i < sections.length; i++) {\n            for (let j = i + 1; j < sections.length; j++) {\n                const cacheKey = this.getCacheKey(sections[i], sections[j]);\n                let sectionConflicts = this.conflictCache.get(cacheKey);\n                \n                if (!sectionConflicts) {\n                    sectionConflicts = this.checkSectionConflicts(sections[i], sections[j]);\n                    this.conflictCache.set(cacheKey, sectionConflicts);\n                }\n                \n                conflicts.push(...sectionConflicts);\n            }\n        }\n        \n        return conflicts;\n    }\n\n    private checkSectionConflicts(section1: Section, section2: Section): TimeConflict[] {\n        const conflicts: TimeConflict[] = [];\n        \n        for (const period1 of section1.periods) {\n            for (const period2 of section2.periods) {\n                const conflict = this.checkPeriodConflict(period1, period2, section1, section2);\n                if (conflict) {\n                    conflicts.push(conflict);\n                }\n            }\n        }\n        \n        return conflicts;\n    }\n\n    private checkPeriodConflict(period1: Period, period2: Period, section1: Section, section2: Section): TimeConflict | null {\n        const sharedDays = this.getSharedDays(period1.days, period2.days);\n        if (sharedDays.length === 0) return null;\n\n        if (this.hasTimeOverlap(period1, period2)) {\n            return {\n                section1,\n                section2,\n                conflictType: ConflictType.TIME_OVERLAP,\n                description: `Time overlap on ${sharedDays.join(', ')}: ${period1.startTime.displayTime}-${period1.endTime.displayTime} conflicts with ${period2.startTime.displayTime}-${period2.endTime.displayTime}`\n            };\n        }\n\n        return null;\n    }\n\n    private getSharedDays(days1: Set<DayOfWeek>, days2: Set<DayOfWeek>): string[] {\n        return Array.from(new Set([...days1].filter(day => days2.has(day))));\n    }\n\n    private hasTimeOverlap(period1: Period, period2: Period): boolean {\n        const start1 = this.timeToMinutes(period1.startTime);\n        const end1 = this.timeToMinutes(period1.endTime);\n        const start2 = this.timeToMinutes(period2.startTime);\n        const end2 = this.timeToMinutes(period2.endTime);\n\n        return start1 < end2 && start2 < end1;\n    }\n\n    private timeToMinutes(time: { hours: number; minutes: number }): number {\n        return time.hours * 60 + time.minutes;\n    }\n\n    isValidSchedule(sections: Section[]): boolean {\n        const conflicts = this.detectConflicts(sections);\n        return conflicts.length === 0;\n    }\n\n    clearCache(): void {\n        this.conflictCache.clear();\n    }\n\n    private getCacheKey(section1: Section, section2: Section): string {\n        const key1 = `${section1.crn}-${section2.crn}`;\n        const key2 = `${section2.crn}-${section1.crn}`;\n        return key1 < key2 ? key1 : key2;\n    }\n}","export class ModalService {\n    private modals: Map<string, HTMLElement> = new Map();\n    private currentZIndex: number = 1000;\n\n    showModal(id: string, modalElement: HTMLElement): void {\n        // Remove existing modal with same ID if it exists\n        this.hideModal(id);\n\n        // Set z-index\n        modalElement.style.zIndex = this.currentZIndex.toString();\n        this.currentZIndex += 10;\n\n        // Store modal reference\n        this.modals.set(id, modalElement);\n\n        // Inject into DOM\n        document.body.appendChild(modalElement);\n\n        // Trigger show animation\n        requestAnimationFrame(() => {\n            modalElement.classList.add('show');\n        });\n    }\n\n    hideModal(id: string): void {\n        const modalElement = this.modals.get(id);\n        if (modalElement) {\n            modalElement.classList.add('hide');\n            \n            setTimeout(() => {\n                if (modalElement.parentNode) {\n                    modalElement.parentNode.removeChild(modalElement);\n                }\n                this.modals.delete(id);\n            }, 200);\n        }\n    }\n\n    hideAllModals(): void {\n        const modalIds = Array.from(this.modals.keys());\n        modalIds.forEach(id => this.hideModal(id));\n    }\n\n    isModalOpen(id: string): boolean {\n        return this.modals.has(id);\n    }\n\n    getOpenModals(): string[] {\n        return Array.from(this.modals.keys());\n    }\n\n    generateId(): string {\n        return `modal-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    // Utility method for backdrop and escape key handling\n    setupModalBehavior(modalElement: HTMLElement, id: string, options: {\n        closeOnBackdrop?: boolean;\n        closeOnEscape?: boolean;\n    } = {}): void {\n        const { closeOnBackdrop = true, closeOnEscape = true } = options;\n\n        // Backdrop click handling\n        if (closeOnBackdrop) {\n            modalElement.addEventListener('click', (event) => {\n                if (event.target === modalElement) {\n                    this.hideModal(id);\n                }\n            });\n        }\n\n        // Escape key handling\n        if (closeOnEscape) {\n            const escapeHandler = (event: KeyboardEvent) => {\n                if (event.key === 'Escape') {\n                    this.hideModal(id);\n                    document.removeEventListener('keydown', escapeHandler);\n                }\n            };\n            document.addEventListener('keydown', escapeHandler);\n        }\n    }\n}","import { Department } from '../../types/types'\nimport { DepartmentSyncService } from '../../services/DepartmentSyncService'\n\nexport class DepartmentController {\n    private allDepartments: Department[] = [];\n    private selectedDepartment: Department | null = null;\n    private departmentSyncService: DepartmentSyncService | null = null;\n\n    // Department categories based on WPI structure\n    private departmentCategories: { [key: string]: string } = {\n        // Science\n        'BB': 'Science',\n        'BCB': 'Science', \n        'CH': 'Science',\n        'CS': 'Science',\n        'DS': 'Science',\n        'GE': 'Science',\n        'IMGD': 'Science',\n        'MA': 'Science',\n        'MTE': 'Science',\n        'PTE': 'Science',\n        'NE': 'Science',\n        'PH': 'Science',\n        \n        // Engineering\n        'AE': 'Engineering',\n        'AR': 'Engineering',\n        'ARE': 'Engineering',\n        'BME': 'Engineering',\n        'CE': 'Engineering',\n        'CHE': 'Engineering',\n        'ECE': 'Engineering',\n        'ES': 'Engineering',\n        'FP': 'Engineering',\n        'ME': 'Engineering',\n        'MFE': 'Engineering',\n        'MSE': 'Engineering',\n        'NUE': 'Engineering',\n        'RBE': 'Engineering',\n        'SYE': 'Engineering',\n        \n        // Business & Management\n        'BUS': 'Business & Management',\n        'ECON': 'Business & Management',\n        'MIS': 'Business & Management',\n        'OIE': 'Business & Management',\n        \n        // Humanities & Arts\n        'EN': 'Humanities & Arts',\n        'HI': 'Humanities & Arts',\n        'HU': 'Humanities & Arts',\n        'MU': 'Humanities & Arts',\n        'RE': 'Humanities & Arts',\n        'SP': 'Humanities & Arts',\n        'TH': 'Humanities & Arts',\n        'WR': 'Humanities & Arts',\n        \n        // Social Sciences\n        'GOV': 'Social Sciences',\n        'PSY': 'Social Sciences',\n        'SOC': 'Social Sciences',\n        'SS': 'Social Sciences'\n    };\n\n    constructor() {}\n\n    setDepartmentSyncService(departmentSyncService: DepartmentSyncService): void {\n        this.departmentSyncService = departmentSyncService;\n    }\n\n    setAllDepartments(departments: Department[]): void {\n        this.allDepartments = departments;\n    }\n\n    getSelectedDepartment(): Department | null {\n        return this.selectedDepartment;\n    }\n\n    getDepartmentById(deptId: string): Department | null {\n        return this.allDepartments.find(d => d.abbreviation === deptId) || null;\n    }\n\n    selectDepartment(deptId: string): Department | null {\n        const department = this.allDepartments.find(d => d.abbreviation === deptId);\n        if (!department) return null;\n\n        this.selectedDepartment = department;\n        \n        // Update content header\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            contentHeader.textContent = `${department.name} Courses`;\n        }\n\n        return department;\n    }\n\n    displayDepartments(): void {\n        const departmentList = document.getElementById('department-list');\n        if (!departmentList) return;\n\n        // Group departments by category\n        const categories = this.groupDepartmentsByCategory();\n        \n        let html = '';\n        Object.entries(categories).forEach(([categoryName, departments]) => {\n            if (departments.length === 0) return;\n            \n            html += `\n                <div class=\"department-category\">\n                    <div class=\"category-header\">${categoryName}</div>\n                    <div class=\"department-list\">\n            `;\n            \n            departments.forEach(dept => {\n                const courseCount = dept.courses.length;\n                html += `\n                    <div class=\"department-item\" data-dept-id=\"${dept.abbreviation}\">\n                        ${dept.name} (${courseCount})\n                    </div>\n                `;\n            });\n            \n            html += `\n                    </div>\n                </div>\n            `;\n        });\n\n        departmentList.innerHTML = html;\n    }\n\n    private groupDepartmentsByCategory(): { [key: string]: Department[] } {\n        const categories: { [key: string]: Department[] } = {\n            'Science': [],\n            'Engineering': [],\n            'Business & Management': [],\n            'Humanities & Arts': [],\n            'Social Sciences': [],\n            'Other': []\n        };\n\n        this.allDepartments.forEach(dept => {\n            const category = this.departmentCategories[dept.abbreviation] || 'Other';\n            categories[category].push(dept);\n        });\n\n        // Sort departments within each category\n        Object.keys(categories).forEach(category => {\n            categories[category].sort((a, b) => a.name.localeCompare(b.name));\n        });\n\n        return categories;\n    }\n\n    handleDepartmentClick(deptId: string, multiSelect: boolean = false): Department | null {\n        const department = this.allDepartments.find(d => d.abbreviation === deptId);\n        if (!department) return null;\n\n        // Use sync service if available, otherwise fall back to old behavior\n        if (this.departmentSyncService) {\n            this.departmentSyncService.syncSidebarToFilter(deptId, multiSelect);\n        } else {\n            // Fallback to old behavior for backward compatibility\n            const selectedDept = this.selectDepartment(deptId);\n            \n            // Update active state manually if no sync service\n            document.querySelectorAll('.department-item').forEach(item => {\n                item.classList.remove('active');\n            });\n            \n            const clickedElement = document.querySelector(`[data-dept-id=\"${deptId}\"]`);\n            if (clickedElement) {\n                clickedElement.classList.add('active');\n            }\n        }\n\n        return department;\n    }\n\n    clearDepartmentSelection(): void {\n        this.selectedDepartment = null;\n        \n        // Clear active department visual state\n        document.querySelectorAll('.department-item').forEach(item => {\n            item.classList.remove('active');\n        });\n        \n        // Reset sidebar header\n        const sidebarHeader = document.querySelector('.sidebar-header h2');\n        if (sidebarHeader) {\n            sidebarHeader.textContent = 'Departments';\n        }\n        \n        // Remove multi-select indicator\n        const departmentList = document.getElementById('department-list');\n        if (departmentList) {\n            departmentList.classList.remove('multi-select-active');\n        }\n    }\n}","export class CancellationToken {\n    private _cancelled: boolean = false;\n    private _reason?: string;\n    \n    get isCancelled(): boolean {\n        return this._cancelled;\n    }\n    \n    get reason(): string | undefined {\n        return this._reason;\n    }\n    \n    cancel(reason?: string): void {\n        this._cancelled = true;\n        this._reason = reason;\n    }\n    \n    throwIfCancelled(): void {\n        if (this._cancelled) {\n            throw new CancellationError(this._reason || 'Operation was cancelled');\n        }\n    }\n}\n\nexport class CancellationError extends Error {\n    constructor(message: string = 'Operation was cancelled') {\n        super(message);\n        this.name = 'CancellationError';\n    }\n}\n\nexport class CancellationTokenSource {\n    private _token: CancellationToken;\n    \n    constructor() {\n        this._token = new CancellationToken();\n    }\n    \n    get token(): CancellationToken {\n        return this._token;\n    }\n    \n    cancel(reason?: string): void {\n        this._token.cancel(reason);\n    }\n}\n\n// Utility class for managing cancellable operations\nexport class OperationManager {\n    private activeOperations = new Map<string, CancellationTokenSource>();\n    \n    // Cancel existing operation and create a new cancellation token\n    startOperation(operationId: string, reason?: string): CancellationToken {\n        this.cancelOperation(operationId, reason);\n        \n        const tokenSource = new CancellationTokenSource();\n        this.activeOperations.set(operationId, tokenSource);\n        \n        return tokenSource.token;\n    }\n    \n    // Cancel a specific operation\n    cancelOperation(operationId: string, reason?: string): void {\n        const existingOperation = this.activeOperations.get(operationId);\n        if (existingOperation) {\n            existingOperation.cancel(reason || 'New operation started');\n            this.activeOperations.delete(operationId);\n        }\n    }\n    \n    // Cancel all active operations\n    cancelAllOperations(reason?: string): void {\n        for (const [id, tokenSource] of this.activeOperations) {\n            tokenSource.cancel(reason || 'All operations cancelled');\n        }\n        this.activeOperations.clear();\n    }\n    \n    // Check if an operation is active\n    isOperationActive(operationId: string): boolean {\n        return this.activeOperations.has(operationId);\n    }\n    \n    // Get active operation count\n    getActiveOperationCount(): number {\n        return this.activeOperations.size;\n    }\n    \n    // Complete an operation (remove from active list)\n    completeOperation(operationId: string): void {\n        this.activeOperations.delete(operationId);\n    }\n}\n\n// Debounced operation helper\nexport class DebouncedOperation {\n    private timeoutId: number | null = null;\n    private operationManager: OperationManager;\n    private operationId: string;\n    \n    constructor(operationManager: OperationManager, operationId: string, private delay: number = 300) {\n        this.operationManager = operationManager;\n        this.operationId = operationId;\n    }\n    \n    execute<T>(operation: (cancellationToken: CancellationToken) => Promise<T>): Promise<T> {\n        return new Promise((resolve, reject) => {\n            // Clear existing timeout\n            if (this.timeoutId !== null) {\n                clearTimeout(this.timeoutId);\n            }\n            \n            // Set new timeout\n            this.timeoutId = window.setTimeout(async () => {\n                try {\n                    const token = this.operationManager.startOperation(this.operationId, 'Debounced operation');\n                    const result = await operation(token);\n                    this.operationManager.completeOperation(this.operationId);\n                    resolve(result);\n                } catch (error) {\n                    if (error instanceof CancellationError) {\n                        // Don't reject on cancellation, just ignore\n                        return;\n                    }\n                    reject(error);\n                }\n            }, this.delay);\n        });\n    }\n    \n    cancel(): void {\n        if (this.timeoutId !== null) {\n            clearTimeout(this.timeoutId);\n            this.timeoutId = null;\n        }\n        this.operationManager.cancelOperation(this.operationId, 'Debounced operation cancelled');\n    }\n    \n    setDelay(delay: number): void {\n        this.delay = Math.max(0, Math.min(5000, delay)); // Clamp between 0-5000ms\n    }\n}\n\n// Utility functions for promise-based cancellation\nexport function createCancellablePromise<T>(\n    executor: (resolve: (value: T) => void, reject: (reason?: any) => void, cancellationToken: CancellationToken) => void,\n    cancellationToken: CancellationToken\n): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n        if (cancellationToken.isCancelled) {\n            reject(new CancellationError(cancellationToken.reason));\n            return;\n        }\n        \n        try {\n            executor(resolve, reject, cancellationToken);\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\nexport function delay(ms: number, cancellationToken?: CancellationToken): Promise<void> {\n    return createCancellablePromise<void>((resolve, reject, token) => {\n        const timeoutId = setTimeout(() => {\n            if (token.isCancelled) {\n                reject(new CancellationError(token.reason));\n            } else {\n                resolve();\n            }\n        }, ms);\n        \n        // If cancelled before timeout, clear it\n        if (token.isCancelled) {\n            clearTimeout(timeoutId);\n            reject(new CancellationError(token.reason));\n        }\n    }, cancellationToken || new CancellationToken());\n}","import { Course } from '../../types/types';\nimport { CancellationToken, CancellationError } from '../../utils/RequestCancellation';\nimport { PerformanceMetrics } from '../../utils/PerformanceMetrics';\n\nexport interface RenderBatchCallback {\n    (batchIndex: number, batchCount: number, totalCount: number): void;\n}\n\nexport interface RenderCompleteCallback {\n    (totalRendered: number, totalTime: number): void;\n}\n\nexport interface ProgressiveRenderOptions {\n    batchSize?: number;\n    batchDelay?: number;\n    onBatch?: RenderBatchCallback;\n    onComplete?: RenderCompleteCallback;\n    enableVirtualization?: boolean;\n    performanceMetrics?: PerformanceMetrics;\n}\n\nexport class ProgressiveRenderer {\n    private batchSize: number = 10;\n    private batchDelay: number = 16; // 60 FPS\n    private currentRenderToken: number | null = null;\n    private isRendering: boolean = false;\n    private renderStartTime: number = 0;\n    private performanceMetrics?: PerformanceMetrics;\n\n    constructor(private options: ProgressiveRenderOptions = {}) {\n        this.batchSize = options.batchSize || 10;\n        this.batchDelay = options.batchDelay || 16;\n        this.performanceMetrics = options.performanceMetrics;\n    }\n\n    async renderCoursesBatched(\n        courses: Course[], \n        renderFunction: (courses: Course[], isFirstBatch: boolean, isComplete: boolean) => void,\n        container: HTMLElement,\n        cancellationToken?: CancellationToken\n    ): Promise<void> {\n        // Cancel any existing render operation\n        this.cancelCurrentRender();\n        \n        if (courses.length === 0) {\n            renderFunction([], true, true);\n            return;\n        }\n\n        this.isRendering = true;\n        this.renderStartTime = performance.now();\n        const renderToken = Date.now() + Math.random(); // Unique token for this render\n        this.currentRenderToken = renderToken;\n\n        const totalBatches = Math.ceil(courses.length / this.batchSize);\n        \n        // Start performance tracking\n        const operationId = this.performanceMetrics?.startOperation('batch-render', {\n            itemCount: courses.length,\n            batchSize: this.batchSize,\n            batchCount: totalBatches\n        });\n\n        try {\n            // Check for cancellation before starting\n            cancellationToken?.throwIfCancelled();\n            \n            // Render first batch immediately for instant feedback\n            const firstBatch = courses.slice(0, this.batchSize);\n            renderFunction(firstBatch, true, courses.length <= this.batchSize);\n            \n            // Call batch callback\n            this.options.onBatch?.(1, totalBatches, courses.length);\n\n            if (courses.length <= this.batchSize) {\n                // Single batch, we're done\n                this.completeRender(courses.length);\n                return;\n            }\n\n            // Render remaining batches progressively\n            for (let i = 1; i < totalBatches; i++) {\n                // Check if this render was cancelled (internal token)\n                if (this.currentRenderToken !== renderToken) {\n                    return; // Render was cancelled\n                }\n                \n                // Check external cancellation token\n                cancellationToken?.throwIfCancelled();\n\n                await this.wait(this.batchDelay, cancellationToken);\n\n                // Check again after delay\n                if (this.currentRenderToken !== renderToken) {\n                    return; // Render was cancelled\n                }\n                \n                cancellationToken?.throwIfCancelled();\n\n                const start = i * this.batchSize;\n                const end = Math.min((i + 1) * this.batchSize, courses.length);\n                const batch = courses.slice(start, end);\n                \n                renderFunction(batch, false, i === totalBatches - 1);\n                \n                // Call batch callback\n                this.options.onBatch?.(i + 1, totalBatches, courses.length);\n            }\n\n            this.completeRender(courses.length);\n            \n            // End performance tracking\n            if (operationId) {\n                this.performanceMetrics?.endOperation(operationId, {\n                    completed: true,\n                    cancelled: false\n                });\n            }\n            \n        } catch (error) {\n            if (error instanceof CancellationError) {\n                // Clean cancellation, not an error\n                this.isRendering = false;\n                this.currentRenderToken = null;\n                \n                // Track cancellation\n                if (operationId) {\n                    this.performanceMetrics?.endOperation(operationId, {\n                        completed: false,\n                        cancelled: true\n                    });\n                }\n                return;\n            }\n            console.error('Progressive rendering error:', error);\n            this.isRendering = false;\n            this.currentRenderToken = null;\n            \n            // Track error\n            if (operationId) {\n                this.performanceMetrics?.endOperation(operationId, {\n                    completed: false,\n                    cancelled: false,\n                    error: error.message\n                });\n            }\n        }\n    }\n\n    // Specialized method for course list rendering\n    async renderCourseList(\n        courses: Course[], \n        courseSelectionService: any, \n        container: HTMLElement,\n        elementToCourseMap: WeakMap<HTMLElement, Course>,\n        cancellationToken?: CancellationToken\n    ): Promise<void> {\n        let allHtml = '';\n        let renderedCourses: Course[] = [];\n\n        const renderFunction = (batchCourses: Course[], isFirstBatch: boolean, isComplete: boolean) => {\n            if (isFirstBatch) {\n                // Clear container and start fresh\n                container.innerHTML = '<div class=\"course-list\"></div>';\n                allHtml = '';\n                renderedCourses = [];\n            }\n\n            // Build HTML for this batch\n            const batchHtml = batchCourses.map(course => {\n                const isSelected = courseSelectionService.isCourseSelected(course);\n                const hasWarning = this.courseHasWarning(course);\n                \n                return `\n                    <div class=\"course-item ${isSelected ? 'selected' : ''}\" data-course-id=\"${course.id}\">\n                        <div class=\"course-header\">\n                            <button class=\"course-select-btn ${isSelected ? 'selected' : ''}\" title=\"${isSelected ? 'Remove from selection' : 'Add to selection'}\">\n                                ${isSelected ? '✓' : '+'}\n                            </button>\n                            <div class=\"course-code\">${course.department.abbreviation}${course.number}</div>\n                            <div class=\"course-details\">\n                                <div class=\"course-name\">\n                                    ${course.name}\n                                    ${hasWarning ? '<span class=\"warning-icon\">⚠</span>' : ''}\n                                </div>\n                                <div class=\"course-sections\">\n                                    ${course.sections.map(section => {\n                                        const isFull = section.seatsAvailable <= 0;\n                                        return `<span class=\"section-badge ${isFull ? 'full' : ''}\" data-section=\"${section.number}\">${section.number}</span>`;\n                                    }).join('')}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                `;\n            }).join('');\n\n            allHtml += batchHtml;\n            renderedCourses.push(...batchCourses);\n\n            // Update DOM\n            const courseListContainer = container.querySelector('.course-list');\n            if (courseListContainer) {\n                courseListContainer.innerHTML = allHtml;\n                \n                // Update course mapping for newly rendered elements\n                const courseElements = courseListContainer.querySelectorAll('.course-item');\n                courseElements.forEach((element, index) => {\n                    if (index < renderedCourses.length) {\n                        elementToCourseMap.set(element as HTMLElement, renderedCourses[index]);\n                    }\n                });\n            }\n\n            // Add loading indicator if not complete\n            if (!isComplete && courseListContainer) {\n                const loadingIndicator = document.createElement('div');\n                loadingIndicator.className = 'loading-indicator';\n                loadingIndicator.innerHTML = `\n                    <div class=\"loading-spinner\"></div>\n                    <span>Loading more courses... (${renderedCourses.length} of ${courses.length})</span>\n                `;\n                courseListContainer.appendChild(loadingIndicator);\n            }\n        };\n\n        await this.renderCoursesBatched(courses, renderFunction, container, cancellationToken);\n    }\n\n    // Specialized method for course grid rendering\n    async renderCourseGrid(\n        courses: Course[], \n        courseSelectionService: any, \n        container: HTMLElement,\n        elementToCourseMap: WeakMap<HTMLElement, Course>,\n        cancellationToken?: CancellationToken\n    ): Promise<void> {\n        let allHtml = '';\n        let renderedCourses: Course[] = [];\n\n        const renderFunction = (batchCourses: Course[], isFirstBatch: boolean, isComplete: boolean) => {\n            if (isFirstBatch) {\n                container.innerHTML = '<div class=\"course-grid\"></div>';\n                allHtml = '';\n                renderedCourses = [];\n            }\n\n            const batchHtml = batchCourses.map(course => {\n                const isSelected = courseSelectionService.isCourseSelected(course);\n                const hasWarning = this.courseHasWarning(course);\n                const credits = course.minCredits === course.maxCredits ? course.minCredits : `${course.minCredits}-${course.maxCredits}`;\n                \n                return `\n                    <div class=\"course-card ${isSelected ? 'selected' : ''}\" data-course-id=\"${course.id}\">\n                        <div class=\"course-card-header\">\n                            <div class=\"course-code\">${course.department.abbreviation}${course.number}</div>\n                            <button class=\"course-select-btn ${isSelected ? 'selected' : ''}\" title=\"${isSelected ? 'Remove from selection' : 'Add to selection'}\">\n                                ${isSelected ? '✓' : '+'}\n                            </button>\n                        </div>\n                        <div class=\"course-title\">\n                            ${course.name}\n                            ${hasWarning ? '<span class=\"warning-icon\">⚠</span>' : ''}\n                        </div>\n                        <div class=\"course-info\">\n                            <span class=\"course-credits\">${credits} credits</span>\n                            <span class=\"course-sections-count\">${course.sections.length} section${course.sections.length !== 1 ? 's' : ''}</span>\n                        </div>\n                    </div>\n                `;\n            }).join('');\n\n            allHtml += batchHtml;\n            renderedCourses.push(...batchCourses);\n\n            const courseGridContainer = container.querySelector('.course-grid');\n            if (courseGridContainer) {\n                courseGridContainer.innerHTML = allHtml;\n                \n                // Update course mapping\n                const courseElements = courseGridContainer.querySelectorAll('.course-card');\n                courseElements.forEach((element, index) => {\n                    if (index < renderedCourses.length) {\n                        elementToCourseMap.set(element as HTMLElement, renderedCourses[index]);\n                    }\n                });\n            }\n\n            // Add loading indicator if not complete\n            if (!isComplete && courseGridContainer) {\n                const loadingIndicator = document.createElement('div');\n                loadingIndicator.className = 'loading-indicator grid-loading';\n                loadingIndicator.innerHTML = `\n                    <div class=\"loading-spinner\"></div>\n                    <span>Loading more courses... (${renderedCourses.length} of ${courses.length})</span>\n                `;\n                courseGridContainer.appendChild(loadingIndicator);\n            }\n        };\n\n        await this.renderCoursesBatched(courses, renderFunction, container, cancellationToken);\n    }\n\n    cancelCurrentRender(): void {\n        if (this.currentRenderToken !== null) {\n            this.currentRenderToken = null;\n            this.isRendering = false;\n        }\n    }\n\n    isCurrentlyRendering(): boolean {\n        return this.isRendering;\n    }\n\n    setBatchSize(size: number): void {\n        this.batchSize = Math.max(1, Math.min(100, size)); // Clamp between 1-100\n    }\n    \n    getBatchSize(): number {\n        return this.batchSize;\n    }\n\n    setBatchDelay(delay: number): void {\n        this.batchDelay = Math.max(0, Math.min(100, delay)); // Clamp between 0-100ms\n    }\n\n    private wait(ms: number, cancellationToken?: CancellationToken): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (cancellationToken?.isCancelled) {\n                reject(new CancellationError(cancellationToken.reason));\n                return;\n            }\n            \n            const timeoutId = setTimeout(() => {\n                if (cancellationToken?.isCancelled) {\n                    reject(new CancellationError(cancellationToken.reason));\n                } else {\n                    resolve();\n                }\n            }, ms);\n            \n            // Clean up timeout if cancelled\n            if (cancellationToken?.isCancelled) {\n                clearTimeout(timeoutId);\n                reject(new CancellationError(cancellationToken.reason));\n            }\n        });\n    }\n\n    private courseHasWarning(course: Course): boolean {\n        return course.sections.every(section => section.seatsAvailable <= 0);\n    }\n\n    private completeRender(totalRendered: number): void {\n        const totalTime = performance.now() - this.renderStartTime;\n        this.isRendering = false;\n        this.currentRenderToken = null;\n        this.options.onComplete?.(totalRendered, totalTime);\n    }\n}","export interface PerformanceMetric {\n    operation: string;\n    startTime: number;\n    endTime: number;\n    duration: number;\n    metadata?: Record<string, any>;\n}\n\nexport interface PerformanceReport {\n    totalOperations: number;\n    averageDuration: number;\n    minDuration: number;\n    maxDuration: number;\n    operations: PerformanceMetric[];\n}\n\nexport interface FilterPerformanceMetrics {\n    operation: 'filter' | 'search' | 'render' | 'batch-render';\n    itemCount: number;\n    duration: number;\n    batchSize?: number;\n    batchCount?: number;\n    cancelled?: boolean;\n}\n\nexport class PerformanceMetrics {\n    private metrics: PerformanceMetric[] = [];\n    private maxMetrics: number = 100; // Keep last 100 metrics\n    private activeOperations = new Map<string, number>();\n\n    // Start timing an operation\n    startOperation(operation: string, metadata?: Record<string, any>): string {\n        const operationId = `${operation}_${Date.now()}_${Math.random()}`;\n        this.activeOperations.set(operationId, performance.now());\n        return operationId;\n    }\n\n    // End timing an operation\n    endOperation(operationId: string, metadata?: Record<string, any>): PerformanceMetric | null {\n        const startTime = this.activeOperations.get(operationId);\n        if (!startTime) {\n            console.warn(`No start time found for operation: ${operationId}`);\n            return null;\n        }\n\n        const endTime = performance.now();\n        const duration = endTime - startTime;\n        \n        const metric: PerformanceMetric = {\n            operation: operationId.split('_')[0],\n            startTime,\n            endTime,\n            duration,\n            metadata\n        };\n\n        this.addMetric(metric);\n        this.activeOperations.delete(operationId);\n        \n        return metric;\n    }\n\n    // Track a completed operation\n    trackOperation(operation: string, duration: number, metadata?: Record<string, any>): void {\n        const endTime = performance.now();\n        const metric: PerformanceMetric = {\n            operation,\n            startTime: endTime - duration,\n            endTime,\n            duration,\n            metadata\n        };\n        \n        this.addMetric(metric);\n    }\n\n    // Track filter-specific performance\n    trackFilterOperation(metrics: FilterPerformanceMetrics): void {\n        this.trackOperation(metrics.operation, metrics.duration, {\n            itemCount: metrics.itemCount,\n            batchSize: metrics.batchSize,\n            batchCount: metrics.batchCount,\n            cancelled: metrics.cancelled\n        });\n    }\n\n    // Track rendering performance\n    trackRenderOperation(itemCount: number, duration: number, batchSize?: number, batchCount?: number): void {\n        this.trackFilterOperation({\n            operation: 'render',\n            itemCount,\n            duration,\n            batchSize,\n            batchCount\n        });\n    }\n\n    // Track search performance\n    trackSearchOperation(query: string, resultCount: number, duration: number): void {\n        this.trackOperation('search', duration, {\n            query: query.substring(0, 50), // Truncate long queries\n            queryLength: query.length,\n            resultCount\n        });\n    }\n\n    // Add a metric to the collection\n    private addMetric(metric: PerformanceMetric): void {\n        this.metrics.push(metric);\n        \n        // Keep only the most recent metrics\n        if (this.metrics.length > this.maxMetrics) {\n            this.metrics = this.metrics.slice(-this.maxMetrics);\n        }\n    }\n\n    // Generate performance report\n    generateReport(operationType?: string): PerformanceReport {\n        let filteredMetrics = this.metrics;\n        \n        if (operationType) {\n            filteredMetrics = this.metrics.filter(m => m.operation === operationType);\n        }\n\n        if (filteredMetrics.length === 0) {\n            return {\n                totalOperations: 0,\n                averageDuration: 0,\n                minDuration: 0,\n                maxDuration: 0,\n                operations: []\n            };\n        }\n\n        const durations = filteredMetrics.map(m => m.duration);\n        \n        return {\n            totalOperations: filteredMetrics.length,\n            averageDuration: durations.reduce((a, b) => a + b, 0) / durations.length,\n            minDuration: Math.min(...durations),\n            maxDuration: Math.max(...durations),\n            operations: filteredMetrics\n        };\n    }\n\n    // Get recent metrics\n    getRecentMetrics(count: number = 10): PerformanceMetric[] {\n        return this.metrics.slice(-count);\n    }\n\n    // Clear all metrics\n    clearMetrics(): void {\n        this.metrics = [];\n        this.activeOperations.clear();\n    }\n\n    // Get metrics summary for console logging\n    getMetricsSummary(): string {\n        const report = this.generateReport();\n        if (report.totalOperations === 0) {\n            return 'No performance metrics collected';\n        }\n\n        return `Performance Summary:\n- Total Operations: ${report.totalOperations}\n- Average Duration: ${report.averageDuration.toFixed(2)}ms\n- Min Duration: ${report.minDuration.toFixed(2)}ms\n- Max Duration: ${report.maxDuration.toFixed(2)}ms`;\n    }\n\n    // Log performance summary to console\n    logSummary(): void {\n        console.log(this.getMetricsSummary());\n    }\n\n    // Check if performance is degraded\n    isPerformanceDegraded(operationType: string, thresholdMs: number = 1000): boolean {\n        const report = this.generateReport(operationType);\n        return report.averageDuration > thresholdMs || report.maxDuration > thresholdMs * 2;\n    }\n\n    // Get performance insights\n    getInsights(): string[] {\n        const insights: string[] = [];\n        const report = this.generateReport();\n        \n        if (report.totalOperations === 0) {\n            return ['No performance data available'];\n        }\n\n        if (report.averageDuration > 500) {\n            insights.push(`Average operation time (${report.averageDuration.toFixed(2)}ms) is high - consider optimization`);\n        }\n\n        if (report.maxDuration > 2000) {\n            insights.push(`Slowest operation (${report.maxDuration.toFixed(2)}ms) is very slow - investigate bottlenecks`);\n        }\n\n        const renderReport = this.generateReport('render');\n        if (renderReport.totalOperations > 0 && renderReport.averageDuration > 300) {\n            insights.push(`Rendering performance could be improved (avg: ${renderReport.averageDuration.toFixed(2)}ms)`);\n        }\n\n        const searchReport = this.generateReport('search');\n        if (searchReport.totalOperations > 0 && searchReport.averageDuration > 200) {\n            insights.push(`Search performance could be improved (avg: ${searchReport.averageDuration.toFixed(2)}ms)`);\n        }\n\n        if (insights.length === 0) {\n            insights.push('Performance looks good!');\n        }\n\n        return insights;\n    }\n\n    // Auto-adjust batch size based on performance\n    getOptimalBatchSize(currentBatchSize: number = 10): number {\n        const renderReport = this.generateReport('render');\n        \n        if (renderReport.totalOperations < 3) {\n            return currentBatchSize; // Not enough data\n        }\n\n        const avgDuration = renderReport.averageDuration;\n        \n        // If rendering is fast, we can increase batch size\n        if (avgDuration < 50) {\n            return Math.min(currentBatchSize + 5, 50);\n        }\n        \n        // If rendering is slow, decrease batch size\n        if (avgDuration > 200) {\n            return Math.max(currentBatchSize - 2, 5);\n        }\n        \n        return currentBatchSize;\n    }\n}","import { Course, Department } from '../../types/types'\nimport { CourseSelectionService } from '../../services/CourseSelectionService'\nimport { FilterService } from '../../services/FilterService'\nimport { ProgressiveRenderer, ProgressiveRenderOptions } from '../utils/ProgressiveRenderer'\nimport { CancellationToken } from '../../utils/RequestCancellation'\nimport { PerformanceMetrics } from '../../utils/PerformanceMetrics'\n\nexport class CourseController {\n    private allDepartments: Department[] = [];\n    private selectedCourse: Course | null = null;\n    private courseSelectionService: CourseSelectionService;\n    private filterService: FilterService | null = null;\n    private elementToCourseMap = new WeakMap<HTMLElement, Course>();\n    private progressiveRenderer: ProgressiveRenderer;\n    private performanceMetrics: PerformanceMetrics;\n\n    constructor(courseSelectionService: CourseSelectionService) {\n        this.courseSelectionService = courseSelectionService;\n        \n        // Initialize performance metrics\n        this.performanceMetrics = new PerformanceMetrics();\n        \n        // Initialize progressive renderer with performance callbacks\n        const renderOptions: ProgressiveRenderOptions = {\n            batchSize: 10,\n            batchDelay: 16, // 60 FPS\n            performanceMetrics: this.performanceMetrics,\n            onBatch: (batchIndex, totalBatches, totalCount) => {\n                // Update any progress indicators if needed\n                console.log(`Rendered batch ${batchIndex}/${totalBatches} (${totalCount} total courses)`);\n            },\n            onComplete: (totalRendered, totalTime) => {\n                console.log(`Progressive rendering complete: ${totalRendered} courses in ${totalTime.toFixed(2)}ms`);\n                \n                // Log performance insights periodically\n                if (Math.random() < 0.1) { // 10% chance to log insights\n                    const insights = this.performanceMetrics.getInsights();\n                    console.log('Performance insights:', insights.join(', '));\n                    \n                    // Auto-adjust batch size based on performance\n                    const optimalBatchSize = this.performanceMetrics.getOptimalBatchSize(this.progressiveRenderer.getBatchSize());\n                    if (optimalBatchSize !== this.progressiveRenderer.getBatchSize()) {\n                        console.log(`Adjusting batch size from ${this.progressiveRenderer.getBatchSize()} to ${optimalBatchSize}`);\n                        this.progressiveRenderer.setBatchSize(optimalBatchSize);\n                    }\n                }\n            }\n        };\n        \n        this.progressiveRenderer = new ProgressiveRenderer(renderOptions);\n    }\n\n    setFilterService(filterService: FilterService): void {\n        this.filterService = filterService;\n    }\n\n    setAllDepartments(departments: Department[]): void {\n        this.allDepartments = departments;\n    }\n\n    getSelectedCourse(): Course | null {\n        return this.selectedCourse;\n    }\n\n    async displayCourses(courses: Course[], currentView: 'list' | 'grid'): Promise<void> {\n        return this.displayCoursesWithCancellation(courses, currentView);\n    }\n    \n    async displayCoursesWithCancellation(courses: Course[], currentView: 'list' | 'grid', cancellationToken?: CancellationToken): Promise<void> {\n        // Cancel any existing render operations\n        this.progressiveRenderer.cancelCurrentRender();\n        \n        if (currentView === 'grid') {\n            await this.displayCoursesGrid(courses, cancellationToken);\n        } else {\n            await this.displayCoursesList(courses, cancellationToken);\n        }\n    }\n\n    private async displayCoursesList(courses: Course[], cancellationToken?: CancellationToken): Promise<void> {\n        const courseContainer = document.getElementById('course-container');\n        if (!courseContainer) return;\n\n        if (courses.length === 0) {\n            courseContainer.innerHTML = '<div class=\"empty-state\">No courses found in this department.</div>';\n            return;\n        }\n\n        // Sort courses by course number\n        const sortedCourses = courses.sort((a, b) => a.number.localeCompare(b.number));\n\n        // Use progressive rendering for better performance\n        await this.progressiveRenderer.renderCourseList(\n            sortedCourses, \n            this.courseSelectionService, \n            courseContainer,\n            this.elementToCourseMap,\n            cancellationToken\n        );\n    }\n\n    private async displayCoursesGrid(courses: Course[], cancellationToken?: CancellationToken): Promise<void> {\n        const courseContainer = document.getElementById('course-container');\n        if (!courseContainer) return;\n\n        if (courses.length === 0) {\n            courseContainer.innerHTML = '<div class=\"empty-state\">No courses found in this department.</div>';\n            return;\n        }\n\n        // Sort courses by course number\n        const sortedCourses = courses.sort((a, b) => a.number.localeCompare(b.number));\n\n        // Use progressive rendering for better performance\n        await this.progressiveRenderer.renderCourseGrid(\n            sortedCourses, \n            this.courseSelectionService, \n            courseContainer,\n            this.elementToCourseMap,\n            cancellationToken\n        );\n    }\n\n    private courseHasWarning(course: Course): boolean {\n        // Check if ALL sections are fully enrolled (no available options)\n        return course.sections.every(section => section.seatsAvailable <= 0);\n    }\n\n    handleSearch(query: string, selectedDepartment: Department | null): Course[] {\n        const baseCourses = selectedDepartment ? selectedDepartment.courses : this.getAllCourses();\n        \n        // If we have a FilterService, use it for search and filtering\n        if (this.filterService) {\n            const results = this.filterService.searchAndFilter(query, baseCourses);\n            this.updateSearchHeader(query, results.length, selectedDepartment);\n            return results;\n        }\n        \n        // Fallback to simple search if no FilterService\n        if (!query.trim()) {\n            return baseCourses;\n        }\n\n        const filteredCourses = baseCourses.filter(course => \n            course.name.toLowerCase().includes(query.toLowerCase()) ||\n            course.number.toLowerCase().includes(query.toLowerCase()) ||\n            course.id.toLowerCase().includes(query.toLowerCase())\n        );\n\n        this.updateSearchHeader(query, filteredCourses.length, selectedDepartment);\n        return filteredCourses;\n    }\n\n    // New method to handle courses with filters (no search query)\n    handleFilter(selectedDepartment: Department | null): Course[] {\n        const baseCourses = selectedDepartment ? selectedDepartment.courses : this.getAllCourses();\n        \n        if (this.filterService && !this.filterService.isEmpty()) {\n            const results = this.filterService.filterCourses(baseCourses);\n            this.updateFilterHeader(results.length, selectedDepartment);\n            return results;\n        }\n        \n        return baseCourses;\n    }\n\n    private getAllCourses(): Course[] {\n        const allCourses: Course[] = [];\n        this.allDepartments.forEach(dept => {\n            allCourses.push(...dept.courses);\n        });\n        return allCourses;\n    }\n\n    private updateSearchHeader(query: string, resultCount: number, selectedDepartment: Department | null): void {\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            if (query.trim()) {\n                contentHeader.textContent = `Search Results (${resultCount})`;\n            } else if (selectedDepartment) {\n                contentHeader.textContent = `${selectedDepartment.name} (${resultCount})`;\n            } else {\n                contentHeader.textContent = `All Courses (${resultCount})`;\n            }\n        }\n    }\n\n    private updateFilterHeader(resultCount: number, selectedDepartment: Department | null): void {\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            let title = selectedDepartment ? selectedDepartment.name : 'All Courses';\n            \n            if (this.filterService && !this.filterService.isEmpty()) {\n                const filterSummary = this.filterService.getFilterSummary();\n                title += ` (${resultCount}) - ${filterSummary}`;\n            } else {\n                title += ` (${resultCount})`;\n            }\n            \n            contentHeader.textContent = title;\n        }\n    }\n\n    selectCourse(element: HTMLElement): Course | null {\n        const course = this.elementToCourseMap.get(element);\n        if (!course) return null;\n\n        this.selectedCourse = course;\n        this.displayCourseDescription(course);\n        \n        // Update active state for course items\n        document.querySelectorAll('.course-item, .course-card').forEach(item => {\n            item.classList.remove('active');\n        });\n        \n        element.classList.add('active');\n        return course;\n    }\n\n    // Legacy method for backward compatibility\n    selectCourseById(courseId: string): Course | null {\n        const course = this.courseSelectionService.findCourseById(courseId);\n        if (!course) return null;\n\n        // Find the associated element and call selectCourse\n        const allElements = document.querySelectorAll('.course-item, .course-card');\n        for (const element of allElements) {\n            const elementCourse = this.elementToCourseMap.get(element as HTMLElement);\n            if (elementCourse?.id === courseId) {\n                return this.selectCourse(element as HTMLElement);\n            }\n        }\n        return null;\n    }\n\n    toggleCourseSelection(element: HTMLElement): boolean {\n        const course = this.elementToCourseMap.get(element);\n        if (!course) return false;\n\n        const wasSelected = this.courseSelectionService.toggleCourseSelection(course);\n        this.updateCourseSelectionUI(element, wasSelected);\n        return wasSelected;\n    }\n\n    // Legacy method for backward compatibility\n    toggleCourseSelectionById(courseId: string): boolean {\n        const course = this.courseSelectionService.findCourseById(courseId);\n        if (!course) return false;\n\n        // Find the associated element and call toggleCourseSelection\n        const allElements = document.querySelectorAll('.course-item, .course-card');\n        for (const element of allElements) {\n            const elementCourse = this.elementToCourseMap.get(element as HTMLElement);\n            if (elementCourse?.id === courseId) {\n                return this.toggleCourseSelection(element as HTMLElement);\n            }\n        }\n        return false;\n    }\n\n    private updateCourseSelectionUI(element: HTMLElement, isSelected: boolean): void {\n        const selectBtn = element.querySelector('.course-select-btn');\n        \n        if (selectBtn) {\n            if (isSelected) {\n                element.classList.add('selected');\n                selectBtn.textContent = '✓';\n                selectBtn.classList.add('selected');\n            } else {\n                element.classList.remove('selected');\n                selectBtn.textContent = '+';\n                selectBtn.classList.remove('selected');\n            }\n        }\n    }\n\n    refreshCourseSelectionUI(): void {\n        // Update all course items to reflect current selection state\n        document.querySelectorAll('.course-item, .course-card').forEach(item => {\n            const course = this.elementToCourseMap.get(item as HTMLElement);\n            if (course) {\n                const isSelected = this.courseSelectionService.isCourseSelected(course);\n                this.updateCourseSelectionUI(item as HTMLElement, isSelected);\n            }\n        });\n    }\n\n    private displayCourseDescription(course: Course): void {\n        const descriptionContainer = document.getElementById('course-description');\n        if (!descriptionContainer) return;\n\n        const html = `\n            <div class=\"course-info\">\n                <div class=\"course-title\">${course.name}</div>\n                <div class=\"course-code\">${course.department.abbreviation}${course.number} (${course.minCredits === course.maxCredits ? course.minCredits : `${course.minCredits}-${course.maxCredits}`} credits)</div>\n            </div>\n            <div class=\"course-description-text\">${course.description}</div>\n        `;\n\n        descriptionContainer.innerHTML = html;\n    }\n\n    clearCourseDescription(): void {\n        const descriptionContainer = document.getElementById('course-description');\n        if (descriptionContainer) {\n            descriptionContainer.innerHTML = '<div class=\"empty-state\">Select a course to view description</div>';\n        }\n    }\n\n    clearCourseSelection(): void {\n        this.selectedCourse = null;\n        this.clearCourseDescription();\n    }\n\n    displaySelectedCourses(): void {\n        const selectedCoursesContainer = document.getElementById('selected-courses-list');\n        const countElement = document.getElementById('selected-count');\n        \n        if (!selectedCoursesContainer || !countElement) return;\n\n        const selectedCourses = this.courseSelectionService.getSelectedCourses();\n        \n        // Update count\n        countElement.textContent = `(${selectedCourses.length})`;\n\n        if (selectedCourses.length === 0) {\n            selectedCoursesContainer.innerHTML = '<div class=\"empty-state\">No courses selected yet</div>';\n            return;\n        }\n\n        // Sort selected courses by department and number\n        const sortedCourses = selectedCourses.sort((a, b) => {\n            const deptCompare = a.course.department.abbreviation.localeCompare(b.course.department.abbreviation);\n            if (deptCompare !== 0) return deptCompare;\n            return a.course.number.localeCompare(b.course.number);\n        });\n\n        let html = '';\n        sortedCourses.forEach(selectedCourse => {\n            const course = selectedCourse.course;\n            const credits = course.minCredits === course.maxCredits \n                ? `${course.minCredits} credits` \n                : `${course.minCredits}-${course.maxCredits} credits`;\n\n            html += `\n                <div class=\"selected-course-item\">\n                    <div class=\"selected-course-info\">\n                        <div class=\"selected-course-code\">${course.department.abbreviation}${course.number}</div>\n                        <div class=\"selected-course-name\">${course.name}</div>\n                        <div class=\"selected-course-credits\">${credits}</div>\n                    </div>\n                    <button class=\"course-remove-btn\" title=\"Remove from selection\">\n                        ×\n                    </button>\n                </div>\n            `;\n        });\n\n        selectedCoursesContainer.innerHTML = html;\n\n        // Associate remove buttons with Course objects  \n        const removeButtons = selectedCoursesContainer.querySelectorAll('.course-remove-btn');\n        removeButtons.forEach((button, index) => {\n            this.elementToCourseMap.set(button as HTMLElement, sortedCourses[index].course);\n        });\n    }\n\n    getCourseFromElement(element: HTMLElement): Course | undefined {\n        return this.elementToCourseMap.get(element);\n    }\n}","import { Time, DayOfWeek } from '../../types/types';\n\nexport class TimeUtils {\n    // Schedule grid constants - 7 AM to 7 PM (12 hours)\n    static readonly START_HOUR = 7;  // 7 AM\n    static readonly END_HOUR = 19;   // 7 PM\n    static readonly TOTAL_HOURS = 12;\n    static readonly SLOTS_PER_HOUR = 2; // 30-minute intervals\n    static readonly TOTAL_TIME_SLOTS = TimeUtils.TOTAL_HOURS * TimeUtils.SLOTS_PER_HOUR;\n\n    // Days of the week in order\n    static readonly DAYS_ORDER = [\n        DayOfWeek.MONDAY,\n        DayOfWeek.TUESDAY, \n        DayOfWeek.WEDNESDAY,\n        DayOfWeek.THURSDAY,\n        DayOfWeek.FRIDAY,\n        DayOfWeek.SATURDAY,\n        DayOfWeek.SUNDAY\n    ];\n\n    /**\n     * Convert a Time object to a grid row position (0-based)\n     * 7:00 AM = row 0, 7:30 AM = row 1, 8:00 AM = row 2, etc.\n     * @deprecated Use timeToGridRowStart() or timeToGridRowEnd() instead\n     */\n    static timeToGridRow(time: Time): number {\n        return TimeUtils.timeToGridRowStart(time);\n    }\n\n    /**\n     * Convert start time to grid row position (rounds DOWN)\n     * Used for class start times - finds the slot the class starts in\n     */\n    static timeToGridRowStart(time: Time): number {\n        const totalMinutes = time.hours * 60 + time.minutes;\n        const startMinutes = TimeUtils.START_HOUR * 60;\n        const relativeMinutes = totalMinutes - startMinutes;\n        \n        // Convert to 30-minute slots, round DOWN for start times\n        const slot = Math.floor(relativeMinutes / 30);\n        const boundedSlot = Math.max(0, Math.min(slot, TimeUtils.TOTAL_TIME_SLOTS - 1));\n        \n        return boundedSlot;\n    }\n\n    /**\n     * Convert end time to grid row position (rounds UP)\n     * Used for class end times - ensures full duration is visually represented\n     */\n    static timeToGridRowEnd(time: Time): number {\n        const totalMinutes = time.hours * 60 + time.minutes;\n        const startMinutes = TimeUtils.START_HOUR * 60;\n        const relativeMinutes = totalMinutes - startMinutes;\n        \n        // Convert to 30-minute slots, round UP for end times\n        const slot = Math.ceil(relativeMinutes / 30);\n        const boundedSlot = Math.max(0, Math.min(slot, TimeUtils.TOTAL_TIME_SLOTS - 1));\n        \n        // Log examples for debugging\n        if (relativeMinutes % 30 !== 0) {\n            console.log(`Rounded UP: ${time.hours}:${time.minutes.toString().padStart(2, '0')} -> slot ${slot} (${relativeMinutes} min = ${relativeMinutes/30} slots)`);\n        }\n        \n        return boundedSlot;\n    }\n\n    /**\n     * Convert day of week to grid column position (0-based)\n     * Monday = 0, Tuesday = 1, etc.\n     */\n    static dayToGridColumn(day: DayOfWeek): number {\n        return TimeUtils.DAYS_ORDER.indexOf(day);\n    }\n\n    /**\n     * Calculate how many grid rows a time period spans\n     */\n    static calculateDuration(startTime: Time, endTime: Time): number {\n        const startRow = TimeUtils.timeToGridRow(startTime);\n        const endRow = TimeUtils.timeToGridRow(endTime);\n        return Math.max(1, endRow - startRow);\n    }\n\n    /**\n     * Check if a time is within the schedule grid bounds (7 AM - 7 PM)\n     */\n    static isTimeInBounds(time: Time): boolean {\n        return time.hours >= TimeUtils.START_HOUR && time.hours < TimeUtils.END_HOUR;\n    }\n\n    /**\n     * Format time for display (e.g., \"9:00 AM\", \"2:30 PM\")\n     */\n    static formatTime(time: Time): string {\n        if (time.displayTime) {\n            return time.displayTime;\n        }\n        \n        const hours12 = time.hours === 0 ? 12 : time.hours > 12 ? time.hours - 12 : time.hours;\n        const ampm = time.hours >= 12 ? 'PM' : 'AM';\n        const minutes = time.minutes.toString().padStart(2, '0');\n        \n        return `${hours12}:${minutes} ${ampm}`;\n    }\n\n    /**\n     * Format time range for display (e.g., \"9:00-9:50 AM\")\n     */\n    static formatTimeRange(startTime: Time, endTime: Time): string {\n        const startFormatted = TimeUtils.formatTime(startTime);\n        const endFormatted = TimeUtils.formatTime(endTime);\n        \n        // If same AM/PM, only show it once\n        if (startTime.hours < 12 && endTime.hours < 12) {\n            return `${startFormatted.replace(' AM', '')}-${endFormatted}`;\n        } else if (startTime.hours >= 12 && endTime.hours >= 12) {\n            return `${startFormatted.replace(' PM', '')}-${endFormatted}`;\n        } else {\n            return `${startFormatted}-${endFormatted}`;\n        }\n    }\n\n    /**\n     * Format days for display (e.g., \"MWF\", \"TR\")\n     */\n    static formatDays(days: Set<DayOfWeek>): string {\n        const dayAbbreviations: { [key in DayOfWeek]: string } = {\n            [DayOfWeek.MONDAY]: 'M',\n            [DayOfWeek.TUESDAY]: 'T',\n            [DayOfWeek.WEDNESDAY]: 'W',\n            [DayOfWeek.THURSDAY]: 'R',\n            [DayOfWeek.FRIDAY]: 'F',\n            [DayOfWeek.SATURDAY]: 'S',\n            [DayOfWeek.SUNDAY]: 'U'\n        };\n\n        return TimeUtils.DAYS_ORDER\n            .filter(day => days.has(day))\n            .map(day => dayAbbreviations[day])\n            .join('');\n    }\n\n    /**\n     * Generate time labels for the grid (only hourly: 7:00 AM, 8:00 AM, etc.)\n     */\n    static generateTimeLabels(): string[] {\n        const labels: string[] = [];\n        \n        for (let slot = 0; slot < TimeUtils.TOTAL_TIME_SLOTS; slot++) {\n            const hour = Math.floor(slot / TimeUtils.SLOTS_PER_HOUR) + TimeUtils.START_HOUR;\n            const minutes = (slot % TimeUtils.SLOTS_PER_HOUR) * 30;\n            \n            // Show labels for both :00 and :30 times\n            labels.push(TimeUtils.formatTime({ hours: hour, minutes: minutes, displayTime: '' }));\n        }\n        \n        return labels;\n    }\n\n    /**\n     * Get day name for display\n     */\n    static getDayName(day: DayOfWeek): string {\n        const dayNames: { [key in DayOfWeek]: string } = {\n            [DayOfWeek.MONDAY]: 'Monday',\n            [DayOfWeek.TUESDAY]: 'Tuesday',\n            [DayOfWeek.WEDNESDAY]: 'Wednesday',\n            [DayOfWeek.THURSDAY]: 'Thursday',\n            [DayOfWeek.FRIDAY]: 'Friday',\n            [DayOfWeek.SATURDAY]: 'Saturday',\n            [DayOfWeek.SUNDAY]: 'Sunday'\n        };\n\n        return dayNames[day];\n    }\n\n    /**\n     * Get abbreviated day name for display\n     */\n    static getDayAbbr(day: DayOfWeek): string {\n        const dayAbbrs: { [key in DayOfWeek]: string } = {\n            [DayOfWeek.MONDAY]: 'Mon',\n            [DayOfWeek.TUESDAY]: 'Tue',\n            [DayOfWeek.WEDNESDAY]: 'Wed',\n            [DayOfWeek.THURSDAY]: 'Thu',\n            [DayOfWeek.FRIDAY]: 'Fri',\n            [DayOfWeek.SATURDAY]: 'Sat',\n            [DayOfWeek.SUNDAY]: 'Sun'\n        };\n\n        return dayAbbrs[day];\n    }\n}","import { DayOfWeek, Course } from '../../types/types'\nimport { CourseSelectionService } from '../../services/CourseSelectionService'\nimport { SectionInfoModalController } from './SectionInfoModalController'\nimport { TimeUtils } from '../utils/timeUtils'\n\nexport class ScheduleController {\n    private courseSelectionService: CourseSelectionService;\n    private sectionInfoModalController: SectionInfoModalController | null = null;\n    private elementToCourseMap = new WeakMap<HTMLElement, Course>();\n    private statePreserver?: { \n        preserve: () => Map<string, boolean>, \n        restore: (states: Map<string, boolean>) => void \n    };\n\n    constructor(courseSelectionService: CourseSelectionService) {\n        this.courseSelectionService = courseSelectionService;\n    }\n\n    setSectionInfoModalController(sectionInfoModalController: SectionInfoModalController): void {\n        this.sectionInfoModalController = sectionInfoModalController;\n    }\n\n    setStatePreserver(statePreserver: { \n        preserve: () => Map<string, boolean>, \n        restore: (states: Map<string, boolean>) => void \n    }): void {\n        this.statePreserver = statePreserver;\n    }\n\n    displayScheduleSelectedCourses(): void {\n        const selectedCoursesContainer = document.getElementById('schedule-selected-courses');\n        const countElement = document.getElementById('schedule-selected-count');\n        \n        if (!selectedCoursesContainer || !countElement) return;\n\n        // Preserve dropdown states before refresh\n        const dropdownStates = this.statePreserver?.preserve();\n\n        const selectedCourses = this.courseSelectionService.getSelectedCourses();\n        \n        // Update count\n        countElement.textContent = `(${selectedCourses.length})`;\n\n        if (selectedCourses.length === 0) {\n            selectedCoursesContainer.innerHTML = '<div class=\"empty-state\">No courses selected yet</div>';\n            return;\n        }\n\n        // Sort selected courses by department and number\n        const sortedCourses = selectedCourses.sort((a, b) => {\n            const deptCompare = a.course.department.abbreviation.localeCompare(b.course.department.abbreviation);\n            if (deptCompare !== 0) return deptCompare;\n            return a.course.number.localeCompare(b.course.number);\n        });\n\n        let html = '';\n        sortedCourses.forEach(selectedCourse => {\n            const course = selectedCourse.course;\n            const credits = course.minCredits === course.maxCredits \n                ? `${course.minCredits} credits` \n                : `${course.minCredits}-${course.maxCredits} credits`;\n\n            // Group sections by term\n            const sectionsByTerm: { [term: string]: typeof course.sections } = {};\n            course.sections.forEach(section => {\n                if (!sectionsByTerm[section.term]) {\n                    sectionsByTerm[section.term] = [];\n                }\n                sectionsByTerm[section.term].push(section);\n            });\n\n            html += `\n                <div class=\"schedule-course-item collapsed\" >\n                    <div class=\"schedule-course-header dropdown-trigger\" >\n                        <div class=\"schedule-course-info\">\n                            <div class=\"schedule-course-code\">${course.department.abbreviation}${course.number}</div>\n                            <div class=\"schedule-course-name\">${course.name}</div>\n                            <div class=\"schedule-course-credits\">${credits}</div>\n                        </div>\n                        <div class=\"header-controls\">\n                            <span class=\"dropdown-arrow\">▼</span>\n                            <button class=\"course-remove-btn\"  title=\"Remove from selection\">\n                                ×\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"schedule-sections-container\">\n            `;\n\n            // Display sections grouped by term\n            const terms = Object.keys(sectionsByTerm).sort();\n            terms.forEach(term => {\n                html += `<div class=\"term-sections\" data-term=\"${term}\">`;\n                html += `<div class=\"term-label\">${term} Term</div>`;\n                \n                sectionsByTerm[term].forEach(section => {\n                    const isSelected = selectedCourse.selectedSectionNumber === section.number;\n                    const selectedClass = isSelected ? 'selected' : '';\n                    \n                    // Sort periods by type priority (lecture first, then lab, then discussion)\n                    const sortedPeriods = [...section.periods].sort((a, b) => {\n                        const typePriority = (type: string) => {\n                            const lower = type.toLowerCase();\n                            if (lower.includes('lec') || lower.includes('lecture')) return 1;\n                            if (lower.includes('lab')) return 2;\n                            if (lower.includes('dis') || lower.includes('discussion') || lower.includes('rec')) return 3;\n                            return 4;\n                        };\n                        return typePriority(a.type) - typePriority(b.type);\n                    });\n                    \n                    html += `\n                        <div class=\"section-option ${selectedClass}\"  data-section=\"${section.number}\">\n                            <div class=\"section-info\">\n                                <div class=\"section-number\">${section.number}</div>\n                                <div class=\"section-periods\">`;\n                    \n                    // Display all periods for this section\n                    sortedPeriods.forEach((period, index) => {\n                        const timeRange = TimeUtils.formatTimeRange(period.startTime, period.endTime);\n                        const days = TimeUtils.formatDays(period.days);\n                        const periodTypeLabel = this.getPeriodTypeLabel(period.type);\n                        \n                        html += `\n                            <div class=\"period-info\" data-period-type=\"${period.type.toLowerCase()}\">\n                                <div class=\"period-header\">\n                                    <span class=\"period-type-label\">${periodTypeLabel}</span>\n                                    <span class=\"period-schedule\">${days} ${timeRange}</span>\n                                </div>\n                            </div>\n                        `;\n                    });\n                    \n                    html += `\n                                </div>\n                            </div>\n                            <button class=\"section-select-btn ${selectedClass}\"  data-section=\"${section.number}\">\n                                ${isSelected ? '✓' : '+'}\n                            </button>\n                        </div>\n                    `;\n                });\n                \n                html += `</div>`;\n            });\n\n            html += `\n                    </div>\n                </div>\n            `;\n        });\n\n        selectedCoursesContainer.innerHTML = html;\n\n        // Associate DOM elements with Course objects\n        const courseElements = selectedCoursesContainer.querySelectorAll('.schedule-course-item');\n        const removeButtons = selectedCoursesContainer.querySelectorAll('.course-remove-btn');\n        \n        courseElements.forEach((element, index) => {\n            const course = sortedCourses[index]?.course;\n            this.elementToCourseMap.set(element as HTMLElement, course);\n        });\n        \n        removeButtons.forEach((button, index) => {\n            const course = sortedCourses[index]?.course;\n            this.elementToCourseMap.set(button as HTMLElement, course);\n        });\n\n        // IMPORTANT: Associate section buttons with their Course objects\n        const sectionButtons = selectedCoursesContainer.querySelectorAll('.section-select-btn');\n        sectionButtons.forEach(button => {\n            const courseItem = button.closest('.schedule-course-item') as HTMLElement;\n            if (courseItem) {\n                const courseIndex = Array.from(courseElements).indexOf(courseItem);\n                if (courseIndex >= 0 && courseIndex < sortedCourses.length) {\n                    const course = sortedCourses[courseIndex].course;\n                    this.elementToCourseMap.set(button as HTMLElement, course);\n                }\n            }\n        });\n\n        // Restore dropdown states after refresh\n        if (dropdownStates) {\n            // Use setTimeout to ensure DOM is fully updated\n            setTimeout(() => {\n                this.statePreserver?.restore(dropdownStates);\n            }, 0);\n        }\n    }\n\n    handleSectionSelection(course: Course, sectionNumber: string): void {\n        const currentSelectedSection = this.courseSelectionService.getSelectedSection(course);\n        \n        if (currentSelectedSection === sectionNumber) {\n            // Deselect current section\n            this.courseSelectionService.setSelectedSection(course, null);\n        } else {\n            // Select new section (automatically deselects any previous section)\n            this.courseSelectionService.setSelectedSection(course, sectionNumber);\n        }\n        \n        // Note: UI refresh is handled automatically by the selection change listener\n        // No need to call displayScheduleSelectedCourses() here as it would cause duplicate refreshes\n    }\n\n    updateSectionButtonStates(course: Course, selectedSection: string | null): void {\n        // Find the schedule course item by matching the associated Course object\n        let courseItem: HTMLElement | null = null;\n        \n        document.querySelectorAll('.schedule-course-item').forEach(item => {\n            const itemCourse = this.elementToCourseMap.get(item as HTMLElement);\n            if (itemCourse && itemCourse.id === course.id) {\n                courseItem = item as HTMLElement;\n            }\n        });\n        \n        if (!courseItem) return;\n\n        const sectionButtons = courseItem.querySelectorAll('.section-select-btn');\n        const sectionOptions = courseItem.querySelectorAll('.section-option');\n\n        sectionButtons.forEach(button => {\n            const buttonSection = (button as HTMLElement).dataset.section;\n            const isSelected = buttonSection === selectedSection;\n            \n            // Update button appearance\n            if (isSelected) {\n                button.classList.add('selected');\n                button.textContent = '✓';\n            } else {\n                button.classList.remove('selected');\n                button.textContent = '+';\n            }\n        });\n\n        sectionOptions.forEach(option => {\n            const optionSection = (option as HTMLElement).dataset.section;\n            const isSelected = optionSection === selectedSection;\n            \n            // Update option appearance\n            if (isSelected) {\n                option.classList.add('selected');\n            } else {\n                option.classList.remove('selected');\n            }\n        });\n    }\n\n    renderScheduleGrids(): void {\n        const selectedCourses = this.courseSelectionService.getSelectedCourses();\n        const grids = ['A', 'B', 'C', 'D'];\n        \n        console.log('\\n=== RENDER SCHEDULE GRIDS ===');\n        console.log(`Processing ${selectedCourses.length} selected courses for terms: ${grids.join(', ')}`);\n        \n        grids.forEach(term => {\n            const gridContainer = document.getElementById(`schedule-grid-${term}`);\n            if (!gridContainer) return;\n            \n            // Filter courses for this term - use direct Section object access\n            const termCourses = selectedCourses.filter(sc => {\n                const hasSelectedSection = sc.selectedSection !== null;\n                \n                if (!hasSelectedSection) return false;\n                \n                // Debug: log term matching\n                console.log(`  Checking course ${sc.course.department.abbreviation}${sc.course.number} with term \"${sc.selectedSection!.term}\" against grid term \"${term}\"`);\n                \n                // Extract the actual term letter from the section's term string\n                const sectionTermLetter = this.extractTermLetter(sc.selectedSection!.term, sc.selectedSection!.number);\n                const matchesTerm = sectionTermLetter === term;\n                \n                console.log(`    Extracted term letter: \"${sectionTermLetter}\" from term:\"${sc.selectedSection!.term}\" section:\"${sc.selectedSection!.number}\"`);\n                \n                return matchesTerm;\n            });\n            \n            console.log(`Term ${term}: ${termCourses.length} courses`);\n            termCourses.forEach(tc => {\n                console.log(`  ${tc.course.department.abbreviation}${tc.course.number} (${tc.selectedSection!.periods.length} periods)`);\n            });\n            \n            if (termCourses.length === 0) {\n                // Check if there are selected courses without sections for better messaging\n                const coursesWithoutSections = selectedCourses.filter(sc => !sc.selectedSection);\n                this.renderEmptyGrid(gridContainer, term, coursesWithoutSections.length > 0);\n                return;\n            }\n            \n            this.renderPopulatedGrid(gridContainer, termCourses, term);\n        });\n        \n        console.log('=== END RENDER SCHEDULE GRIDS ===\\n');\n    }\n\n    private renderEmptyGrid(container: HTMLElement, term: string, hasCoursesWithoutSections: boolean = false): void {\n        const message = hasCoursesWithoutSections \n            ? `No sections selected for ${term} term<br><small>Select specific sections in the left panel to see schedule</small>`\n            : `No classes scheduled for ${term} term`;\n            \n        container.innerHTML = `\n            <div class=\"empty-schedule\">\n                <div class=\"empty-message\">${message}</div>\n            </div>\n        `;\n        container.classList.add('empty');\n    }\n\n    private renderPopulatedGrid(container: HTMLElement, courses: any[], term: string): void {\n        container.classList.remove('empty');\n        \n        // Create 5-day (Mon-Fri) × 24 time slot grid (7 AM - 7 PM, 30-min intervals)\n        const weekdays = [DayOfWeek.MONDAY, DayOfWeek.TUESDAY, DayOfWeek.WEDNESDAY, DayOfWeek.THURSDAY, DayOfWeek.FRIDAY];\n        const timeSlots = TimeUtils.TOTAL_TIME_SLOTS;\n        \n        let html = '';\n        \n        // First row: empty time cell + day headers\n        html += '<div class=\"time-label\"></div>'; // Empty corner cell\n        weekdays.forEach(day => {\n            html += `<div class=\"day-header\">${TimeUtils.getDayAbbr(day)}</div>`;\n        });\n        \n        // Time rows: time label + 5 schedule cells\n        for (let slot = 0; slot < timeSlots; slot++) {\n            const hour = Math.floor(slot / TimeUtils.SLOTS_PER_HOUR) + TimeUtils.START_HOUR;\n            const minutes = (slot % TimeUtils.SLOTS_PER_HOUR) * 30;\n            const timeLabel = TimeUtils.formatTime({ hours: hour, minutes: minutes, displayTime: '' });\n            \n            // Time label cell\n            html += `<div class=\"time-label\">${timeLabel}</div>`;\n            \n            // Schedule cells for each day\n            weekdays.forEach(day => {\n                const cell = this.getCellContent(courses, day, slot);\n                html += `<div class=\"schedule-cell ${cell.classes}\" data-day=\"${day}\" data-slot=\"${slot}\" style=\"position: relative;\">${cell.content}</div>`;\n            });\n        }\n        \n        container.innerHTML = html;\n        \n        // Add click event listeners for section blocks\n        this.addSectionBlockEventListeners(container);\n    }\n\n    private getCellContent(courses: any[], day: DayOfWeek, timeSlot: number): { content: string, classes: string } {\n        // Find all sections that occupy this cell\n        const occupyingSections: any[] = [];\n        \n        // Log for a wider range to catch the course times\n        const shouldLog = timeSlot < 12 && courses.length > 0; // Log first 6 hours (7:00 AM - 1:00 PM)\n        \n        if (shouldLog && courses.length > 0) {\n            const hour = Math.floor(timeSlot / 2) + 7;\n            const minute = (timeSlot % 2) * 30;\n            console.log(`\\n--- getCellContent: ${day} ${hour}:${minute.toString().padStart(2, '0')} (slot ${timeSlot}) ---`);\n            console.log(`Checking ${courses.length} courses for this time slot`);\n        }\n        \n        for (const selectedCourse of courses) {\n            if (!selectedCourse.selectedSection) {\n                continue;\n            }\n            \n            const section = selectedCourse.selectedSection;\n            \n            // Check if this section has any period that occupies this time slot on this day\n            const periodsOnThisDay = section.periods.filter((period: any) => period.days.has(day));\n            \n            if (shouldLog && periodsOnThisDay.length > 0) {\n                console.log(`  Course ${selectedCourse.course.department.abbreviation}${selectedCourse.course.number} has ${periodsOnThisDay.length} periods on ${day}:`);\n                periodsOnThisDay.forEach(p => {\n                    console.log(`    ${p.type}: ${p.startTime.hours}:${p.startTime.minutes.toString().padStart(2, '0')}-${p.endTime.hours}:${p.endTime.minutes.toString().padStart(2, '0')}`);\n                });\n            }\n            \n            let sectionOccupiesSlot = false;\n            let sectionStartSlot = Infinity;\n            let sectionEndSlot = -1;\n            let isFirstSlot = false;\n            \n            for (const period of periodsOnThisDay) {\n                const startSlot = TimeUtils.timeToGridRowStart(period.startTime);\n                const endSlot = TimeUtils.timeToGridRowEnd(period.endTime);\n                \n                if (shouldLog) {\n                    console.log(`    Checking period ${period.type}: slots ${startSlot}-${endSlot} vs current slot ${timeSlot}`);\n                }\n                \n                if (timeSlot >= startSlot && timeSlot < endSlot) {\n                    sectionOccupiesSlot = true;\n                    sectionStartSlot = Math.min(sectionStartSlot, startSlot);\n                    sectionEndSlot = Math.max(sectionEndSlot, endSlot);\n                    \n                    if (shouldLog) {\n                        console.log(`      ✓ MATCHES! Period occupies slot ${timeSlot}`);\n                    }\n                }\n            }\n            \n            if (sectionOccupiesSlot) {\n                // Check if this is the first slot for this section on this day\n                isFirstSlot = timeSlot === sectionStartSlot;\n                \n                if (shouldLog) {\n                    console.log(`    Course ${selectedCourse.course.department.abbreviation}${selectedCourse.course.number} occupies slot, isFirstSlot: ${isFirstSlot}`);\n                }\n                \n                occupyingSections.push({\n                    course: selectedCourse,\n                    section,\n                    periodsOnThisDay,\n                    startSlot: sectionStartSlot,\n                    endSlot: sectionEndSlot,\n                    isFirstSlot\n                });\n            }\n        }\n        \n        if (occupyingSections.length === 0) {\n            return { content: '', classes: '' };\n        }\n        \n        // Check for conflicts\n        const hasConflict = occupyingSections.length > 1;\n        const primarySection = occupyingSections[0];\n        const courseColor = this.getCourseColor(primarySection.course.course.id);\n        \n        // Calculate how many rows this section should span\n        const rowSpan = primarySection.endSlot - primarySection.startSlot;\n        const heightInPixels = rowSpan * 30; // 30px per row\n        \n        console.log(`Course ${primarySection.course.course.department.abbreviation}${primarySection.course.course.number} should span ${rowSpan} rows (${heightInPixels}px) from slot ${primarySection.startSlot} to ${primarySection.endSlot}`);\n        \n        // Build content for the first section in the slot - simplified to show only course name\n        const content = primarySection.isFirstSlot ? `\n            <div class=\"section-block ${hasConflict ? 'conflict' : ''}\" \n                 data-course-id=\"${primarySection.course.course.id}\"\n                 data-section-number=\"${primarySection.course.selectedSectionNumber || ''}\"\n                 data-selected-course-index=\"${primarySection.courseIndex || 0}\"\n                 style=\"\n                background-color: ${courseColor}; \n                height: ${heightInPixels}px;\n                width: 100%;\n                position: absolute;\n                top: 0;\n                left: 0;\n                z-index: 10;\n                border: 1px solid rgba(0,0,0,0.2);\n                border-radius: 3px;\n                box-sizing: border-box;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                text-align: center;\n                font-weight: bold;\n                font-size: 0.8rem;\n                color: white;\n                text-shadow: 1px 1px 1px rgba(0,0,0,0.3);\n                cursor: pointer;\n            \">\n                ${primarySection.course.course.department.abbreviation}${primarySection.course.course.number}\n            </div>\n        ` : ``; // Empty for continuation slots - the spanning block covers them\n        \n        // Only add classes for the first slot (where content actually appears)\n        const classes = primarySection.isFirstSlot ? \n            `occupied section-start ${hasConflict ? 'has-conflict' : ''}` :\n            ''; // No classes for continuation slots - they should be invisible\n        \n        return { content, classes };\n    }\n\n    private formatSectionPeriods(periods: any[]): string {\n        if (periods.length === 0) return '';\n        \n        // Group periods by type and format them\n        const periodsByType: { [type: string]: any[] } = {};\n        \n        for (const period of periods) {\n            const periodType = this.getPeriodTypeLabel(period.type);\n            if (!periodsByType[periodType]) {\n                periodsByType[periodType] = [];\n            }\n            periodsByType[periodType].push(period);\n        }\n        \n        // Create formatted list of periods\n        const periodStrings: string[] = [];\n        \n        // Sort by priority: Lecture, Lab, Discussion, etc.\n        const typeOrder = ['LEC', 'LAB', 'DIS', 'REC', 'SEM', 'STU', 'CONF'];\n        const sortedTypes = Object.keys(periodsByType).sort((a, b) => {\n            const indexA = typeOrder.indexOf(a);\n            const indexB = typeOrder.indexOf(b);\n            const priorityA = indexA === -1 ? 999 : indexA;\n            const priorityB = indexB === -1 ? 999 : indexB;\n            return priorityA - priorityB;\n        });\n        \n        for (const type of sortedTypes) {\n            const periodsOfType = periodsByType[type];\n            const timeRanges = periodsOfType.map(p => \n                TimeUtils.formatTimeRange(p.startTime, p.endTime)\n            ).join(', ');\n            \n            periodStrings.push(`<div class=\"period-type-info\">\n                <span class=\"period-type\">${type}</span>\n                <span class=\"period-times\">${timeRanges}</span>\n            </div>`);\n        }\n        \n        return periodStrings.join('');\n    }\n\n    private getCourseColor(courseId: string): string {\n        // Generate consistent colors for courses\n        const colors = [\n            '#4CAF50', '#2196F3', '#FF9800', '#9C27B0', '#F44336',\n            '#00BCD4', '#795548', '#607D8B', '#3F51B5', '#E91E63'\n        ];\n        \n        let hash = 0;\n        for (let i = 0; i < courseId.length; i++) {\n            hash = courseId.charCodeAt(i) + ((hash << 5) - hash);\n        }\n        \n        return colors[Math.abs(hash) % colors.length];\n    }\n\n    private getPeriodTypeLabel(type: string): string {\n        const lower = type.toLowerCase();\n        \n        if (lower.includes('lec') || lower.includes('lecture')) return 'LEC';\n        if (lower.includes('lab')) return 'LAB';\n        if (lower.includes('dis') || lower.includes('discussion')) return 'DIS';\n        if (lower.includes('rec') || lower.includes('recitation')) return 'REC';\n        if (lower.includes('sem') || lower.includes('seminar')) return 'SEM';\n        if (lower.includes('studio')) return 'STU';\n        if (lower.includes('conference') || lower.includes('conf')) return 'CONF';\n        \n        // Return abbreviated version for unknown types (first 3-4 chars)\n        return type.substring(0, Math.min(4, type.length)).toUpperCase();\n    }\n\n    private getPeriodTypeClass(type: string): string {\n        const lower = type.toLowerCase();\n        \n        if (lower.includes('lec') || lower.includes('lecture')) return 'period-lecture';\n        if (lower.includes('lab')) return 'period-lab';\n        if (lower.includes('dis') || lower.includes('discussion')) return 'period-discussion';\n        if (lower.includes('rec') || lower.includes('recitation')) return 'period-recitation';\n        if (lower.includes('sem') || lower.includes('seminar')) return 'period-seminar';\n        if (lower.includes('studio')) return 'period-studio';\n        if (lower.includes('conference') || lower.includes('conf')) return 'period-conference';\n        \n        return 'period-other';\n    }\n\n    getCourseFromElement(element: HTMLElement): Course | undefined {\n        return this.elementToCourseMap.get(element);\n    }\n\n    private extractTermLetter(termString: string, sectionNumber?: string): string {\n        // Option 1: Section number pattern (primary method - most reliable)\n        // Extract term from section numbers like \"A01\" -> A, \"D01\" -> D\n        if (sectionNumber) {\n            const sectionMatch = sectionNumber.match(/^([ABCD])/i);\n            if (sectionMatch) {\n                return sectionMatch[1].toUpperCase();\n            }\n        }\n        \n        // Option 2: Text format for future compatibility (\"2025 Fall A Term\", \"2026 Spring C Term\")\n        if (termString) {\n            const textMatch = termString.match(/\\b([ABCD])\\s+Term/i);\n            if (textMatch) {\n                return textMatch[1].toUpperCase();\n            }\n        }\n        \n        // Note: Removed incorrect numeric mapping - \"202201\" is academic year code, not term-specific\n        \n        // Ultimate fallback\n        return 'A';\n    }\n\n    private addSectionBlockEventListeners(container: HTMLElement): void {\n        // Use event delegation to handle clicks on section blocks\n        container.addEventListener('click', (event) => {\n            const target = event.target as HTMLElement;\n            \n            // Find the section block element (might be the target or a parent)\n            const sectionBlock = target.closest('.section-block');\n            if (!sectionBlock) return;\n            \n            // Get section information from data attributes\n            const courseId = (sectionBlock as HTMLElement).dataset.courseId;\n            const sectionNumber = (sectionBlock as HTMLElement).dataset.sectionNumber;\n            \n            if (courseId && sectionNumber) {\n                event.stopPropagation(); // Prevent event bubbling\n                this.showSectionInfoModal(courseId, sectionNumber);\n            }\n        });\n    }\n\n    showSectionInfoModal(courseId: string, sectionNumber: string): void {\n        if (!this.sectionInfoModalController) {\n            console.warn('Section info modal controller not available');\n            return;\n        }\n\n        // Find the selected course and section\n        const selectedCourses = this.courseSelectionService.getSelectedCourses();\n        const selectedCourse = selectedCourses.find(sc => sc.course.id === courseId);\n        \n        if (!selectedCourse || !selectedCourse.selectedSection) {\n            console.warn('Course or section not found:', courseId, sectionNumber);\n            return;\n        }\n\n        const course = selectedCourse.course;\n        const section = selectedCourse.selectedSection;\n\n        // Create section data for modal controller\n        const sectionData = {\n            courseCode: `${course.department.abbreviation}${course.number}`,\n            courseName: course.name,\n            section: section,\n            course: course\n        };\n\n        // Show modal using the dedicated controller\n        this.sectionInfoModalController.show(sectionData);\n    }\n\n}","import { ModalService } from '../../services/ModalService';\n\nexport interface SectionData {\n    courseCode: string;\n    courseName: string;\n    section: {\n        number: string;\n        crn: number;\n        term: string;\n        seatsAvailable: number;\n        actualWaitlist: number;\n        maxWaitlist: number;\n        note?: string;\n        periods: Array<{\n            type: string;\n            professor: string;\n            startTime: { displayTime: string };\n            endTime: { displayTime: string };\n            days: Set<string>;\n            building: string;\n            room: string;\n            location: string;\n        }>;\n    };\n    course: {\n        minCredits: number;\n        maxCredits: number;\n    };\n}\n\nexport class SectionInfoModalController {\n    private modalService: ModalService;\n\n    constructor(modalService: ModalService) {\n        this.modalService = modalService;\n    }\n\n    show(data: SectionData): string {\n        const id = this.modalService.generateId();\n        const modalElement = this.createModalElement(id, data);\n        \n        this.modalService.showModal(id, modalElement);\n        this.modalService.setupModalBehavior(modalElement, id);\n\n        return id;\n    }\n\n    private createModalElement(id: string, data: SectionData): HTMLElement {\n        // Create modal backdrop\n        const backdrop = document.createElement('div');\n        backdrop.className = 'modal-backdrop';\n        backdrop.id = id;\n\n        // Add embedded CSS\n        const style = document.createElement('style');\n        style.textContent = this.getModalCSS();\n        backdrop.appendChild(style);\n\n        // Create modal content\n        backdrop.innerHTML += `\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h3 class=\"modal-title\">${data.courseCode} - ${data.courseName}</h3>\n                        <button class=\"modal-close\" onclick=\"document.getElementById('${id}').click()\">×</button>\n                    </div>\n                    <div class=\"modal-body\">\n                        ${this.generateModalBody(data)}\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button class=\"modal-btn btn-primary\" onclick=\"document.getElementById('${id}').click()\">Close</button>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Prevent clicks on modal dialog from closing modal\n        const dialog = backdrop.querySelector('.modal-dialog') as HTMLElement;\n        if (dialog) {\n            dialog.addEventListener('click', (event) => {\n                event.stopPropagation();\n            });\n        }\n\n        return backdrop;\n    }\n\n    private generateModalBody(data: SectionData): string {\n        const enrollmentStatus = data.section.seatsAvailable > 0 \n            ? `${data.section.seatsAvailable} seats available` \n            : 'Full';\n        \n        const waitlistInfo = data.section.maxWaitlist > 0 \n            ? `Waitlist: ${data.section.actualWaitlist}/${data.section.maxWaitlist}` \n            : '';\n\n        const meetingTimes = data.section.periods.map(period => {\n            const daysArray = Array.from(period.days).sort();\n            const daysStr = daysArray.join(', ').toUpperCase();\n            const timeStr = `${period.startTime.displayTime} - ${period.endTime.displayTime}`;\n            const location = period.building && period.room \n                ? `${period.building} ${period.room}` \n                : period.location || 'TBA';\n            \n            return `\n                <div class=\"period-info\">\n                    <div class=\"period-type\">${this.getPeriodTypeLabel(period.type)}</div>\n                    <div class=\"period-schedule\">\n                        <div>${daysStr} ${timeStr}</div>\n                        <div class=\"period-location\">${location}</div>\n                    </div>\n                </div>\n            `;\n        }).join('');\n\n        return `\n            <div class=\"section-modal-content\">\n                <div class=\"section-basic-info\">\n                    <div class=\"section-detail\"><strong>Section:</strong> ${data.section.number}</div>\n                    <div class=\"section-detail\"><strong>CRN:</strong> ${data.section.crn}</div>\n                    <div class=\"section-detail\"><strong>Term:</strong> ${data.section.term}</div>\n                    <div class=\"section-detail\"><strong>Credits:</strong> ${data.course.minCredits === data.course.maxCredits ? data.course.minCredits : `${data.course.minCredits}-${data.course.maxCredits}`}</div>\n                </div>\n                \n                <div class=\"section-enrollment ${data.section.seatsAvailable > 0 ? '' : 'full'}\">\n                    <div class=\"enrollment-status ${data.section.seatsAvailable > 0 ? 'available' : 'full'}\">\n                        ${enrollmentStatus}\n                    </div>\n                    ${waitlistInfo ? `<div class=\"waitlist-info\">${waitlistInfo}</div>` : ''}\n                </div>\n                \n                <div class=\"section-meetings\">\n                    <h4>Meeting Times</h4>\n                    ${meetingTimes}\n                </div>\n                \n                ${data.section.note ? `\n                    <div class=\"section-notes\">\n                        <h4>Notes</h4>\n                        <p>${data.section.note}</p>\n                    </div>\n                ` : ''}\n            </div>\n        `;\n    }\n\n    private getPeriodTypeLabel(type: string): string {\n        const lower = type.toLowerCase();\n        \n        if (lower.includes('lec') || lower.includes('lecture')) return 'LEC';\n        if (lower.includes('lab')) return 'LAB';\n        if (lower.includes('dis') || lower.includes('discussion')) return 'DIS';\n        if (lower.includes('rec') || lower.includes('recitation')) return 'REC';\n        if (lower.includes('sem') || lower.includes('seminar')) return 'SEM';\n        if (lower.includes('studio')) return 'STU';\n        if (lower.includes('conference') || lower.includes('conf')) return 'CONF';\n        \n        return type.substring(0, Math.min(4, type.length)).toUpperCase();\n    }\n\n    private getModalCSS(): string {\n        return `\n            .modal-backdrop {\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background-color: rgba(0, 0, 0, 0.5);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                padding: 1rem;\n                opacity: 0;\n                transition: var(--effect-transition);\n                cursor: pointer;\n            }\n\n            .modal-backdrop.show {\n                opacity: 1;\n            }\n\n            .modal-backdrop.hide {\n                opacity: 0;\n            }\n\n            .modal-dialog {\n                background: var(--color-surface);\n                border-radius: var(--effect-border-radius-large);\n                box-shadow: var(--effect-shadow-hover);\n                max-width: 600px;\n                width: 100%;\n                max-height: 90vh;\n                overflow: hidden;\n                transform: scale(0.9);\n                transition: var(--effect-transition);\n                cursor: default;\n            }\n\n            .modal-backdrop.show .modal-dialog {\n                transform: scale(1);\n            }\n\n            .modal-backdrop.hide .modal-dialog {\n                transform: scale(0.9);\n            }\n\n            .modal-content {\n                display: flex;\n                flex-direction: column;\n                max-height: 90vh;\n            }\n\n            .modal-header {\n                padding: 1.5rem 1.5rem 1rem 1.5rem;\n                display: flex;\n                align-items: center;\n                justify-content: space-between;\n                border-bottom: 1px solid var(--color-border);\n                background: linear-gradient(135deg, var(--color-primary), var(--color-primary-light));\n                color: var(--color-text-inverse);\n            }\n\n            .modal-title {\n                margin: 0;\n                font-size: 1.4rem;\n                font-weight: 600;\n                color: var(--color-text-inverse);\n                font-family: var(--font-family);\n            }\n\n            .modal-close {\n                background: none;\n                border: none;\n                font-size: 1.5rem;\n                color: rgba(255, 255, 255, 0.8);\n                cursor: pointer;\n                padding: 0;\n                width: 32px;\n                height: 32px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                border-radius: var(--effect-border-radius);\n                transition: var(--effect-transition);\n            }\n\n            .modal-close:hover {\n                background: rgba(255, 255, 255, 0.1);\n                color: var(--color-text-inverse);\n            }\n\n            .modal-body {\n                padding: 1.5rem;\n                flex: 1;\n                overflow-y: auto;\n                background: var(--color-surface);\n            }\n\n            .section-modal-content {\n                display: flex;\n                flex-direction: column;\n                gap: 1.25rem;\n                max-width: 100%;\n                margin: 0 auto;\n                align-items: center;\n            }\n\n            .section-basic-info {\n                display: grid;\n                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n                gap: 0.75rem;\n                padding: 1rem;\n                background: rgba(172, 43, 55, 0.08);\n                border: 1px solid var(--color-border);\n                border-radius: var(--effect-border-radius);\n                border-left: 4px solid var(--color-primary);\n                box-shadow: var(--effect-shadow);\n                width: 100%;\n            }\n\n            .section-detail {\n                font-size: 0.9rem;\n                color: var(--color-text);\n                font-family: var(--font-family);\n            }\n\n            .section-detail strong {\n                color: var(--color-primary);\n                font-weight: 600;\n            }\n\n            .section-enrollment {\n                padding: 1rem;\n                background: rgba(172, 43, 55, 0.08);\n                border: 1px solid var(--color-border);\n                border-radius: var(--effect-border-radius);\n                border-left: 4px solid var(--color-success);\n                box-shadow: var(--effect-shadow);\n                width: 100%;\n            }\n\n            .section-enrollment.full {\n                background: rgba(172, 43, 55, 0.08);\n                border-left-color: var(--color-error);\n            }\n\n            .enrollment-status {\n                font-weight: 600;\n                margin-bottom: 0.5rem;\n                font-size: 1rem;\n                font-family: var(--font-family);\n            }\n\n            .enrollment-status.available {\n                color: var(--color-success);\n            }\n\n            .enrollment-status.full {\n                color: var(--color-error);\n            }\n\n            .waitlist-info {\n                font-size: 0.875rem;\n                color: var(--color-text-secondary);\n                margin-top: 0.25rem;\n                font-family: var(--font-family);\n            }\n\n            .section-meetings {\n                width: 100%;\n            }\n\n            .section-meetings h4 {\n                margin: 0 0 1rem 0;\n                font-size: 1.1rem;\n                color: var(--color-text);\n                padding-bottom: 0.5rem;\n                border-bottom: 2px solid var(--color-border);\n                font-family: var(--font-family);\n            }\n\n            .period-info {\n                display: flex;\n                gap: 1rem;\n                padding: 1rem;\n                background: var(--color-surface);\n                border: 1px solid var(--color-border);\n                border-radius: var(--effect-border-radius);\n                margin-bottom: 0.75rem;\n                box-shadow: var(--effect-shadow);\n            }\n\n            .period-type {\n                background: linear-gradient(135deg, var(--color-primary), var(--color-primary-light));\n                color: var(--color-text-inverse);\n                padding: 0.4rem 0.8rem;\n                border-radius: var(--effect-border-radius);\n                font-size: 0.8rem;\n                font-weight: 700;\n                height: fit-content;\n                min-width: 50px;\n                text-align: center;\n                box-shadow: var(--effect-shadow);\n                font-family: var(--font-family);\n            }\n\n            .period-schedule {\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                gap: 0.3rem;\n                font-size: 0.875rem;\n                font-family: var(--font-family);\n                align-items: flex-start;\n            }\n\n            .period-schedule div {\n                color: var(--color-text);\n                font-weight: 500;\n            }\n\n            .period-location {\n                color: var(--color-text-secondary);\n                font-size: 0.8rem;\n                font-weight: normal;\n            }\n\n            .section-notes {\n                background: var(--color-background-alt);\n                border: 1px solid var(--color-warning);\n                border-radius: var(--effect-border-radius);\n                padding: 1rem;\n                width: 100%;\n            }\n\n            .section-notes h4 {\n                margin: 0 0 0.5rem 0;\n                font-size: 1rem;\n                color: var(--color-warning);\n                border: none;\n                padding: 0;\n                font-family: var(--font-family);\n            }\n\n            .section-notes p {\n                margin: 0;\n                font-size: 0.875rem;\n                color: var(--color-text-secondary);\n                line-height: 1.5;\n                font-family: var(--font-family);\n            }\n\n            .modal-footer {\n                padding: 1rem 1.5rem 1.5rem 1.5rem;\n                display: flex;\n                gap: 0.75rem;\n                justify-content: flex-end;\n                border-top: 1px solid var(--color-border);\n                background: var(--color-background);\n            }\n\n            .modal-btn {\n                padding: 0.6rem 1.25rem;\n                border-radius: var(--effect-border-radius);\n                font-weight: 600;\n                font-size: 0.875rem;\n                cursor: pointer;\n                transition: var(--effect-transition);\n                border: 1px solid;\n                min-width: 100px;\n                font-family: var(--font-family);\n            }\n\n            .btn-primary {\n                background: linear-gradient(135deg, var(--color-primary), var(--color-primary-light));\n                color: var(--color-text-inverse);\n                border-color: var(--color-primary);\n            }\n\n            .btn-primary:hover {\n                background: linear-gradient(135deg, var(--color-primary-hover), var(--color-primary));\n                border-color: var(--color-primary-hover);\n                transform: translateY(-1px);\n                box-shadow: var(--effect-shadow-hover);\n            }\n\n            @media (max-width: 768px) {\n                .modal-backdrop {\n                    padding: 0.5rem;\n                }\n                \n                .modal-dialog {\n                    max-width: 100%;\n                    margin: 0;\n                }\n                \n                .modal-body {\n                    padding: 1rem;\n                }\n                \n                .section-basic-info {\n                    grid-template-columns: 1fr;\n                    padding: 0.75rem;\n                }\n                \n                .period-info {\n                    flex-direction: column;\n                    gap: 0.75rem;\n                }\n                \n                .period-type {\n                    align-self: flex-start;\n                    width: fit-content;\n                }\n                \n\n                .modal-footer {\n                    padding: 0.75rem 1rem 1rem 1rem;\n                }\n                \n                .modal-btn {\n                    width: 100%;\n                }\n            }\n        `;\n    }\n}","import { ModalService } from '../../services/ModalService';\n\nexport type InfoModalType = 'info' | 'warning' | 'error' | 'success';\n\nexport class InfoModalController {\n    private modalService: ModalService;\n\n    constructor(modalService: ModalService) {\n        this.modalService = modalService;\n    }\n\n    show(title: string, message: string, type: InfoModalType = 'info'): string {\n        const id = this.modalService.generateId();\n        const modalElement = this.createModalElement(id, title, message, type);\n        \n        this.modalService.showModal(id, modalElement);\n        this.modalService.setupModalBehavior(modalElement, id);\n\n        return id;\n    }\n\n    showInfo(title: string, message: string): string {\n        return this.show(title, message, 'info');\n    }\n\n    showWarning(title: string, message: string): string {\n        return this.show(title, message, 'warning');\n    }\n\n    showError(title: string, message: string): string {\n        return this.show(title, message, 'error');\n    }\n\n    showSuccess(title: string, message: string): string {\n        return this.show(title, message, 'success');\n    }\n\n    private createModalElement(id: string, title: string, message: string, type: InfoModalType): HTMLElement {\n        // Create modal backdrop\n        const backdrop = document.createElement('div');\n        backdrop.className = 'modal-backdrop';\n        backdrop.id = id;\n\n        // Add embedded CSS\n        const style = document.createElement('style');\n        style.textContent = this.getModalCSS();\n        backdrop.appendChild(style);\n\n        // Create modal content\n        backdrop.innerHTML += `\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header ${type}\">\n                        <h3 class=\"modal-title\">${title}</h3>\n                        <button class=\"modal-close\" onclick=\"document.getElementById('${id}').click()\">×</button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <div class=\"modal-icon ${type}\">\n                            ${this.getIconForType(type)}\n                        </div>\n                        <div class=\"modal-text\">\n                            ${message}\n                        </div>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button class=\"modal-btn btn-${this.getButtonStyleForType(type)}\" onclick=\"document.getElementById('${id}').click()\">OK</button>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Prevent clicks on modal dialog from closing modal\n        const dialog = backdrop.querySelector('.modal-dialog') as HTMLElement;\n        if (dialog) {\n            dialog.addEventListener('click', (event) => {\n                event.stopPropagation();\n            });\n        }\n\n        return backdrop;\n    }\n\n    private getIconForType(type: InfoModalType): string {\n        switch (type) {\n            case 'info': return 'ℹ';\n            case 'warning': return '⚠';\n            case 'error': return '✖';\n            case 'success': return '✓';\n            default: return 'ℹ';\n        }\n    }\n\n    private getButtonStyleForType(type: InfoModalType): string {\n        switch (type) {\n            case 'error': return 'danger';\n            case 'warning': return 'warning';\n            case 'success': return 'success';\n            case 'info':\n            default: return 'primary';\n        }\n    }\n\n    private getModalCSS(): string {\n        return `\n            .modal-backdrop {\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background-color: rgba(0, 0, 0, 0.5);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                padding: 1rem;\n                opacity: 0;\n                transition: var(--effect-transition);\n                cursor: pointer;\n            }\n\n            .modal-backdrop.show {\n                opacity: 1;\n            }\n\n            .modal-backdrop.hide {\n                opacity: 0;\n            }\n\n            .modal-dialog {\n                background: var(--color-surface);\n                border-radius: var(--effect-border-radius-large);\n                box-shadow: var(--effect-shadow-hover);\n                max-width: 500px;\n                width: 100%;\n                max-height: 90vh;\n                overflow: hidden;\n                transform: scale(0.9);\n                transition: var(--effect-transition);\n                cursor: default;\n            }\n\n            .modal-backdrop.show .modal-dialog {\n                transform: scale(1);\n            }\n\n            .modal-backdrop.hide .modal-dialog {\n                transform: scale(0.9);\n            }\n\n            .modal-content {\n                display: flex;\n                flex-direction: column;\n                max-height: 90vh;\n            }\n\n            .modal-header {\n                padding: 1.5rem 1.5rem 1rem 1.5rem;\n                display: flex;\n                align-items: center;\n                justify-content: space-between;\n                border-bottom: 1px solid var(--color-border);\n                color: var(--color-text-inverse);\n            }\n\n            .modal-header.info {\n                background: linear-gradient(135deg, var(--color-info), var(--color-primary));\n            }\n\n            .modal-header.warning {\n                background: linear-gradient(135deg, var(--color-warning), var(--color-warning));\n            }\n\n            .modal-header.error {\n                background: linear-gradient(135deg, var(--color-error), var(--color-error));\n            }\n\n            .modal-header.success {\n                background: linear-gradient(135deg, var(--color-success), var(--color-success));\n            }\n\n            .modal-title {\n                margin: 0;\n                font-size: 1.25rem;\n                font-weight: 600;\n                color: var(--color-text-inverse);\n                font-family: var(--font-family);\n            }\n\n            .modal-close {\n                background: none;\n                border: none;\n                font-size: 1.5rem;\n                color: rgba(255, 255, 255, 0.8);\n                cursor: pointer;\n                padding: 0;\n                width: 32px;\n                height: 32px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                border-radius: var(--effect-border-radius);\n                transition: var(--effect-transition);\n            }\n\n            .modal-close:hover {\n                background: rgba(255, 255, 255, 0.1);\n                color: var(--color-text-inverse);\n            }\n\n            .modal-body {\n                padding: 1rem 1.5rem;\n                flex: 1;\n                overflow-y: auto;\n                display: flex;\n                align-items: flex-start;\n                gap: 1rem;\n                background: var(--color-surface);\n            }\n\n            .modal-icon {\n                flex-shrink: 0;\n                width: 48px;\n                height: 48px;\n                border-radius: 50%;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                font-size: 1.5rem;\n                font-weight: bold;\n            }\n\n            .modal-icon.info {\n                background: rgba(0, 123, 255, 0.1);\n                color: var(--color-info);\n            }\n\n            .modal-icon.warning {\n                background: rgba(255, 193, 7, 0.1);\n                color: var(--color-warning);\n            }\n\n            .modal-icon.error {\n                background: rgba(220, 53, 69, 0.1);\n                color: var(--color-error);\n            }\n\n            .modal-icon.success {\n                background: rgba(40, 167, 69, 0.1);\n                color: var(--color-success);\n            }\n\n            .modal-text {\n                flex: 1;\n                color: var(--color-text);\n                line-height: 1.5;\n                font-family: var(--font-family);\n            }\n\n            .modal-footer {\n                padding: 1rem 1.5rem 1.5rem 1.5rem;\n                display: flex;\n                gap: 0.75rem;\n                justify-content: flex-end;\n                border-top: 1px solid var(--color-border);\n                background: var(--color-background);\n            }\n\n            .modal-btn {\n                padding: 0.5rem 1rem;\n                border-radius: var(--effect-border-radius);\n                font-weight: 500;\n                font-size: 0.875rem;\n                cursor: pointer;\n                transition: var(--effect-transition);\n                border: 1px solid;\n                min-width: 80px;\n                font-family: var(--font-family);\n            }\n\n            .btn-primary {\n                background: var(--color-primary);\n                color: var(--color-text-inverse);\n                border-color: var(--color-primary);\n            }\n\n            .btn-primary:hover {\n                background: var(--color-primary-hover);\n                border-color: var(--color-primary-hover);\n                transform: translateY(-1px);\n            }\n\n            .btn-warning {\n                background: var(--color-warning);\n                color: var(--color-text);\n                border-color: var(--color-warning);\n            }\n\n            .btn-warning:hover {\n                background: var(--color-warning);\n                border-color: var(--color-warning);\n                transform: translateY(-1px);\n                opacity: 0.9;\n            }\n\n            .btn-danger {\n                background: var(--color-error);\n                color: var(--color-text-inverse);\n                border-color: var(--color-error);\n            }\n\n            .btn-danger:hover {\n                background: var(--color-error);\n                border-color: var(--color-error);\n                transform: translateY(-1px);\n                opacity: 0.9;\n            }\n\n            .btn-success {\n                background: var(--color-success);\n                color: var(--color-text-inverse);\n                border-color: var(--color-success);\n            }\n\n            .btn-success:hover {\n                background: var(--color-success);\n                border-color: var(--color-success);\n                transform: translateY(-1px);\n                opacity: 0.9;\n            }\n\n            @media (max-width: 768px) {\n                .modal-backdrop {\n                    padding: 0.5rem;\n                }\n                \n                .modal-dialog {\n                    max-width: 100%;\n                    margin: 0;\n                }\n                \n                .modal-header {\n                    padding: 1rem 1rem 0.75rem 1rem;\n                }\n                \n                .modal-body {\n                    padding: 0.75rem 1rem;\n                }\n                \n                .modal-footer {\n                    padding: 0.75rem 1rem 1rem 1rem;\n                }\n                \n                .modal-btn {\n                    width: 100%;\n                    margin: 0;\n                }\n                \n                .modal-icon {\n                    width: 40px;\n                    height: 40px;\n                    font-size: 1.25rem;\n                }\n            }\n        `;\n    }\n}","import { ModalService } from '../../services/ModalService';\nimport { FilterService } from '../../services/FilterService';\nimport { Course, Department } from '../../types/types';\n\nexport class FilterModalController {\n    private modalService: ModalService;\n    private filterService: FilterService | null = null;\n    private allCourses: Course[] = [];\n    private allDepartments: Department[] = [];\n    private currentModalId: string | null = null;\n\n    constructor(modalService: ModalService) {\n        this.modalService = modalService;\n    }\n\n    setFilterService(filterService: FilterService): void {\n        this.filterService = filterService;\n    }\n\n    setCourseData(departments: Department[]): void {\n        this.allDepartments = departments;\n        this.allCourses = [];\n        departments.forEach(dept => {\n            this.allCourses.push(...dept.courses);\n        });\n    }\n\n    // Method to sync search input from main controller\n    syncSearchInputFromMain(query: string): void {\n        if (this.currentModalId) {\n            const modalElement = document.getElementById(this.currentModalId);\n            if (modalElement) {\n                const searchInput = modalElement.querySelector('.search-text-input') as HTMLInputElement;\n                if (searchInput && searchInput.value !== query) {\n                    searchInput.value = query;\n                    this.updateClearSearchButton(modalElement, query);\n                }\n            }\n        }\n    }\n\n    // Method to refresh department selection from external changes\n    refreshDepartmentSelection(): void {\n        if (this.currentModalId) {\n            const modalElement = document.getElementById(this.currentModalId);\n            if (modalElement) {\n                this.updateDepartmentCheckboxes(modalElement);\n            }\n        }\n    }\n\n    private updateDepartmentCheckboxes(modalElement: HTMLElement): void {\n        if (!this.filterService) return;\n        \n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'department');\n        const activeDepartments = activeFilter?.criteria?.departments || [];\n        \n        // Update all department checkboxes\n        const checkboxes = modalElement.querySelectorAll('input[data-filter=\"department\"]') as NodeListOf<HTMLInputElement>;\n        checkboxes.forEach(checkbox => {\n            checkbox.checked = activeDepartments.includes(checkbox.value);\n        });\n        \n        // Update preview\n        this.updatePreview(modalElement);\n    }\n\n    show(): string {\n        if (!this.filterService) {\n            console.error('FilterService not set on FilterModalController');\n            return '';\n        }\n\n        const id = this.modalService.generateId();\n        this.currentModalId = id;\n        const modalElement = this.createModalElement(id);\n        \n        this.modalService.showModal(id, modalElement);\n        this.modalService.setupModalBehavior(modalElement, id, { closeOnBackdrop: true, closeOnEscape: true });\n\n        // Set up filter UI after modal is shown\n        setTimeout(() => this.initializeFilterUI(modalElement), 50);\n\n        return id;\n    }\n\n    private createModalElement(id: string): HTMLElement {\n        const backdrop = document.createElement('div');\n        backdrop.className = 'modal-backdrop filter-modal';\n        backdrop.id = id;\n\n        const activeFiltersCount = this.filterService?.getFilterCount() || 0;\n        const courseCount = this.filterService ? this.filterService.filterCourses(this.allCourses).length : this.allCourses.length;\n\n        backdrop.innerHTML = `\n            <div class=\"modal-dialog filter-modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h3 class=\"modal-title\">\n                            Filter Courses \n                            <span id=\"filter-count\" class=\"filter-count\">${activeFiltersCount > 0 ? `(${activeFiltersCount})` : ''}</span>\n                        </h3>\n                        <button class=\"modal-close\" onclick=\"document.getElementById('${id}').click()\">×</button>\n                    </div>\n                    <div class=\"modal-body filter-modal-body\">\n                        ${this.createFilterSections()}\n                    </div>\n                    <div class=\"modal-footer\">\n                        <div class=\"filter-preview\">\n                            <span id=\"course-count-preview\">${courseCount} courses match current filters</span>\n                        </div>\n                        <div class=\"filter-actions\">\n                            <button class=\"modal-btn btn-secondary\" id=\"clear-all-filters\">Clear All</button>\n                            <button class=\"modal-btn btn-primary\" onclick=\"document.getElementById('${id}').click()\">Apply</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        const dialog = backdrop.querySelector('.modal-dialog') as HTMLElement;\n        if (dialog) {\n            dialog.addEventListener('click', (event) => {\n                event.stopPropagation();\n            });\n        }\n\n        return backdrop;\n    }\n\n    private createFilterSections(): string {\n        return `\n            <div class=\"filter-sections\">\n                ${this.createSearchTextFilter()}\n                ${this.createDepartmentFilter()}\n                ${this.createAvailabilityFilter()}\n                ${this.createCreditRangeFilter()}\n                ${this.createProfessorFilter()}\n                ${this.createTermFilter()}\n                ${this.createLocationFilter()}\n            </div>\n        `;\n    }\n\n    private createSearchTextFilter(): string {\n        if (!this.filterService) return '';\n        \n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'searchText');\n        const currentQuery = activeFilter?.criteria?.query || '';\n\n        return `\n            <div class=\"filter-section search-text-section\">\n                <div class=\"filter-section-header\">\n                    <h4 class=\"filter-section-title\">Search Text</h4>\n                    <button class=\"filter-clear-search\" ${currentQuery ? '' : 'style=\"display: none;\"'}>Clear</button>\n                </div>\n                <div class=\"filter-section-content\">\n                    <div class=\"filter-search-container\">\n                        <input type=\"text\" class=\"filter-search search-text-input\" \n                               placeholder=\"Search courses...\" \n                               value=\"${this.escapeHtml(currentQuery)}\"\n                               data-filter=\"searchText\">\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private createDepartmentFilter(): string {\n        if (!this.filterService) return '';\n        \n        const departments = this.filterService.getFilterOptions('department', this.allCourses) as string[];\n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'department');\n        const activeDepartments = activeFilter?.criteria?.departments || [];\n\n        const departmentCheckboxes = departments.map(dept => `\n            <label class=\"filter-checkbox-label\">\n                <input type=\"checkbox\" value=\"${dept}\" ${activeDepartments.includes(dept) ? 'checked' : ''} \n                       data-filter=\"department\">\n                <span class=\"filter-checkbox-text\">${dept}</span>\n            </label>\n        `).join('');\n\n        return `\n            <div class=\"filter-section\">\n                <div class=\"filter-section-header\">\n                    <h4 class=\"filter-section-title\">Departments</h4>\n                    <div class=\"filter-section-actions\">\n                        <button class=\"filter-select-all\" data-filter=\"department\">All</button>\n                        <button class=\"filter-select-none\" data-filter=\"department\">None</button>\n                    </div>\n                </div>\n                <div class=\"filter-section-content\">\n                    <div class=\"filter-search-container\">\n                        <input type=\"text\" class=\"filter-search\" placeholder=\"Search departments...\" data-filter=\"department\">\n                    </div>\n                    <div class=\"filter-checkbox-grid\" id=\"department-checkboxes\">\n                        ${departmentCheckboxes}\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private createAvailabilityFilter(): string {\n        if (!this.filterService) return '';\n        \n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'availability');\n        const isChecked = activeFilter?.criteria?.availableOnly || false;\n\n        return `\n            <div class=\"filter-section\">\n                <div class=\"filter-section-header\">\n                    <h4 class=\"filter-section-title\">Availability</h4>\n                </div>\n                <div class=\"filter-section-content\">\n                    <label class=\"filter-toggle-label\">\n                        <input type=\"checkbox\" class=\"filter-toggle\" data-filter=\"availability\" ${isChecked ? 'checked' : ''}>\n                        <span class=\"filter-toggle-slider\"></span>\n                        <span class=\"filter-toggle-text\">Show only courses with available seats</span>\n                    </label>\n                </div>\n            </div>\n        `;\n    }\n\n    private createCreditRangeFilter(): string {\n        if (!this.filterService) return '';\n        \n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'creditRange');\n        const minCredits = activeFilter?.criteria?.min || 1;\n        const maxCredits = activeFilter?.criteria?.max || 4;\n\n        return `\n            <div class=\"filter-section\">\n                <div class=\"filter-section-header\">\n                    <h4 class=\"filter-section-title\">Credit Hours</h4>\n                </div>\n                <div class=\"filter-section-content\">\n                    <div class=\"filter-range-container\">\n                        <div class=\"filter-range-inputs\">\n                            <div class=\"filter-range-input\">\n                                <label>Min Credits</label>\n                                <input type=\"number\" min=\"1\" max=\"4\" value=\"${minCredits}\" \n                                       id=\"credit-min\" data-filter=\"creditRange\">\n                            </div>\n                            <div class=\"filter-range-input\">\n                                <label>Max Credits</label>\n                                <input type=\"number\" min=\"1\" max=\"4\" value=\"${maxCredits}\" \n                                       id=\"credit-max\" data-filter=\"creditRange\">\n                            </div>\n                        </div>\n                        <div class=\"filter-quick-select\">\n                            <button class=\"filter-quick-btn\" data-credits=\"1\">1</button>\n                            <button class=\"filter-quick-btn\" data-credits=\"2\">2</button>\n                            <button class=\"filter-quick-btn\" data-credits=\"3\">3</button>\n                            <button class=\"filter-quick-btn\" data-credits=\"4\">4</button>\n                            <button class=\"filter-quick-btn\" data-credits=\"3-4\">3-4</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private createProfessorFilter(): string {\n        if (!this.filterService) return '';\n        \n        const professors = this.filterService.getFilterOptions('professor', this.allCourses) as string[];\n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'professor');\n        const activeProfessors = activeFilter?.criteria?.professors || [];\n\n        const selectedProfessorsChips = activeProfessors.map((prof: any) => `\n            <span class=\"filter-chip\">\n                ${this.escapeHtml(prof)}\n                <button class=\"filter-chip-remove\" data-professor=\"${this.escapeHtml(prof)}\">×</button>\n            </span>\n        `).join('');\n\n        return `\n            <div class=\"filter-section\">\n                <div class=\"filter-section-header\">\n                    <h4 class=\"filter-section-title\">Professors</h4>\n                </div>\n                <div class=\"filter-section-content\">\n                    <div class=\"filter-search-container\">\n                        <input type=\"text\" class=\"filter-search professor-search\" \n                               placeholder=\"Search professors...\" data-filter=\"professor\">\n                        <div class=\"professor-dropdown\" id=\"professor-dropdown\" style=\"display: none;\"></div>\n                    </div>\n                    <div class=\"filter-selected-chips\">\n                        ${selectedProfessorsChips}\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private createTermFilter(): string {\n        if (!this.filterService) return '';\n        \n        const terms = this.filterService.getFilterOptions('term', this.allCourses) as string[];\n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'term');\n        const activeTerms = activeFilter?.criteria?.terms || [];\n\n        const termCheckboxes = terms.map(term => `\n            <label class=\"filter-checkbox-label term-checkbox\">\n                <input type=\"checkbox\" value=\"${term}\" ${activeTerms.includes(term) ? 'checked' : ''} \n                       data-filter=\"term\">\n                <span class=\"filter-checkbox-text\">${term} Term</span>\n            </label>\n        `).join('');\n\n        return `\n            <div class=\"filter-section\">\n                <div class=\"filter-section-header\">\n                    <h4 class=\"filter-section-title\">Terms</h4>\n                    <button class=\"filter-select-all\" data-filter=\"term\">All Terms</button>\n                </div>\n                <div class=\"filter-section-content\">\n                    <div class=\"filter-checkbox-row\">\n                        ${termCheckboxes}\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private createLocationFilter(): string {\n        if (!this.filterService) return '';\n        \n        const locationOptions = this.filterService.getFilterOptions('location', this.allCourses) as { buildings: string[] };\n        const buildings = locationOptions.buildings || [];\n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'location');\n        const activeBuildings = activeFilter?.criteria?.buildings || [];\n\n        const buildingCheckboxes = buildings.map(building => `\n            <label class=\"filter-checkbox-label\">\n                <input type=\"checkbox\" value=\"${building}\" ${activeBuildings.includes(building) ? 'checked' : ''} \n                       data-filter=\"location\">\n                <span class=\"filter-checkbox-text\">${building}</span>\n            </label>\n        `).join('');\n\n        return `\n            <div class=\"filter-section\">\n                <div class=\"filter-section-header\">\n                    <h4 class=\"filter-section-title\">Buildings</h4>\n                    <div class=\"filter-section-actions\">\n                        <button class=\"filter-select-all\" data-filter=\"location\">All</button>\n                        <button class=\"filter-select-none\" data-filter=\"location\">None</button>\n                    </div>\n                </div>\n                <div class=\"filter-section-content\">\n                    <div class=\"filter-search-container\">\n                        <input type=\"text\" class=\"filter-search\" placeholder=\"Search buildings...\" data-filter=\"location\">\n                    </div>\n                    <div class=\"filter-checkbox-grid\" id=\"location-checkboxes\">\n                        ${buildingCheckboxes}\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private initializeFilterUI(modalElement: HTMLElement): void {\n        if (!this.filterService) return;\n\n        this.setupSearchTextFilter(modalElement);\n        this.setupDepartmentFilter(modalElement);\n        this.setupAvailabilityFilter(modalElement);\n        this.setupCreditRangeFilter(modalElement);\n        this.setupProfessorFilter(modalElement);\n        this.setupTermFilter(modalElement);\n        this.setupLocationFilter(modalElement);\n        this.setupClearAllButton(modalElement);\n        this.setupFilterSearch(modalElement);\n    }\n\n    private setupSearchTextFilter(modalElement: HTMLElement): void {\n        const searchInput = modalElement.querySelector('.search-text-input') as HTMLInputElement;\n        const clearButton = modalElement.querySelector('.filter-clear-search');\n        \n        if (searchInput) {\n            searchInput.addEventListener('input', () => {\n                const query = searchInput.value.trim();\n                this.updateSearchTextFilter(query, modalElement);\n                this.syncMainSearchInput(query);\n            });\n        }\n\n        if (clearButton) {\n            clearButton.addEventListener('click', () => {\n                if (searchInput) {\n                    searchInput.value = '';\n                }\n                this.updateSearchTextFilter('', modalElement);\n                this.syncMainSearchInput('');\n            });\n        }\n    }\n\n    private setupDepartmentFilter(modalElement: HTMLElement): void {\n        const checkboxes = modalElement.querySelectorAll('input[data-filter=\"department\"]');\n        checkboxes.forEach(checkbox => {\n            checkbox.addEventListener('change', () => this.updateDepartmentFilter(modalElement));\n        });\n\n        const selectAll = modalElement.querySelector('.filter-select-all[data-filter=\"department\"]');\n        const selectNone = modalElement.querySelector('.filter-select-none[data-filter=\"department\"]');\n\n        selectAll?.addEventListener('click', () => {\n            checkboxes.forEach((cb: any) => cb.checked = true);\n            this.updateDepartmentFilter(modalElement);\n        });\n\n        selectNone?.addEventListener('click', () => {\n            checkboxes.forEach((cb: any) => cb.checked = false);\n            this.updateDepartmentFilter(modalElement);\n        });\n    }\n\n    private setupAvailabilityFilter(modalElement: HTMLElement): void {\n        const toggle = modalElement.querySelector('input[data-filter=\"availability\"]') as HTMLInputElement;\n        toggle?.addEventListener('change', () => this.updateAvailabilityFilter(modalElement));\n    }\n\n    private setupCreditRangeFilter(modalElement: HTMLElement): void {\n        const minInput = modalElement.querySelector('#credit-min') as HTMLInputElement;\n        const maxInput = modalElement.querySelector('#credit-max') as HTMLInputElement;\n        const quickBtns = modalElement.querySelectorAll('.filter-quick-btn');\n\n        minInput?.addEventListener('change', () => this.updateCreditRangeFilter(modalElement));\n        maxInput?.addEventListener('change', () => this.updateCreditRangeFilter(modalElement));\n\n        quickBtns.forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const credits = (e.target as HTMLElement).dataset.credits;\n                if (credits?.includes('-')) {\n                    const [min, max] = credits.split('-');\n                    if (minInput) minInput.value = min;\n                    if (maxInput) maxInput.value = max;\n                } else {\n                    if (minInput) minInput.value = credits!;\n                    if (maxInput) maxInput.value = credits!;\n                }\n                this.updateCreditRangeFilter(modalElement);\n            });\n        });\n    }\n\n    private setupProfessorFilter(modalElement: HTMLElement): void {\n        const searchInput = modalElement.querySelector('.professor-search') as HTMLInputElement;\n        const dropdown = modalElement.querySelector('#professor-dropdown') as HTMLElement;\n        \n        if (searchInput && this.filterService) {\n            const professors = this.filterService.getFilterOptions('professor', this.allCourses) as string[];\n            \n            searchInput.addEventListener('input', () => {\n                const query = searchInput.value.toLowerCase();\n                if (query.length > 0) {\n                    const matches = professors.filter(prof => \n                        prof.toLowerCase().includes(query) && prof !== 'TBA'\n                    ).slice(0, 10);\n                    \n                    dropdown.innerHTML = matches.map(prof => \n                        `<div class=\"professor-option\" data-professor=\"${prof}\">${prof}</div>`\n                    ).join('');\n                    dropdown.style.display = matches.length > 0 ? 'block' : 'none';\n                } else {\n                    dropdown.style.display = 'none';\n                }\n            });\n\n            // Close dropdown when clicking outside\n            document.addEventListener('click', (e) => {\n                if (!searchInput.contains(e.target as Node) && !dropdown.contains(e.target as Node)) {\n                    dropdown.style.display = 'none';\n                }\n            });\n\n            dropdown.addEventListener('click', (e) => {\n                const target = e.target as HTMLElement;\n                if (target.classList.contains('professor-option')) {\n                    const professor = target.dataset.professor!;\n                    this.addProfessorFilter(professor, modalElement);\n                    searchInput.value = '';\n                    dropdown.style.display = 'none';\n                }\n            });\n        }\n\n        // Handle chip removal - use more specific delegation\n        const chipsContainer = modalElement.querySelector('.filter-selected-chips');\n        if (chipsContainer) {\n            chipsContainer.addEventListener('click', (e) => {\n                const target = e.target as HTMLElement;\n                if (target.classList.contains('filter-chip-remove')) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    const professor = this.unescapeHtml(target.dataset.professor!);\n                    this.removeProfessorFilter(professor, modalElement);\n                }\n            });\n        }\n    }\n\n    private setupTermFilter(modalElement: HTMLElement): void {\n        const checkboxes = modalElement.querySelectorAll('input[data-filter=\"term\"]');\n        checkboxes.forEach(checkbox => {\n            checkbox.addEventListener('change', () => this.updateTermFilter(modalElement));\n        });\n\n        const selectAll = modalElement.querySelector('.filter-select-all[data-filter=\"term\"]');\n        selectAll?.addEventListener('click', () => {\n            checkboxes.forEach((cb: any) => cb.checked = true);\n            this.updateTermFilter(modalElement);\n        });\n    }\n\n    private setupLocationFilter(modalElement: HTMLElement): void {\n        const checkboxes = modalElement.querySelectorAll('input[data-filter=\"location\"]');\n        checkboxes.forEach(checkbox => {\n            checkbox.addEventListener('change', () => this.updateLocationFilter(modalElement));\n        });\n\n        const selectAll = modalElement.querySelector('.filter-select-all[data-filter=\"location\"]');\n        const selectNone = modalElement.querySelector('.filter-select-none[data-filter=\"location\"]');\n\n        selectAll?.addEventListener('click', () => {\n            checkboxes.forEach((cb: any) => cb.checked = true);\n            this.updateLocationFilter(modalElement);\n        });\n\n        selectNone?.addEventListener('click', () => {\n            checkboxes.forEach((cb: any) => cb.checked = false);\n            this.updateLocationFilter(modalElement);\n        });\n    }\n\n    private setupClearAllButton(modalElement: HTMLElement): void {\n        const clearButton = modalElement.querySelector('#clear-all-filters');\n        clearButton?.addEventListener('click', () => {\n            if (this.filterService) {\n                this.filterService.clearFilters();\n                this.updatePreview(modalElement);\n                // Sync main search input to clear it\n                this.syncMainSearchInput('');\n                // Refresh the modal content\n                const modalBody = modalElement.querySelector('.filter-modal-body');\n                if (modalBody) {\n                    modalBody.innerHTML = this.createFilterSections();\n                    this.initializeFilterUI(modalElement);\n                }\n            }\n        });\n    }\n\n    private setupFilterSearch(modalElement: HTMLElement): void {\n        const searchInputs = modalElement.querySelectorAll('.filter-search');\n        searchInputs.forEach(input => {\n            input.addEventListener('input', (e) => {\n                const searchInput = e.target as HTMLInputElement;\n                const filterType = searchInput.dataset.filter;\n                const query = searchInput.value.toLowerCase();\n                \n                if (filterType === 'department') {\n                    const checkboxes = modalElement.querySelector('#department-checkboxes');\n                    if (checkboxes) {\n                        const labels = checkboxes.querySelectorAll('.filter-checkbox-label');\n                        labels.forEach((label: any) => {\n                            const text = label.textContent.toLowerCase();\n                            label.style.display = text.includes(query) ? 'flex' : 'none';\n                        });\n                    }\n                } else if (filterType === 'location') {\n                    const checkboxes = modalElement.querySelector('#location-checkboxes');\n                    if (checkboxes) {\n                        const labels = checkboxes.querySelectorAll('.filter-checkbox-label');\n                        labels.forEach((label: any) => {\n                            const text = label.textContent.toLowerCase();\n                            label.style.display = text.includes(query) ? 'flex' : 'none';\n                        });\n                    }\n                }\n            });\n        });\n    }\n\n    // Filter update methods\n    private updateSearchTextFilter(query: string, modalElement: HTMLElement): void {\n        if (query.length > 0) {\n            this.filterService?.addFilter('searchText', { query });\n        } else {\n            this.filterService?.removeFilter('searchText');\n        }\n        this.updatePreview(modalElement);\n        this.updateClearSearchButton(modalElement, query);\n    }\n\n    private syncMainSearchInput(query: string): void {\n        const mainSearchInput = document.getElementById('search-input') as HTMLInputElement;\n        if (mainSearchInput) {\n            mainSearchInput.value = query;\n        }\n    }\n\n    private updateClearSearchButton(modalElement: HTMLElement, query: string): void {\n        const clearButton = modalElement.querySelector('.filter-clear-search') as HTMLElement;\n        if (clearButton) {\n            clearButton.style.display = query.length > 0 ? 'inline-block' : 'none';\n        }\n    }\n\n    private updateDepartmentFilter(modalElement: HTMLElement): void {\n        const checkboxes = modalElement.querySelectorAll('input[data-filter=\"department\"]:checked') as NodeListOf<HTMLInputElement>;\n        const departments = Array.from(checkboxes).map(cb => cb.value);\n        \n        if (departments.length > 0) {\n            this.filterService?.addFilter('department', { departments });\n        } else {\n            this.filterService?.removeFilter('department');\n        }\n        this.updatePreview(modalElement);\n    }\n\n    private updateAvailabilityFilter(modalElement: HTMLElement): void {\n        const toggle = modalElement.querySelector('input[data-filter=\"availability\"]') as HTMLInputElement;\n        \n        if (toggle.checked) {\n            this.filterService?.addFilter('availability', { availableOnly: true });\n        } else {\n            this.filterService?.removeFilter('availability');\n        }\n        this.updatePreview(modalElement);\n    }\n\n    private updateCreditRangeFilter(modalElement: HTMLElement): void {\n        const minInput = modalElement.querySelector('#credit-min') as HTMLInputElement;\n        const maxInput = modalElement.querySelector('#credit-max') as HTMLInputElement;\n        \n        const min = parseInt(minInput.value);\n        const max = parseInt(maxInput.value);\n        \n        if (min && max && (min !== 1 || max !== 4)) {\n            this.filterService?.addFilter('creditRange', { min, max });\n        } else {\n            this.filterService?.removeFilter('creditRange');\n        }\n        this.updatePreview(modalElement);\n    }\n\n    private addProfessorFilter(professor: string, modalElement: HTMLElement): void {\n        if (!this.filterService) return;\n        \n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'professor');\n        const currentProfessors = activeFilter?.criteria?.professors || [];\n        \n        if (!currentProfessors.includes(professor)) {\n            const updatedProfessors = [...currentProfessors, professor];\n            this.filterService.addFilter('professor', { professors: updatedProfessors });\n            this.refreshProfessorChips(modalElement);\n            this.updatePreview(modalElement);\n        }\n    }\n\n    private removeProfessorFilter(professor: string, modalElement: HTMLElement): void {\n        if (!this.filterService) return;\n        \n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'professor');\n        const currentProfessors = activeFilter?.criteria?.professors || [];\n        const updatedProfessors = currentProfessors.filter((p: string) => p !== professor);\n        \n        if (updatedProfessors.length > 0) {\n            this.filterService.addFilter('professor', { professors: updatedProfessors });\n        } else {\n            this.filterService.removeFilter('professor');\n        }\n        \n        this.refreshProfessorChips(modalElement);\n        this.updatePreview(modalElement);\n    }\n\n    private refreshProfessorChips(modalElement: HTMLElement): void {\n        if (!this.filterService) return;\n        \n        const activeFilter = this.filterService.getActiveFilters().find(f => f.id === 'professor');\n        const professors = activeFilter?.criteria?.professors || [];\n        \n        const chipsContainer = modalElement.querySelector('.filter-selected-chips');\n        if (chipsContainer) {\n            chipsContainer.innerHTML = professors.map((prof: any) => `\n                <span class=\"filter-chip\">\n                    ${this.escapeHtml(prof)}\n                    <button class=\"filter-chip-remove\" data-professor=\"${this.escapeHtml(prof)}\">×</button>\n                </span>\n            `).join('');\n        }\n    }\n\n    private updateTermFilter(modalElement: HTMLElement): void {\n        const checkboxes = modalElement.querySelectorAll('input[data-filter=\"term\"]:checked') as NodeListOf<HTMLInputElement>;\n        const terms = Array.from(checkboxes).map(cb => cb.value);\n        \n        if (terms.length > 0) {\n            this.filterService?.addFilter('term', { terms });\n        } else {\n            this.filterService?.removeFilter('term');\n        }\n        this.updatePreview(modalElement);\n    }\n\n    private updateLocationFilter(modalElement: HTMLElement): void {\n        const checkboxes = modalElement.querySelectorAll('input[data-filter=\"location\"]:checked') as NodeListOf<HTMLInputElement>;\n        const buildings = Array.from(checkboxes).map(cb => cb.value);\n        \n        if (buildings.length > 0) {\n            this.filterService?.addFilter('location', { buildings });\n        } else {\n            this.filterService?.removeFilter('location');\n        }\n        this.updatePreview(modalElement);\n    }\n\n    private updatePreview(modalElement: HTMLElement): void {\n        if (!this.filterService) return;\n        \n        const filteredCourses = this.filterService.filterCourses(this.allCourses);\n        const courseCount = filteredCourses.length;\n        const filterCount = this.filterService.getFilterCount();\n        \n        const countElement = modalElement.querySelector('#course-count-preview');\n        const filterCountElement = modalElement.querySelector('#filter-count');\n        \n        if (countElement) {\n            countElement.textContent = `${courseCount} courses match current filters`;\n        }\n        \n        if (filterCountElement) {\n            filterCountElement.textContent = filterCount > 0 ? `(${filterCount})` : '';\n        }\n    }\n\n    private escapeHtml(text: string): string {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n\n    private unescapeHtml(text: string): string {\n        const div = document.createElement('div');\n        div.innerHTML = text;\n        return div.textContent || div.innerText || '';\n    }\n}","import { ActiveFilter, FilterChangeEvent, FilterEventListener, FilterCriteria } from '../types/filters';\n\nexport class FilterState {\n    private activeFilters: Map<string, ActiveFilter> = new Map();\n    private listeners: FilterEventListener[] = [];\n    \n    addFilter(id: string, name: string, criteria: any, displayValue: string): void {\n        const filter: ActiveFilter = {\n            id,\n            name,\n            criteria,\n            displayValue\n        };\n        \n        this.activeFilters.set(id, filter);\n        this.notifyListeners({\n            type: 'add',\n            filterId: id,\n            criteria,\n            activeFilters: this.getActiveFilters()\n        });\n    }\n    \n    removeFilter(id: string): boolean {\n        const removed = this.activeFilters.delete(id);\n        if (removed) {\n            this.notifyListeners({\n                type: 'remove',\n                filterId: id,\n                activeFilters: this.getActiveFilters()\n            });\n        }\n        return removed;\n    }\n    \n    updateFilter(id: string, criteria: any, displayValue: string): boolean {\n        const existing = this.activeFilters.get(id);\n        if (existing) {\n            existing.criteria = criteria;\n            existing.displayValue = displayValue;\n            this.notifyListeners({\n                type: 'update',\n                filterId: id,\n                criteria,\n                activeFilters: this.getActiveFilters()\n            });\n            return true;\n        }\n        return false;\n    }\n    \n    clearFilters(): void {\n        this.activeFilters.clear();\n        this.notifyListeners({\n            type: 'clear',\n            activeFilters: []\n        });\n    }\n    \n    hasFilter(id: string): boolean {\n        return this.activeFilters.has(id);\n    }\n    \n    getFilter(id: string): ActiveFilter | undefined {\n        return this.activeFilters.get(id);\n    }\n    \n    getActiveFilters(): ActiveFilter[] {\n        return Array.from(this.activeFilters.values());\n    }\n    \n    getFilterCriteria(): FilterCriteria {\n        const criteria: FilterCriteria = {};\n        for (const [id, filter] of this.activeFilters) {\n            criteria[id] = filter.criteria;\n        }\n        return criteria;\n    }\n    \n    getActiveFilterIds(): string[] {\n        return Array.from(this.activeFilters.keys());\n    }\n    \n    getFilterCount(): number {\n        return this.activeFilters.size;\n    }\n    \n    isEmpty(): boolean {\n        return this.activeFilters.size === 0;\n    }\n    \n    addEventListener(listener: FilterEventListener): void {\n        this.listeners.push(listener);\n    }\n    \n    removeEventListener(listener: FilterEventListener): void {\n        const index = this.listeners.indexOf(listener);\n        if (index > -1) {\n            this.listeners.splice(index, 1);\n        }\n    }\n    \n    private notifyListeners(event: FilterChangeEvent): void {\n        this.listeners.forEach(listener => {\n            try {\n                listener(event);\n            } catch (error) {\n                console.error('Error in filter event listener:', error);\n            }\n        });\n    }\n    \n    // Serialization for persistence\n    serialize(): string {\n        const data = {\n            filters: Array.from(this.activeFilters.entries()).map(([id, filter]) => ({\n                id: filter.id,\n                name: filter.name,\n                criteria: filter.criteria,\n                displayValue: filter.displayValue\n            }))\n        };\n        return JSON.stringify(data);\n    }\n    \n    deserialize(data: string): boolean {\n        try {\n            const parsed = JSON.parse(data);\n            this.activeFilters.clear();\n            \n            if (parsed.filters && Array.isArray(parsed.filters)) {\n                parsed.filters.forEach((filter: ActiveFilter) => {\n                    this.activeFilters.set(filter.id, filter);\n                });\n            }\n            \n            this.notifyListeners({\n                type: 'clear',\n                activeFilters: this.getActiveFilters()\n            });\n            \n            return true;\n        } catch (error) {\n            console.error('Failed to deserialize filter state:', error);\n            return false;\n        }\n    }\n}","import { Course, Department } from '../types/types';\nimport { CourseFilter, FilterEventListener, ActiveFilter } from '../types/filters';\nimport { FilterState } from '../core/FilterState';\nimport { SearchService } from './searchService';\n\nexport class FilterService {\n    private filterState: FilterState;\n    private registeredFilters: Map<string, CourseFilter> = new Map();\n    private searchService: SearchService;\n    \n    constructor(searchService: SearchService) {\n        this.filterState = new FilterState();\n        this.searchService = searchService;\n    }\n    \n    // Filter Registration\n    registerFilter(filter: CourseFilter): void {\n        this.registeredFilters.set(filter.id, filter);\n    }\n    \n    unregisterFilter(filterId: string): boolean {\n        const removed = this.registeredFilters.delete(filterId);\n        if (removed) {\n            this.removeFilter(filterId);\n        }\n        return removed;\n    }\n    \n    getRegisteredFilter(filterId: string): CourseFilter | undefined {\n        return this.registeredFilters.get(filterId);\n    }\n    \n    getAvailableFilters(): CourseFilter[] {\n        return Array.from(this.registeredFilters.values());\n    }\n    \n    // Filter Management\n    addFilter(filterId: string, criteria: any): boolean {\n        const filter = this.registeredFilters.get(filterId);\n        if (!filter) {\n            console.error(`Filter '${filterId}' is not registered`);\n            return false;\n        }\n        \n        if (!filter.isValidCriteria(criteria)) {\n            console.error(`Invalid criteria for filter '${filterId}'`);\n            return false;\n        }\n        \n        const displayValue = filter.getDisplayValue(criteria);\n        this.filterState.addFilter(filterId, filter.name, criteria, displayValue);\n        return true;\n    }\n    \n    updateFilter(filterId: string, criteria: any): boolean {\n        const filter = this.registeredFilters.get(filterId);\n        if (!filter) {\n            return false;\n        }\n        \n        if (!filter.isValidCriteria(criteria)) {\n            return false;\n        }\n        \n        const displayValue = filter.getDisplayValue(criteria);\n        return this.filterState.updateFilter(filterId, criteria, displayValue);\n    }\n    \n    removeFilter(filterId: string): boolean {\n        return this.filterState.removeFilter(filterId);\n    }\n    \n    clearFilters(): void {\n        this.filterState.clearFilters();\n    }\n    \n    toggleFilter(filterId: string, criteria: any): boolean {\n        if (this.hasFilter(filterId)) {\n            return this.removeFilter(filterId);\n        } else {\n            return this.addFilter(filterId, criteria);\n        }\n    }\n    \n    // Filter State Queries\n    hasFilter(filterId: string): boolean {\n        return this.filterState.hasFilter(filterId);\n    }\n    \n    getActiveFilters(): ActiveFilter[] {\n        return this.filterState.getActiveFilters();\n    }\n    \n    getFilterCount(): number {\n        return this.filterState.getFilterCount();\n    }\n    \n    isEmpty(): boolean {\n        return this.filterState.isEmpty();\n    }\n    \n    // Course Filtering\n    filterCourses(courses: Course[]): Course[] {\n        if (this.isEmpty()) {\n            return courses;\n        }\n        \n        let filteredCourses = courses;\n        const activeFilters = this.getActiveFilters();\n        \n        // Apply search text filter first if it exists (for better performance)\n        const searchTextFilter = activeFilters.find(f => f.id === 'searchText');\n        if (searchTextFilter) {\n            const filter = this.registeredFilters.get(searchTextFilter.id);\n            if (filter) {\n                filteredCourses = filter.apply(filteredCourses, searchTextFilter.criteria);\n            }\n        }\n        \n        // Apply remaining filters sequentially\n        for (const activeFilter of activeFilters) {\n            if (activeFilter.id !== 'searchText') { // Skip searchText as it's already applied\n                const filter = this.registeredFilters.get(activeFilter.id);\n                if (filter) {\n                    filteredCourses = filter.apply(filteredCourses, activeFilter.criteria);\n                }\n            }\n        }\n        \n        return filteredCourses;\n    }\n    \n    // Combined Search and Filter\n    searchAndFilter(query: string, courses: Course[]): Course[] {\n        // If there's a query, add/update the search text filter\n        if (query.trim()) {\n            this.addFilter('searchText', { query: query.trim() });\n        } else {\n            this.removeFilter('searchText');\n        }\n        \n        // Apply all filters (including search text if present)\n        return this.filterCourses(courses);\n    }\n    \n    // Event Handling\n    addEventListener(listener: FilterEventListener): void {\n        this.filterState.addEventListener(listener);\n    }\n    \n    removeEventListener(listener: FilterEventListener): void {\n        this.filterState.removeEventListener(listener);\n    }\n    \n    // Persistence\n    saveFiltersToStorage(): void {\n        const serialized = this.filterState.serialize();\n        localStorage.setItem('wpi-course-filters', serialized);\n    }\n    \n    loadFiltersFromStorage(): boolean {\n        const stored = localStorage.getItem('wpi-course-filters');\n        if (stored) {\n            return this.filterState.deserialize(stored);\n        }\n        return false;\n    }\n    \n    // Helper Methods\n    getFilterSummary(): string {\n        const activeFilters = this.getActiveFilters();\n        if (activeFilters.length === 0) {\n            return 'No filters active';\n        }\n        \n        if (activeFilters.length === 1) {\n            return `1 filter: ${activeFilters[0].displayValue}`;\n        }\n        \n        return `${activeFilters.length} filters active`;\n    }\n    \n    // Convert internal filter state to SearchService format\n    private convertToSearchFilter(): any {\n        const criteria = this.filterState.getFilterCriteria();\n        \n        return {\n            departments: criteria.department?.departments || [],\n            timeSlots: criteria.timeSlot?.timeSlots || [],\n            professors: criteria.professor?.professors || [],\n            availabilityOnly: criteria.availability?.availableOnly || false,\n            creditRange: criteria.creditRange ? {\n                min: criteria.creditRange.min,\n                max: criteria.creditRange.max\n            } : undefined\n        };\n    }\n    \n    // Utility for getting filter options\n    getFilterOptions(filterId: string, allCourses: Course[]): any {\n        switch (filterId) {\n            case 'department':\n                return this.getDepartmentOptions(allCourses);\n            case 'professor':\n                return this.getProfessorOptions(allCourses);\n            case 'location':\n                return this.getLocationOptions(allCourses);\n            case 'term':\n                return this.getTermOptions(allCourses);\n            default:\n                return null;\n        }\n    }\n    \n    private getDepartmentOptions(courses: Course[]): string[] {\n        const departments = new Set<string>();\n        courses.forEach(course => departments.add(course.department.abbreviation));\n        return Array.from(departments).sort();\n    }\n    \n    private getProfessorOptions(courses: Course[]): string[] {\n        return this.searchService.getAvailableProfessors();\n    }\n    \n    private getLocationOptions(courses: Course[]): { buildings: string[]; rooms: string[] } {\n        return {\n            buildings: this.searchService.getAvailableBuildings(),\n            rooms: [] // Could be extended to include room details\n        };\n    }\n    \n    private getTermOptions(courses: Course[]): string[] {\n        const terms = new Set<string>();\n        courses.forEach(course => {\n            course.sections.forEach(section => {\n                if (section.term) {\n                    terms.add(section.term);\n                }\n            });\n        });\n        return Array.from(terms).sort();\n    }\n}","import { Course, Department, Section, Period } from '../types/types'\nimport { SearchFilter } from '../types/ui'\n\nexport class SearchService {\n    private courses: Course[] = [];\n    private departments: Department[] = [];\n    private searchIndex: Map<string, Set<Course>> = new Map();\n    private professorCache: string[] | null = null;\n    private buildingCache: string[] | null = null;\n    private timeSlotMappings: Map<string, Course[]> = new Map();\n\n    setCourseData(departments: Department[]): void {\n        this.departments = departments;\n        this.courses = [];\n        \n        for (const dept of departments) {\n            this.courses.push(...dept.courses);\n        }\n        \n        // Clear caches and rebuild indexes\n        this.clearCaches();\n        this.buildSearchIndex();\n        this.buildTimeSlotMappings();\n    }\n\n    searchCourses(query: string, filters?: SearchFilter): Course[] {\n        let results = this.courses;\n\n        // Apply text search\n        if (query.trim()) {\n            results = this.performTextSearch(results, query.trim());\n        }\n\n        // Apply filters\n        if (filters) {\n            results = this.applyFilters(results, filters);\n        }\n\n        return this.rankResults(results, query);\n    }\n\n    private performTextSearch(courses: Course[], query: string): Course[] {\n        const queryLower = query.toLowerCase();\n        \n        // Try to use search index first for better performance\n        const indexedResults = this.searchFromIndex(queryLower);\n        if (indexedResults.length > 0) {\n            // Filter indexed results against the current course set\n            return courses.filter(course => indexedResults.includes(course));\n        }\n        \n        // Fallback to original linear search with fuzzy matching\n        return courses.filter(course => {\n            const courseText = [\n                course.id,\n                course.name,\n                course.description,\n                course.department.abbreviation,\n                course.department.name,\n                course.number\n            ].join(' ').toLowerCase();\n\n            return this.fuzzyMatch(courseText, queryLower);\n        });\n    }\n\n    private applyFilters(courses: Course[], filters: SearchFilter): Course[] {\n        return courses.filter(course => {\n            // Department filter\n            if (filters.departments.length > 0 && \n                !filters.departments.includes(course.department.abbreviation.toLowerCase())) {\n                return false;\n            }\n\n            // Credit range filter\n            if (filters.creditRange) {\n                const { min, max } = filters.creditRange;\n                if (course.maxCredits < min || course.minCredits > max) {\n                    return false;\n                }\n            }\n\n            // Availability filter\n            if (filters.availabilityOnly) {\n                const hasAvailableSeats = course.sections.some(section => section.seatsAvailable > 0);\n                if (!hasAvailableSeats) {\n                    return false;\n                }\n            }\n\n            // Time slot filter\n            if (filters.timeSlots.length > 0) {\n                const matchesTimeSlot = course.sections.some(section =>\n                    section.periods.some(period =>\n                        filters.timeSlots.some(timeSlot =>\n                            this.periodsOverlap(period, timeSlot)\n                        )\n                    )\n                );\n                if (!matchesTimeSlot) {\n                    return false;\n                }\n            }\n\n            // Professor filter\n            if (filters.professors.length > 0) {\n                const hasProfessor = course.sections.some(section =>\n                    section.periods.some(period =>\n                        filters.professors.some(prof =>\n                            period.professor.toLowerCase().includes(prof.toLowerCase())\n                        )\n                    )\n                );\n                if (!hasProfessor) {\n                    return false;\n                }\n            }\n\n            return true;\n        });\n    }\n\n    private periodsOverlap(period: Period, timeSlot: any): boolean {\n        const periodStart = period.startTime.hours * 60 + period.startTime.minutes;\n        const periodEnd = period.endTime.hours * 60 + period.endTime.minutes;\n        const slotStart = timeSlot.startTime.hours * 60 + timeSlot.startTime.minutes;\n        const slotEnd = timeSlot.endTime.hours * 60 + timeSlot.endTime.minutes;\n\n        // Check for time overlap\n        const timeOverlaps = periodStart < slotEnd && slotStart < periodEnd;\n        \n        // Check for day overlap\n        const dayOverlaps = timeSlot.days.some((day: string) => period.days.has(day));\n\n        return timeOverlaps && dayOverlaps;\n    }\n\n    private rankResults(courses: Course[], query: string): Course[] {\n        if (!query.trim()) return courses;\n\n        const queryLower = query.toLowerCase();\n        \n        return courses.sort((a, b) => {\n            const scoreA = this.calculateRelevanceScore(a, queryLower);\n            const scoreB = this.calculateRelevanceScore(b, queryLower);\n            return scoreB - scoreA;\n        });\n    }\n\n    private calculateRelevanceScore(course: Course, query: string): number {\n        let score = 0;\n\n        // Exact matches get highest score\n        if (course.id.toLowerCase() === query) score += 100;\n        if (course.name.toLowerCase() === query) score += 90;\n\n        // Prefix matches\n        if (course.id.toLowerCase().startsWith(query)) score += 80;\n        if (course.name.toLowerCase().startsWith(query)) score += 70;\n        if (course.department.abbreviation.toLowerCase().startsWith(query)) score += 60;\n\n        // Contains matches\n        if (course.id.toLowerCase().includes(query)) score += 40;\n        if (course.name.toLowerCase().includes(query)) score += 30;\n        if (course.description.toLowerCase().includes(query)) score += 10;\n\n        // Boost popular/available courses\n        const totalSeats = course.sections.reduce((sum, section) => sum + section.seats, 0);\n        const availableSeats = course.sections.reduce((sum, section) => sum + section.seatsAvailable, 0);\n        \n        if (availableSeats > 0) score += 5;\n        if (totalSeats > 100) score += 2; // Large courses might be more popular\n\n        return score;\n    }\n\n    getDepartments(): Department[] {\n        return this.departments;\n    }\n\n    getCoursesByDepartment(departmentAbbr: string): Course[] {\n        const dept = this.departments.find(d => \n            d.abbreviation.toLowerCase() === departmentAbbr.toLowerCase()\n        );\n        return dept ? dept.courses : [];\n    }\n\n    getAvailableProfessors(): string[] {\n        if (this.professorCache) {\n            return this.professorCache;\n        }\n        \n        const professors = new Set<string>();\n        \n        this.courses.forEach(course => {\n            course.sections.forEach(section => {\n                section.periods.forEach(period => {\n                    if (period.professor && period.professor !== 'TBA') {\n                        professors.add(period.professor);\n                    }\n                });\n            });\n        });\n\n        this.professorCache = Array.from(professors).sort();\n        return this.professorCache;\n    }\n\n    getAvailableBuildings(): string[] {\n        if (this.buildingCache) {\n            return this.buildingCache;\n        }\n        \n        const buildings = new Set<string>();\n        \n        this.courses.forEach(course => {\n            course.sections.forEach(section => {\n                section.periods.forEach(period => {\n                    if (period.building) {\n                        buildings.add(period.building);\n                    }\n                });\n            });\n        });\n\n        this.buildingCache = Array.from(buildings).sort();\n        return this.buildingCache;\n    }\n\n    private clearCaches(): void {\n        this.professorCache = null;\n        this.buildingCache = null;\n        this.searchIndex.clear();\n        this.timeSlotMappings.clear();\n    }\n\n    private buildSearchIndex(): void {\n        this.courses.forEach(course => {\n            const keywords = this.extractKeywords(course);\n            keywords.forEach(keyword => {\n                if (!this.searchIndex.has(keyword)) {\n                    this.searchIndex.set(keyword, new Set());\n                }\n                this.searchIndex.get(keyword)!.add(course);\n            });\n        });\n    }\n\n    private extractKeywords(course: Course): string[] {\n        const keywords = [\n            course.id.toLowerCase(),\n            course.name.toLowerCase(),\n            course.number.toLowerCase(),\n            course.department.abbreviation.toLowerCase(),\n            course.department.name.toLowerCase(),\n            ...course.description.toLowerCase().split(/\\s+/)\n        ];\n        \n        // Add partial keywords for better matching\n        keywords.forEach(keyword => {\n            if (keyword.length > 3) {\n                for (let i = 0; i < keyword.length - 2; i++) {\n                    keywords.push(keyword.substring(i, i + 3));\n                }\n            }\n        });\n        \n        return keywords.filter(k => k.length > 1);\n    }\n\n    private searchFromIndex(query: string): Course[] {\n        const results = new Set<Course>();\n        \n        // Direct keyword match\n        if (this.searchIndex.has(query)) {\n            this.searchIndex.get(query)!.forEach(course => results.add(course));\n        }\n        \n        // Partial matches\n        for (const [keyword, courses] of this.searchIndex.entries()) {\n            if (keyword.includes(query) || query.includes(keyword)) {\n                courses.forEach(course => results.add(course));\n            }\n        }\n        \n        return Array.from(results);\n    }\n\n    private fuzzyMatch(text: string, query: string): boolean {\n        // Simple fuzzy matching - exact match or contains\n        if (text.includes(query)) {\n            return true;\n        }\n        \n        // Allow for one character difference in short queries\n        if (query.length <= 3) {\n            return text.includes(query);\n        }\n        \n        // For longer queries, check if most characters match\n        const words = query.split(/\\s+/);\n        return words.every(word => {\n            if (word.length <= 2) return text.includes(word);\n            \n            // Allow partial matches for longer words\n            const partial = word.substring(0, Math.floor(word.length * 0.8));\n            return text.includes(partial);\n        });\n    }\n\n    private buildTimeSlotMappings(): void {\n        this.courses.forEach(course => {\n            course.sections.forEach(section => {\n                section.periods.forEach(period => {\n                    const timeKey = this.getTimeSlotKey(period);\n                    if (!this.timeSlotMappings.has(timeKey)) {\n                        this.timeSlotMappings.set(timeKey, []);\n                    }\n                    if (!this.timeSlotMappings.get(timeKey)!.includes(course)) {\n                        this.timeSlotMappings.get(timeKey)!.push(course);\n                    }\n                });\n            });\n        });\n    }\n\n    private getTimeSlotKey(period: Period): string {\n        const startMinutes = period.startTime.hours * 60 + period.startTime.minutes;\n        const endMinutes = period.endTime.hours * 60 + period.endTime.minutes;\n        const days = Array.from(period.days).sort().join('');\n        return `${days}-${startMinutes}-${endMinutes}`;\n    }\n\n    getCreditRanges(): Array<{ min: number; max: number; label: string }> {\n        return [\n            { min: 1, max: 1, label: '1 Credit' },\n            { min: 2, max: 2, label: '2 Credits' },\n            { min: 3, max: 3, label: '3 Credits' },\n            { min: 4, max: 4, label: '4 Credits' },\n            { min: 1, max: 2, label: '1-2 Credits' },\n            { min: 3, max: 4, label: '3-4 Credits' },\n            { min: 1, max: 4, label: 'Any Credits' }\n        ];\n    }\n}","import { Course } from '../../types/types';\nimport { CourseFilter, DepartmentFilterCriteria } from '../../types/filters';\n\nexport class DepartmentFilter implements CourseFilter {\n    readonly id = 'department';\n    readonly name = 'Department';\n    readonly description = 'Filter courses by department(s)';\n    \n    apply(courses: Course[], criteria: DepartmentFilterCriteria): Course[] {\n        if (!criteria.departments || criteria.departments.length === 0) {\n            return courses;\n        }\n        \n        const departmentSet = new Set(\n            criteria.departments.map(dept => dept.toLowerCase())\n        );\n        \n        return courses.filter(course => \n            departmentSet.has(course.department.abbreviation.toLowerCase())\n        );\n    }\n    \n    isValidCriteria(criteria: any): criteria is DepartmentFilterCriteria {\n        return criteria && \n               Array.isArray(criteria.departments) &&\n               criteria.departments.every((dept: any) => typeof dept === 'string');\n    }\n    \n    getDisplayValue(criteria: DepartmentFilterCriteria): string {\n        if (criteria.departments.length === 1) {\n            return `Department: ${criteria.departments[0]}`;\n        }\n        return `Departments: ${criteria.departments.join(', ')}`;\n    }\n}","import { Course } from '../../types/types';\nimport { CourseFilter, AvailabilityFilterCriteria } from '../../types/filters';\n\nexport class AvailabilityFilter implements CourseFilter {\n    readonly id = 'availability';\n    readonly name = 'Availability';\n    readonly description = 'Show only courses with available seats';\n    \n    apply(courses: Course[], criteria: AvailabilityFilterCriteria): Course[] {\n        if (!criteria.availableOnly) {\n            return courses;\n        }\n        \n        return courses.filter(course => \n            course.sections.some(section => section.seatsAvailable > 0)\n        );\n    }\n    \n    isValidCriteria(criteria: any): criteria is AvailabilityFilterCriteria {\n        return criteria && typeof criteria.availableOnly === 'boolean';\n    }\n    \n    getDisplayValue(criteria: AvailabilityFilterCriteria): string {\n        return criteria.availableOnly ? 'Available seats only' : 'All courses';\n    }\n}","import { Course } from '../../types/types';\nimport { CourseFilter, CreditRangeFilterCriteria } from '../../types/filters';\n\nexport class CreditRangeFilter implements CourseFilter {\n    readonly id = 'creditRange';\n    readonly name = 'Credit Range';\n    readonly description = 'Filter courses by credit hours';\n    \n    apply(courses: Course[], criteria: CreditRangeFilterCriteria): Course[] {\n        return courses.filter(course => {\n            // Course matches if its credit range overlaps with the filter range\n            return course.maxCredits >= criteria.min && course.minCredits <= criteria.max;\n        });\n    }\n    \n    isValidCriteria(criteria: any): criteria is CreditRangeFilterCriteria {\n        return criteria && \n               typeof criteria.min === 'number' &&\n               typeof criteria.max === 'number' &&\n               criteria.min >= 0 &&\n               criteria.max >= criteria.min;\n    }\n    \n    getDisplayValue(criteria: CreditRangeFilterCriteria): string {\n        if (criteria.min === criteria.max) {\n            return `${criteria.min} credit${criteria.min === 1 ? '' : 's'}`;\n        }\n        return `${criteria.min}-${criteria.max} credits`;\n    }\n}","import { Course } from '../../types/types';\nimport { CourseFilter, ProfessorFilterCriteria } from '../../types/filters';\n\nexport class ProfessorFilter implements CourseFilter {\n    readonly id = 'professor';\n    readonly name = 'Professor';\n    readonly description = 'Filter courses by instructor';\n    \n    apply(courses: Course[], criteria: ProfessorFilterCriteria): Course[] {\n        if (!criteria.professors || criteria.professors.length === 0) {\n            return courses;\n        }\n        \n        const professorSet = new Set(\n            criteria.professors.map(prof => prof.toLowerCase())\n        );\n        \n        return courses.filter(course =>\n            course.sections.some(section =>\n                section.periods.some(period =>\n                    professorSet.has(period.professor.toLowerCase())\n                )\n            )\n        );\n    }\n    \n    isValidCriteria(criteria: any): criteria is ProfessorFilterCriteria {\n        return criteria && \n               Array.isArray(criteria.professors) &&\n               criteria.professors.every((prof: any) => typeof prof === 'string');\n    }\n    \n    getDisplayValue(criteria: ProfessorFilterCriteria): string {\n        if (criteria.professors.length === 1) {\n            return `Professor: ${criteria.professors[0]}`;\n        }\n        if (criteria.professors.length <= 3) {\n            return `Professors: ${criteria.professors.join(', ')}`;\n        }\n        return `Professors: ${criteria.professors.slice(0, 2).join(', ')}, +${criteria.professors.length - 2} more`;\n    }\n}","import { Course } from '../../types/types';\nimport { CourseFilter, TermFilterCriteria } from '../../types/filters';\n\nexport class TermFilter implements CourseFilter {\n    readonly id = 'term';\n    readonly name = 'Term';\n    readonly description = 'Filter courses by academic term';\n    \n    apply(courses: Course[], criteria: TermFilterCriteria): Course[] {\n        if (!criteria.terms || criteria.terms.length === 0) {\n            return courses;\n        }\n        \n        const termSet = new Set(\n            criteria.terms.map(term => term.toLowerCase())\n        );\n        \n        return courses.filter(course =>\n            course.sections.some(section =>\n                section.term && termSet.has(section.term.toLowerCase())\n            )\n        );\n    }\n    \n    isValidCriteria(criteria: any): criteria is TermFilterCriteria {\n        return criteria && \n               Array.isArray(criteria.terms) &&\n               criteria.terms.every((term: any) => typeof term === 'string');\n    }\n    \n    getDisplayValue(criteria: TermFilterCriteria): string {\n        if (criteria.terms.length === 1) {\n            return `Term: ${criteria.terms[0]}`;\n        }\n        return `Terms: ${criteria.terms.join(', ')}`;\n    }\n}","import { Course } from '../../types/types';\nimport { CourseFilter, LocationFilterCriteria } from '../../types/filters';\n\nexport class LocationFilter implements CourseFilter {\n    readonly id = 'location';\n    readonly name = 'Location';\n    readonly description = 'Filter courses by building or room';\n    \n    apply(courses: Course[], criteria: LocationFilterCriteria): Course[] {\n        const hasBuildings = criteria.buildings && criteria.buildings.length > 0;\n        const hasRooms = criteria.rooms && criteria.rooms.length > 0;\n        \n        if (!hasBuildings && !hasRooms) {\n            return courses;\n        }\n        \n        const buildingSet = hasBuildings ? new Set(\n            criteria.buildings.map(building => building.toLowerCase())\n        ) : null;\n        \n        const roomSet = hasRooms ? new Set(\n            criteria.rooms.map(room => room.toLowerCase())\n        ) : null;\n        \n        return courses.filter(course =>\n            course.sections.some(section =>\n                section.periods.some(period => {\n                    if (buildingSet && !buildingSet.has(period.building.toLowerCase())) {\n                        return false;\n                    }\n                    if (roomSet && !roomSet.has(period.room.toLowerCase())) {\n                        return false;\n                    }\n                    return true;\n                })\n            )\n        );\n    }\n    \n    isValidCriteria(criteria: any): criteria is LocationFilterCriteria {\n        return criteria && \n               (Array.isArray(criteria.buildings) || Array.isArray(criteria.rooms)) &&\n               (!criteria.buildings || criteria.buildings.every((building: any) => typeof building === 'string')) &&\n               (!criteria.rooms || criteria.rooms.every((room: any) => typeof room === 'string'));\n    }\n    \n    getDisplayValue(criteria: LocationFilterCriteria): string {\n        const parts = [];\n        \n        if (criteria.buildings && criteria.buildings.length > 0) {\n            if (criteria.buildings.length === 1) {\n                parts.push(`Building: ${criteria.buildings[0]}`);\n            } else {\n                parts.push(`Buildings: ${criteria.buildings.join(', ')}`);\n            }\n        }\n        \n        if (criteria.rooms && criteria.rooms.length > 0) {\n            if (criteria.rooms.length === 1) {\n                parts.push(`Room: ${criteria.rooms[0]}`);\n            } else {\n                parts.push(`Rooms: ${criteria.rooms.join(', ')}`);\n            }\n        }\n        \n        return parts.join('; ');\n    }\n}","import { Course } from '../../types/types';\nimport { CourseFilter, SearchTextFilterCriteria } from '../../types/filters';\n\nexport class SearchTextFilter implements CourseFilter {\n    readonly id = 'searchText';\n    readonly name = 'Search Text';\n    readonly description = 'Filter courses by search text';\n    \n    apply(courses: Course[], criteria: SearchTextFilterCriteria): Course[] {\n        if (!criteria.query || !criteria.query.trim()) {\n            return courses;\n        }\n        \n        const query = criteria.query.trim().toLowerCase();\n        \n        return courses.filter(course => {\n            const courseText = [\n                course.id,\n                course.name,\n                course.description,\n                course.department.abbreviation,\n                course.department.name,\n                course.number\n            ].join(' ').toLowerCase();\n\n            return courseText.includes(query) || this.fuzzyMatch(courseText, query);\n        });\n    }\n    \n    private fuzzyMatch(text: string, query: string): boolean {\n        // Allow for partial matches for better search experience\n        if (query.length <= 3) {\n            return text.includes(query);\n        }\n        \n        const words = query.split(/\\s+/);\n        return words.every(word => {\n            if (word.length <= 2) return text.includes(word);\n            \n            // Allow partial matches for longer words\n            const partial = word.substring(0, Math.floor(word.length * 0.8));\n            return text.includes(partial);\n        });\n    }\n    \n    isValidCriteria(criteria: any): criteria is SearchTextFilterCriteria {\n        return criteria && \n               typeof criteria === 'object' && \n               'query' in criteria && \n               typeof criteria.query === 'string';\n    }\n    \n    getDisplayValue(criteria: SearchTextFilterCriteria): string {\n        return `\"${criteria.query.trim()}\"`;\n    }\n}","export { DepartmentFilter } from './DepartmentFilter';\nexport { AvailabilityFilter } from './AvailabilityFilter';\nexport { CreditRangeFilter } from './CreditRangeFilter';\nexport { ProfessorFilter } from './ProfessorFilter';\nexport { TermFilter } from './TermFilter';\nexport { LocationFilter } from './LocationFilter';\nexport { SearchTextFilter } from './SearchTextFilter';\n\nimport { CourseFilter } from '../../types/filters';\nimport { DepartmentFilter } from './DepartmentFilter';\nimport { AvailabilityFilter } from './AvailabilityFilter';\nimport { CreditRangeFilter } from './CreditRangeFilter';\nimport { ProfessorFilter } from './ProfessorFilter';\nimport { TermFilter } from './TermFilter';\nimport { LocationFilter } from './LocationFilter';\n\n// Default filter instances\nexport const createDefaultFilters = (): CourseFilter[] => [\n    new DepartmentFilter(),\n    new AvailabilityFilter(),\n    new CreditRangeFilter(),\n    new ProfessorFilter(),\n    new TermFilter(),\n    new LocationFilter()\n];\n\n// Filter registry utility\nexport const createFilterRegistry = (): Map<string, CourseFilter> => {\n    const filters = createDefaultFilters();\n    const registry = new Map<string, CourseFilter>();\n    \n    filters.forEach(filter => {\n        registry.set(filter.id, filter);\n    });\n    \n    return registry;\n};","export class UIStateManager {\n    public currentView: 'list' | 'grid' = 'list';\n    public currentPage: 'planner' | 'schedule' = 'planner';\n\n    constructor() {}\n\n    setView(view: 'list' | 'grid'): void {\n        this.currentView = view;\n        \n        // Update button states\n        const viewListBtn = document.getElementById('view-list');\n        const viewGridBtn = document.getElementById('view-grid');\n        \n        if (viewListBtn && viewGridBtn) {\n            if (view === 'list') {\n                viewListBtn.classList.add('btn-primary', 'active');\n                viewListBtn.classList.remove('btn-secondary');\n                viewGridBtn.classList.add('btn-secondary');\n                viewGridBtn.classList.remove('btn-primary', 'active');\n            } else {\n                viewGridBtn.classList.add('btn-primary', 'active');\n                viewGridBtn.classList.remove('btn-secondary');\n                viewListBtn.classList.add('btn-secondary');\n                viewListBtn.classList.remove('btn-primary', 'active');\n            }\n        }\n    }\n\n    togglePage(): void {\n        const nextPage = this.currentPage === 'planner' ? 'schedule' : 'planner';\n        this.switchToPage(nextPage);\n    }\n\n    switchToPage(page: 'planner' | 'schedule'): void {\n        if (page === this.currentPage) return;\n\n        this.currentPage = page;\n\n        // Update button text based on current page\n        const scheduleButton = document.getElementById('schedule-btn');\n        if (scheduleButton) {\n            if (page === 'schedule') {\n                scheduleButton.textContent = 'Back to Classes';\n                this.showSchedulePage();\n            } else {\n                scheduleButton.textContent = 'Schedule';\n                this.showPlannerPage();\n            }\n        }\n    }\n\n    private showPlannerPage(): void {\n        const plannerPage = document.getElementById('planner-page');\n        const schedulePage = document.getElementById('schedule-page');\n\n        if (plannerPage) plannerPage.style.display = 'grid';\n        if (schedulePage) schedulePage.style.display = 'none';\n    }\n\n    private showSchedulePage(): void {\n        const plannerPage = document.getElementById('planner-page');\n        const schedulePage = document.getElementById('schedule-page');\n\n        if (plannerPage) plannerPage.style.display = 'none';\n        if (schedulePage) schedulePage.style.display = 'flex';\n        \n    }\n\n\n    showLoadingState(): void {\n        const departmentList = document.getElementById('department-list');\n        if (departmentList) {\n            departmentList.innerHTML = '<div class=\"loading-message\">Loading departments...</div>';\n        }\n    }\n\n    showErrorMessage(message: string): void {\n        const departmentList = document.getElementById('department-list');\n        if (departmentList) {\n            departmentList.innerHTML = `<div class=\"error-message\">${message}</div>`;\n        }\n        \n        const courseContainer = document.getElementById('course-container');\n        if (courseContainer) {\n            courseContainer.innerHTML = `<div class=\"error-message\">${message}</div>`;\n        }\n    }\n\n    syncHeaderHeights(): void {\n        const sidebarHeader = document.querySelector('.sidebar-header') as HTMLElement;\n        const contentHeader = document.querySelector('.content-header') as HTMLElement;\n        const panelHeaders = document.querySelectorAll('.panel-header') as NodeListOf<HTMLElement>;\n\n        if (!sidebarHeader || !contentHeader || !panelHeaders.length) {\n            return;\n        }\n\n        // Reset heights to natural size to get accurate measurements\n        document.documentElement.style.setProperty('--synced-header-height', 'auto');\n        \n        // Allow layout to settle\n        requestAnimationFrame(() => {\n            // Get natural heights of all headers\n            const sidebarHeight = sidebarHeader.offsetHeight;\n            const contentHeight = contentHeader.offsetHeight;\n            const panelHeights = Array.from(panelHeaders).map(header => header.offsetHeight);\n            \n            // Find the maximum height\n            const maxHeight = Math.max(sidebarHeight, contentHeight, ...panelHeights);\n            \n            // Set the synced height to match the tallest header\n            document.documentElement.style.setProperty('--synced-header-height', `${maxHeight}px`);\n        });\n    }\n\n    setupHeaderResizeObserver(): void {\n        if (!window.ResizeObserver) return;\n\n        const headers = [\n            document.querySelector('.sidebar-header'),\n            document.querySelector('.content-header'),\n            ...document.querySelectorAll('.panel-header')\n        ].filter(Boolean) as HTMLElement[];\n\n        if (!headers.length) return;\n\n        const resizeObserver = new ResizeObserver(() => {\n            this.syncHeaderHeights();\n        });\n\n        headers.forEach(header => {\n            resizeObserver.observe(header);\n        });\n    }\n}","export class TimestampManager {\n    constructor() {}\n\n    updateClientTimestamp(): void {\n        const clientTimestampElement = document.getElementById('client-timestamp');\n        if (clientTimestampElement) {\n            const now = new Date();\n            const options: Intl.DateTimeFormatOptions = {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric',\n                hour: 'numeric',\n                minute: '2-digit',\n                second: '2-digit',\n                hour12: true\n            };\n            const formattedTime = now.toLocaleDateString('en-US', options).replace(',', ' at');\n            clientTimestampElement.textContent = `Client loaded: ${formattedTime}`;\n        }\n    }\n\n    async loadServerTimestamp(): Promise<void> {\n        const serverTimestampElement = document.getElementById('server-timestamp');\n        if (!serverTimestampElement) return;\n\n        try {\n            const response = await fetch('./last-updated.json', {\n                cache: 'no-cache'\n            });\n            \n            if (response.ok) {\n                const timestampData = await response.json();\n                const serverDate = new Date(timestampData.timestamp);\n                const options: Intl.DateTimeFormatOptions = {\n                    month: 'short',\n                    day: 'numeric',\n                    year: 'numeric',\n                    hour: 'numeric',\n                    minute: '2-digit',\n                    second: '2-digit',\n                    hour12: true\n                };\n                const formattedTime = serverDate.toLocaleDateString('en-US', options).replace(',', ' at');\n                serverTimestampElement.textContent = `Server updated: ${formattedTime}`;\n            } else {\n                throw new Error(`Failed to fetch server timestamp: ${response.status}`);\n            }\n        } catch (error) {\n            console.warn('Failed to load server timestamp:', error);\n            serverTimestampElement.textContent = 'Server timestamp unavailable';\n        }\n    }\n}","import { FilterService } from './FilterService';\nimport { DepartmentController } from '../ui/controllers/DepartmentController';\nimport { FilterModalController } from '../ui/controllers/FilterModalController';\n\nexport interface DepartmentSyncEventListener {\n    (activeDepartments: string[]): void;\n}\n\nexport class DepartmentSyncService {\n    private filterService: FilterService;\n    private departmentController: DepartmentController;\n    private filterModalController: FilterModalController | null = null;\n    private listeners: DepartmentSyncEventListener[] = [];\n    private isUpdating: boolean = false; // Prevent circular updates\n\n    constructor(filterService: FilterService, departmentController: DepartmentController) {\n        this.filterService = filterService;\n        this.departmentController = departmentController;\n        \n        // Listen to filter service changes to sync back to UI\n        this.filterService.addEventListener(() => {\n            if (!this.isUpdating) {\n                this.syncFilterToSidebar();\n                this.syncFilterToModal();\n                this.notifyListeners();\n            }\n        });\n    }\n\n    setFilterModalController(filterModalController: FilterModalController): void {\n        this.filterModalController = filterModalController;\n    }\n\n    // Add event listener for department sync changes\n    addEventListener(listener: DepartmentSyncEventListener): void {\n        this.listeners.push(listener);\n    }\n\n    removeEventListener(listener: DepartmentSyncEventListener): void {\n        const index = this.listeners.indexOf(listener);\n        if (index > -1) {\n            this.listeners.splice(index, 1);\n        }\n    }\n\n    private notifyListeners(): void {\n        const activeDepartments = this.getActiveDepartments();\n        this.listeners.forEach(listener => listener(activeDepartments));\n    }\n\n    // Sync sidebar selection to filter (called when user clicks sidebar)\n    syncSidebarToFilter(deptId: string, multiSelect: boolean = false): void {\n        this.isUpdating = true;\n        \n        try {\n            const currentDepartments = this.getActiveDepartments();\n            let newDepartments: string[];\n\n            if (multiSelect) {\n                // Add to existing selection\n                if (currentDepartments.includes(deptId)) {\n                    // Department already selected, remove it (toggle behavior)\n                    newDepartments = currentDepartments.filter(id => id !== deptId);\n                } else {\n                    // Add to selection\n                    newDepartments = [...currentDepartments, deptId];\n                }\n            } else {\n                // Single select mode - replace current selection\n                if (currentDepartments.length === 1 && currentDepartments[0] === deptId) {\n                    // Same department clicked, clear selection\n                    newDepartments = [];\n                } else {\n                    // Select only this department\n                    newDepartments = [deptId];\n                }\n            }\n\n            // Update filter service\n            if (newDepartments.length > 0) {\n                this.filterService.addFilter('department', { departments: newDepartments });\n            } else {\n                this.filterService.removeFilter('department');\n            }\n\n            // Clear the old department controller selection since we're using filters now\n            this.departmentController.clearDepartmentSelection();\n\n            // Update UI states\n            this.updateSidebarVisualState(newDepartments);\n            this.syncFilterToModal();\n            \n        } finally {\n            this.isUpdating = false;\n        }\n    }\n\n    // Sync filter modal selection to sidebar (called when filter modal changes)\n    syncFilterToSidebar(): void {\n        if (this.isUpdating) return;\n        \n        const activeDepartments = this.getActiveDepartments();\n        this.updateSidebarVisualState(activeDepartments);\n        \n        // Clear the department controller's internal selection since we use filters now\n        this.departmentController.clearDepartmentSelection();\n    }\n\n    // Sync current filter state to filter modal\n    syncFilterToModal(): void {\n        if (!this.filterModalController || this.isUpdating) return;\n\n        // The FilterModalController will read the current filter state when it opens\n        // We'll add a method to refresh it if it's currently open\n        this.filterModalController.refreshDepartmentSelection();\n        \n        // Also ensure sidebar visual state is correct\n        setTimeout(() => {\n            const activeDepartments = this.getActiveDepartments();\n            this.updateSidebarVisualState(activeDepartments);\n        }, 50); // Small delay to ensure DOM updates have processed\n    }\n\n    // Get currently active departments from filter service\n    getActiveDepartments(): string[] {\n        const activeFilters = this.filterService.getActiveFilters();\n        const deptFilter = activeFilters.find(f => f.id === 'department');\n        return deptFilter?.criteria?.departments || [];\n    }\n\n    // Clear all department selections\n    clearAllDepartmentSelections(): void {\n        this.isUpdating = true;\n        \n        try {\n            this.filterService.removeFilter('department');\n            this.departmentController.clearDepartmentSelection();\n            this.updateSidebarVisualState([]);\n            this.syncFilterToModal();\n        } finally {\n            this.isUpdating = false;\n        }\n    }\n\n    // Check if a specific department is currently selected\n    isDepartmentSelected(deptId: string): boolean {\n        const activeDepartments = this.getActiveDepartments();\n        return activeDepartments.includes(deptId);\n    }\n\n    // Get count of selected departments\n    getSelectedDepartmentCount(): number {\n        return this.getActiveDepartments().length;\n    }\n\n    // Toggle department selection (for multi-select scenarios)\n    toggleDepartment(deptId: string): void {\n        const activeDepartments = this.getActiveDepartments();\n        const isSelected = activeDepartments.includes(deptId);\n        \n        if (isSelected) {\n            this.syncSidebarToFilter(deptId, true); // Will remove it\n        } else {\n            this.syncSidebarToFilter(deptId, true); // Will add it\n        }\n    }\n\n    // Select only specific departments (replace current selection)\n    selectDepartments(deptIds: string[]): void {\n        this.isUpdating = true;\n        \n        try {\n            if (deptIds.length > 0) {\n                this.filterService.addFilter('department', { departments: deptIds });\n            } else {\n                this.filterService.removeFilter('department');\n            }\n            \n            this.updateSidebarVisualState(deptIds);\n            this.syncFilterToModal();\n        } finally {\n            this.isUpdating = false;\n        }\n    }\n\n    // Update visual state of sidebar departments\n    private updateSidebarVisualState(activeDepartments: string[]): void {\n        console.log('🔄 Updating sidebar visual state for departments:', activeDepartments);\n        \n        // Debug: Check how many department items exist in DOM\n        const allDeptItems = document.querySelectorAll('.department-item');\n        console.log(`📊 Found ${allDeptItems.length} department items in DOM`);\n        \n        // Clear all active states first\n        allDeptItems.forEach((item, index) => {\n            const deptId = item.getAttribute('data-dept-id');\n            if (item.classList.contains('active')) {\n                console.log(`🔄 Removing active class from ${deptId || `item-${index}`}`);\n            }\n            item.classList.remove('active');\n        });\n\n        // Set active states for selected departments with enhanced error checking\n        let successCount = 0;\n        activeDepartments.forEach(deptId => {\n            const normalizedId = this.normalizeDepartmentId(deptId);\n            const element = this.findDepartmentElement(normalizedId);\n            \n            if (element) {\n                element.classList.add('active');\n                successCount++;\n                console.log(`✅ Applied active styling to ${deptId} (normalized: ${normalizedId})`);\n            } else {\n                console.warn(`❌ Could not find department element for ${deptId} (normalized: ${normalizedId})`);\n                this.debugDepartmentElementSearch(deptId);\n            }\n        });\n\n        console.log(`📈 Successfully applied active styling to ${successCount}/${activeDepartments.length} departments`);\n\n        // Update any multi-selection indicators\n        this.updateMultiSelectionIndicators(activeDepartments);\n    }\n\n    // Normalize department ID for consistent matching\n    private normalizeDepartmentId(deptId: string): string {\n        return deptId.trim().toUpperCase();\n    }\n\n    // Enhanced department element finding with multiple strategies\n    private findDepartmentElement(deptId: string): Element | null {\n        const normalizedId = this.normalizeDepartmentId(deptId);\n        \n        // Strategy 1: Exact match with original case\n        let element = document.querySelector(`[data-dept-id=\"${deptId}\"]`);\n        if (element) return element;\n\n        // Strategy 2: Uppercase match\n        element = document.querySelector(`[data-dept-id=\"${normalizedId}\"]`);\n        if (element) return element;\n\n        // Strategy 3: Lowercase match\n        element = document.querySelector(`[data-dept-id=\"${normalizedId.toLowerCase()}\"]`);\n        if (element) return element;\n\n        // Strategy 4: Case-insensitive attribute search\n        const allDeptItems = document.querySelectorAll('.department-item');\n        for (const item of allDeptItems) {\n            const itemDeptId = item.getAttribute('data-dept-id');\n            if (itemDeptId && itemDeptId.toUpperCase() === normalizedId) {\n                return item;\n            }\n        }\n\n        return null;\n    }\n\n    // Debug method to help identify why a department element wasn't found\n    private debugDepartmentElementSearch(deptId: string): void {\n        const allDeptItems = document.querySelectorAll('.department-item');\n        console.log(`🔍 Debug search for ${deptId}:`);\n        console.log(`   Available department items:`);\n        \n        allDeptItems.forEach((item, index) => {\n            const itemDeptId = item.getAttribute('data-dept-id');\n            const textContent = item.textContent?.trim() || 'No text';\n            console.log(`   ${index + 1}. data-dept-id=\"${itemDeptId}\" text=\"${textContent}\"`);\n        });\n        \n        // Also check if the department list container exists\n        const departmentList = document.getElementById('department-list');\n        if (!departmentList) {\n            console.error('❌ Department list container (#department-list) not found in DOM!');\n        } else {\n            console.log('✅ Department list container exists');\n        }\n    }\n\n    // Update visual indicators for multi-selection\n    private updateMultiSelectionIndicators(activeDepartments: string[]): void {\n        const sidebarHeader = document.querySelector('.sidebar-header h2');\n        if (sidebarHeader) {\n            if (activeDepartments.length === 0) {\n                sidebarHeader.textContent = 'Departments';\n            } else if (activeDepartments.length === 1) {\n                sidebarHeader.textContent = `Departments (1 selected)`;\n            } else {\n                sidebarHeader.textContent = `Departments (${activeDepartments.length} selected)`;\n            }\n        }\n\n        // Add visual indicator for multi-select state\n        const departmentList = document.getElementById('department-list');\n        if (departmentList) {\n            if (activeDepartments.length > 1) {\n                departmentList.classList.add('multi-select-active');\n            } else {\n                departmentList.classList.remove('multi-select-active');\n            }\n        }\n    }\n\n    // Initialize synchronization (called after all components are set up)\n    initialize(): void {\n        // Sync any existing filter state to sidebar\n        this.syncFilterToSidebar();\n        \n        // Load any persisted department filters\n        const activeDepartments = this.getActiveDepartments();\n        if (activeDepartments.length > 0) {\n            this.updateSidebarVisualState(activeDepartments);\n        }\n    }\n\n    // Get human-readable description of current selection\n    getSelectionDescription(): string {\n        const activeDepartments = this.getActiveDepartments();\n        \n        if (activeDepartments.length === 0) {\n            return 'No departments selected';\n        } else if (activeDepartments.length === 1) {\n            return `${activeDepartments[0]} selected`;\n        } else if (activeDepartments.length <= 3) {\n            return `${activeDepartments.join(', ')} selected`;\n        } else {\n            return `${activeDepartments.length} departments selected`;\n        }\n    }\n\n    // Force a complete visual refresh of department states\n    forceVisualRefresh(): void {\n        console.log('🔄 Forcing complete visual refresh of department states');\n        const activeDepartments = this.getActiveDepartments();\n        this.updateSidebarVisualState(activeDepartments);\n    }\n\n    // Debug method to verify visual state matches filter state\n    debugVisualSync(): void {\n        const activeDepartments = this.getActiveDepartments();\n        const visuallyActiveDepartments: string[] = [];\n        \n        document.querySelectorAll('.department-item.active').forEach(item => {\n            const deptId = item.getAttribute('data-dept-id');\n            if (deptId) {\n                visuallyActiveDepartments.push(deptId);\n            }\n        });\n        \n        console.log('🔍 Department Sync Debug:');\n        console.log('  Filter state departments:', activeDepartments);\n        console.log('  Visually active departments:', visuallyActiveDepartments);\n        \n        const missingVisual = activeDepartments.filter(id => !visuallyActiveDepartments.includes(id));\n        const extraVisual = visuallyActiveDepartments.filter(id => !activeDepartments.includes(id));\n        \n        if (missingVisual.length > 0) {\n            console.warn('  ❌ Departments missing visual active state:', missingVisual);\n        }\n        if (extraVisual.length > 0) {\n            console.warn('  ❌ Departments with incorrect visual active state:', extraVisual);\n        }\n        if (missingVisual.length === 0 && extraVisual.length === 0) {\n            console.log('  ✅ Visual state perfectly synced with filter state');\n        }\n    }\n\n    // Temporary debug method to add visual debugging classes\n    enableDebugMode(): void {\n        console.log('🐛 Enabling department selection debug mode');\n        const activeDepartments = this.getActiveDepartments();\n        \n        // Add debug outline to all selected departments\n        activeDepartments.forEach(deptId => {\n            const element = this.findDepartmentElement(deptId);\n            if (element) {\n                element.classList.add('debug-selected');\n            }\n        });\n        \n        // Auto-disable after 10 seconds\n        setTimeout(() => {\n            this.disableDebugMode();\n        }, 10000);\n    }\n\n    // Remove debug visual classes\n    disableDebugMode(): void {\n        console.log('🐛 Disabling department selection debug mode');\n        document.querySelectorAll('.department-item.debug-selected').forEach(item => {\n            item.classList.remove('debug-selected');\n        });\n    }\n}","import { Course, Department } from '../../types/types'\nimport { CourseDataService } from '../../services/courseDataService'\nimport { ThemeSelector } from '../components/ThemeSelector'\nimport { CourseSelectionService } from '../../services/CourseSelectionService'\nimport { ConflictDetector } from '../../core/ConflictDetector'\nimport { ModalService } from '../../services/ModalService'\nimport { DepartmentController } from './DepartmentController'\nimport { CourseController } from './CourseController'\nimport { ScheduleController } from './ScheduleController'\nimport { SectionInfoModalController } from './SectionInfoModalController'\nimport { InfoModalController } from './InfoModalController'\nimport { FilterModalController } from './FilterModalController'\nimport { FilterService } from '../../services/FilterService'\nimport { SearchService } from '../../services/searchService'\nimport { createDefaultFilters, SearchTextFilter } from '../../core/filters'\nimport { UIStateManager } from './UIStateManager'\nimport { TimestampManager } from './TimestampManager'\nimport { OperationManager, DebouncedOperation } from '../../utils/RequestCancellation'\nimport { DepartmentSyncService } from '../../services/DepartmentSyncService'\n\nexport class MainController {\n    private courseDataService: CourseDataService;\n    private themeSelector: ThemeSelector;\n    private courseSelectionService: CourseSelectionService;\n    private conflictDetector: ConflictDetector;\n    private modalService: ModalService;\n    private departmentController: DepartmentController;\n    private courseController: CourseController;\n    private scheduleController: ScheduleController;\n    private sectionInfoModalController: SectionInfoModalController;\n    private infoModalController: InfoModalController;\n    private filterModalController: FilterModalController;\n    private searchService: SearchService;\n    private filterService: FilterService;\n    private uiStateManager: UIStateManager;\n    private timestampManager: TimestampManager;\n    private operationManager: OperationManager;\n    private debouncedSearch: DebouncedOperation;\n    private departmentSyncService: DepartmentSyncService;\n    private allDepartments: Department[] = [];\n\n\n    constructor() {\n        this.courseDataService = new CourseDataService();\n        this.themeSelector = new ThemeSelector();\n        this.courseSelectionService = new CourseSelectionService();\n        this.conflictDetector = new ConflictDetector();\n        this.modalService = new ModalService();\n        this.departmentController = new DepartmentController();\n        \n        // Initialize search and filter services\n        this.searchService = new SearchService();\n        this.filterService = new FilterService(this.searchService);\n        \n        // Initialize controllers\n        this.courseController = new CourseController(this.courseSelectionService);\n        this.scheduleController = new ScheduleController(this.courseSelectionService);\n        this.sectionInfoModalController = new SectionInfoModalController(this.modalService);\n        this.infoModalController = new InfoModalController(this.modalService);\n        this.filterModalController = new FilterModalController(this.modalService);\n        \n        // Set up filter service with default filters\n        this.initializeFilters();\n        \n        // Connect filter service to course controller\n        this.courseController.setFilterService(this.filterService);\n        \n        // Connect filter service and course data to filter modal\n        this.filterModalController.setFilterService(this.filterService);\n        \n        // Set modal controllers for ScheduleController\n        this.scheduleController.setSectionInfoModalController(this.sectionInfoModalController);\n        this.uiStateManager = new UIStateManager();\n        this.timestampManager = new TimestampManager();\n        \n        // Initialize operation management for cancellation\n        this.operationManager = new OperationManager();\n        this.debouncedSearch = new DebouncedOperation(this.operationManager, 'search', 300);\n        \n        // Initialize department synchronization service\n        this.departmentSyncService = new DepartmentSyncService(this.filterService, this.departmentController);\n        this.departmentController.setDepartmentSyncService(this.departmentSyncService);\n        this.departmentSyncService.setFilterModalController(this.filterModalController);\n        \n        // Wire up state preservation for dropdown states\n        this.scheduleController.setStatePreserver({\n            preserve: () => this.preserveDropdownStates(),\n            restore: (states) => this.restoreDropdownStates(states)\n        });\n        \n        // Initialize tracking for course changes\n        const initialSelectedCourses = this.courseSelectionService.getSelectedCourses();\n        this.previousSelectedCoursesCount = initialSelectedCourses.length;\n        this.previousSelectedCoursesMap = new Map();\n        initialSelectedCourses.forEach(sc => {\n            this.previousSelectedCoursesMap.set(sc.course.id, sc.selectedSectionNumber);\n        });\n        \n        this.init();\n    }\n\n    private initializeFilters(): void {\n        const filters = createDefaultFilters();\n        filters.forEach(filter => {\n            this.filterService.registerFilter(filter);\n        });\n\n        // Register SearchTextFilter\n        const searchTextFilter = new SearchTextFilter();\n        this.filterService.registerFilter(searchTextFilter);\n\n        // Set up filter change listener to refresh UI\n        this.filterService.addEventListener((event) => {\n            this.refreshCurrentView();\n        });\n\n        // Load saved filters from storage\n        this.filterService.loadFiltersFromStorage();\n        \n        // Initialize filter button state\n        setTimeout(() => this.updateFilterButtonState(), 100);\n    }\n\n    private async init(): Promise<void> {\n        this.uiStateManager.showLoadingState();\n        await this.loadCourseData();\n        this.departmentController.displayDepartments();\n        this.setupEventListeners();\n        this.setupCourseSelectionListener();\n        this.courseController.displaySelectedCourses();\n        \n        \n        this.uiStateManager.syncHeaderHeights();\n        this.uiStateManager.setupHeaderResizeObserver();\n    }\n\n    private async loadCourseData(): Promise<void> {\n        try {\n            console.log('Loading course data...');\n            const scheduleDB = await this.courseDataService.loadCourseData();\n            this.allDepartments = scheduleDB.departments;\n            this.departmentController.setAllDepartments(this.allDepartments);\n            this.courseController.setAllDepartments(this.allDepartments);\n            this.courseSelectionService.setAllDepartments(this.allDepartments);\n            \n            // Initialize search service with course data\n            this.searchService.setCourseData(this.allDepartments);\n            \n            // Initialize filter modal with course data\n            this.filterModalController.setCourseData(this.allDepartments);\n            \n            // Initialize the department sync service after all data is loaded\n            this.departmentSyncService.initialize();\n            \n            console.log(`Loaded ${this.allDepartments.length} departments`);\n            \n            // IMPORTANT: Reconstruct Section objects after course data is loaded\n            console.log('Reconstructing section objects for persisted selections...');\n            this.courseSelectionService.reconstructSectionObjects();\n            \n            this.timestampManager.updateClientTimestamp();\n            this.timestampManager.loadServerTimestamp();\n            \n            // Expose debug methods globally for testing (development only)\n            if (typeof window !== 'undefined') {\n                (window as any).debugDepartmentSync = {\n                    debug: () => this.departmentSyncService.debugVisualSync(),\n                    refresh: () => this.departmentSyncService.forceVisualRefresh(),\n                    enableDebug: () => this.departmentSyncService.enableDebugMode(),\n                    disableDebug: () => this.departmentSyncService.disableDebugMode(),\n                    getActive: () => this.departmentSyncService.getActiveDepartments(),\n                    getDescription: () => this.departmentSyncService.getSelectionDescription()\n                };\n                console.log('🛠️ Debug methods available: window.debugDepartmentSync.*');\n            }\n        } catch (error) {\n            console.error('Failed to load course data:', error);\n            this.uiStateManager.showErrorMessage('Failed to load course data. Please try refreshing the page.');\n        }\n    }\n\n\n    private setupEventListeners(): void {\n        // Department selection\n        document.addEventListener('click', (e) => {\n            const target = e.target as HTMLElement;\n            \n            \n            if (target.classList.contains('department-item')) {\n                const deptId = target.dataset.deptId;\n                if (deptId) {\n                    // Check if this is a multi-select click (Ctrl/Cmd key)\n                    const multiSelect = (e as MouseEvent).ctrlKey || (e as MouseEvent).metaKey;\n                    \n                    // Use the department controller which will now use the sync service\n                    this.departmentController.handleDepartmentClick(deptId, multiSelect);\n                    \n                    // The sync service will trigger refreshCurrentView through filter changes\n                    // No need to manually display courses anymore\n                }\n            }\n            \n            if (target.classList.contains('section-badge')) {\n                target.classList.toggle('selected');\n            }\n            \n            if (target.classList.contains('course-select-btn')) {\n                const courseElement = target.closest('.course-item, .course-card') as HTMLElement;\n                if (courseElement) {\n                    this.courseController.toggleCourseSelection(courseElement);\n                }\n            }\n\n            if (target.classList.contains('course-remove-btn')) {\n                const course = this.courseController.getCourseFromElement(target as HTMLElement);\n                if (course) {\n                    // Directly remove course (remove button means always unselect)\n                    this.courseSelectionService.unselectCourse(course);\n                }\n            }\n\n            // Handle section-related clicks FIRST (before dropdown logic)\n            if (target.classList.contains('section-select-btn')) {\n                e.stopPropagation();\n                const courseElement = target.closest('.schedule-course-item') as HTMLElement;\n                const sectionNumber = target.dataset.section;\n                \n                if (courseElement && sectionNumber) {\n                    const course = this.scheduleController.getCourseFromElement(courseElement);\n                    if (course) {\n                        this.scheduleController.handleSectionSelection(course, sectionNumber);\n                    }\n                }\n                return;\n            }\n\n            // Prevent dropdown closing for any other section-related clicks\n            if (target.classList.contains('section-option') || target.closest('.section-option') ||\n                target.classList.contains('section-info') || target.closest('.section-info') ||\n                target.classList.contains('section-number') || \n                target.classList.contains('section-schedule') || \n                target.classList.contains('section-professor')) {\n                e.stopPropagation();\n                e.preventDefault();\n                return;\n            }\n\n            if (target.classList.contains('dropdown-trigger') || target.closest('.dropdown-trigger')) {\n                const triggerElement = target.classList.contains('dropdown-trigger') \n                    ? target \n                    : target.closest('.dropdown-trigger') as HTMLElement;\n                    \n                if (triggerElement) {\n                    // Only trigger dropdown if clicking on course header area (not section-related elements)\n                    const shouldToggle = !target.classList.contains('course-remove-btn') && \n                        !target.classList.contains('section-select-btn') &&\n                        !target.classList.contains('section-number') && \n                        !target.classList.contains('section-schedule') && \n                        !target.classList.contains('section-professor') &&\n                        !target.closest('.section-option') &&\n                        !target.closest('.section-info') &&\n                        !target.closest('.schedule-sections-container');\n                        \n                    if (shouldToggle) {\n                        this.toggleCourseDropdown(triggerElement);\n                    }\n                }\n            }\n\n\n            if (target.closest('.course-item, .course-card') && !target.classList.contains('course-select-btn') && !target.classList.contains('section-badge')) {\n                const courseElement = target.closest('.course-item, .course-card') as HTMLElement;\n                if (courseElement) {\n                    this.courseController.selectCourse(courseElement);\n                }\n            }\n        });\n\n        // Search functionality with debouncing and cancellation\n        const searchInput = document.getElementById('search-input') as HTMLInputElement;\n        if (searchInput) {\n            searchInput.addEventListener('input', () => {\n                const query = searchInput.value.trim();\n                \n                // Use debounced operation for search to prevent excessive filtering\n                this.debouncedSearch.execute(async (cancellationToken) => {\n                    cancellationToken.throwIfCancelled();\n                    \n                    // Update search text filter in FilterService\n                    if (query.length > 0) {\n                        this.filterService.addFilter('searchText', { query });\n                    } else {\n                        this.filterService.removeFilter('searchText');\n                    }\n                    \n                    cancellationToken.throwIfCancelled();\n                    \n                    // Sync modal search input\n                    this.syncModalSearchInput(query);\n                    \n                    return Promise.resolve();\n                }).catch(error => {\n                    // Ignore cancellation errors, log others\n                    if (error.name !== 'CancellationError') {\n                        console.error('Search error:', error);\n                    }\n                });\n            });\n        }\n\n        // Clear selection\n        const clearButton = document.getElementById('clear-selection');\n        if (clearButton) {\n            clearButton.addEventListener('click', () => {\n                this.clearSelection();\n            });\n        }\n\n        // Schedule navigation\n        const scheduleButton = document.getElementById('schedule-btn');\n        if (scheduleButton) {\n            scheduleButton.addEventListener('click', () => {\n                this.uiStateManager.togglePage();\n                if (this.uiStateManager.currentPage === 'schedule') {\n                    // Log selected section data for debugging  \n                    const selectedCourses = this.courseSelectionService.getSelectedCourses();\n                    console.log('=== SCHEDULE PAGE LOADED ===');\n                    console.log(`Found ${selectedCourses.length} selected courses with sections:`);\n                    \n                    selectedCourses.forEach(sc => {\n                        const hasSection = sc.selectedSection !== null;\n                        console.log(`${sc.course.department.abbreviation}${sc.course.number}: section ${sc.selectedSectionNumber} ${hasSection ? '✓' : '✗'}`);\n                        if (hasSection && sc.selectedSection) {\n                            console.log(`  Term: ${sc.selectedSection.term}, Periods: ${sc.selectedSection.periods.length}`);\n                            console.log(`  Full section object:`, sc.selectedSection);\n                            \n                            // Log each period in detail\n                            sc.selectedSection.periods.forEach((period, idx) => {\n                                console.log(`    Period ${idx + 1}:`, {\n                                    type: period.type,\n                                    professor: period.professor,\n                                    startTime: period.startTime,\n                                    endTime: period.endTime,\n                                    days: Array.from(period.days),\n                                    location: period.location,\n                                    building: period.building,\n                                    room: period.room\n                                });\n                                \n                                // Calculate and log time slots for debugging\n                                const startSlot = Math.floor(((period.startTime.hours * 60 + period.startTime.minutes) - (7 * 60)) / 10);\n                                const endSlot = Math.floor(((period.endTime.hours * 60 + period.endTime.minutes) - (7 * 60)) / 10);\n                                const duration = endSlot - startSlot;\n                                console.log(`      Time slots: ${startSlot} to ${endSlot} (span ${duration} rows)`);\n                            });\n                        }\n                    });\n                    console.log('=== END SCHEDULE SECTION DATA ===\\n');\n                    \n                    this.scheduleController.displayScheduleSelectedCourses();\n                    this.scheduleController.renderScheduleGrids();\n                }\n            });\n        }\n\n        // View toggle buttons\n        const viewListBtn = document.getElementById('view-list');\n        const viewGridBtn = document.getElementById('view-grid');\n        \n        if (viewListBtn) {\n            viewListBtn.addEventListener('click', () => {\n                this.uiStateManager.setView('list');\n                this.refreshCurrentView();\n            });\n        }\n        \n        if (viewGridBtn) {\n            viewGridBtn.addEventListener('click', () => {\n                this.uiStateManager.setView('grid');\n                this.refreshCurrentView();\n            });\n        }\n\n        // Filter button\n        const filterButton = document.getElementById('filter-btn');\n        if (filterButton) {\n            filterButton.addEventListener('click', () => {\n                this.filterModalController.show();\n            });\n        }\n    }\n\n    private refreshCurrentView(): void {\n        const selectedDepartment = this.departmentController.getSelectedDepartment();\n        const hasFilters = !this.filterService.isEmpty();\n        \n        // Start a new render operation with cancellation support\n        const cancellationToken = this.operationManager.startOperation('render', 'New render requested');\n        \n        let coursesToDisplay: Course[] = [];\n        \n        if (hasFilters) {\n            // Handle all filters (including search text)\n            const baseCourses = selectedDepartment ? selectedDepartment.courses : this.getAllCourses();\n            coursesToDisplay = this.filterService.filterCourses(baseCourses);\n            this.updateFilteredHeader(coursesToDisplay.length, selectedDepartment);\n        } else if (selectedDepartment) {\n            // Show department courses without filters\n            coursesToDisplay = selectedDepartment.courses;\n            this.updateDepartmentHeader(selectedDepartment);\n        } else {\n            // No filters, no department selected - show empty state\n            coursesToDisplay = [];\n            this.updateDefaultHeader();\n        }\n        \n        // Display courses with cancellation support\n        this.displayCoursesWithCancellation(coursesToDisplay, cancellationToken);\n        \n        // Save current filter state\n        if (hasFilters) {\n            this.filterService.saveFiltersToStorage();\n        }\n        \n        // Update filter button appearance and sync search input\n        this.updateFilterButtonState();\n        this.syncSearchInputFromFilters();\n    }\n    \n    private async displayCoursesWithCancellation(coursesToDisplay: Course[], cancellationToken: any): Promise<void> {\n        try {\n            // Pass cancellation token to the progressive renderer\n            await this.courseController.displayCoursesWithCancellation(\n                coursesToDisplay, \n                this.uiStateManager.currentView,\n                cancellationToken\n            );\n            \n            // Mark operation as complete\n            this.operationManager.completeOperation('render');\n            \n        } catch (error) {\n            if (error.name === 'CancellationError') {\n                // Render was cancelled, not an error\n                return;\n            }\n            console.error('Error displaying courses:', error);\n            this.operationManager.completeOperation('render');\n        }\n    }\n\n    private updateFilterButtonState(): void {\n        const filterButton = document.getElementById('filter-btn');\n        if (filterButton && this.filterService) {\n            const hasActiveFilters = !this.filterService.isEmpty();\n            const filterCount = this.filterService.getFilterCount();\n            \n            if (hasActiveFilters) {\n                filterButton.classList.add('active');\n                filterButton.title = `${filterCount} filter${filterCount === 1 ? '' : 's'} active - Click to modify`;\n            } else {\n                filterButton.classList.remove('active');\n                filterButton.title = 'Filter courses';\n            }\n        }\n    }\n\n    private clearSelection(): void {\n        // Clear selected sections\n        document.querySelectorAll('.section-badge.selected').forEach(badge => {\n            badge.classList.remove('selected');\n        });\n\n        // Clear search\n        const searchInput = document.getElementById('search-input') as HTMLInputElement;\n        if (searchInput) {\n            searchInput.value = '';\n        }\n\n        // Reset to default state\n        const courseContainer = document.getElementById('course-container');\n        if (courseContainer) {\n            courseContainer.innerHTML = '<div class=\"loading-message\">Select a department to view courses...</div>';\n        }\n\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            contentHeader.textContent = 'Course Listings';\n        }\n\n        this.departmentController.clearDepartmentSelection();\n        this.courseController.clearCourseSelection();\n        this.courseController.displaySelectedCourses();\n    }\n\n\n\n\n\n\n    private previousSelectedCoursesCount = 0;\n    private previousSelectedCoursesMap = new Map<string, string | null>();\n\n    private setupCourseSelectionListener(): void {\n        this.courseSelectionService.onSelectionChange((selectedCourses) => {\n            const currentCount = selectedCourses.length;\n            const isCoursesAddedOrRemoved = currentCount !== this.previousSelectedCoursesCount;\n            \n            // Create current state map for comparison\n            const currentCoursesMap = new Map<string, string | null>();\n            selectedCourses.forEach(sc => {\n                currentCoursesMap.set(sc.course.id, sc.selectedSectionNumber);\n            });\n            \n            // Always update main course UI\n            this.courseController.refreshCourseSelectionUI();\n            this.courseController.displaySelectedCourses();\n            \n            if (isCoursesAddedOrRemoved) {\n                // Full refresh needed when courses are added/removed\n                this.scheduleController.displayScheduleSelectedCourses();\n            } else {\n                // Check if only section selections changed\n                let sectionSelectionsChanged = false;\n                for (const [courseId, selectedSection] of currentCoursesMap) {\n                    const previousSection = this.previousSelectedCoursesMap.get(courseId);\n                    if (previousSection !== selectedSection) {\n                        sectionSelectionsChanged = true;\n                        \n                        // Update visual state for this course\n                        const selectedCourse = selectedCourses.find(sc => sc.course.id === courseId);\n                        if (selectedCourse) {\n                            this.scheduleController.updateSectionButtonStates(selectedCourse.course, selectedSection);\n                        }\n                    }\n                }\n                \n                // Update schedule grids if any sections changed\n                if (sectionSelectionsChanged && this.uiStateManager.currentPage === 'schedule') {\n                    this.scheduleController.renderScheduleGrids();\n                }\n            }\n            \n            // Update tracking state\n            this.previousSelectedCoursesCount = currentCount;\n            this.previousSelectedCoursesMap = new Map(currentCoursesMap);\n        });\n    }\n\n\n    // Public methods for easy access to selected courses\n    public getSelectedCourses() {\n        return this.courseSelectionService.getSelectedCourses();\n    }\n\n    public getSelectedCoursesCount(): number {\n        return this.courseSelectionService.getSelectedCoursesCount();\n    }\n\n    public getCourseSelectionService(): CourseSelectionService {\n        return this.courseSelectionService;\n    }\n\n    public getFilterService(): FilterService {\n        return this.filterService;\n    }\n\n    public getModalService(): ModalService {\n        return this.modalService;\n    }\n\n    public getSectionInfoModalController(): SectionInfoModalController {\n        return this.sectionInfoModalController;\n    }\n\n    public getInfoModalController(): InfoModalController {\n        return this.infoModalController;\n    }\n\n    private toggleCourseDropdown(triggerElement: HTMLElement): void {\n        const courseItem = triggerElement.closest('.schedule-course-item');\n        if (!courseItem) return;\n\n        const isCollapsed = courseItem.classList.contains('collapsed');\n        \n        if (isCollapsed) {\n            // Expand\n            courseItem.classList.remove('collapsed');\n            courseItem.classList.add('expanded');\n        } else {\n            // Collapse\n            courseItem.classList.remove('expanded');\n            courseItem.classList.add('collapsed');\n        }\n    }\n\n    private preserveDropdownStates(): Map<string, boolean> {\n        const states = new Map<string, boolean>();\n        document.querySelectorAll('.schedule-course-item').forEach(item => {\n            const course = this.scheduleController.getCourseFromElement(item as HTMLElement);\n            if (course) {\n                const isExpanded = item.classList.contains('expanded');\n                states.set(course.id, isExpanded);\n            }\n        });\n        return states;\n    }\n\n    private restoreDropdownStates(states: Map<string, boolean>): void {\n        document.querySelectorAll('.schedule-course-item').forEach(item => {\n            const course = this.scheduleController.getCourseFromElement(item as HTMLElement);\n            if (course && states.has(course.id)) {\n                const wasExpanded = states.get(course.id);\n                if (wasExpanded) {\n                    item.classList.remove('collapsed');\n                    item.classList.add('expanded');\n                } else {\n                    item.classList.remove('expanded');\n                    item.classList.add('collapsed');\n                }\n            }\n        });\n    }\n\n    private getAllCourses(): Course[] {\n        const allCourses: Course[] = [];\n        this.allDepartments.forEach(dept => {\n            allCourses.push(...dept.courses);\n        });\n        return allCourses;\n    }\n\n    private syncModalSearchInput(query: string): void {\n        // Sync the modal search input if the modal is currently open\n        this.filterModalController.syncSearchInputFromMain(query);\n    }\n\n    private syncSearchInputFromFilters(): void {\n        const searchInput = document.getElementById('search-input') as HTMLInputElement;\n        if (searchInput) {\n            const searchTextFilter = this.filterService.getActiveFilters().find(f => f.id === 'searchText');\n            const currentQuery = searchTextFilter?.criteria?.query || '';\n            if (searchInput.value !== currentQuery) {\n                searchInput.value = currentQuery;\n            }\n        }\n    }\n\n    private updateFilteredHeader(resultCount: number, selectedDepartment: Department | null): void {\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            const filters = this.filterService.getActiveFilters();\n            const searchTextFilter = filters.find(f => f.id === 'searchText');\n            \n            if (searchTextFilter && filters.length === 1) {\n                // Only search text filter\n                const query = searchTextFilter.criteria.query;\n                contentHeader.textContent = `Search: \"${query}\" (${resultCount} results)`;\n            } else if (searchTextFilter) {\n                // Search text + other filters\n                const query = searchTextFilter.criteria.query;\n                const otherFilters = filters.length - 1;\n                contentHeader.textContent = `Search: \"${query}\" + ${otherFilters} filter${otherFilters === 1 ? '' : 's'} (${resultCount} results)`;\n            } else {\n                // Only other filters\n                const filterCount = filters.length;\n                contentHeader.textContent = `Filtered Results: ${filterCount} filter${filterCount === 1 ? '' : 's'} (${resultCount} courses)`;\n            }\n        }\n    }\n\n    private updateDepartmentHeader(department: Department): void {\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            contentHeader.textContent = `${department.name} (${department.abbreviation})`;\n        }\n    }\n\n    private updateDefaultHeader(): void {\n        const contentHeader = document.querySelector('.content-header h2');\n        if (contentHeader) {\n            contentHeader.textContent = 'Course Listings';\n        }\n    }\n\n}","import './style.css'\nimport { MainController } from './ui/controllers/MainController'\n\n// Initialize the application\nnew MainController()"],"names":["DayOfWeek","_CourseDataService","freshData","error","response","jsonData","scheduleDB","departments","deptData","department","courseData","sections","sectionData","periods","periodData","timeStr","match","hours","minutes","displayHours","ampm","displayTime","days","daySet","day","maDept","dept","ma1024","course","section","period","idx","html","cached","cacheData","parsedData","cacheAge","maxAge","query","allCourses","queryLower","CourseDataService","ThemeManager","wpiClassic","wpiDark","wpiLight","highContrast","savedTheme","theme","themeId","oldTheme","newTheme","themeDefinition","event","root","key","value","str","preferredTheme","listener","themeJson","_StorageManager","state","serializedState","stored","schedule","schedules","existingIndex","s","serializedSchedules","scheduleId","filtered","preferences","serializedPreferences","exportData","data","operation","errorMessage","fallback","selectedCourses","serializedCourses","StorageManager","ThemeSelector","availableThemes","currentThemeId","isActive","option","currentTheme","selectedThemeId","selectedOption","CourseManager","isRequired","selectedCourse","sectionNumber","sectionObject","courses","deptAbbreviation","reconstructedCount","failedCount","Validators","p","time","timeRange","sc","input","courseId","email","CourseSelectionService","courseManager","storageManager","persistedCourses","c","ConflictType","ConflictDetector","conflicts","i","j","cacheKey","sectionConflicts","section1","section2","period1","period2","conflict","sharedDays","days1","days2","start1","end1","start2","end2","key1","key2","ModalService","id","modalElement","options","closeOnBackdrop","closeOnEscape","escapeHandler","DepartmentController","departmentSyncService","deptId","d","contentHeader","departmentList","categories","categoryName","courseCount","category","a","b","multiSelect","item","clickedElement","sidebarHeader","CancellationToken","reason","CancellationError","message","CancellationTokenSource","OperationManager","operationId","tokenSource","existingOperation","DebouncedOperation","operationManager","delay","resolve","reject","token","result","ProgressiveRenderer","renderFunction","container","cancellationToken","renderToken","totalBatches","firstBatch","start","end","batch","courseSelectionService","elementToCourseMap","allHtml","renderedCourses","batchCourses","isFirstBatch","isComplete","batchHtml","isSelected","hasWarning","courseListContainer","element","index","loadingIndicator","credits","courseGridContainer","size","ms","timeoutId","totalRendered","totalTime","PerformanceMetrics","metadata","startTime","endTime","duration","metric","metrics","itemCount","batchSize","batchCount","resultCount","operationType","filteredMetrics","m","durations","count","report","thresholdMs","insights","renderReport","searchReport","currentBatchSize","avgDuration","CourseController","renderOptions","batchIndex","totalCount","optimalBatchSize","filterService","currentView","courseContainer","sortedCourses","selectedDepartment","baseCourses","results","filteredCourses","title","filterSummary","allElements","wasSelected","selectBtn","descriptionContainer","selectedCoursesContainer","countElement","deptCompare","button","_TimeUtils","totalMinutes","startMinutes","relativeMinutes","slot","boundedSlot","startRow","endRow","hours12","startFormatted","endFormatted","dayAbbreviations","labels","hour","TimeUtils","ScheduleController","sectionInfoModalController","statePreserver","dropdownStates","sectionsByTerm","term","selectedClass","sortedPeriods","typePriority","type","lower","periodTypeLabel","courseElements","removeButtons","courseItem","courseIndex","selectedSection","itemCourse","sectionButtons","sectionOptions","grids","gridContainer","termCourses","sectionTermLetter","matchesTerm","tc","coursesWithoutSections","hasCoursesWithoutSections","weekdays","timeSlots","timeLabel","cell","timeSlot","occupyingSections","shouldLog","minute","periodsOnThisDay","sectionOccupiesSlot","sectionStartSlot","sectionEndSlot","isFirstSlot","startSlot","endSlot","hasConflict","primarySection","courseColor","rowSpan","heightInPixels","content","classes","periodsByType","periodType","periodStrings","typeOrder","sortedTypes","indexA","indexB","timeRanges","colors","hash","termString","sectionMatch","textMatch","sectionBlock","SectionInfoModalController","modalService","backdrop","style","dialog","enrollmentStatus","waitlistInfo","meetingTimes","daysStr","location","InfoModalController","FilterModalController","searchInput","activeDepartments","f","checkbox","activeFiltersCount","currentQuery","activeFilter","minCredits","maxCredits","prof","terms","activeTerms","buildings","activeBuildings","building","clearButton","checkboxes","selectAll","selectNone","cb","minInput","maxInput","quickBtns","btn","e","min","max","dropdown","professors","matches","target","professor","chipsContainer","modalBody","filterType","label","text","mainSearchInput","currentProfessors","updatedProfessors","filterCount","filterCountElement","div","FilterState","name","criteria","displayValue","filter","removed","existing","parsed","FilterService","searchService","filterId","activeFilters","searchTextFilter","serialized","SearchService","filters","indexedResults","courseText","periodStart","periodEnd","slotStart","slotEnd","timeOverlaps","dayOverlaps","scoreA","score","totalSeats","sum","departmentAbbr","keyword","keywords","k","word","partial","timeKey","endMinutes","DepartmentFilter","departmentSet","AvailabilityFilter","CreditRangeFilter","ProfessorFilter","professorSet","TermFilter","termSet","LocationFilter","hasBuildings","hasRooms","buildingSet","roomSet","room","parts","SearchTextFilter","createDefaultFilters","UIStateManager","view","viewListBtn","viewGridBtn","nextPage","page","scheduleButton","plannerPage","schedulePage","panelHeaders","sidebarHeight","contentHeight","panelHeights","header","maxHeight","headers","resizeObserver","TimestampManager","clientTimestampElement","now","formattedTime","serverTimestampElement","timestampData","serverDate","DepartmentSyncService","departmentController","filterModalController","currentDepartments","newDepartments","deptIds","allDeptItems","successCount","normalizedId","itemDeptId","textContent","visuallyActiveDepartments","missingVisual","extraVisual","MainController","states","initialSelectedCourses","courseElement","triggerElement","hasSection","filterButton","hasFilters","coursesToDisplay","hasActiveFilters","badge","currentCount","isCoursesAddedOrRemoved","currentCoursesMap","sectionSelectionsChanged","isExpanded","otherFilters"],"mappings":"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"}