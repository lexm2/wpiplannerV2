(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))a(t);new MutationObserver(t=>{for(const r of t)if(r.type==="childList")for(const c of r.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&a(c)}).observe(document,{childList:!0,subtree:!0});function s(t){const r={};return t.integrity&&(r.integrity=t.integrity),t.referrerPolicy&&(r.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?r.credentials="include":t.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function a(t){if(t.ep)return;t.ep=!0;const r=s(t);fetch(t.href,r)}})();var o=(i=>(i.MONDAY="mon",i.TUESDAY="tue",i.WEDNESDAY="wed",i.THURSDAY="thu",i.FRIDAY="fri",i.SATURDAY="sat",i.SUNDAY="sun",i))(o||{});const n=class n{constructor(){this.scheduleDB=null}async loadCourseData(){try{console.log("Loading course data...");const e=await this.fetchFreshData();return this.scheduleDB=e,e}catch(e){throw console.error("Failed to load course data:",e),new Error("No course data available")}}async fetchFreshData(){console.log("Fetching course data from local static file...");const e=await fetch(n.WPI_COURSE_DATA_URL,{method:"GET",headers:{Accept:"application/json"},cache:"no-cache"});if(!e.ok)throw new Error(`Failed to fetch course data: ${e.status} ${e.statusText}`);const s=await e.json();return this.parseJSONData(s)}parseJSONData(e){console.log("Parsing JSON data...");const s={departments:[],generated:new Date().toISOString()};if(!e.Report_Entry||!Array.isArray(e.Report_Entry))throw console.error("Invalid JSON data structure:",e),new Error("Invalid JSON data structure");console.log(`Processing ${e.Report_Entry.length} course entries...`);const a=new Map;let t=0;for(const r of e.Report_Entry)try{this.processJSONEntry(r,a),t++}catch(c){console.warn("Failed to process entry:",r,c)}return s.departments=Array.from(a.values()),console.log(`Successfully processed ${t}/${e.Report_Entry.length} entries`),console.log(`Loaded ${s.departments.length} departments with course data`),s}processJSONEntry(e,s){const t=(e.Course_Title||"").match(/^([A-Z]+)\s+(\d+)\s*-\s*(.+)$/);if(!t)return;const[,r,c,S]=t,w=e.Academic_Units||e.Subject||r;let d=s.get(r);d||(d={abbreviation:r,name:w,courses:[]},s.set(r,d));const m=`${r}-${c}`;let u=d.courses.find(l=>l.id===m);u||(u={id:m,number:c,name:S,description:this.stripHtml(e.Course_Description||""),department:d,sections:[],minCredits:parseFloat(e.Credits||"3"),maxCredits:parseFloat(e.Credits||"3")},d.courses.push(u));const f=e.Course_Section?.match(/([A-Z]+\s+\d+)-([A-Z0-9]+)/),g=f?f[2]:"",[A,p]=(e.Enrolled_Capacity||"0/0").split("/").map(l=>parseInt(l)||0),[D,C]=(e.Waitlist_Waitlist_Capacity||"0/0").split("/").map(l=>parseInt(l)||0),E={crn:0,number:g,seats:p,seatsAvailable:p-A,actualWaitlist:D,maxWaitlist:C,note:e.Section_Status==="Waitlist"?"Waitlist Available":void 0,description:this.stripHtml(e.Course_Section_Description||""),term:e.Offering_Period||"",periods:[]};if(e.Meeting_Patterns&&e.Locations&&e.Instructors){const l={type:e.Instructional_Format||"Lecture",professor:e.Instructors||"",professorEmail:void 0,startTime:this.parseTimeFromPattern(e.Meeting_Patterns,!0),endTime:this.parseTimeFromPattern(e.Meeting_Patterns,!1),building:this.extractBuilding(e.Locations),room:this.extractRoom(e.Locations),location:e.Locations,seats:p,seatsAvailable:p-A,actualWaitlist:D,maxWaitlist:C,days:this.parseDaysFromPattern(e.Meeting_Day_Patterns||""),specificSection:g};E.periods.push(l)}u.sections.push(E)}stripHtml(e){return e.replace(/<[^>]*>/g,"").replace(/&[^;]+;/g," ").trim()}extractBuilding(e){const s=e.match(/^([^0-9]+)/);return s?s[1].trim():""}extractRoom(e){const s=e.match(/([0-9]+[A-Z]*)$/);return s?s[1]:""}parseTimeFromPattern(e,s){const a=e.match(/(\d{1,2}:\d{2}\s*[AP]M)\s*-\s*(\d{1,2}:\d{2}\s*[AP]M)/);if(!a)return{hours:0,minutes:0,displayTime:"TBD"};const t=s?a[1]:a[2];return this.parseTime(t)}parseDaysFromPattern(e){const s=new Set,a={M:o.MONDAY,T:o.TUESDAY,W:o.WEDNESDAY,R:o.THURSDAY,F:o.FRIDAY,S:o.SATURDAY,U:o.SUNDAY};for(const t of e.replace(/-/g,""))a[t]&&s.add(a[t]);return s}parseTime(e){if(!e||e==="?")return{hours:0,minutes:0,displayTime:"TBD"};const s=e.match(/(\d{1,2}):(\d{2})(AM|PM)/i);if(!s)return{hours:0,minutes:0,displayTime:e};let a=parseInt(s[1]);const t=parseInt(s[2]),r=s[3].toUpperCase();return r==="PM"&&a!==12?a+=12:r==="AM"&&a===12&&(a=0),{hours:a,minutes:t,displayTime:e}}parseDays(e){if(!e||e==="?")return[];const s={mon:o.MONDAY,tue:o.TUESDAY,wed:o.WEDNESDAY,thu:o.THURSDAY,fri:o.FRIDAY,sat:o.SATURDAY,sun:o.SUNDAY};return e.split(",").map(a=>s[a.trim().toLowerCase()]).filter(Boolean)}getCachedData(){try{const e=localStorage.getItem(n.LOCAL_STORAGE_KEY);return e?JSON.parse(e).scheduleDB:null}catch(e){return console.warn("Failed to parse cached course data:",e),null}}cacheData(e){try{const s={scheduleDB:e,timestamp:Date.now()};localStorage.setItem(n.LOCAL_STORAGE_KEY,JSON.stringify(s)),console.log("Course data cached successfully")}catch(s){console.warn("Failed to cache course data:",s)}}isCacheExpired(){try{const e=localStorage.getItem(n.LOCAL_STORAGE_KEY);if(!e)return!0;const s=JSON.parse(e),a=Date.now()-s.timestamp,t=n.CACHE_EXPIRY_HOURS*60*60*1e3;return a>t}catch{return!0}}getScheduleDB(){return this.scheduleDB}searchCourses(e,s){if(!this.scheduleDB)return[];const a=[];for(const r of this.scheduleDB.departments)s&&s.length>0&&!s.includes(r.abbreviation.toLowerCase())||a.push(...r.courses);if(!e.trim())return a;const t=e.toLowerCase();return a.filter(r=>r.name.toLowerCase().includes(t)||r.number.toLowerCase().includes(t)||r.id.toLowerCase().includes(t)||r.department.abbreviation.toLowerCase().includes(t))}getAllDepartments(){return this.scheduleDB?.departments||[]}};n.WPI_COURSE_DATA_URL="./course-data.json",n.LOCAL_STORAGE_KEY="wpi-course-data",n.CACHE_EXPIRY_HOURS=1;let h=n;class L{constructor(){this.courses=[],this.courseDataService=new h,this.init()}async init(){this.showLoadingState(),await this.loadCourseData(),this.displayCourseData()}async loadCourseData(){try{const e=await this.courseDataService.loadCourseData();for(const s of e.departments)this.courses.push(...s.courses);console.log(`Loaded ${this.courses.length} courses from ${e.departments.length} departments`)}catch(e){console.error("Failed to load course data:",e),this.showErrorMessage("Failed to load course data. Please try refreshing the page.")}}displayCourseData(){const e=document.getElementById("app");if(!e)return;let s=`
            <h1>WPI Course Data</h1>
            <p>Loaded ${this.courses.length} courses</p>
            <div class="course-stats">
                <h2>Departments:</h2>
                <ul>`;const a=new Map;this.courses.forEach(t=>{const r=t.department.abbreviation;a.set(r,(a.get(r)||0)+1)}),Array.from(a.entries()).sort(([t],[r])=>t.localeCompare(r)).forEach(([t,r])=>{s+=`<li>${t}: ${r} courses</li>`}),s+=`
                </ul>
            </div>
            <div class="sample-courses">
                <h2>Sample Courses:</h2>
                <ul>`,this.courses.slice(0,10).forEach(t=>{const r=t.minCredits===t.maxCredits?t.minCredits:`${t.minCredits}-${t.maxCredits}`;s+=`
                <li>
                    <strong>${t.department.abbreviation} ${t.number}</strong>: 
                    ${t.name} (${r} credits)
                    <br><small>${t.description}</small>
                </li>`}),s+=`
                </ul>
            </div>`,e.innerHTML=s}showLoadingState(){const e=document.getElementById("app");e&&(e.innerHTML='<div class="loading-message">Loading course data from WPI servers...</div>')}showErrorMessage(e){const s=document.getElementById("app");s&&(s.innerHTML=`<div class="error-message">${e}</div>`)}}new L;
//# sourceMappingURL=index-BkbunPRN.js.map
